
/Users/gashongore/Desktop/KumvaInsights/rain_rg15_serial/rg15_serial/target/3.3.1/boron/rg15_serial.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00004390  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b83b0  000b83b0  000083b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000b83d4  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001dc  2003e4b8  000b83d8  0001e4b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000015c  2003e694  2003e694  0002e694  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000b85b4  000b85b4  000285b4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000b85dc  000b85dc  000285dc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   000fd46c  00000000  00000000  000285e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000fddb  00000000  00000000  00125a4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    00036144  00000000  00000000  00135827  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002628  00000000  00000000  0016b96b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00009c70  00000000  00000000  0016df93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00032bf6  00000000  00000000  00177c03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00034e87  00000000  00000000  001aa7f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00131536  00000000  00000000  001df680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00007498  00000000  00000000  00310bb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f001 ff2e 	bl	b5e92 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f001 ff36 	bl	b5eae <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003e4b8 	.word	0x2003e4b8
   b404c:	000b83d8 	.word	0x000b83d8
   b4050:	2003e694 	.word	0x2003e694
   b4054:	2003e694 	.word	0x2003e694
   b4058:	2003e7ed 	.word	0x2003e7ed

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f001 f9b1 	bl	b53c8 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000b8384 	.word	0x000b8384
   b4080:	000b83a8 	.word	0x000b83a8

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f000 b824 	b.w	b40d0 <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f000 f84b 	bl	b4124 <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f001 b951 	b.w	b5338 <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f000 ba49 	b.w	b452c <malloc>

000b409a <_Znaj>:
   b409a:	f000 ba47 	b.w	b452c <malloc>

000b409e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409e:	f000 ba4d 	b.w	b453c <free>

000b40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40a2:	7800      	ldrb	r0, [r0, #0]
   b40a4:	fab0 f080 	clz	r0, r0
   b40a8:	0940      	lsrs	r0, r0, #5
   b40aa:	4770      	bx	lr

000b40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40ac:	2301      	movs	r3, #1
   b40ae:	7003      	strb	r3, [r0, #0]
   b40b0:	4770      	bx	lr
	...

000b40b4 <_ZN10CloudClass7publishEPKcS1_.isra.0>:

inline particle::Future<bool> CloudClass::publish(const char* name) {
    return publish(name, PUBLIC);
}

inline particle::Future<bool> CloudClass::publish(const char* name, const char* data) {
   b40b4:	b513      	push	{r0, r1, r4, lr}
   b40b6:	4b05      	ldr	r3, [pc, #20]	; (b40cc <_ZN10CloudClass7publishEPKcS1_.isra.0+0x18>)
   b40b8:	781b      	ldrb	r3, [r3, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b40ba:	f88d 3000 	strb.w	r3, [sp]
   b40be:	233c      	movs	r3, #60	; 0x3c
inline particle::Future<bool> CloudClass::publish(const char* name, const char* data) {
   b40c0:	4604      	mov	r4, r0
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b40c2:	f000 fc25 	bl	b4910 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    return publish(name, data, PUBLIC);
}
   b40c6:	4620      	mov	r0, r4
   b40c8:	b002      	add	sp, #8
   b40ca:	bd10      	pop	{r4, pc}
   b40cc:	2003e6a0 	.word	0x2003e6a0

000b40d0 <setup>:
float acc_f=0, eventAcc_f=0, totalAcc_f=0, rInt_f=0;



void setup()
{
   b40d0:	b508      	push	{r3, lr}
Serial1.begin(9600,SERIAL_8N1);
   b40d2:	f001 f9c7 	bl	b5464 <_Z22__fetch_global_Serial1v>
   b40d6:	2200      	movs	r2, #0
   b40d8:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b40dc:	f001 f882 	bl	b51e4 <_ZN11USARTSerial5beginEmm>
  
Serial1.write('c');
   b40e0:	f001 f9c0 	bl	b5464 <_Z22__fetch_global_Serial1v>
  bool breakRx(void);

  inline size_t write(unsigned long n) { return write((uint16_t)n); }
  inline size_t write(long n) { return write((uint16_t)n); }
  inline size_t write(unsigned int n) { return write((uint16_t)n); }
  inline size_t write(int n) { return write((uint16_t)n); }
   b40e4:	2163      	movs	r1, #99	; 0x63
   b40e6:	f001 f881 	bl	b51ec <_ZN11USARTSerial5writeEt>
Serial1.write('\n');
   b40ea:	f001 f9bb 	bl	b5464 <_Z22__fetch_global_Serial1v>

}
   b40ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b40f2:	210a      	movs	r1, #10
   b40f4:	f001 b87a 	b.w	b51ec <_ZN11USARTSerial5writeEt>

000b40f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   b40f8:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   b40fa:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   b40fc:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   b40fe:	b17c      	cbz	r4, b4120 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   b4100:	6863      	ldr	r3, [r4, #4]
   b4102:	3b01      	subs	r3, #1
   b4104:	6063      	str	r3, [r4, #4]
   b4106:	b95b      	cbnz	r3, b4120 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   b4108:	6823      	ldr	r3, [r4, #0]
   b410a:	4620      	mov	r0, r4
   b410c:	689b      	ldr	r3, [r3, #8]
   b410e:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b4110:	68a3      	ldr	r3, [r4, #8]
   b4112:	3b01      	subs	r3, #1
   b4114:	60a3      	str	r3, [r4, #8]
   b4116:	b91b      	cbnz	r3, b4120 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   b4118:	6823      	ldr	r3, [r4, #0]
   b411a:	4620      	mov	r0, r4
   b411c:	68db      	ldr	r3, [r3, #12]
   b411e:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   b4120:	4628      	mov	r0, r5
   b4122:	bd38      	pop	{r3, r4, r5, pc}

000b4124 <loop>:


void loop() {
   b4124:	b570      	push	{r4, r5, r6, lr}
   b4126:	b096      	sub	sp, #88	; 0x58
 

String response = Serial1.readStringUntil('\n');
   b4128:	f001 f99c 	bl	b5464 <_Z22__fetch_global_Serial1v>
   b412c:	220a      	movs	r2, #10
   b412e:	4601      	mov	r1, r0
   b4130:	a80e      	add	r0, sp, #56	; 0x38
   b4132:	f000 ff2f 	bl	b4f94 <_ZN6Stream15readStringUntilEc>

if (response.startsWith("Acc")) {
   b4136:	4933      	ldr	r1, [pc, #204]	; (b4204 <loop+0xe0>)
   b4138:	a812      	add	r0, sp, #72	; 0x48
   b413a:	f000 ff8e 	bl	b505a <_ZN6StringC1EPK19__FlashStringHelper>
   b413e:	a912      	add	r1, sp, #72	; 0x48
   b4140:	a80e      	add	r0, sp, #56	; 0x38
   b4142:	f000 ffd8 	bl	b50f6 <_ZNK6String10startsWithERKS_>
   b4146:	4604      	mov	r4, r0
   b4148:	a812      	add	r0, sp, #72	; 0x48
   b414a:	f000 ff3b 	bl	b4fc4 <_ZN6StringD1Ev>
   b414e:	2c00      	cmp	r4, #0
   b4150:	d04f      	beq.n	b41f2 <loop+0xce>
    char acc[7], eventAcc[7], totalAcc[7], rInt[7], unit[4];
    sscanf(response.c_str(),"%*s %s %[^,] , %*s %s %*s %*s %s %*s %*s %s", acc, unit, eventAcc, totalAcc, rInt);
   b4152:	ac0c      	add	r4, sp, #48	; 0x30
   b4154:	ad0a      	add	r5, sp, #40	; 0x28
   b4156:	ae08      	add	r6, sp, #32
   b4158:	aa06      	add	r2, sp, #24
   b415a:	ab05      	add	r3, sp, #20
   b415c:	492a      	ldr	r1, [pc, #168]	; (b4208 <loop+0xe4>)
   b415e:	980e      	ldr	r0, [sp, #56]	; 0x38
   b4160:	9402      	str	r4, [sp, #8]
   b4162:	9501      	str	r5, [sp, #4]
   b4164:	9600      	str	r6, [sp, #0]
   b4166:	f000 f9f9 	bl	b455c <sscanf>


acc_f=atof(acc);
   b416a:	a806      	add	r0, sp, #24
   b416c:	f001 fe8e 	bl	b5e8c <atof>
   b4170:	ec51 0b10 	vmov	r0, r1, d0
   b4174:	f001 fe16 	bl	b5da4 <__aeabi_d2f>
   b4178:	4b24      	ldr	r3, [pc, #144]	; (b420c <loop+0xe8>)
   b417a:	6018      	str	r0, [r3, #0]
eventAcc_f=atof(eventAcc);
   b417c:	4630      	mov	r0, r6
   b417e:	f001 fe85 	bl	b5e8c <atof>
   b4182:	ec51 0b10 	vmov	r0, r1, d0
   b4186:	f001 fe0d 	bl	b5da4 <__aeabi_d2f>
   b418a:	4b21      	ldr	r3, [pc, #132]	; (b4210 <loop+0xec>)
   b418c:	6018      	str	r0, [r3, #0]
totalAcc_f=atof(totalAcc);
   b418e:	4628      	mov	r0, r5
   b4190:	f001 fe7c 	bl	b5e8c <atof>
   b4194:	ec51 0b10 	vmov	r0, r1, d0
   b4198:	f001 fe04 	bl	b5da4 <__aeabi_d2f>
   b419c:	4b1d      	ldr	r3, [pc, #116]	; (b4214 <loop+0xf0>)
   b419e:	6018      	str	r0, [r3, #0]
rInt_f=atof(rInt);
   b41a0:	4620      	mov	r0, r4
   b41a2:	f001 fe73 	bl	b5e8c <atof>
   b41a6:	ec51 0b10 	vmov	r0, r1, d0
   b41aa:	f001 fdfb 	bl	b5da4 <__aeabi_d2f>
   b41ae:	4b1a      	ldr	r3, [pc, #104]	; (b4218 <loop+0xf4>)


Particle.publish("Accumulated Rain",acc);
   b41b0:	491a      	ldr	r1, [pc, #104]	; (b421c <loop+0xf8>)
rInt_f=atof(rInt);
   b41b2:	6018      	str	r0, [r3, #0]
Particle.publish("Accumulated Rain",acc);
   b41b4:	aa06      	add	r2, sp, #24
   b41b6:	a812      	add	r0, sp, #72	; 0x48
   b41b8:	f7ff ff7c 	bl	b40b4 <_ZN10CloudClass7publishEPKcS1_.isra.0>
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   b41bc:	a813      	add	r0, sp, #76	; 0x4c
   b41be:	f7ff ff9b 	bl	b40f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
Particle.publish("Amount of rain for this event",eventAcc);
   b41c2:	4917      	ldr	r1, [pc, #92]	; (b4220 <loop+0xfc>)
   b41c4:	4632      	mov	r2, r6
   b41c6:	a812      	add	r0, sp, #72	; 0x48
   b41c8:	f7ff ff74 	bl	b40b4 <_ZN10CloudClass7publishEPKcS1_.isra.0>
   b41cc:	a813      	add	r0, sp, #76	; 0x4c
   b41ce:	f7ff ff93 	bl	b40f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
Particle.publish("Total amount of rain",totalAcc);
   b41d2:	4914      	ldr	r1, [pc, #80]	; (b4224 <loop+0x100>)
   b41d4:	462a      	mov	r2, r5
   b41d6:	a812      	add	r0, sp, #72	; 0x48
   b41d8:	f7ff ff6c 	bl	b40b4 <_ZN10CloudClass7publishEPKcS1_.isra.0>
   b41dc:	a813      	add	r0, sp, #76	; 0x4c
   b41de:	f7ff ff8b 	bl	b40f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
Particle.publish("Current rain intensity",rInt);
   b41e2:	a812      	add	r0, sp, #72	; 0x48
   b41e4:	4910      	ldr	r1, [pc, #64]	; (b4228 <loop+0x104>)
   b41e6:	4622      	mov	r2, r4
   b41e8:	f7ff ff64 	bl	b40b4 <_ZN10CloudClass7publishEPKcS1_.isra.0>
   b41ec:	a813      	add	r0, sp, #76	; 0x4c
   b41ee:	f7ff ff83 	bl	b40f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

}

  delay(3000);
   b41f2:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b41f6:	f000 f9d9 	bl	b45ac <delay>
String response = Serial1.readStringUntil('\n');
   b41fa:	a80e      	add	r0, sp, #56	; 0x38
   b41fc:	f000 fee2 	bl	b4fc4 <_ZN6StringD1Ev>
}
   b4200:	b016      	add	sp, #88	; 0x58
   b4202:	bd70      	pop	{r4, r5, r6, pc}
   b4204:	000b7de0 	.word	0x000b7de0
   b4208:	000b7de4 	.word	0x000b7de4
   b420c:	2003e6a4 	.word	0x2003e6a4
   b4210:	2003e6a8 	.word	0x2003e6a8
   b4214:	2003e6b0 	.word	0x2003e6b0
   b4218:	2003e6ac 	.word	0x2003e6ac
   b421c:	000b7e10 	.word	0x000b7e10
   b4220:	000b7e21 	.word	0x000b7e21
   b4224:	000b7e3f 	.word	0x000b7e3f
   b4228:	000b7e54 	.word	0x000b7e54

000b422c <_GLOBAL__sub_I_SystemMode>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b422c:	4b0a      	ldr	r3, [pc, #40]	; (b4258 <_GLOBAL__sub_I_SystemMode+0x2c>)
    ctrl_request_type type_;
    SystemControlRequestAclAction action_;
};

struct SleepResult {
    SleepResult() {}
   b422e:	4a0b      	ldr	r2, [pc, #44]	; (b425c <_GLOBAL__sub_I_SystemMode+0x30>)
   b4230:	b510      	push	{r4, lr}
   b4232:	2400      	movs	r4, #0
   b4234:	701c      	strb	r4, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b4236:	4b0a      	ldr	r3, [pc, #40]	; (b4260 <_GLOBAL__sub_I_SystemMode+0x34>)

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b4238:	2002      	movs	r0, #2
              error_(SYSTEM_ERROR_NONE) {
   b423a:	e9c3 4400 	strd	r4, r4, [r3]
    SleepResult() {}
   b423e:	609a      	str	r2, [r3, #8]
        set_system_mode(mode);
   b4240:	f000 f8c0 	bl	b43c4 <set_system_mode>
SYSTEM_THREAD(ENABLED);                                                                     // Means my code will not be held up by Particle processes.
   b4244:	4621      	mov	r1, r4
   b4246:	2001      	movs	r0, #1
   b4248:	f000 f8cc 	bl	b43e4 <system_thread_set_state>
}
   b424c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        }
        return HAL_Feature_Get(feature);
    }

    inline int enableFeature(HAL_Feature feature) {
        return HAL_Feature_Set(feature, true);
   b4250:	2101      	movs	r1, #1
   b4252:	2004      	movs	r0, #4
   b4254:	f000 b80e 	b.w	b4274 <HAL_Feature_Set>
   b4258:	2003e6a0 	.word	0x2003e6a0
   b425c:	ffff0000 	.word	0xffff0000
   b4260:	2003e694 	.word	0x2003e694

000b4264 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b4264:	b508      	push	{r3, lr}
   b4266:	4b02      	ldr	r3, [pc, #8]	; (b4270 <os_mutex_recursive_create+0xc>)
   b4268:	681b      	ldr	r3, [r3, #0]
   b426a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b426c:	9301      	str	r3, [sp, #4]
   b426e:	bd08      	pop	{r3, pc}
   b4270:	00030248 	.word	0x00030248

000b4274 <HAL_Feature_Set>:
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
   b4274:	b508      	push	{r3, lr}
   b4276:	4b02      	ldr	r3, [pc, #8]	; (b4280 <HAL_Feature_Set+0xc>)
   b4278:	681b      	ldr	r3, [r3, #0]
   b427a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   b427c:	9301      	str	r3, [sp, #4]
   b427e:	bd08      	pop	{r3, pc}
   b4280:	00030234 	.word	0x00030234

000b4284 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b4284:	b508      	push	{r3, lr}
   b4286:	4b02      	ldr	r3, [pc, #8]	; (b4290 <HAL_RNG_GetRandomNumber+0xc>)
   b4288:	681b      	ldr	r3, [r3, #0]
   b428a:	685b      	ldr	r3, [r3, #4]
   b428c:	9301      	str	r3, [sp, #4]
   b428e:	bd08      	pop	{r3, pc}
   b4290:	00030218 	.word	0x00030218

000b4294 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b4294:	b508      	push	{r3, lr}
   b4296:	4b02      	ldr	r3, [pc, #8]	; (b42a0 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b4298:	681b      	ldr	r3, [r3, #0]
   b429a:	695b      	ldr	r3, [r3, #20]
   b429c:	9301      	str	r3, [sp, #4]
   b429e:	bd08      	pop	{r3, pc}
   b42a0:	00030218 	.word	0x00030218

000b42a4 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b42a4:	b508      	push	{r3, lr}
   b42a6:	4b02      	ldr	r3, [pc, #8]	; (b42b0 <inet_inet_ntop+0xc>)
   b42a8:	681b      	ldr	r3, [r3, #0]
   b42aa:	695b      	ldr	r3, [r3, #20]
   b42ac:	9301      	str	r3, [sp, #4]
   b42ae:	bd08      	pop	{r3, pc}
   b42b0:	00030264 	.word	0x00030264

000b42b4 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b42b4:	b508      	push	{r3, lr}
   b42b6:	4b02      	ldr	r3, [pc, #8]	; (b42c0 <netdb_freeaddrinfo+0xc>)
   b42b8:	681b      	ldr	r3, [r3, #0]
   b42ba:	689b      	ldr	r3, [r3, #8]
   b42bc:	9301      	str	r3, [sp, #4]
   b42be:	bd08      	pop	{r3, pc}
   b42c0:	00030268 	.word	0x00030268

000b42c4 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b42c4:	b508      	push	{r3, lr}
   b42c6:	4b02      	ldr	r3, [pc, #8]	; (b42d0 <netdb_getaddrinfo+0xc>)
   b42c8:	681b      	ldr	r3, [r3, #0]
   b42ca:	68db      	ldr	r3, [r3, #12]
   b42cc:	9301      	str	r3, [sp, #4]
   b42ce:	bd08      	pop	{r3, pc}
   b42d0:	00030268 	.word	0x00030268

000b42d4 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b42d4:	b508      	push	{r3, lr}
   b42d6:	4b02      	ldr	r3, [pc, #8]	; (b42e0 <hal_usart_write+0xc>)
   b42d8:	681b      	ldr	r3, [r3, #0]
   b42da:	68db      	ldr	r3, [r3, #12]
   b42dc:	9301      	str	r3, [sp, #4]
   b42de:	bd08      	pop	{r3, pc}
   b42e0:	0003023c 	.word	0x0003023c

000b42e4 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b42e4:	b508      	push	{r3, lr}
   b42e6:	4b02      	ldr	r3, [pc, #8]	; (b42f0 <hal_usart_available+0xc>)
   b42e8:	681b      	ldr	r3, [r3, #0]
   b42ea:	691b      	ldr	r3, [r3, #16]
   b42ec:	9301      	str	r3, [sp, #4]
   b42ee:	bd08      	pop	{r3, pc}
   b42f0:	0003023c 	.word	0x0003023c

000b42f4 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b42f4:	b508      	push	{r3, lr}
   b42f6:	4b02      	ldr	r3, [pc, #8]	; (b4300 <hal_usart_read+0xc>)
   b42f8:	681b      	ldr	r3, [r3, #0]
   b42fa:	695b      	ldr	r3, [r3, #20]
   b42fc:	9301      	str	r3, [sp, #4]
   b42fe:	bd08      	pop	{r3, pc}
   b4300:	0003023c 	.word	0x0003023c

000b4304 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b4304:	b508      	push	{r3, lr}
   b4306:	4b02      	ldr	r3, [pc, #8]	; (b4310 <hal_usart_peek+0xc>)
   b4308:	681b      	ldr	r3, [r3, #0]
   b430a:	699b      	ldr	r3, [r3, #24]
   b430c:	9301      	str	r3, [sp, #4]
   b430e:	bd08      	pop	{r3, pc}
   b4310:	0003023c 	.word	0x0003023c

000b4314 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b4314:	b508      	push	{r3, lr}
   b4316:	4b02      	ldr	r3, [pc, #8]	; (b4320 <hal_usart_flush+0xc>)
   b4318:	681b      	ldr	r3, [r3, #0]
   b431a:	69db      	ldr	r3, [r3, #28]
   b431c:	9301      	str	r3, [sp, #4]
   b431e:	bd08      	pop	{r3, pc}
   b4320:	0003023c 	.word	0x0003023c

000b4324 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b4324:	b508      	push	{r3, lr}
   b4326:	4b02      	ldr	r3, [pc, #8]	; (b4330 <hal_usart_available_data_for_write+0xc>)
   b4328:	681b      	ldr	r3, [r3, #0]
   b432a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b432c:	9301      	str	r3, [sp, #4]
   b432e:	bd08      	pop	{r3, pc}
   b4330:	0003023c 	.word	0x0003023c

000b4334 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   b4334:	b508      	push	{r3, lr}
   b4336:	4b02      	ldr	r3, [pc, #8]	; (b4340 <hal_usart_begin_config+0xc>)
   b4338:	681b      	ldr	r3, [r3, #0]
   b433a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b433c:	9301      	str	r3, [sp, #4]
   b433e:	bd08      	pop	{r3, pc}
   b4340:	0003023c 	.word	0x0003023c

000b4344 <hal_usart_write_nine_bits>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
   b4344:	b508      	push	{r3, lr}
   b4346:	4b02      	ldr	r3, [pc, #8]	; (b4350 <hal_usart_write_nine_bits+0xc>)
   b4348:	681b      	ldr	r3, [r3, #0]
   b434a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b434c:	9301      	str	r3, [sp, #4]
   b434e:	bd08      	pop	{r3, pc}
   b4350:	0003023c 	.word	0x0003023c

000b4354 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b4354:	b508      	push	{r3, lr}
   b4356:	4b02      	ldr	r3, [pc, #8]	; (b4360 <hal_usart_init_ex+0xc>)
   b4358:	681b      	ldr	r3, [r3, #0]
   b435a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b435c:	9301      	str	r3, [sp, #4]
   b435e:	bd08      	pop	{r3, pc}
   b4360:	0003023c 	.word	0x0003023c

000b4364 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b4364:	b508      	push	{r3, lr}
   b4366:	4b02      	ldr	r3, [pc, #8]	; (b4370 <HAL_USB_USART_Init+0xc>)
   b4368:	681b      	ldr	r3, [r3, #0]
   b436a:	681b      	ldr	r3, [r3, #0]
   b436c:	9301      	str	r3, [sp, #4]
   b436e:	bd08      	pop	{r3, pc}
   b4370:	0003024c 	.word	0x0003024c

000b4374 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b4374:	b508      	push	{r3, lr}
   b4376:	4b02      	ldr	r3, [pc, #8]	; (b4380 <HAL_USB_USART_Available_Data+0xc>)
   b4378:	681b      	ldr	r3, [r3, #0]
   b437a:	691b      	ldr	r3, [r3, #16]
   b437c:	9301      	str	r3, [sp, #4]
   b437e:	bd08      	pop	{r3, pc}
   b4380:	0003024c 	.word	0x0003024c

000b4384 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b4384:	b508      	push	{r3, lr}
   b4386:	4b02      	ldr	r3, [pc, #8]	; (b4390 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b4388:	681b      	ldr	r3, [r3, #0]
   b438a:	695b      	ldr	r3, [r3, #20]
   b438c:	9301      	str	r3, [sp, #4]
   b438e:	bd08      	pop	{r3, pc}
   b4390:	0003024c 	.word	0x0003024c

000b4394 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4394:	b508      	push	{r3, lr}
   b4396:	4b02      	ldr	r3, [pc, #8]	; (b43a0 <HAL_USB_USART_Receive_Data+0xc>)
   b4398:	681b      	ldr	r3, [r3, #0]
   b439a:	699b      	ldr	r3, [r3, #24]
   b439c:	9301      	str	r3, [sp, #4]
   b439e:	bd08      	pop	{r3, pc}
   b43a0:	0003024c 	.word	0x0003024c

000b43a4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b43a4:	b508      	push	{r3, lr}
   b43a6:	4b02      	ldr	r3, [pc, #8]	; (b43b0 <HAL_USB_USART_Send_Data+0xc>)
   b43a8:	681b      	ldr	r3, [r3, #0]
   b43aa:	69db      	ldr	r3, [r3, #28]
   b43ac:	9301      	str	r3, [sp, #4]
   b43ae:	bd08      	pop	{r3, pc}
   b43b0:	0003024c 	.word	0x0003024c

000b43b4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b43b4:	b508      	push	{r3, lr}
   b43b6:	4b02      	ldr	r3, [pc, #8]	; (b43c0 <HAL_USB_USART_Flush_Data+0xc>)
   b43b8:	681b      	ldr	r3, [r3, #0]
   b43ba:	6a1b      	ldr	r3, [r3, #32]
   b43bc:	9301      	str	r3, [sp, #4]
   b43be:	bd08      	pop	{r3, pc}
   b43c0:	0003024c 	.word	0x0003024c

000b43c4 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b43c4:	b508      	push	{r3, lr}
   b43c6:	4b02      	ldr	r3, [pc, #8]	; (b43d0 <set_system_mode+0xc>)
   b43c8:	681b      	ldr	r3, [r3, #0]
   b43ca:	685b      	ldr	r3, [r3, #4]
   b43cc:	9301      	str	r3, [sp, #4]
   b43ce:	bd08      	pop	{r3, pc}
   b43d0:	00030220 	.word	0x00030220

000b43d4 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b43d4:	b508      	push	{r3, lr}
   b43d6:	4b02      	ldr	r3, [pc, #8]	; (b43e0 <system_delay_ms+0xc>)
   b43d8:	681b      	ldr	r3, [r3, #0]
   b43da:	695b      	ldr	r3, [r3, #20]
   b43dc:	9301      	str	r3, [sp, #4]
   b43de:	bd08      	pop	{r3, pc}
   b43e0:	00030220 	.word	0x00030220

000b43e4 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b43e4:	b508      	push	{r3, lr}
   b43e6:	4b02      	ldr	r3, [pc, #8]	; (b43f0 <system_thread_set_state+0xc>)
   b43e8:	681b      	ldr	r3, [r3, #0]
   b43ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b43ec:	9301      	str	r3, [sp, #4]
   b43ee:	bd08      	pop	{r3, pc}
   b43f0:	00030220 	.word	0x00030220

000b43f4 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   b43f4:	b508      	push	{r3, lr}
   b43f6:	4b02      	ldr	r3, [pc, #8]	; (b4400 <application_thread_current+0xc>)
   b43f8:	681b      	ldr	r3, [r3, #0]
   b43fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b43fc:	9301      	str	r3, [sp, #4]
   b43fe:	bd08      	pop	{r3, pc}
   b4400:	00030220 	.word	0x00030220

000b4404 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   b4404:	b508      	push	{r3, lr}
   b4406:	4b02      	ldr	r3, [pc, #8]	; (b4410 <application_thread_invoke+0xc>)
   b4408:	681b      	ldr	r3, [r3, #0]
   b440a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b440c:	9301      	str	r3, [sp, #4]
   b440e:	bd08      	pop	{r3, pc}
   b4410:	00030220 	.word	0x00030220

000b4414 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b4414:	b508      	push	{r3, lr}
   b4416:	4b03      	ldr	r3, [pc, #12]	; (b4424 <system_ctrl_set_app_request_handler+0x10>)
   b4418:	681b      	ldr	r3, [r3, #0]
   b441a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b441e:	9301      	str	r3, [sp, #4]
   b4420:	bd08      	pop	{r3, pc}
   b4422:	0000      	.short	0x0000
   b4424:	00030220 	.word	0x00030220

000b4428 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b4428:	b508      	push	{r3, lr}
   b442a:	4b03      	ldr	r3, [pc, #12]	; (b4438 <system_ctrl_set_result+0x10>)
   b442c:	681b      	ldr	r3, [r3, #0]
   b442e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b4432:	9301      	str	r3, [sp, #4]
   b4434:	bd08      	pop	{r3, pc}
   b4436:	0000      	.short	0x0000
   b4438:	00030220 	.word	0x00030220

000b443c <spark_cloud_flag_connected>:
DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b443c:	b508      	push	{r3, lr}
   b443e:	4b02      	ldr	r3, [pc, #8]	; (b4448 <spark_cloud_flag_connected+0xc>)
   b4440:	681b      	ldr	r3, [r3, #0]
   b4442:	695b      	ldr	r3, [r3, #20]
   b4444:	9301      	str	r3, [sp, #4]
   b4446:	bd08      	pop	{r3, pc}
   b4448:	00030244 	.word	0x00030244

000b444c <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   b444c:	b508      	push	{r3, lr}
   b444e:	4b02      	ldr	r3, [pc, #8]	; (b4458 <spark_send_event+0xc>)
   b4450:	681b      	ldr	r3, [r3, #0]
   b4452:	6a1b      	ldr	r3, [r3, #32]
   b4454:	9301      	str	r3, [sp, #4]
   b4456:	bd08      	pop	{r3, pc}
   b4458:	00030244 	.word	0x00030244

000b445c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b445c:	b508      	push	{r3, lr}
   b445e:	4b02      	ldr	r3, [pc, #8]	; (b4468 <spark_set_random_seed_from_cloud_handler+0xc>)
   b4460:	681b      	ldr	r3, [r3, #0]
   b4462:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b4464:	9301      	str	r3, [sp, #4]
   b4466:	bd08      	pop	{r3, pc}
   b4468:	00030244 	.word	0x00030244

000b446c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b446c:	b508      	push	{r3, lr}
   b446e:	4b02      	ldr	r3, [pc, #8]	; (b4478 <network_connect+0xc>)
   b4470:	681b      	ldr	r3, [r3, #0]
   b4472:	685b      	ldr	r3, [r3, #4]
   b4474:	9301      	str	r3, [sp, #4]
   b4476:	bd08      	pop	{r3, pc}
   b4478:	00030240 	.word	0x00030240

000b447c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b447c:	b508      	push	{r3, lr}
   b447e:	4b02      	ldr	r3, [pc, #8]	; (b4488 <network_connecting+0xc>)
   b4480:	681b      	ldr	r3, [r3, #0]
   b4482:	689b      	ldr	r3, [r3, #8]
   b4484:	9301      	str	r3, [sp, #4]
   b4486:	bd08      	pop	{r3, pc}
   b4488:	00030240 	.word	0x00030240

000b448c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b448c:	b508      	push	{r3, lr}
   b448e:	4b02      	ldr	r3, [pc, #8]	; (b4498 <network_disconnect+0xc>)
   b4490:	681b      	ldr	r3, [r3, #0]
   b4492:	68db      	ldr	r3, [r3, #12]
   b4494:	9301      	str	r3, [sp, #4]
   b4496:	bd08      	pop	{r3, pc}
   b4498:	00030240 	.word	0x00030240

000b449c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b449c:	b508      	push	{r3, lr}
   b449e:	4b02      	ldr	r3, [pc, #8]	; (b44a8 <network_ready+0xc>)
   b44a0:	681b      	ldr	r3, [r3, #0]
   b44a2:	691b      	ldr	r3, [r3, #16]
   b44a4:	9301      	str	r3, [sp, #4]
   b44a6:	bd08      	pop	{r3, pc}
   b44a8:	00030240 	.word	0x00030240

000b44ac <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b44ac:	b508      	push	{r3, lr}
   b44ae:	4b02      	ldr	r3, [pc, #8]	; (b44b8 <network_on+0xc>)
   b44b0:	681b      	ldr	r3, [r3, #0]
   b44b2:	695b      	ldr	r3, [r3, #20]
   b44b4:	9301      	str	r3, [sp, #4]
   b44b6:	bd08      	pop	{r3, pc}
   b44b8:	00030240 	.word	0x00030240

000b44bc <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b44bc:	b508      	push	{r3, lr}
   b44be:	4b02      	ldr	r3, [pc, #8]	; (b44c8 <network_off+0xc>)
   b44c0:	681b      	ldr	r3, [r3, #0]
   b44c2:	699b      	ldr	r3, [r3, #24]
   b44c4:	9301      	str	r3, [sp, #4]
   b44c6:	bd08      	pop	{r3, pc}
   b44c8:	00030240 	.word	0x00030240

000b44cc <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b44cc:	b508      	push	{r3, lr}
   b44ce:	4b02      	ldr	r3, [pc, #8]	; (b44d8 <network_listen+0xc>)
   b44d0:	681b      	ldr	r3, [r3, #0]
   b44d2:	69db      	ldr	r3, [r3, #28]
   b44d4:	9301      	str	r3, [sp, #4]
   b44d6:	bd08      	pop	{r3, pc}
   b44d8:	00030240 	.word	0x00030240

000b44dc <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b44dc:	b508      	push	{r3, lr}
   b44de:	4b02      	ldr	r3, [pc, #8]	; (b44e8 <network_listening+0xc>)
   b44e0:	681b      	ldr	r3, [r3, #0]
   b44e2:	6a1b      	ldr	r3, [r3, #32]
   b44e4:	9301      	str	r3, [sp, #4]
   b44e6:	bd08      	pop	{r3, pc}
   b44e8:	00030240 	.word	0x00030240

000b44ec <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b44ec:	b508      	push	{r3, lr}
   b44ee:	4b02      	ldr	r3, [pc, #8]	; (b44f8 <network_set_listen_timeout+0xc>)
   b44f0:	681b      	ldr	r3, [r3, #0]
   b44f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b44f4:	9301      	str	r3, [sp, #4]
   b44f6:	bd08      	pop	{r3, pc}
   b44f8:	00030240 	.word	0x00030240

000b44fc <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b44fc:	b508      	push	{r3, lr}
   b44fe:	4b02      	ldr	r3, [pc, #8]	; (b4508 <network_get_listen_timeout+0xc>)
   b4500:	681b      	ldr	r3, [r3, #0]
   b4502:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4504:	9301      	str	r3, [sp, #4]
   b4506:	bd08      	pop	{r3, pc}
   b4508:	00030240 	.word	0x00030240

000b450c <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b450c:	b508      	push	{r3, lr}
   b450e:	4b02      	ldr	r3, [pc, #8]	; (b4518 <network_is_on+0xc>)
   b4510:	681b      	ldr	r3, [r3, #0]
   b4512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4514:	9301      	str	r3, [sp, #4]
   b4516:	bd08      	pop	{r3, pc}
   b4518:	00030240 	.word	0x00030240

000b451c <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b451c:	b508      	push	{r3, lr}
   b451e:	4b02      	ldr	r3, [pc, #8]	; (b4528 <network_is_off+0xc>)
   b4520:	681b      	ldr	r3, [r3, #0]
   b4522:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4524:	9301      	str	r3, [sp, #4]
   b4526:	bd08      	pop	{r3, pc}
   b4528:	00030240 	.word	0x00030240

000b452c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b452c:	b508      	push	{r3, lr}
   b452e:	4b02      	ldr	r3, [pc, #8]	; (b4538 <malloc+0xc>)
   b4530:	681b      	ldr	r3, [r3, #0]
   b4532:	681b      	ldr	r3, [r3, #0]
   b4534:	9301      	str	r3, [sp, #4]
   b4536:	bd08      	pop	{r3, pc}
   b4538:	0003021c 	.word	0x0003021c

000b453c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b453c:	b508      	push	{r3, lr}
   b453e:	4b02      	ldr	r3, [pc, #8]	; (b4548 <free+0xc>)
   b4540:	681b      	ldr	r3, [r3, #0]
   b4542:	685b      	ldr	r3, [r3, #4]
   b4544:	9301      	str	r3, [sp, #4]
   b4546:	bd08      	pop	{r3, pc}
   b4548:	0003021c 	.word	0x0003021c

000b454c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b454c:	b508      	push	{r3, lr}
   b454e:	4b02      	ldr	r3, [pc, #8]	; (b4558 <realloc+0xc>)
   b4550:	681b      	ldr	r3, [r3, #0]
   b4552:	689b      	ldr	r3, [r3, #8]
   b4554:	9301      	str	r3, [sp, #4]
   b4556:	bd08      	pop	{r3, pc}
   b4558:	0003021c 	.word	0x0003021c

000b455c <sscanf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
   b455c:	b508      	push	{r3, lr}
   b455e:	4b02      	ldr	r3, [pc, #8]	; (b4568 <sscanf+0xc>)
   b4560:	681b      	ldr	r3, [r3, #0]
   b4562:	695b      	ldr	r3, [r3, #20]
   b4564:	9301      	str	r3, [sp, #4]
   b4566:	bd08      	pop	{r3, pc}
   b4568:	0003021c 	.word	0x0003021c

000b456c <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b456c:	b508      	push	{r3, lr}
   b456e:	4b02      	ldr	r3, [pc, #8]	; (b4578 <abort+0xc>)
   b4570:	681b      	ldr	r3, [r3, #0]
   b4572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4574:	9301      	str	r3, [sp, #4]
   b4576:	bd08      	pop	{r3, pc}
   b4578:	0003021c 	.word	0x0003021c

000b457c <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b457c:	b508      	push	{r3, lr}
   b457e:	4b02      	ldr	r3, [pc, #8]	; (b4588 <_malloc_r+0xc>)
   b4580:	681b      	ldr	r3, [r3, #0]
   b4582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4584:	9301      	str	r3, [sp, #4]
   b4586:	bd08      	pop	{r3, pc}
   b4588:	0003021c 	.word	0x0003021c

000b458c <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b458c:	b508      	push	{r3, lr}
   b458e:	4b02      	ldr	r3, [pc, #8]	; (b4598 <__assert_func+0xc>)
   b4590:	681b      	ldr	r3, [r3, #0]
   b4592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4594:	9301      	str	r3, [sp, #4]
   b4596:	bd08      	pop	{r3, pc}
   b4598:	0003021c 	.word	0x0003021c

000b459c <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b459c:	b508      	push	{r3, lr}
   b459e:	4b02      	ldr	r3, [pc, #8]	; (b45a8 <newlib_impure_ptr_callback+0xc>)
   b45a0:	681b      	ldr	r3, [r3, #0]
   b45a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b45a4:	9301      	str	r3, [sp, #4]
   b45a6:	bd08      	pop	{r3, pc}
   b45a8:	0003021c 	.word	0x0003021c

000b45ac <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b45ac:	2100      	movs	r1, #0
   b45ae:	f7ff bf11 	b.w	b43d4 <system_delay_ms>

000b45b2 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   b45b2:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   b45b4:	6883      	ldr	r3, [r0, #8]
   b45b6:	4604      	mov	r4, r0
   b45b8:	b90b      	cbnz	r3, b45be <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   b45ba:	f000 ff79 	bl	b54b0 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b45be:	68c3      	ldr	r3, [r0, #12]
   b45c0:	4798      	blx	r3
      if (_M_manager)
   b45c2:	68a3      	ldr	r3, [r4, #8]
   b45c4:	b11b      	cbz	r3, b45ce <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b45c6:	2203      	movs	r2, #3
   b45c8:	4621      	mov	r1, r4
   b45ca:	4620      	mov	r0, r4
   b45cc:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   b45ce:	4620      	mov	r0, r4
   b45d0:	2110      	movs	r1, #16
}
   b45d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   b45d6:	f7ff bd62 	b.w	b409e <_ZdlPvj>

000b45da <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b45da:	b510      	push	{r4, lr}
      if (_M_manager)
   b45dc:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b45de:	4604      	mov	r4, r0
      if (_M_manager)
   b45e0:	b113      	cbz	r3, b45e8 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b45e2:	2203      	movs	r2, #3
   b45e4:	4601      	mov	r1, r0
   b45e6:	4798      	blx	r3
    }
   b45e8:	4620      	mov	r0, r4
   b45ea:	bd10      	pop	{r4, pc}

000b45ec <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
   b45ec:	b513      	push	{r0, r1, r4, lr}
   b45ee:	460b      	mov	r3, r1
   b45f0:	4602      	mov	r2, r0
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b45f2:	e9d0 0100 	ldrd	r0, r1, [r0]
   b45f6:	466c      	mov	r4, sp
   b45f8:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b45fc:	e893 0003 	ldmia.w	r3, {r0, r1}
   b4600:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b4604:	e894 0003 	ldmia.w	r4, {r0, r1}
   b4608:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b460c:	b002      	add	sp, #8
   b460e:	bd10      	pop	{r4, pc}

000b4610 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b4610:	4802      	ldr	r0, [pc, #8]	; (b461c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b4612:	2300      	movs	r3, #0
   b4614:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b4616:	f7ff be25 	b.w	b4264 <os_mutex_recursive_create>
   b461a:	bf00      	nop
   b461c:	2003e6b4 	.word	0x2003e6b4

000b4620 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   b4620:	2200      	movs	r2, #0
   b4622:	6840      	ldr	r0, [r0, #4]
   b4624:	4611      	mov	r1, r2
   b4626:	f7ff bf39 	b.w	b449c <network_ready>

000b462a <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   b462a:	2200      	movs	r2, #0
   b462c:	6840      	ldr	r0, [r0, #4]
   b462e:	4611      	mov	r1, r2
   b4630:	f7ff bf54 	b.w	b44dc <network_listening>

000b4634 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b4634:	2200      	movs	r2, #0
   b4636:	6840      	ldr	r0, [r0, #4]
   b4638:	4611      	mov	r1, r2
   b463a:	f7ff bf5f 	b.w	b44fc <network_get_listen_timeout>

000b463e <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b463e:	6840      	ldr	r0, [r0, #4]
   b4640:	2200      	movs	r2, #0
   b4642:	f7ff bf53 	b.w	b44ec <network_set_listen_timeout>

000b4646 <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b4646:	6840      	ldr	r0, [r0, #4]
   b4648:	2200      	movs	r2, #0
   b464a:	f081 0101 	eor.w	r1, r1, #1
   b464e:	f7ff bf3d 	b.w	b44cc <network_listen>

000b4652 <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b4652:	2300      	movs	r3, #0
   b4654:	6840      	ldr	r0, [r0, #4]
   b4656:	461a      	mov	r2, r3
   b4658:	4619      	mov	r1, r3
   b465a:	f7ff bf2f 	b.w	b44bc <network_off>

000b465e <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b465e:	2300      	movs	r3, #0
   b4660:	6840      	ldr	r0, [r0, #4]
   b4662:	461a      	mov	r2, r3
   b4664:	4619      	mov	r1, r3
   b4666:	f7ff bf21 	b.w	b44ac <network_on>

000b466a <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b466a:	2200      	movs	r2, #0
   b466c:	6840      	ldr	r0, [r0, #4]
   b466e:	4611      	mov	r1, r2
   b4670:	f7ff bf04 	b.w	b447c <network_connecting>

000b4674 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b4674:	6840      	ldr	r0, [r0, #4]
   b4676:	2200      	movs	r2, #0
   b4678:	2102      	movs	r1, #2
   b467a:	f7ff bf07 	b.w	b448c <network_disconnect>

000b467e <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b467e:	2300      	movs	r3, #0
   b4680:	6840      	ldr	r0, [r0, #4]
   b4682:	461a      	mov	r2, r3
   b4684:	f7ff bef2 	b.w	b446c <network_connect>

000b4688 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   b4688:	4b08      	ldr	r3, [pc, #32]	; (b46ac <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   b468a:	b510      	push	{r4, lr}
   b468c:	2428      	movs	r4, #40	; 0x28
   b468e:	4622      	mov	r2, r4
   b4690:	4618      	mov	r0, r3
   b4692:	2100      	movs	r1, #0
   b4694:	f001 fc0b 	bl	b5eae <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b4698:	4b05      	ldr	r3, [pc, #20]	; (b46b0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   b469a:	8004      	strh	r4, [r0, #0]
        cid = -1;
   b469c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b46a0:	6042      	str	r2, [r0, #4]
   b46a2:	2204      	movs	r2, #4
   b46a4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   b46a6:	4a03      	ldr	r2, [pc, #12]	; (b46b4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   b46a8:	601a      	str	r2, [r3, #0]
   b46aa:	bd10      	pop	{r4, pc}
   b46ac:	2003e6c0 	.word	0x2003e6c0
   b46b0:	2003e6b8 	.word	0x2003e6b8
   b46b4:	000b7e74 	.word	0x000b7e74

000b46b8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b46b8:	4770      	bx	lr

000b46ba <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   b46ba:	2000      	movs	r0, #0
   b46bc:	4770      	bx	lr

000b46be <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b46be:	b510      	push	{r4, lr}
   b46c0:	2110      	movs	r1, #16
   b46c2:	4604      	mov	r4, r0
   b46c4:	f7ff fceb 	bl	b409e <_ZdlPvj>
   b46c8:	4620      	mov	r0, r4
   b46ca:	bd10      	pop	{r4, pc}

000b46cc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   b46cc:	b508      	push	{r3, lr}
      { delete this; }
   b46ce:	f7ff fff6 	bl	b46be <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   b46d2:	bd08      	pop	{r3, pc}

000b46d4 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   b46d4:	b530      	push	{r4, r5, lr}
        type_(type) {
   b46d6:	2200      	movs	r2, #0
   b46d8:	f64f 749c 	movw	r4, #65436	; 0xff9c
   b46dc:	6002      	str	r2, [r0, #0]
   b46de:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   b46e0:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   b46e2:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b46e4:	680c      	ldr	r4, [r1, #0]
   b46e6:	8085      	strh	r5, [r0, #4]
   b46e8:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b46ea:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   b46ec:	bd30      	pop	{r4, r5, pc}

000b46ee <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   b46ee:	b510      	push	{r4, lr}
   b46f0:	4604      	mov	r4, r0
    free((void*)msg_);
   b46f2:	6800      	ldr	r0, [r0, #0]
   b46f4:	f7ff ff22 	bl	b453c <free>
}
   b46f8:	4620      	mov	r0, r4
   b46fa:	bd10      	pop	{r4, pc}

000b46fc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b46fc:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   b46fe:	68c4      	ldr	r4, [r0, #12]
   b4700:	b1f4      	cbz	r4, b4740 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   b4702:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   b4704:	2b02      	cmp	r3, #2
   b4706:	d103      	bne.n	b4710 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   b4708:	f104 000c 	add.w	r0, r4, #12
   b470c:	f7ff ffef 	bl	b46ee <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   b4710:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   b4712:	b135      	cbz	r5, b4722 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   b4714:	4628      	mov	r0, r5
   b4716:	f7ff ff60 	bl	b45da <_ZNSt14_Function_baseD1Ev>
   b471a:	2110      	movs	r1, #16
   b471c:	4628      	mov	r0, r5
   b471e:	f7ff fcbe 	bl	b409e <_ZdlPvj>
   b4722:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   b4724:	b135      	cbz	r5, b4734 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   b4726:	4628      	mov	r0, r5
   b4728:	f7ff ff57 	bl	b45da <_ZNSt14_Function_baseD1Ev>
   b472c:	2110      	movs	r1, #16
   b472e:	4628      	mov	r0, r5
   b4730:	f7ff fcb5 	bl	b409e <_ZdlPvj>
   b4734:	4620      	mov	r0, r4
   b4736:	2114      	movs	r1, #20
   b4738:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b473c:	f7ff bcaf 	b.w	b409e <_ZdlPvj>
   b4740:	bd38      	pop	{r3, r4, r5, pc}

000b4742 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b4742:	680b      	ldr	r3, [r1, #0]
   b4744:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b4746:	684b      	ldr	r3, [r1, #4]
   b4748:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b474a:	b113      	cbz	r3, b4752 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   b474c:	685a      	ldr	r2, [r3, #4]
   b474e:	3201      	adds	r2, #1
   b4750:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b4752:	4770      	bx	lr

000b4754 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   b4754:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b4756:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b4758:	4668      	mov	r0, sp
   b475a:	460d      	mov	r5, r1
   b475c:	f7ff fff1 	bl	b4742 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   b4760:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b4762:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b4764:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   b4766:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   b4768:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b476a:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   b476c:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   b476e:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   b4770:	f7ff fcc2 	bl	b40f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   b4774:	b135      	cbz	r5, b4784 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   b4776:	1d28      	adds	r0, r5, #4
   b4778:	f7ff fcbe 	bl	b40f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b477c:	2108      	movs	r1, #8
   b477e:	4628      	mov	r0, r5
   b4780:	f7ff fc8d 	bl	b409e <_ZdlPvj>
        return p;
    }
   b4784:	4620      	mov	r0, r4
   b4786:	b003      	add	sp, #12
   b4788:	bd30      	pop	{r4, r5, pc}

000b478a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   b478a:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b478c:	b510      	push	{r4, lr}
      if (_M_empty())
   b478e:	b90a      	cbnz	r2, b4794 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   b4790:	f000 fe8e 	bl	b54b0 <_ZSt25__throw_bad_function_callv>
    }
   b4794:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b4798:	68c3      	ldr	r3, [r0, #12]
   b479a:	4718      	bx	r3

000b479c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b479c:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b479e:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b47a0:	f100 0110 	add.w	r1, r0, #16
   b47a4:	f7ff fff1 	bl	b478a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   b47a8:	bd08      	pop	{r3, pc}

000b47aa <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   b47aa:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b47ac:	b510      	push	{r4, lr}
      if (_M_empty())
   b47ae:	b90a      	cbnz	r2, b47b4 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   b47b0:	f000 fe7e 	bl	b54b0 <_ZSt25__throw_bad_function_callv>
    }
   b47b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b47b8:	68c3      	ldr	r3, [r0, #12]
   b47ba:	4718      	bx	r3

000b47bc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b47bc:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b47be:	6800      	ldr	r0, [r0, #0]
   b47c0:	f100 0110 	add.w	r1, r0, #16
   b47c4:	f7ff fff1 	bl	b47aa <_ZNKSt8functionIFvRKbEEclES1_>
      }
   b47c8:	bd08      	pop	{r3, pc}
	...

000b47cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   b47cc:	b538      	push	{r3, r4, r5, lr}
   b47ce:	2300      	movs	r3, #0
   b47d0:	4604      	mov	r4, r0
   b47d2:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b47d4:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   b47d6:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b47d8:	f7ff fc5d 	bl	b4096 <_Znwj>
   b47dc:	b128      	cbz	r0, b47ea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   b47de:	2301      	movs	r3, #1
   b47e0:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   b47e4:	4b02      	ldr	r3, [pc, #8]	; (b47f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   b47e6:	6003      	str	r3, [r0, #0]
   b47e8:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b47ea:	6020      	str	r0, [r4, #0]
	}
   b47ec:	4620      	mov	r0, r4
   b47ee:	bd38      	pop	{r3, r4, r5, pc}
   b47f0:	000b7eb0 	.word	0x000b7eb0

000b47f4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   b47f4:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b47f6:	2300      	movs	r3, #0
   b47f8:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b47fa:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b47fc:	4604      	mov	r4, r0
   b47fe:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b4800:	b12b      	cbz	r3, b480e <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b4802:	2202      	movs	r2, #2
   b4804:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b4806:	68eb      	ldr	r3, [r5, #12]
   b4808:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b480a:	68ab      	ldr	r3, [r5, #8]
   b480c:	60a3      	str	r3, [r4, #8]
    }
   b480e:	4620      	mov	r0, r4
   b4810:	bd38      	pop	{r3, r4, r5, pc}
	...

000b4814 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   b4814:	b5f0      	push	{r4, r5, r6, r7, lr}
   b4816:	b089      	sub	sp, #36	; 0x24
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b4818:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   b481a:	4668      	mov	r0, sp
   b481c:	f7ff ff5a 	bl	b46d4 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b4820:	f04f 0302 	mov.w	r3, #2
   b4824:	e8d4 2f4f 	ldrexb	r2, [r4]
   b4828:	2a00      	cmp	r2, #0
   b482a:	d103      	bne.n	b4834 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   b482c:	e8c4 3f41 	strexb	r1, r3, [r4]
   b4830:	2900      	cmp	r1, #0
   b4832:	d1f7      	bne.n	b4824 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   b4834:	d125      	bne.n	b4882 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   b4836:	f104 050c 	add.w	r5, r4, #12
   b483a:	4669      	mov	r1, sp
   b483c:	4628      	mov	r0, r5
   b483e:	f7ff ff49 	bl	b46d4 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   b4842:	f3bf 8f5b 	dmb	ish
   b4846:	2301      	movs	r3, #1
   b4848:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b484a:	2000      	movs	r0, #0
   b484c:	f104 0308 	add.w	r3, r4, #8
   b4850:	f3bf 8f5b 	dmb	ish
   b4854:	e853 6f00 	ldrex	r6, [r3]
   b4858:	e843 0200 	strex	r2, r0, [r3]
   b485c:	2a00      	cmp	r2, #0
   b485e:	d1f9      	bne.n	b4854 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   b4860:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b4864:	b16e      	cbz	r6, b4882 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   b4866:	f7ff fdc5 	bl	b43f4 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b486a:	b178      	cbz	r0, b488c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b486c:	4629      	mov	r1, r5
   b486e:	4630      	mov	r0, r6
   b4870:	f7ff ff8b 	bl	b478a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   b4874:	4630      	mov	r0, r6
   b4876:	f7ff feb0 	bl	b45da <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b487a:	2110      	movs	r1, #16
   b487c:	4630      	mov	r0, r6
   b487e:	f7ff fc0e 	bl	b409e <_ZdlPvj>
        p_->setError(std::move(error));
   b4882:	4668      	mov	r0, sp
   b4884:	f7ff ff33 	bl	b46ee <_ZN8particle5ErrorD1Ev>
    }
   b4888:	b009      	add	sp, #36	; 0x24
   b488a:	bdf0      	pop	{r4, r5, r6, r7, pc}

     public:
      template<typename... _Args>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b488c:	4631      	mov	r1, r6
   b488e:	a802      	add	r0, sp, #8
   b4890:	f7ff ffb0 	bl	b47f4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b4894:	68e0      	ldr	r0, [r4, #12]
   b4896:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b489a:	b108      	cbz	r0, b48a0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   b489c:	f001 fb46 	bl	b5f2c <strdup>
        type_(type) {
   b48a0:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b48a2:	2010      	movs	r0, #16
   b48a4:	f8ad 501c 	strh.w	r5, [sp, #28]
   b48a8:	f7ff fbf5 	bl	b4096 <_Znwj>
   b48ac:	4605      	mov	r5, r0
   b48ae:	b1e8      	cbz	r0, b48ec <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   b48b0:	2700      	movs	r7, #0
   b48b2:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b48b4:	2018      	movs	r0, #24
   b48b6:	f7ff fbee 	bl	b4096 <_Znwj>
   b48ba:	4604      	mov	r4, r0
   b48bc:	b188      	cbz	r0, b48e2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   b48be:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   b48c0:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b48c2:	a802      	add	r0, sp, #8
   b48c4:	f7ff fe92 	bl	b45ec <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b48c8:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   b48ca:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b48cc:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b48ce:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b48d0:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b48d2:	a906      	add	r1, sp, #24
   b48d4:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b48d6:	60e3      	str	r3, [r4, #12]
   b48d8:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   b48dc:	9205      	str	r2, [sp, #20]
   b48de:	f7ff fef9 	bl	b46d4 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   b48e2:	4b08      	ldr	r3, [pc, #32]	; (b4904 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   b48e4:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b48e6:	4b08      	ldr	r3, [pc, #32]	; (b4908 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b48e8:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b48ea:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   b48ec:	a806      	add	r0, sp, #24
   b48ee:	f7ff fefe 	bl	b46ee <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b48f2:	a802      	add	r0, sp, #8
   b48f4:	f7ff fe71 	bl	b45da <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b48f8:	2200      	movs	r2, #0
   b48fa:	4629      	mov	r1, r5
   b48fc:	4803      	ldr	r0, [pc, #12]	; (b490c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   b48fe:	f7ff fd81 	bl	b4404 <application_thread_invoke>
   b4902:	e7b7      	b.n	b4874 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   b4904:	000b479d 	.word	0x000b479d
   b4908:	000b4a21 	.word	0x000b4a21
   b490c:	000b45b3 	.word	0x000b45b3

000b4910 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   b4910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4914:	b08b      	sub	sp, #44	; 0x2c
   b4916:	4605      	mov	r5, r0
   b4918:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b491c:	460f      	mov	r7, r1
   b491e:	4690      	mov	r8, r2
   b4920:	4699      	mov	r9, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b4922:	f7ff fd8b 	bl	b443c <spark_cloud_flag_connected>
   b4926:	ae07      	add	r6, sp, #28
    if (!connected()) {
   b4928:	4683      	mov	fp, r0
   b492a:	bb38      	cbnz	r0, b497c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   b492c:	f64f 732e 	movw	r3, #65326	; 0xff2e
   b4930:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b4932:	a905      	add	r1, sp, #20
   b4934:	4630      	mov	r0, r6
   b4936:	f8ad 3018 	strh.w	r3, [sp, #24]
   b493a:	f7ff fecb 	bl	b46d4 <_ZN8particle5ErrorC1EOS0_>
   b493e:	2014      	movs	r0, #20
   b4940:	f7ff fba9 	bl	b4096 <_Znwj>
   b4944:	4604      	mov	r4, r0
   b4946:	b148      	cbz	r0, b495c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   b4948:	2302      	movs	r3, #2
   b494a:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b494c:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b494e:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b4952:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   b4954:	4631      	mov	r1, r6
   b4956:	300c      	adds	r0, #12
   b4958:	f7ff febc 	bl	b46d4 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b495c:	4628      	mov	r0, r5
	: __shared_count(__p)
   b495e:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b4960:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   b4964:	f7ff ff32 	bl	b47cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b4968:	4630      	mov	r0, r6
   b496a:	f7ff fec0 	bl	b46ee <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   b496e:	a805      	add	r0, sp, #20
   b4970:	f7ff febd 	bl	b46ee <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   b4974:	4628      	mov	r0, r5
   b4976:	b00b      	add	sp, #44	; 0x2c
   b4978:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   b497c:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   b497e:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   b4980:	2014      	movs	r0, #20
   b4982:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   b4986:	9307      	str	r3, [sp, #28]
   b4988:	f7ff fb85 	bl	b4096 <_Znwj>
   b498c:	4601      	mov	r1, r0
   b498e:	b118      	cbz	r0, b4998 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b4990:	e9c0 4401 	strd	r4, r4, [r0, #4]
   b4994:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b4996:	7044      	strb	r4, [r0, #1]
   b4998:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b499a:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   b499c:	f7ff ff16 	bl	b47cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   b49a0:	4b1e      	ldr	r3, [pc, #120]	; (b4a1c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   b49a2:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   b49a4:	2008      	movs	r0, #8
   b49a6:	f7ff fb76 	bl	b4096 <_Znwj>
   b49aa:	4604      	mov	r4, r0
   b49ac:	b110      	cbz	r0, b49b4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   b49ae:	a903      	add	r1, sp, #12
   b49b0:	f7ff fec7 	bl	b4742 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b49b4:	9600      	str	r6, [sp, #0]
   b49b6:	fa5f f38a 	uxtb.w	r3, sl
   b49ba:	464a      	mov	r2, r9
   b49bc:	4641      	mov	r1, r8
   b49be:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   b49c0:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b49c2:	f7ff fd43 	bl	b444c <spark_send_event>
   b49c6:	b9b8      	cbnz	r0, b49f8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   b49c8:	9b03      	ldr	r3, [sp, #12]
   b49ca:	785b      	ldrb	r3, [r3, #1]
   b49cc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   b49d0:	b993      	cbnz	r3, b49f8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   b49d2:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   b49d6:	a905      	add	r1, sp, #20
   b49d8:	a803      	add	r0, sp, #12
   b49da:	9205      	str	r2, [sp, #20]
   b49dc:	f8ad 3018 	strh.w	r3, [sp, #24]
   b49e0:	f7ff ff18 	bl	b4814 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b49e4:	a805      	add	r0, sp, #20
   b49e6:	f7ff fe82 	bl	b46ee <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   b49ea:	a805      	add	r0, sp, #20
   b49ec:	9909      	ldr	r1, [sp, #36]	; 0x24
   b49ee:	f7ff feb1 	bl	b4754 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   b49f2:	a806      	add	r0, sp, #24
   b49f4:	f7ff fb80 	bl	b40f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b49f8:	a903      	add	r1, sp, #12
   b49fa:	a805      	add	r0, sp, #20
   b49fc:	f7ff fea1 	bl	b4742 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   b4a00:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b4a02:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b4a04:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   b4a06:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   b4a08:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b4a0a:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   b4a0c:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   b4a0e:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   b4a10:	f7ff fb72 	bl	b40f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b4a14:	a804      	add	r0, sp, #16
   b4a16:	f7ff fb6f 	bl	b40f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   b4a1a:	e7ab      	b.n	b4974 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   b4a1c:	000b4a9d 	.word	0x000b4a9d

000b4a20 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   b4a20:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b4a22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4a24:	4605      	mov	r5, r0
	switch (__op)
   b4a26:	d103      	bne.n	b4a30 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b4a28:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b4a2a:	6003      	str	r3, [r0, #0]
      }
   b4a2c:	2000      	movs	r0, #0
   b4a2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   b4a30:	2a02      	cmp	r2, #2
   b4a32:	d010      	beq.n	b4a56 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   b4a34:	2a03      	cmp	r2, #3
   b4a36:	d1f9      	bne.n	b4a2c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b4a38:	6804      	ldr	r4, [r0, #0]
   b4a3a:	2c00      	cmp	r4, #0
   b4a3c:	d0f6      	beq.n	b4a2c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   b4a3e:	f104 0010 	add.w	r0, r4, #16
   b4a42:	f7ff fe54 	bl	b46ee <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b4a46:	4620      	mov	r0, r4
   b4a48:	f7ff fdc7 	bl	b45da <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b4a4c:	2118      	movs	r1, #24
   b4a4e:	4620      	mov	r0, r4
   b4a50:	f7ff fb25 	bl	b409e <_ZdlPvj>
   b4a54:	e7ea      	b.n	b4a2c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b4a56:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   b4a58:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b4a5a:	f7ff fb1c 	bl	b4096 <_Znwj>
   b4a5e:	4604      	mov	r4, r0
   b4a60:	b150      	cbz	r0, b4a78 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   b4a62:	4631      	mov	r1, r6
   b4a64:	f7ff fec6 	bl	b47f4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b4a68:	6930      	ldr	r0, [r6, #16]
   b4a6a:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b4a6e:	b108      	cbz	r0, b4a74 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   b4a70:	f001 fa5c 	bl	b5f2c <strdup>
        type_(type) {
   b4a74:	6120      	str	r0, [r4, #16]
   b4a76:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   b4a78:	602c      	str	r4, [r5, #0]
	}
   b4a7a:	e7d7      	b.n	b4a2c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000b4a7c <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   b4a7c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b4a7e:	2300      	movs	r3, #0
   b4a80:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b4a82:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b4a84:	4604      	mov	r4, r0
   b4a86:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b4a88:	b12b      	cbz	r3, b4a96 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b4a8a:	2202      	movs	r2, #2
   b4a8c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b4a8e:	68eb      	ldr	r3, [r5, #12]
   b4a90:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b4a92:	68ab      	ldr	r3, [r5, #8]
   b4a94:	60a3      	str	r3, [r4, #8]
    }
   b4a96:	4620      	mov	r0, r4
   b4a98:	bd38      	pop	{r3, r4, r5, pc}
	...

000b4a9c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   b4a9c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b4a9e:	b089      	sub	sp, #36	; 0x24
   b4aa0:	4604      	mov	r4, r0
   b4aa2:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   b4aa4:	a801      	add	r0, sp, #4
   b4aa6:	4611      	mov	r1, r2
   b4aa8:	f7ff fe54 	bl	b4754 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   b4aac:	b1a4      	cbz	r4, b4ad8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   b4aae:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b4ab0:	b11d      	cbz	r5, b4aba <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   b4ab2:	4628      	mov	r0, r5
   b4ab4:	f001 fa3a 	bl	b5f2c <strdup>
   b4ab8:	4605      	mov	r5, r0
   b4aba:	a801      	add	r0, sp, #4
   b4abc:	a903      	add	r1, sp, #12
        type_(type) {
   b4abe:	9503      	str	r5, [sp, #12]
   b4ac0:	f8ad 4010 	strh.w	r4, [sp, #16]
   b4ac4:	f7ff fea6 	bl	b4814 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b4ac8:	a803      	add	r0, sp, #12
   b4aca:	f7ff fe10 	bl	b46ee <_ZN8particle5ErrorD1Ev>
   b4ace:	a802      	add	r0, sp, #8
   b4ad0:	f7ff fb12 	bl	b40f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b4ad4:	b009      	add	sp, #36	; 0x24
   b4ad6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   b4ad8:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b4ada:	2301      	movs	r3, #1
   b4adc:	e8d5 2f4f 	ldrexb	r2, [r5]
   b4ae0:	2a00      	cmp	r2, #0
   b4ae2:	d103      	bne.n	b4aec <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   b4ae4:	e8c5 3f41 	strexb	r1, r3, [r5]
   b4ae8:	2900      	cmp	r1, #0
   b4aea:	d1f7      	bne.n	b4adc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   b4aec:	d1ef      	bne.n	b4ace <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   b4aee:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   b4af0:	f3bf 8f5b 	dmb	ish
   b4af4:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b4af6:	1d2b      	adds	r3, r5, #4
   b4af8:	f3bf 8f5b 	dmb	ish
   b4afc:	e853 6f00 	ldrex	r6, [r3]
   b4b00:	e843 4200 	strex	r2, r4, [r3]
   b4b04:	2a00      	cmp	r2, #0
   b4b06:	d1f9      	bne.n	b4afc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   b4b08:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b4b0c:	2e00      	cmp	r6, #0
   b4b0e:	d0de      	beq.n	b4ace <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   b4b10:	4620      	mov	r0, r4
   b4b12:	f7ff fc6f 	bl	b43f4 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b4b16:	4607      	mov	r7, r0
   b4b18:	b160      	cbz	r0, b4b34 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b4b1a:	f105 010c 	add.w	r1, r5, #12
   b4b1e:	4630      	mov	r0, r6
   b4b20:	f7ff fe43 	bl	b47aa <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   b4b24:	4630      	mov	r0, r6
   b4b26:	f7ff fd58 	bl	b45da <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b4b2a:	2110      	movs	r1, #16
   b4b2c:	4630      	mov	r0, r6
   b4b2e:	f7ff fab6 	bl	b409e <_ZdlPvj>
   b4b32:	e7cc      	b.n	b4ace <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b4b34:	4631      	mov	r1, r6
   b4b36:	a803      	add	r0, sp, #12
   b4b38:	f7ff ffa0 	bl	b4a7c <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b4b3c:	7b2b      	ldrb	r3, [r5, #12]
   b4b3e:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b4b42:	2010      	movs	r0, #16
   b4b44:	f7ff faa7 	bl	b4096 <_Znwj>
   b4b48:	4605      	mov	r5, r0
   b4b4a:	b1d0      	cbz	r0, b4b82 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   b4b4c:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b4b4e:	2014      	movs	r0, #20
   b4b50:	f7ff faa1 	bl	b4096 <_Znwj>
   b4b54:	4604      	mov	r4, r0
   b4b56:	b178      	cbz	r0, b4b78 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   b4b58:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b4b5a:	4601      	mov	r1, r0
   b4b5c:	a803      	add	r0, sp, #12
   b4b5e:	f7ff fd45 	bl	b45ec <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4b62:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b4b64:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b4b66:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4b68:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   b4b6a:	9205      	str	r2, [sp, #20]
   b4b6c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b4b6e:	60e3      	str	r3, [r4, #12]
   b4b70:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   b4b74:	9206      	str	r2, [sp, #24]
   b4b76:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   b4b78:	4b06      	ldr	r3, [pc, #24]	; (b4b94 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   b4b7a:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b4b7c:	4b06      	ldr	r3, [pc, #24]	; (b4b98 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b4b7e:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b4b80:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   b4b82:	a803      	add	r0, sp, #12
   b4b84:	f7ff fd29 	bl	b45da <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b4b88:	2200      	movs	r2, #0
   b4b8a:	4629      	mov	r1, r5
   b4b8c:	4803      	ldr	r0, [pc, #12]	; (b4b9c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   b4b8e:	f7ff fc39 	bl	b4404 <application_thread_invoke>
   b4b92:	e7c7      	b.n	b4b24 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   b4b94:	000b47bd 	.word	0x000b47bd
   b4b98:	000b4ba1 	.word	0x000b4ba1
   b4b9c:	000b45b3 	.word	0x000b45b3

000b4ba0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   b4ba0:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b4ba2:	b570      	push	{r4, r5, r6, lr}
   b4ba4:	4604      	mov	r4, r0
	switch (__op)
   b4ba6:	d103      	bne.n	b4bb0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b4ba8:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b4baa:	6003      	str	r3, [r0, #0]
      }
   b4bac:	2000      	movs	r0, #0
   b4bae:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   b4bb0:	2a02      	cmp	r2, #2
   b4bb2:	d00c      	beq.n	b4bce <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   b4bb4:	2a03      	cmp	r2, #3
   b4bb6:	d1f9      	bne.n	b4bac <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b4bb8:	6804      	ldr	r4, [r0, #0]
   b4bba:	2c00      	cmp	r4, #0
   b4bbc:	d0f6      	beq.n	b4bac <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   b4bbe:	4620      	mov	r0, r4
   b4bc0:	f7ff fd0b 	bl	b45da <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b4bc4:	2114      	movs	r1, #20
   b4bc6:	4620      	mov	r0, r4
   b4bc8:	f7ff fa69 	bl	b409e <_ZdlPvj>
   b4bcc:	e7ee      	b.n	b4bac <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b4bce:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   b4bd0:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b4bd2:	f7ff fa60 	bl	b4096 <_Znwj>
   b4bd6:	4605      	mov	r5, r0
   b4bd8:	b120      	cbz	r0, b4be4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   b4bda:	4631      	mov	r1, r6
   b4bdc:	f7ff ff4e 	bl	b4a7c <_ZNSt8functionIFvRKbEEC1ERKS3_>
   b4be0:	7c33      	ldrb	r3, [r6, #16]
   b4be2:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   b4be4:	6025      	str	r5, [r4, #0]
	}
   b4be6:	e7e1      	b.n	b4bac <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000b4be8 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b4be8:	2200      	movs	r2, #0
   b4bea:	6840      	ldr	r0, [r0, #4]
   b4bec:	4611      	mov	r1, r2
   b4bee:	f7ff bc75 	b.w	b44dc <network_listening>

000b4bf2 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b4bf2:	2200      	movs	r2, #0
   b4bf4:	6840      	ldr	r0, [r0, #4]
   b4bf6:	4611      	mov	r1, r2
   b4bf8:	f7ff bc80 	b.w	b44fc <network_get_listen_timeout>

000b4bfc <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b4bfc:	6840      	ldr	r0, [r0, #4]
   b4bfe:	2200      	movs	r2, #0
   b4c00:	f7ff bc74 	b.w	b44ec <network_set_listen_timeout>

000b4c04 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b4c04:	6840      	ldr	r0, [r0, #4]
   b4c06:	2200      	movs	r2, #0
   b4c08:	f081 0101 	eor.w	r1, r1, #1
   b4c0c:	f7ff bc5e 	b.w	b44cc <network_listen>

000b4c10 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b4c10:	2300      	movs	r3, #0
   b4c12:	6840      	ldr	r0, [r0, #4]
   b4c14:	461a      	mov	r2, r3
   b4c16:	4619      	mov	r1, r3
   b4c18:	f7ff bc50 	b.w	b44bc <network_off>

000b4c1c <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b4c1c:	2300      	movs	r3, #0
   b4c1e:	6840      	ldr	r0, [r0, #4]
   b4c20:	461a      	mov	r2, r3
   b4c22:	4619      	mov	r1, r3
   b4c24:	f7ff bc42 	b.w	b44ac <network_on>

000b4c28 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b4c28:	2200      	movs	r2, #0
   b4c2a:	6840      	ldr	r0, [r0, #4]
   b4c2c:	4611      	mov	r1, r2
   b4c2e:	f7ff bc35 	b.w	b449c <network_ready>

000b4c32 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b4c32:	2200      	movs	r2, #0
   b4c34:	6840      	ldr	r0, [r0, #4]
   b4c36:	4611      	mov	r1, r2
   b4c38:	f7ff bc20 	b.w	b447c <network_connecting>

000b4c3c <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b4c3c:	6840      	ldr	r0, [r0, #4]
   b4c3e:	2200      	movs	r2, #0
   b4c40:	2102      	movs	r1, #2
   b4c42:	f7ff bc23 	b.w	b448c <network_disconnect>

000b4c46 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b4c46:	2300      	movs	r3, #0
   b4c48:	6840      	ldr	r0, [r0, #4]
   b4c4a:	461a      	mov	r2, r3
   b4c4c:	f7ff bc0e 	b.w	b446c <network_connect>

000b4c50 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   b4c50:	4b02      	ldr	r3, [pc, #8]	; (b4c5c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b4c52:	2203      	movs	r2, #3
   b4c54:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b4c56:	4a02      	ldr	r2, [pc, #8]	; (b4c60 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b4c58:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b4c5a:	4770      	bx	lr
   b4c5c:	2003e6e8 	.word	0x2003e6e8
   b4c60:	000b7ecc 	.word	0x000b7ecc

000b4c64 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b4c64:	4770      	bx	lr

000b4c66 <_ZN9IPAddressD0Ev>:
   b4c66:	b510      	push	{r4, lr}
   b4c68:	2118      	movs	r1, #24
   b4c6a:	4604      	mov	r4, r0
   b4c6c:	f7ff fa17 	bl	b409e <_ZdlPvj>
   b4c70:	4620      	mov	r0, r4
   b4c72:	bd10      	pop	{r4, pc}

000b4c74 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b4c74:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b4c76:	7d03      	ldrb	r3, [r0, #20]
   b4c78:	2b06      	cmp	r3, #6
{
   b4c7a:	b08d      	sub	sp, #52	; 0x34
   b4c7c:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4c7e:	f100 0704 	add.w	r7, r0, #4
   b4c82:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b4c86:	d012      	beq.n	b4cae <_ZNK9IPAddress7printToER5Print+0x3a>
   b4c88:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b4c8c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b4c90:	220a      	movs	r2, #10
   b4c92:	4630      	mov	r0, r6
   b4c94:	f000 f943 	bl	b4f1e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b4c98:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b4c9a:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b4c9c:	d019      	beq.n	b4cd2 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b4c9e:	2c00      	cmp	r4, #0
   b4ca0:	d0f4      	beq.n	b4c8c <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b4ca2:	212e      	movs	r1, #46	; 0x2e
   b4ca4:	4630      	mov	r0, r6
   b4ca6:	f000 f937 	bl	b4f18 <_ZN5Print5printEc>
   b4caa:	4404      	add	r4, r0
   b4cac:	e7ee      	b.n	b4c8c <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4cae:	232f      	movs	r3, #47	; 0x2f
   b4cb0:	466a      	mov	r2, sp
   b4cb2:	4639      	mov	r1, r7
   b4cb4:	200a      	movs	r0, #10
		buf[0] = 0;
   b4cb6:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4cba:	f7ff faf3 	bl	b42a4 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b4cbe:	4668      	mov	r0, sp
   b4cc0:	f001 f951 	bl	b5f66 <strlen>
   b4cc4:	6833      	ldr	r3, [r6, #0]
   b4cc6:	4602      	mov	r2, r0
   b4cc8:	68db      	ldr	r3, [r3, #12]
   b4cca:	4669      	mov	r1, sp
   b4ccc:	4630      	mov	r0, r6
   b4cce:	4798      	blx	r3
   b4cd0:	4604      	mov	r4, r0
    }
    return n;
}
   b4cd2:	4620      	mov	r0, r4
   b4cd4:	b00d      	add	sp, #52	; 0x34
   b4cd6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b4cd8 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b4cd8:	b510      	push	{r4, lr}
   b4cda:	4b05      	ldr	r3, [pc, #20]	; (b4cf0 <_ZN9IPAddressC1Ev+0x18>)
   b4cdc:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b4cde:	2211      	movs	r2, #17
   b4ce0:	f840 3b04 	str.w	r3, [r0], #4
   b4ce4:	2100      	movs	r1, #0
   b4ce6:	f001 f8e2 	bl	b5eae <memset>
}
   b4cea:	4620      	mov	r0, r4
   b4cec:	bd10      	pop	{r4, pc}
   b4cee:	bf00      	nop
   b4cf0:	000b7f08 	.word	0x000b7f08

000b4cf4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b4cf4:	4603      	mov	r3, r0
   b4cf6:	4a07      	ldr	r2, [pc, #28]	; (b4d14 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b4cf8:	b510      	push	{r4, lr}
   b4cfa:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b4cfe:	f101 0210 	add.w	r2, r1, #16
   b4d02:	f851 4b04 	ldr.w	r4, [r1], #4
   b4d06:	f843 4b04 	str.w	r4, [r3], #4
   b4d0a:	4291      	cmp	r1, r2
   b4d0c:	d1f9      	bne.n	b4d02 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b4d0e:	780a      	ldrb	r2, [r1, #0]
   b4d10:	701a      	strb	r2, [r3, #0]
}
   b4d12:	bd10      	pop	{r4, pc}
   b4d14:	000b7f08 	.word	0x000b7f08

000b4d18 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b4d18:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b4d1a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b4d1e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b4d22:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b4d26:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b4d2a:	2304      	movs	r3, #4
   b4d2c:	6041      	str	r1, [r0, #4]
   b4d2e:	7503      	strb	r3, [r0, #20]
}
   b4d30:	bd10      	pop	{r4, pc}
	...

000b4d34 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b4d34:	b507      	push	{r0, r1, r2, lr}
   b4d36:	4b06      	ldr	r3, [pc, #24]	; (b4d50 <_ZN9IPAddressC1EPKh+0x1c>)
   b4d38:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b4d3a:	78cb      	ldrb	r3, [r1, #3]
   b4d3c:	9300      	str	r3, [sp, #0]
   b4d3e:	788b      	ldrb	r3, [r1, #2]
   b4d40:	784a      	ldrb	r2, [r1, #1]
   b4d42:	7809      	ldrb	r1, [r1, #0]
   b4d44:	f7ff ffe8 	bl	b4d18 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b4d48:	b003      	add	sp, #12
   b4d4a:	f85d fb04 	ldr.w	pc, [sp], #4
   b4d4e:	bf00      	nop
   b4d50:	000b7f08 	.word	0x000b7f08

000b4d54 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b4d54:	4b01      	ldr	r3, [pc, #4]	; (b4d5c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b4d56:	4a02      	ldr	r2, [pc, #8]	; (b4d60 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b4d58:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b4d5a:	4770      	bx	lr
   b4d5c:	2003e6f0 	.word	0x2003e6f0
   b4d60:	000b7f14 	.word	0x000b7f14

000b4d64 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b4d64:	2300      	movs	r3, #0
   b4d66:	6840      	ldr	r0, [r0, #4]
   b4d68:	461a      	mov	r2, r3
   b4d6a:	f7ff bb7f 	b.w	b446c <network_connect>

000b4d6e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b4d6e:	6840      	ldr	r0, [r0, #4]
   b4d70:	2200      	movs	r2, #0
   b4d72:	2102      	movs	r1, #2
   b4d74:	f7ff bb8a 	b.w	b448c <network_disconnect>

000b4d78 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b4d78:	2200      	movs	r2, #0
   b4d7a:	6840      	ldr	r0, [r0, #4]
   b4d7c:	4611      	mov	r1, r2
   b4d7e:	f7ff bb7d 	b.w	b447c <network_connecting>

000b4d82 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b4d82:	2200      	movs	r2, #0
   b4d84:	6840      	ldr	r0, [r0, #4]
   b4d86:	4611      	mov	r1, r2
   b4d88:	f7ff bb88 	b.w	b449c <network_ready>

000b4d8c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b4d8c:	2300      	movs	r3, #0
   b4d8e:	6840      	ldr	r0, [r0, #4]
   b4d90:	461a      	mov	r2, r3
   b4d92:	4619      	mov	r1, r3
   b4d94:	f7ff bb8a 	b.w	b44ac <network_on>

000b4d98 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b4d98:	2300      	movs	r3, #0
   b4d9a:	6840      	ldr	r0, [r0, #4]
   b4d9c:	461a      	mov	r2, r3
   b4d9e:	4619      	mov	r1, r3
   b4da0:	f7ff bb8c 	b.w	b44bc <network_off>

000b4da4 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b4da4:	6840      	ldr	r0, [r0, #4]
   b4da6:	2100      	movs	r1, #0
   b4da8:	f7ff bbb0 	b.w	b450c <network_is_on>

000b4dac <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b4dac:	6840      	ldr	r0, [r0, #4]
   b4dae:	2100      	movs	r1, #0
   b4db0:	f7ff bbb4 	b.w	b451c <network_is_off>

000b4db4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b4db4:	6840      	ldr	r0, [r0, #4]
   b4db6:	2200      	movs	r2, #0
   b4db8:	f081 0101 	eor.w	r1, r1, #1
   b4dbc:	f7ff bb86 	b.w	b44cc <network_listen>

000b4dc0 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b4dc0:	6840      	ldr	r0, [r0, #4]
   b4dc2:	2200      	movs	r2, #0
   b4dc4:	f7ff bb92 	b.w	b44ec <network_set_listen_timeout>

000b4dc8 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b4dc8:	2200      	movs	r2, #0
   b4dca:	6840      	ldr	r0, [r0, #4]
   b4dcc:	4611      	mov	r1, r2
   b4dce:	f7ff bb95 	b.w	b44fc <network_get_listen_timeout>

000b4dd2 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b4dd2:	2200      	movs	r2, #0
   b4dd4:	6840      	ldr	r0, [r0, #4]
   b4dd6:	4611      	mov	r1, r2
   b4dd8:	f7ff bb80 	b.w	b44dc <network_listening>

000b4ddc <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b4ddc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b4de0:	b095      	sub	sp, #84	; 0x54
   b4de2:	4614      	mov	r4, r2
   b4de4:	460d      	mov	r5, r1
   b4de6:	4607      	mov	r7, r0
    IPAddress addr;
   b4de8:	f7ff ff76 	bl	b4cd8 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b4dec:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b4dee:	221c      	movs	r2, #28
   b4df0:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b4df2:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b4df4:	f001 f85b 	bl	b5eae <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b4df8:	2340      	movs	r3, #64	; 0x40
   b4dfa:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b4dfc:	4620      	mov	r0, r4
   b4dfe:	466b      	mov	r3, sp
   b4e00:	aa0c      	add	r2, sp, #48	; 0x30
   b4e02:	2100      	movs	r1, #0
   b4e04:	f7ff fa5e 	bl	b42c4 <netdb_getaddrinfo>
    if (!r) {
   b4e08:	4604      	mov	r4, r0
   b4e0a:	2800      	cmp	r0, #0
   b4e0c:	d14b      	bne.n	b4ea6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b4e0e:	4602      	mov	r2, r0
   b4e10:	2101      	movs	r1, #1
   b4e12:	6868      	ldr	r0, [r5, #4]
   b4e14:	f7ff fb42 	bl	b449c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b4e18:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b4e1a:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b4e1c:	4622      	mov	r2, r4
   b4e1e:	6868      	ldr	r0, [r5, #4]
   b4e20:	f7ff fb3c 	bl	b449c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b4e24:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b4e26:	4681      	mov	r9, r0
        bool ok = false;
   b4e28:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b4e2a:	2e00      	cmp	r6, #0
   b4e2c:	d03b      	beq.n	b4ea6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b4e2e:	2900      	cmp	r1, #0
   b4e30:	d139      	bne.n	b4ea6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b4e32:	6873      	ldr	r3, [r6, #4]
   b4e34:	2b02      	cmp	r3, #2
   b4e36:	d003      	beq.n	b4e40 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b4e38:	2b0a      	cmp	r3, #10
   b4e3a:	d011      	beq.n	b4e60 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b4e3c:	69f6      	ldr	r6, [r6, #28]
   b4e3e:	e7f4      	b.n	b4e2a <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b4e40:	f1b8 0f00 	cmp.w	r8, #0
   b4e44:	d0fa      	beq.n	b4e3c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b4e46:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b4e48:	a806      	add	r0, sp, #24
   b4e4a:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b4e4c:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b4e4e:	f7ff ff71 	bl	b4d34 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b4e52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4e54:	1d3c      	adds	r4, r7, #4
   b4e56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b4e58:	682b      	ldr	r3, [r5, #0]
   b4e5a:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b4e5c:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b4e5e:	e7ed      	b.n	b4e3c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b4e60:	f1b9 0f00 	cmp.w	r9, #0
   b4e64:	d0ea      	beq.n	b4e3c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b4e66:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b4e68:	2210      	movs	r2, #16
   b4e6a:	a801      	add	r0, sp, #4
   b4e6c:	f001 f81f 	bl	b5eae <memset>
                    a.v = 6;
   b4e70:	2306      	movs	r3, #6
   b4e72:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b4e76:	ad01      	add	r5, sp, #4
   b4e78:	f104 0308 	add.w	r3, r4, #8
   b4e7c:	3418      	adds	r4, #24
   b4e7e:	6818      	ldr	r0, [r3, #0]
   b4e80:	6859      	ldr	r1, [r3, #4]
   b4e82:	462a      	mov	r2, r5
   b4e84:	c203      	stmia	r2!, {r0, r1}
   b4e86:	3308      	adds	r3, #8
   b4e88:	42a3      	cmp	r3, r4
   b4e8a:	4615      	mov	r5, r2
   b4e8c:	d1f7      	bne.n	b4e7e <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b4e8e:	a901      	add	r1, sp, #4
   b4e90:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b4e92:	ad07      	add	r5, sp, #28
   b4e94:	f7ff ff2e 	bl	b4cf4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b4e98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4e9a:	1d3c      	adds	r4, r7, #4
   b4e9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b4e9e:	682b      	ldr	r3, [r5, #0]
   b4ea0:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b4ea2:	4649      	mov	r1, r9
   b4ea4:	e7ca      	b.n	b4e3c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b4ea6:	9800      	ldr	r0, [sp, #0]
   b4ea8:	f7ff fa04 	bl	b42b4 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b4eac:	4638      	mov	r0, r7
   b4eae:	b015      	add	sp, #84	; 0x54
   b4eb0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b4eb4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b4eb4:	4b02      	ldr	r3, [pc, #8]	; (b4ec0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b4eb6:	4a03      	ldr	r2, [pc, #12]	; (b4ec4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b4eb8:	601a      	str	r2, [r3, #0]
   b4eba:	2200      	movs	r2, #0
   b4ebc:	605a      	str	r2, [r3, #4]

} // spark
   b4ebe:	4770      	bx	lr
   b4ec0:	2003e6f4 	.word	0x2003e6f4
   b4ec4:	000b7f20 	.word	0x000b7f20

000b4ec8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b4ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4eca:	4606      	mov	r6, r0
   b4ecc:	460d      	mov	r5, r1
  size_t n = 0;
   b4ece:	188f      	adds	r7, r1, r2
   b4ed0:	2400      	movs	r4, #0
  while (size--) {
   b4ed2:	42bd      	cmp	r5, r7
   b4ed4:	d00c      	beq.n	b4ef0 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b4ed6:	6833      	ldr	r3, [r6, #0]
   b4ed8:	f815 1b01 	ldrb.w	r1, [r5], #1
   b4edc:	689b      	ldr	r3, [r3, #8]
   b4ede:	4630      	mov	r0, r6
   b4ee0:	4798      	blx	r3
     if (chunk>=0)
   b4ee2:	1e03      	subs	r3, r0, #0
   b4ee4:	db01      	blt.n	b4eea <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b4ee6:	441c      	add	r4, r3
  while (size--) {
   b4ee8:	e7f3      	b.n	b4ed2 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b4eea:	2c00      	cmp	r4, #0
   b4eec:	bf08      	it	eq
   b4eee:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b4ef0:	4620      	mov	r0, r4
   b4ef2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4ef4 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b4ef4:	b513      	push	{r0, r1, r4, lr}
   b4ef6:	4604      	mov	r4, r0
    }
   b4ef8:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b4efa:	b159      	cbz	r1, b4f14 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b4efc:	9101      	str	r1, [sp, #4]
   b4efe:	f001 f832 	bl	b5f66 <strlen>
   b4f02:	6823      	ldr	r3, [r4, #0]
   b4f04:	9901      	ldr	r1, [sp, #4]
   b4f06:	68db      	ldr	r3, [r3, #12]
   b4f08:	4602      	mov	r2, r0
   b4f0a:	4620      	mov	r0, r4
    }
   b4f0c:	b002      	add	sp, #8
   b4f0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b4f12:	4718      	bx	r3
    }
   b4f14:	b002      	add	sp, #8
   b4f16:	bd10      	pop	{r4, pc}

000b4f18 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b4f18:	6803      	ldr	r3, [r0, #0]
   b4f1a:	689b      	ldr	r3, [r3, #8]
   b4f1c:	4718      	bx	r3

000b4f1e <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b4f1e:	b530      	push	{r4, r5, lr}
   b4f20:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b4f22:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b4f24:	2a01      	cmp	r2, #1
  *str = '\0';
   b4f26:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b4f2a:	bf98      	it	ls
   b4f2c:	220a      	movls	r2, #10
   b4f2e:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b4f30:	460d      	mov	r5, r1
   b4f32:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b4f36:	fb01 5312 	mls	r3, r1, r2, r5
   b4f3a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b4f3e:	2b09      	cmp	r3, #9
   b4f40:	bf94      	ite	ls
   b4f42:	3330      	addls	r3, #48	; 0x30
   b4f44:	3337      	addhi	r3, #55	; 0x37
   b4f46:	b2db      	uxtb	r3, r3
  } while(n);
   b4f48:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b4f4a:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b4f4e:	d9ef      	bls.n	b4f30 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b4f50:	4621      	mov	r1, r4
   b4f52:	f7ff ffcf 	bl	b4ef4 <_ZN5Print5writeEPKc>
}
   b4f56:	b00b      	add	sp, #44	; 0x2c
   b4f58:	bd30      	pop	{r4, r5, pc}
	...

000b4f5c <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b4f5c:	4b01      	ldr	r3, [pc, #4]	; (b4f64 <_GLOBAL__sub_I_RGB+0x8>)
   b4f5e:	2200      	movs	r2, #0
   b4f60:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b4f62:	4770      	bx	lr
   b4f64:	2003e6fc 	.word	0x2003e6fc

000b4f68 <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   b4f68:	b510      	push	{r4, lr}
   b4f6a:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b4f6c:	f7ff f992 	bl	b4294 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   b4f70:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   b4f72:	6823      	ldr	r3, [r4, #0]
   b4f74:	4620      	mov	r0, r4
   b4f76:	695b      	ldr	r3, [r3, #20]
   b4f78:	4798      	blx	r3
    if (c >= 0) return c;
   b4f7a:	2800      	cmp	r0, #0
   b4f7c:	da08      	bge.n	b4f90 <_ZN6Stream9timedReadEv+0x28>
   b4f7e:	f7ff f989 	bl	b4294 <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
   b4f82:	68e3      	ldr	r3, [r4, #12]
   b4f84:	1ac0      	subs	r0, r0, r3
   b4f86:	68a3      	ldr	r3, [r4, #8]
   b4f88:	4298      	cmp	r0, r3
   b4f8a:	d3f2      	bcc.n	b4f72 <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
   b4f8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   b4f90:	bd10      	pop	{r4, pc}
	...

000b4f94 <_ZN6Stream15readStringUntilEc>:
  }
  return ret;
}

String Stream::readStringUntil(char terminator)
{
   b4f94:	b570      	push	{r4, r5, r6, lr}
   b4f96:	460d      	mov	r5, r1
  String ret;
   b4f98:	4909      	ldr	r1, [pc, #36]	; (b4fc0 <_ZN6Stream15readStringUntilEc+0x2c>)
{
   b4f9a:	4604      	mov	r4, r0
   b4f9c:	4616      	mov	r6, r2
  String ret;
   b4f9e:	f000 f85c 	bl	b505a <_ZN6StringC1EPK19__FlashStringHelper>
  int c = timedRead();
   b4fa2:	4628      	mov	r0, r5
   b4fa4:	f7ff ffe0 	bl	b4f68 <_ZN6Stream9timedReadEv>
  while (c >= 0 && c != terminator)
   b4fa8:	2800      	cmp	r0, #0
   b4faa:	db06      	blt.n	b4fba <_ZN6Stream15readStringUntilEc+0x26>
   b4fac:	4286      	cmp	r6, r0
   b4fae:	d004      	beq.n	b4fba <_ZN6Stream15readStringUntilEc+0x26>

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
   b4fb0:	b2c1      	uxtb	r1, r0
   b4fb2:	4620      	mov	r0, r4
   b4fb4:	f000 f87c 	bl	b50b0 <_ZN6String6concatEc>
  {
    ret += (char)c;
    c = timedRead();
   b4fb8:	e7f3      	b.n	b4fa2 <_ZN6Stream15readStringUntilEc+0xe>
  }
  return ret;
}
   b4fba:	4620      	mov	r0, r4
   b4fbc:	bd70      	pop	{r4, r5, r6, pc}
   b4fbe:	bf00      	nop
   b4fc0:	000b8214 	.word	0x000b8214

000b4fc4 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b4fc4:	b510      	push	{r4, lr}
   b4fc6:	4604      	mov	r4, r0
{
	free(buffer);
   b4fc8:	6800      	ldr	r0, [r0, #0]
   b4fca:	f7ff fab7 	bl	b453c <free>
}
   b4fce:	4620      	mov	r0, r4
   b4fd0:	bd10      	pop	{r4, pc}

000b4fd2 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b4fd2:	b510      	push	{r4, lr}
   b4fd4:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b4fd6:	6800      	ldr	r0, [r0, #0]
   b4fd8:	b108      	cbz	r0, b4fde <_ZN6String10invalidateEv+0xc>
   b4fda:	f7ff faaf 	bl	b453c <free>
	buffer = NULL;
   b4fde:	2300      	movs	r3, #0
	capacity = len = 0;
   b4fe0:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b4fe4:	6023      	str	r3, [r4, #0]
}
   b4fe6:	bd10      	pop	{r4, pc}

000b4fe8 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b4fe8:	b538      	push	{r3, r4, r5, lr}
   b4fea:	4604      	mov	r4, r0
   b4fec:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b4fee:	6800      	ldr	r0, [r0, #0]
   b4ff0:	3101      	adds	r1, #1
   b4ff2:	f7ff faab 	bl	b454c <realloc>
	if (newbuffer) {
   b4ff6:	b110      	cbz	r0, b4ffe <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b4ff8:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b4ffc:	2001      	movs	r0, #1
	}
	return 0;
}
   b4ffe:	bd38      	pop	{r3, r4, r5, pc}

000b5000 <_ZN6String7reserveEj>:
{
   b5000:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b5002:	6803      	ldr	r3, [r0, #0]
{
   b5004:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b5006:	b123      	cbz	r3, b5012 <_ZN6String7reserveEj+0x12>
   b5008:	6843      	ldr	r3, [r0, #4]
   b500a:	428b      	cmp	r3, r1
   b500c:	d301      	bcc.n	b5012 <_ZN6String7reserveEj+0x12>
   b500e:	2001      	movs	r0, #1
}
   b5010:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b5012:	4620      	mov	r0, r4
   b5014:	f7ff ffe8 	bl	b4fe8 <_ZN6String12changeBufferEj>
   b5018:	2800      	cmp	r0, #0
   b501a:	d0f9      	beq.n	b5010 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b501c:	68a3      	ldr	r3, [r4, #8]
   b501e:	2b00      	cmp	r3, #0
   b5020:	d1f5      	bne.n	b500e <_ZN6String7reserveEj+0xe>
   b5022:	6822      	ldr	r2, [r4, #0]
   b5024:	7013      	strb	r3, [r2, #0]
   b5026:	e7f2      	b.n	b500e <_ZN6String7reserveEj+0xe>

000b5028 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b5028:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b502a:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b502c:	4611      	mov	r1, r2
   b502e:	9201      	str	r2, [sp, #4]
{
   b5030:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b5032:	f7ff ffe5 	bl	b5000 <_ZN6String7reserveEj>
   b5036:	9a01      	ldr	r2, [sp, #4]
   b5038:	b928      	cbnz	r0, b5046 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b503a:	4620      	mov	r0, r4
   b503c:	f7ff ffc9 	bl	b4fd2 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b5040:	4620      	mov	r0, r4
   b5042:	b003      	add	sp, #12
   b5044:	bd30      	pop	{r4, r5, pc}
	len = length;
   b5046:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b5048:	4629      	mov	r1, r5
   b504a:	6820      	ldr	r0, [r4, #0]
   b504c:	f000 ff21 	bl	b5e92 <memcpy>
	buffer[len] = 0;
   b5050:	6822      	ldr	r2, [r4, #0]
   b5052:	68a3      	ldr	r3, [r4, #8]
   b5054:	2100      	movs	r1, #0
   b5056:	54d1      	strb	r1, [r2, r3]
	return *this;
   b5058:	e7f2      	b.n	b5040 <_ZN6String4copyEPKcj+0x18>

000b505a <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b505a:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b505c:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b505e:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b5062:	4604      	mov	r4, r0
	len = 0;
   b5064:	6083      	str	r3, [r0, #8]
	flags = 0;
   b5066:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b5068:	b141      	cbz	r1, b507c <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b506a:	4608      	mov	r0, r1
   b506c:	9101      	str	r1, [sp, #4]
   b506e:	f000 ff7a 	bl	b5f66 <strlen>
   b5072:	9901      	ldr	r1, [sp, #4]
   b5074:	4602      	mov	r2, r0
   b5076:	4620      	mov	r0, r4
   b5078:	f7ff ffd6 	bl	b5028 <_ZN6String4copyEPKcj>
}
   b507c:	4620      	mov	r0, r4
   b507e:	b002      	add	sp, #8
   b5080:	bd10      	pop	{r4, pc}

000b5082 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b5082:	b570      	push	{r4, r5, r6, lr}
   b5084:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b5086:	460e      	mov	r6, r1
   b5088:	b909      	cbnz	r1, b508e <_ZN6String6concatEPKcj+0xc>
   b508a:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b508c:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b508e:	b16a      	cbz	r2, b50ac <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b5090:	6884      	ldr	r4, [r0, #8]
   b5092:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b5094:	4621      	mov	r1, r4
   b5096:	f7ff ffb3 	bl	b5000 <_ZN6String7reserveEj>
   b509a:	2800      	cmp	r0, #0
   b509c:	d0f5      	beq.n	b508a <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b509e:	6828      	ldr	r0, [r5, #0]
   b50a0:	68ab      	ldr	r3, [r5, #8]
   b50a2:	4631      	mov	r1, r6
   b50a4:	4418      	add	r0, r3
   b50a6:	f000 ff39 	bl	b5f1c <strcpy>
	len = newlen;
   b50aa:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b50ac:	2001      	movs	r0, #1
   b50ae:	e7ed      	b.n	b508c <_ZN6String6concatEPKcj+0xa>

000b50b0 <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   b50b0:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   b50b2:	2300      	movs	r3, #0
	buf[0] = c;
   b50b4:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   b50b8:	2201      	movs	r2, #1
   b50ba:	a901      	add	r1, sp, #4
	buf[1] = 0;
   b50bc:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   b50c0:	f7ff ffdf 	bl	b5082 <_ZN6String6concatEPKcj>
}
   b50c4:	b003      	add	sp, #12
   b50c6:	f85d fb04 	ldr.w	pc, [sp], #4

000b50ca <_ZNK6String10startsWithERKS_j>:
	if (len < s2.len) return 0;
	return startsWith(s2, 0);
}

unsigned char String::startsWith( const String &s2, unsigned int offset ) const
{
   b50ca:	b510      	push	{r4, lr}
   b50cc:	4613      	mov	r3, r2
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
   b50ce:	6884      	ldr	r4, [r0, #8]
   b50d0:	688a      	ldr	r2, [r1, #8]
   b50d2:	1aa4      	subs	r4, r4, r2
   b50d4:	429c      	cmp	r4, r3
   b50d6:	d30a      	bcc.n	b50ee <_ZNK6String10startsWithERKS_j+0x24>
   b50d8:	6800      	ldr	r0, [r0, #0]
   b50da:	b138      	cbz	r0, b50ec <_ZNK6String10startsWithERKS_j+0x22>
   b50dc:	6809      	ldr	r1, [r1, #0]
   b50de:	b141      	cbz	r1, b50f2 <_ZNK6String10startsWithERKS_j+0x28>
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
   b50e0:	4418      	add	r0, r3
   b50e2:	f000 ff48 	bl	b5f76 <strncmp>
   b50e6:	fab0 f080 	clz	r0, r0
   b50ea:	0940      	lsrs	r0, r0, #5
}
   b50ec:	bd10      	pop	{r4, pc}
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
   b50ee:	2000      	movs	r0, #0
   b50f0:	e7fc      	b.n	b50ec <_ZNK6String10startsWithERKS_j+0x22>
   b50f2:	4608      	mov	r0, r1
   b50f4:	e7fa      	b.n	b50ec <_ZNK6String10startsWithERKS_j+0x22>

000b50f6 <_ZNK6String10startsWithERKS_>:
	if (len < s2.len) return 0;
   b50f6:	6882      	ldr	r2, [r0, #8]
   b50f8:	688b      	ldr	r3, [r1, #8]
   b50fa:	429a      	cmp	r2, r3
   b50fc:	d302      	bcc.n	b5104 <_ZNK6String10startsWithERKS_+0xe>
	return startsWith(s2, 0);
   b50fe:	2200      	movs	r2, #0
   b5100:	f7ff bfe3 	b.w	b50ca <_ZNK6String10startsWithERKS_j>
}
   b5104:	2000      	movs	r0, #0
   b5106:	4770      	bx	lr

000b5108 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b5108:	4b05      	ldr	r3, [pc, #20]	; (b5120 <_GLOBAL__sub_I_System+0x18>)
   b510a:	2202      	movs	r2, #2
   b510c:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b510e:	4b05      	ldr	r3, [pc, #20]	; (b5124 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b5110:	4a05      	ldr	r2, [pc, #20]	; (b5128 <_GLOBAL__sub_I_System+0x20>)
   b5112:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b5114:	2000      	movs	r0, #0
   b5116:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b511a:	f7ff b953 	b.w	b43c4 <set_system_mode>
   b511e:	bf00      	nop
   b5120:	2003e718 	.word	0x2003e718
   b5124:	2003e70c 	.word	0x2003e70c
   b5128:	ffff0000 	.word	0xffff0000

000b512c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b512c:	4b02      	ldr	r3, [pc, #8]	; (b5138 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b512e:	681a      	ldr	r2, [r3, #0]
   b5130:	4b02      	ldr	r3, [pc, #8]	; (b513c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b5132:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b5134:	4770      	bx	lr
   b5136:	bf00      	nop
   b5138:	2003e4b8 	.word	0x2003e4b8
   b513c:	2003e71c 	.word	0x2003e71c

000b5140 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b5140:	4770      	bx	lr

000b5142 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b5142:	7441      	strb	r1, [r0, #17]
}
   b5144:	4770      	bx	lr

000b5146 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b5146:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b5148:	7c00      	ldrb	r0, [r0, #16]
   b514a:	f7ff f8eb 	bl	b4324 <hal_usart_available_data_for_write>
}
   b514e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5152:	bd08      	pop	{r3, pc}

000b5154 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b5154:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b5156:	7c00      	ldrb	r0, [r0, #16]
   b5158:	f7ff f8c4 	bl	b42e4 <hal_usart_available>
}
   b515c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5160:	bd08      	pop	{r3, pc}

000b5162 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b5162:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b5164:	7c00      	ldrb	r0, [r0, #16]
   b5166:	f7ff f8cd 	bl	b4304 <hal_usart_peek>
}
   b516a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b516e:	bd08      	pop	{r3, pc}

000b5170 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b5170:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b5172:	7c00      	ldrb	r0, [r0, #16]
   b5174:	f7ff f8be 	bl	b42f4 <hal_usart_read>
}
   b5178:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b517c:	bd08      	pop	{r3, pc}

000b517e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b517e:	7c00      	ldrb	r0, [r0, #16]
   b5180:	f7ff b8c8 	b.w	b4314 <hal_usart_flush>

000b5184 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b5184:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5186:	7c45      	ldrb	r5, [r0, #17]
{
   b5188:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b518a:	b12d      	cbz	r5, b5198 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b518c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b518e:	b003      	add	sp, #12
   b5190:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b5194:	f7ff b89e 	b.w	b42d4 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5198:	7c00      	ldrb	r0, [r0, #16]
   b519a:	9101      	str	r1, [sp, #4]
   b519c:	f7ff f8c2 	bl	b4324 <hal_usart_available_data_for_write>
   b51a0:	2800      	cmp	r0, #0
   b51a2:	9901      	ldr	r1, [sp, #4]
   b51a4:	dcf2      	bgt.n	b518c <_ZN11USARTSerial5writeEh+0x8>
}
   b51a6:	4628      	mov	r0, r5
   b51a8:	b003      	add	sp, #12
   b51aa:	bd30      	pop	{r4, r5, pc}

000b51ac <_ZN11USARTSerialD0Ev>:
   b51ac:	b510      	push	{r4, lr}
   b51ae:	2114      	movs	r1, #20
   b51b0:	4604      	mov	r4, r0
   b51b2:	f7fe ff74 	bl	b409e <_ZdlPvj>
   b51b6:	4620      	mov	r0, r4
   b51b8:	bd10      	pop	{r4, pc}
	...

000b51bc <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b51bc:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b51be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b51c2:	4604      	mov	r4, r0
   b51c4:	4608      	mov	r0, r1
   b51c6:	4611      	mov	r1, r2
   b51c8:	2200      	movs	r2, #0
   b51ca:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b51ce:	4b04      	ldr	r3, [pc, #16]	; (b51e0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b51d0:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b51d2:	2301      	movs	r3, #1
  _serial = serial;
   b51d4:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b51d6:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b51d8:	f7ff f8bc 	bl	b4354 <hal_usart_init_ex>
}
   b51dc:	4620      	mov	r0, r4
   b51de:	bd10      	pop	{r4, pc}
   b51e0:	000b7f78 	.word	0x000b7f78

000b51e4 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   b51e4:	7c00      	ldrb	r0, [r0, #16]
   b51e6:	2300      	movs	r3, #0
   b51e8:	f7ff b8a4 	b.w	b4334 <hal_usart_begin_config>

000b51ec <_ZN11USARTSerial5writeEt>:

size_t USARTSerial::write(uint16_t c)
{
  return hal_usart_write_nine_bits(_serial, c);
   b51ec:	7c00      	ldrb	r0, [r0, #16]
   b51ee:	f7ff b8a9 	b.w	b4344 <hal_usart_write_nine_bits>

000b51f2 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b51f2:	7441      	strb	r1, [r0, #17]
}
   b51f4:	4770      	bx	lr

000b51f6 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b51f6:	4770      	bx	lr

000b51f8 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b51f8:	4770      	bx	lr

000b51fa <_ZN9USBSerial4readEv>:
{
   b51fa:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b51fc:	2100      	movs	r1, #0
   b51fe:	7c00      	ldrb	r0, [r0, #16]
   b5200:	f7ff f8c8 	bl	b4394 <HAL_USB_USART_Receive_Data>
}
   b5204:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5208:	bd08      	pop	{r3, pc}

000b520a <_ZN9USBSerial4peekEv>:
{
   b520a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b520c:	2101      	movs	r1, #1
   b520e:	7c00      	ldrb	r0, [r0, #16]
   b5210:	f7ff f8c0 	bl	b4394 <HAL_USB_USART_Receive_Data>
}
   b5214:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5218:	bd08      	pop	{r3, pc}

000b521a <_ZN9USBSerial17availableForWriteEv>:
{
   b521a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b521c:	7c00      	ldrb	r0, [r0, #16]
   b521e:	f7ff f8b1 	bl	b4384 <HAL_USB_USART_Available_Data_For_Write>
}
   b5222:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5226:	bd08      	pop	{r3, pc}

000b5228 <_ZN9USBSerial9availableEv>:
{
   b5228:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b522a:	7c00      	ldrb	r0, [r0, #16]
   b522c:	f7ff f8a2 	bl	b4374 <HAL_USB_USART_Available_Data>
}
   b5230:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5234:	bd08      	pop	{r3, pc}

000b5236 <_ZN9USBSerial5writeEh>:
{
   b5236:	b513      	push	{r0, r1, r4, lr}
   b5238:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b523a:	7c00      	ldrb	r0, [r0, #16]
{
   b523c:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b523e:	f7ff f8a1 	bl	b4384 <HAL_USB_USART_Available_Data_For_Write>
   b5242:	2800      	cmp	r0, #0
   b5244:	9901      	ldr	r1, [sp, #4]
   b5246:	dc01      	bgt.n	b524c <_ZN9USBSerial5writeEh+0x16>
   b5248:	7c60      	ldrb	r0, [r4, #17]
   b524a:	b120      	cbz	r0, b5256 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b524c:	7c20      	ldrb	r0, [r4, #16]
   b524e:	f7ff f8a9 	bl	b43a4 <HAL_USB_USART_Send_Data>
   b5252:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b5256:	b002      	add	sp, #8
   b5258:	bd10      	pop	{r4, pc}

000b525a <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b525a:	7c00      	ldrb	r0, [r0, #16]
   b525c:	f7ff b8aa 	b.w	b43b4 <HAL_USB_USART_Flush_Data>

000b5260 <_ZN9USBSerialD0Ev>:
   b5260:	b510      	push	{r4, lr}
   b5262:	2114      	movs	r1, #20
   b5264:	4604      	mov	r4, r0
   b5266:	f7fe ff1a 	bl	b409e <_ZdlPvj>
   b526a:	4620      	mov	r0, r4
   b526c:	bd10      	pop	{r4, pc}
	...

000b5270 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b5270:	b510      	push	{r4, lr}
   b5272:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5276:	4604      	mov	r4, r0
   b5278:	4608      	mov	r0, r1
   b527a:	2100      	movs	r1, #0
   b527c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b5280:	4b04      	ldr	r3, [pc, #16]	; (b5294 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b5282:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b5284:	2301      	movs	r3, #1
  _serial = serial;
   b5286:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b5288:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b528a:	4611      	mov	r1, r2
   b528c:	f7ff f86a 	bl	b4364 <HAL_USB_USART_Init>
}
   b5290:	4620      	mov	r0, r4
   b5292:	bd10      	pop	{r4, pc}
   b5294:	000b7fa8 	.word	0x000b7fa8

000b5298 <_Z19acquireSerialBufferv>:
{
   b5298:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b529a:	2214      	movs	r2, #20
{
   b529c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b529e:	2100      	movs	r1, #0
   b52a0:	f000 fe05 	bl	b5eae <memset>
}
   b52a4:	4620      	mov	r0, r4
   b52a6:	bd10      	pop	{r4, pc}

000b52a8 <_Z16_fetch_usbserialv>:
{
   b52a8:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b52aa:	4c0f      	ldr	r4, [pc, #60]	; (b52e8 <_Z16_fetch_usbserialv+0x40>)
{
   b52ac:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b52ae:	a803      	add	r0, sp, #12
   b52b0:	f7ff fff2 	bl	b5298 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b52b4:	7821      	ldrb	r1, [r4, #0]
   b52b6:	f3bf 8f5b 	dmb	ish
   b52ba:	f011 0101 	ands.w	r1, r1, #1
   b52be:	d10f      	bne.n	b52e0 <_Z16_fetch_usbserialv+0x38>
   b52c0:	4620      	mov	r0, r4
   b52c2:	9101      	str	r1, [sp, #4]
   b52c4:	f7fe feed 	bl	b40a2 <__cxa_guard_acquire>
   b52c8:	9901      	ldr	r1, [sp, #4]
   b52ca:	b148      	cbz	r0, b52e0 <_Z16_fetch_usbserialv+0x38>
   b52cc:	aa03      	add	r2, sp, #12
   b52ce:	4807      	ldr	r0, [pc, #28]	; (b52ec <_Z16_fetch_usbserialv+0x44>)
   b52d0:	f7ff ffce 	bl	b5270 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b52d4:	4620      	mov	r0, r4
   b52d6:	f7fe fee9 	bl	b40ac <__cxa_guard_release>
   b52da:	4805      	ldr	r0, [pc, #20]	; (b52f0 <_Z16_fetch_usbserialv+0x48>)
   b52dc:	f000 fdd0 	bl	b5e80 <atexit>
	return _usbserial;
}
   b52e0:	4802      	ldr	r0, [pc, #8]	; (b52ec <_Z16_fetch_usbserialv+0x44>)
   b52e2:	b008      	add	sp, #32
   b52e4:	bd10      	pop	{r4, pc}
   b52e6:	bf00      	nop
   b52e8:	2003e720 	.word	0x2003e720
   b52ec:	2003e724 	.word	0x2003e724
   b52f0:	000b51f7 	.word	0x000b51f7

000b52f4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b52f4:	4b01      	ldr	r3, [pc, #4]	; (b52fc <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b52f6:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b52f8:	4770      	bx	lr
   b52fa:	bf00      	nop
   b52fc:	2003e4bc 	.word	0x2003e4bc

000b5300 <serialEventRun>:
{
   b5300:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b5302:	4b0b      	ldr	r3, [pc, #44]	; (b5330 <serialEventRun+0x30>)
   b5304:	b143      	cbz	r3, b5318 <serialEventRun+0x18>
   b5306:	f7ff ffcf 	bl	b52a8 <_Z16_fetch_usbserialv>
   b530a:	6803      	ldr	r3, [r0, #0]
   b530c:	691b      	ldr	r3, [r3, #16]
   b530e:	4798      	blx	r3
   b5310:	2800      	cmp	r0, #0
   b5312:	dd01      	ble.n	b5318 <serialEventRun+0x18>
        serialEvent();
   b5314:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b5318:	4b06      	ldr	r3, [pc, #24]	; (b5334 <serialEventRun+0x34>)
   b531a:	b143      	cbz	r3, b532e <serialEventRun+0x2e>
   b531c:	f000 f8a2 	bl	b5464 <_Z22__fetch_global_Serial1v>
   b5320:	6803      	ldr	r3, [r0, #0]
   b5322:	691b      	ldr	r3, [r3, #16]
   b5324:	4798      	blx	r3
   b5326:	2800      	cmp	r0, #0
   b5328:	dd01      	ble.n	b532e <serialEventRun+0x2e>
        serialEvent1();
   b532a:	f3af 8000 	nop.w
}
   b532e:	bd08      	pop	{r3, pc}
	...

000b5338 <_post_loop>:
{
   b5338:	b508      	push	{r3, lr}
	serialEventRun();
   b533a:	f7ff ffe1 	bl	b5300 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b533e:	f7fe ffa9 	bl	b4294 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b5342:	4b01      	ldr	r3, [pc, #4]	; (b5348 <_post_loop+0x10>)
   b5344:	6018      	str	r0, [r3, #0]
}
   b5346:	bd08      	pop	{r3, pc}
   b5348:	2003e740 	.word	0x2003e740

000b534c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b534c:	4805      	ldr	r0, [pc, #20]	; (b5364 <_Z33system_initialize_user_backup_ramv+0x18>)
   b534e:	4a06      	ldr	r2, [pc, #24]	; (b5368 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b5350:	4906      	ldr	r1, [pc, #24]	; (b536c <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b5352:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b5354:	1a12      	subs	r2, r2, r0
   b5356:	f000 fd9c 	bl	b5e92 <memcpy>
    __backup_sram_signature = signature;
   b535a:	4b05      	ldr	r3, [pc, #20]	; (b5370 <_Z33system_initialize_user_backup_ramv+0x24>)
   b535c:	4a05      	ldr	r2, [pc, #20]	; (b5374 <_Z33system_initialize_user_backup_ramv+0x28>)
   b535e:	601a      	str	r2, [r3, #0]
}
   b5360:	bd08      	pop	{r3, pc}
   b5362:	bf00      	nop
   b5364:	2003f400 	.word	0x2003f400
   b5368:	2003f404 	.word	0x2003f404
   b536c:	000b83d4 	.word	0x000b83d4
   b5370:	2003f400 	.word	0x2003f400
   b5374:	9a271c1e 	.word	0x9a271c1e

000b5378 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b5378:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b537a:	2300      	movs	r3, #0
   b537c:	9300      	str	r3, [sp, #0]
   b537e:	461a      	mov	r2, r3
   b5380:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b5384:	f7ff f850 	bl	b4428 <system_ctrl_set_result>
}
   b5388:	b003      	add	sp, #12
   b538a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b5390 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b5390:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b5392:	8843      	ldrh	r3, [r0, #2]
   b5394:	2b0a      	cmp	r3, #10
   b5396:	d008      	beq.n	b53aa <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b5398:	2b50      	cmp	r3, #80	; 0x50
   b539a:	d10b      	bne.n	b53b4 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b539c:	4b09      	ldr	r3, [pc, #36]	; (b53c4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b539e:	681b      	ldr	r3, [r3, #0]
   b53a0:	b14b      	cbz	r3, b53b6 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b53a2:	b003      	add	sp, #12
   b53a4:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b53a8:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b53aa:	f7ff ffe5 	bl	b5378 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b53ae:	b003      	add	sp, #12
   b53b0:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b53b4:	2300      	movs	r3, #0
   b53b6:	9300      	str	r3, [sp, #0]
   b53b8:	461a      	mov	r2, r3
   b53ba:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b53be:	f7ff f833 	bl	b4428 <system_ctrl_set_result>
}
   b53c2:	e7f4      	b.n	b53ae <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b53c4:	2003e73c 	.word	0x2003e73c

000b53c8 <module_user_init_hook>:
{
   b53c8:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b53ca:	4812      	ldr	r0, [pc, #72]	; (b5414 <module_user_init_hook+0x4c>)
   b53cc:	2100      	movs	r1, #0
   b53ce:	f7ff f8e5 	bl	b459c <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b53d2:	4b11      	ldr	r3, [pc, #68]	; (b5418 <module_user_init_hook+0x50>)
   b53d4:	681a      	ldr	r2, [r3, #0]
   b53d6:	4b11      	ldr	r3, [pc, #68]	; (b541c <module_user_init_hook+0x54>)
   b53d8:	429a      	cmp	r2, r3
   b53da:	4b11      	ldr	r3, [pc, #68]	; (b5420 <module_user_init_hook+0x58>)
   b53dc:	bf0c      	ite	eq
   b53de:	2201      	moveq	r2, #1
   b53e0:	2200      	movne	r2, #0
   b53e2:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b53e4:	d001      	beq.n	b53ea <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b53e6:	f7ff ffb1 	bl	b534c <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b53ea:	f7fe ff4b 	bl	b4284 <HAL_RNG_GetRandomNumber>
   b53ee:	4604      	mov	r4, r0
    srand(seed);
   b53f0:	f000 fd66 	bl	b5ec0 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b53f4:	4b0b      	ldr	r3, [pc, #44]	; (b5424 <module_user_init_hook+0x5c>)
   b53f6:	b113      	cbz	r3, b53fe <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b53f8:	4620      	mov	r0, r4
   b53fa:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b53fe:	2100      	movs	r1, #0
   b5400:	4808      	ldr	r0, [pc, #32]	; (b5424 <module_user_init_hook+0x5c>)
   b5402:	f7ff f82b 	bl	b445c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b5406:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b540a:	4807      	ldr	r0, [pc, #28]	; (b5428 <module_user_init_hook+0x60>)
   b540c:	2100      	movs	r1, #0
   b540e:	f7ff b801 	b.w	b4414 <system_ctrl_set_app_request_handler>
   b5412:	bf00      	nop
   b5414:	000b52f5 	.word	0x000b52f5
   b5418:	2003f400 	.word	0x2003f400
   b541c:	9a271c1e 	.word	0x9a271c1e
   b5420:	2003e738 	.word	0x2003e738
   b5424:	00000000 	.word	0x00000000
   b5428:	000b5391 	.word	0x000b5391

000b542c <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b542c:	4770      	bx	lr
	...

000b5430 <_Z20acquireSerial1Bufferv>:
{
   b5430:	b538      	push	{r3, r4, r5, lr}
   b5432:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b5434:	2514      	movs	r5, #20
   b5436:	462a      	mov	r2, r5
   b5438:	2100      	movs	r1, #0
   b543a:	f000 fd38 	bl	b5eae <memset>
   b543e:	8025      	strh	r5, [r4, #0]
   b5440:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5442:	4907      	ldr	r1, [pc, #28]	; (b5460 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b5444:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5446:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b5448:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b544a:	f000 f82f 	bl	b54ac <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b544e:	4904      	ldr	r1, [pc, #16]	; (b5460 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b5450:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5452:	4628      	mov	r0, r5
   b5454:	f000 f82a 	bl	b54ac <_ZnajRKSt9nothrow_t>
    };
   b5458:	60e0      	str	r0, [r4, #12]
}
   b545a:	4620      	mov	r0, r4
   b545c:	bd38      	pop	{r3, r4, r5, pc}
   b545e:	bf00      	nop
   b5460:	000b7fd0 	.word	0x000b7fd0

000b5464 <_Z22__fetch_global_Serial1v>:
{
   b5464:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b5466:	4d0e      	ldr	r5, [pc, #56]	; (b54a0 <_Z22__fetch_global_Serial1v+0x3c>)
   b5468:	7829      	ldrb	r1, [r5, #0]
   b546a:	f3bf 8f5b 	dmb	ish
   b546e:	f011 0401 	ands.w	r4, r1, #1
{
   b5472:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b5474:	d111      	bne.n	b549a <_Z22__fetch_global_Serial1v+0x36>
   b5476:	4628      	mov	r0, r5
   b5478:	f7fe fe13 	bl	b40a2 <__cxa_guard_acquire>
   b547c:	b168      	cbz	r0, b549a <_Z22__fetch_global_Serial1v+0x36>
   b547e:	a801      	add	r0, sp, #4
   b5480:	f7ff ffd6 	bl	b5430 <_Z20acquireSerial1Bufferv>
   b5484:	aa01      	add	r2, sp, #4
   b5486:	4621      	mov	r1, r4
   b5488:	4806      	ldr	r0, [pc, #24]	; (b54a4 <_Z22__fetch_global_Serial1v+0x40>)
   b548a:	f7ff fe97 	bl	b51bc <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b548e:	4628      	mov	r0, r5
   b5490:	f7fe fe0c 	bl	b40ac <__cxa_guard_release>
   b5494:	4804      	ldr	r0, [pc, #16]	; (b54a8 <_Z22__fetch_global_Serial1v+0x44>)
   b5496:	f000 fcf3 	bl	b5e80 <atexit>
    return serial1;
}
   b549a:	4802      	ldr	r0, [pc, #8]	; (b54a4 <_Z22__fetch_global_Serial1v+0x40>)
   b549c:	b007      	add	sp, #28
   b549e:	bd30      	pop	{r4, r5, pc}
   b54a0:	2003e744 	.word	0x2003e744
   b54a4:	2003e748 	.word	0x2003e748
   b54a8:	000b542d 	.word	0x000b542d

000b54ac <_ZnajRKSt9nothrow_t>:
   b54ac:	f7fe bdf5 	b.w	b409a <_Znaj>

000b54b0 <_ZSt25__throw_bad_function_callv>:
   b54b0:	b508      	push	{r3, lr}
   b54b2:	f7ff f85b 	bl	b456c <abort>
	...

000b54b8 <__aeabi_drsub>:
   b54b8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b54bc:	e002      	b.n	b54c4 <__adddf3>
   b54be:	bf00      	nop

000b54c0 <__aeabi_dsub>:
   b54c0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b54c4 <__adddf3>:
   b54c4:	b530      	push	{r4, r5, lr}
   b54c6:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b54ca:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b54ce:	ea94 0f05 	teq	r4, r5
   b54d2:	bf08      	it	eq
   b54d4:	ea90 0f02 	teqeq	r0, r2
   b54d8:	bf1f      	itttt	ne
   b54da:	ea54 0c00 	orrsne.w	ip, r4, r0
   b54de:	ea55 0c02 	orrsne.w	ip, r5, r2
   b54e2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b54e6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b54ea:	f000 80e2 	beq.w	b56b2 <__adddf3+0x1ee>
   b54ee:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b54f2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b54f6:	bfb8      	it	lt
   b54f8:	426d      	neglt	r5, r5
   b54fa:	dd0c      	ble.n	b5516 <__adddf3+0x52>
   b54fc:	442c      	add	r4, r5
   b54fe:	ea80 0202 	eor.w	r2, r0, r2
   b5502:	ea81 0303 	eor.w	r3, r1, r3
   b5506:	ea82 0000 	eor.w	r0, r2, r0
   b550a:	ea83 0101 	eor.w	r1, r3, r1
   b550e:	ea80 0202 	eor.w	r2, r0, r2
   b5512:	ea81 0303 	eor.w	r3, r1, r3
   b5516:	2d36      	cmp	r5, #54	; 0x36
   b5518:	bf88      	it	hi
   b551a:	bd30      	pophi	{r4, r5, pc}
   b551c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b5520:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b5524:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b5528:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b552c:	d002      	beq.n	b5534 <__adddf3+0x70>
   b552e:	4240      	negs	r0, r0
   b5530:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b5534:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b5538:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b553c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b5540:	d002      	beq.n	b5548 <__adddf3+0x84>
   b5542:	4252      	negs	r2, r2
   b5544:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b5548:	ea94 0f05 	teq	r4, r5
   b554c:	f000 80a7 	beq.w	b569e <__adddf3+0x1da>
   b5550:	f1a4 0401 	sub.w	r4, r4, #1
   b5554:	f1d5 0e20 	rsbs	lr, r5, #32
   b5558:	db0d      	blt.n	b5576 <__adddf3+0xb2>
   b555a:	fa02 fc0e 	lsl.w	ip, r2, lr
   b555e:	fa22 f205 	lsr.w	r2, r2, r5
   b5562:	1880      	adds	r0, r0, r2
   b5564:	f141 0100 	adc.w	r1, r1, #0
   b5568:	fa03 f20e 	lsl.w	r2, r3, lr
   b556c:	1880      	adds	r0, r0, r2
   b556e:	fa43 f305 	asr.w	r3, r3, r5
   b5572:	4159      	adcs	r1, r3
   b5574:	e00e      	b.n	b5594 <__adddf3+0xd0>
   b5576:	f1a5 0520 	sub.w	r5, r5, #32
   b557a:	f10e 0e20 	add.w	lr, lr, #32
   b557e:	2a01      	cmp	r2, #1
   b5580:	fa03 fc0e 	lsl.w	ip, r3, lr
   b5584:	bf28      	it	cs
   b5586:	f04c 0c02 	orrcs.w	ip, ip, #2
   b558a:	fa43 f305 	asr.w	r3, r3, r5
   b558e:	18c0      	adds	r0, r0, r3
   b5590:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b5594:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b5598:	d507      	bpl.n	b55aa <__adddf3+0xe6>
   b559a:	f04f 0e00 	mov.w	lr, #0
   b559e:	f1dc 0c00 	rsbs	ip, ip, #0
   b55a2:	eb7e 0000 	sbcs.w	r0, lr, r0
   b55a6:	eb6e 0101 	sbc.w	r1, lr, r1
   b55aa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b55ae:	d31b      	bcc.n	b55e8 <__adddf3+0x124>
   b55b0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b55b4:	d30c      	bcc.n	b55d0 <__adddf3+0x10c>
   b55b6:	0849      	lsrs	r1, r1, #1
   b55b8:	ea5f 0030 	movs.w	r0, r0, rrx
   b55bc:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b55c0:	f104 0401 	add.w	r4, r4, #1
   b55c4:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b55c8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b55cc:	f080 809a 	bcs.w	b5704 <__adddf3+0x240>
   b55d0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b55d4:	bf08      	it	eq
   b55d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b55da:	f150 0000 	adcs.w	r0, r0, #0
   b55de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b55e2:	ea41 0105 	orr.w	r1, r1, r5
   b55e6:	bd30      	pop	{r4, r5, pc}
   b55e8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b55ec:	4140      	adcs	r0, r0
   b55ee:	eb41 0101 	adc.w	r1, r1, r1
   b55f2:	3c01      	subs	r4, #1
   b55f4:	bf28      	it	cs
   b55f6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b55fa:	d2e9      	bcs.n	b55d0 <__adddf3+0x10c>
   b55fc:	f091 0f00 	teq	r1, #0
   b5600:	bf04      	itt	eq
   b5602:	4601      	moveq	r1, r0
   b5604:	2000      	moveq	r0, #0
   b5606:	fab1 f381 	clz	r3, r1
   b560a:	bf08      	it	eq
   b560c:	3320      	addeq	r3, #32
   b560e:	f1a3 030b 	sub.w	r3, r3, #11
   b5612:	f1b3 0220 	subs.w	r2, r3, #32
   b5616:	da0c      	bge.n	b5632 <__adddf3+0x16e>
   b5618:	320c      	adds	r2, #12
   b561a:	dd08      	ble.n	b562e <__adddf3+0x16a>
   b561c:	f102 0c14 	add.w	ip, r2, #20
   b5620:	f1c2 020c 	rsb	r2, r2, #12
   b5624:	fa01 f00c 	lsl.w	r0, r1, ip
   b5628:	fa21 f102 	lsr.w	r1, r1, r2
   b562c:	e00c      	b.n	b5648 <__adddf3+0x184>
   b562e:	f102 0214 	add.w	r2, r2, #20
   b5632:	bfd8      	it	le
   b5634:	f1c2 0c20 	rsble	ip, r2, #32
   b5638:	fa01 f102 	lsl.w	r1, r1, r2
   b563c:	fa20 fc0c 	lsr.w	ip, r0, ip
   b5640:	bfdc      	itt	le
   b5642:	ea41 010c 	orrle.w	r1, r1, ip
   b5646:	4090      	lslle	r0, r2
   b5648:	1ae4      	subs	r4, r4, r3
   b564a:	bfa2      	ittt	ge
   b564c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b5650:	4329      	orrge	r1, r5
   b5652:	bd30      	popge	{r4, r5, pc}
   b5654:	ea6f 0404 	mvn.w	r4, r4
   b5658:	3c1f      	subs	r4, #31
   b565a:	da1c      	bge.n	b5696 <__adddf3+0x1d2>
   b565c:	340c      	adds	r4, #12
   b565e:	dc0e      	bgt.n	b567e <__adddf3+0x1ba>
   b5660:	f104 0414 	add.w	r4, r4, #20
   b5664:	f1c4 0220 	rsb	r2, r4, #32
   b5668:	fa20 f004 	lsr.w	r0, r0, r4
   b566c:	fa01 f302 	lsl.w	r3, r1, r2
   b5670:	ea40 0003 	orr.w	r0, r0, r3
   b5674:	fa21 f304 	lsr.w	r3, r1, r4
   b5678:	ea45 0103 	orr.w	r1, r5, r3
   b567c:	bd30      	pop	{r4, r5, pc}
   b567e:	f1c4 040c 	rsb	r4, r4, #12
   b5682:	f1c4 0220 	rsb	r2, r4, #32
   b5686:	fa20 f002 	lsr.w	r0, r0, r2
   b568a:	fa01 f304 	lsl.w	r3, r1, r4
   b568e:	ea40 0003 	orr.w	r0, r0, r3
   b5692:	4629      	mov	r1, r5
   b5694:	bd30      	pop	{r4, r5, pc}
   b5696:	fa21 f004 	lsr.w	r0, r1, r4
   b569a:	4629      	mov	r1, r5
   b569c:	bd30      	pop	{r4, r5, pc}
   b569e:	f094 0f00 	teq	r4, #0
   b56a2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b56a6:	bf06      	itte	eq
   b56a8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b56ac:	3401      	addeq	r4, #1
   b56ae:	3d01      	subne	r5, #1
   b56b0:	e74e      	b.n	b5550 <__adddf3+0x8c>
   b56b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b56b6:	bf18      	it	ne
   b56b8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b56bc:	d029      	beq.n	b5712 <__adddf3+0x24e>
   b56be:	ea94 0f05 	teq	r4, r5
   b56c2:	bf08      	it	eq
   b56c4:	ea90 0f02 	teqeq	r0, r2
   b56c8:	d005      	beq.n	b56d6 <__adddf3+0x212>
   b56ca:	ea54 0c00 	orrs.w	ip, r4, r0
   b56ce:	bf04      	itt	eq
   b56d0:	4619      	moveq	r1, r3
   b56d2:	4610      	moveq	r0, r2
   b56d4:	bd30      	pop	{r4, r5, pc}
   b56d6:	ea91 0f03 	teq	r1, r3
   b56da:	bf1e      	ittt	ne
   b56dc:	2100      	movne	r1, #0
   b56de:	2000      	movne	r0, #0
   b56e0:	bd30      	popne	{r4, r5, pc}
   b56e2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b56e6:	d105      	bne.n	b56f4 <__adddf3+0x230>
   b56e8:	0040      	lsls	r0, r0, #1
   b56ea:	4149      	adcs	r1, r1
   b56ec:	bf28      	it	cs
   b56ee:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b56f2:	bd30      	pop	{r4, r5, pc}
   b56f4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b56f8:	bf3c      	itt	cc
   b56fa:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b56fe:	bd30      	popcc	{r4, r5, pc}
   b5700:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b5704:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b5708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b570c:	f04f 0000 	mov.w	r0, #0
   b5710:	bd30      	pop	{r4, r5, pc}
   b5712:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b5716:	bf1a      	itte	ne
   b5718:	4619      	movne	r1, r3
   b571a:	4610      	movne	r0, r2
   b571c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b5720:	bf1c      	itt	ne
   b5722:	460b      	movne	r3, r1
   b5724:	4602      	movne	r2, r0
   b5726:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b572a:	bf06      	itte	eq
   b572c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b5730:	ea91 0f03 	teqeq	r1, r3
   b5734:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b5738:	bd30      	pop	{r4, r5, pc}
   b573a:	bf00      	nop

000b573c <__aeabi_ui2d>:
   b573c:	f090 0f00 	teq	r0, #0
   b5740:	bf04      	itt	eq
   b5742:	2100      	moveq	r1, #0
   b5744:	4770      	bxeq	lr
   b5746:	b530      	push	{r4, r5, lr}
   b5748:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b574c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b5750:	f04f 0500 	mov.w	r5, #0
   b5754:	f04f 0100 	mov.w	r1, #0
   b5758:	e750      	b.n	b55fc <__adddf3+0x138>
   b575a:	bf00      	nop

000b575c <__aeabi_i2d>:
   b575c:	f090 0f00 	teq	r0, #0
   b5760:	bf04      	itt	eq
   b5762:	2100      	moveq	r1, #0
   b5764:	4770      	bxeq	lr
   b5766:	b530      	push	{r4, r5, lr}
   b5768:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b576c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b5770:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b5774:	bf48      	it	mi
   b5776:	4240      	negmi	r0, r0
   b5778:	f04f 0100 	mov.w	r1, #0
   b577c:	e73e      	b.n	b55fc <__adddf3+0x138>
   b577e:	bf00      	nop

000b5780 <__aeabi_f2d>:
   b5780:	0042      	lsls	r2, r0, #1
   b5782:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b5786:	ea4f 0131 	mov.w	r1, r1, rrx
   b578a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b578e:	bf1f      	itttt	ne
   b5790:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b5794:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b5798:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b579c:	4770      	bxne	lr
   b579e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b57a2:	bf08      	it	eq
   b57a4:	4770      	bxeq	lr
   b57a6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b57aa:	bf04      	itt	eq
   b57ac:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b57b0:	4770      	bxeq	lr
   b57b2:	b530      	push	{r4, r5, lr}
   b57b4:	f44f 7460 	mov.w	r4, #896	; 0x380
   b57b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b57bc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b57c0:	e71c      	b.n	b55fc <__adddf3+0x138>
   b57c2:	bf00      	nop

000b57c4 <__aeabi_ul2d>:
   b57c4:	ea50 0201 	orrs.w	r2, r0, r1
   b57c8:	bf08      	it	eq
   b57ca:	4770      	bxeq	lr
   b57cc:	b530      	push	{r4, r5, lr}
   b57ce:	f04f 0500 	mov.w	r5, #0
   b57d2:	e00a      	b.n	b57ea <__aeabi_l2d+0x16>

000b57d4 <__aeabi_l2d>:
   b57d4:	ea50 0201 	orrs.w	r2, r0, r1
   b57d8:	bf08      	it	eq
   b57da:	4770      	bxeq	lr
   b57dc:	b530      	push	{r4, r5, lr}
   b57de:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b57e2:	d502      	bpl.n	b57ea <__aeabi_l2d+0x16>
   b57e4:	4240      	negs	r0, r0
   b57e6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b57ea:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b57ee:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b57f2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b57f6:	f43f aed8 	beq.w	b55aa <__adddf3+0xe6>
   b57fa:	f04f 0203 	mov.w	r2, #3
   b57fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b5802:	bf18      	it	ne
   b5804:	3203      	addne	r2, #3
   b5806:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b580a:	bf18      	it	ne
   b580c:	3203      	addne	r2, #3
   b580e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b5812:	f1c2 0320 	rsb	r3, r2, #32
   b5816:	fa00 fc03 	lsl.w	ip, r0, r3
   b581a:	fa20 f002 	lsr.w	r0, r0, r2
   b581e:	fa01 fe03 	lsl.w	lr, r1, r3
   b5822:	ea40 000e 	orr.w	r0, r0, lr
   b5826:	fa21 f102 	lsr.w	r1, r1, r2
   b582a:	4414      	add	r4, r2
   b582c:	e6bd      	b.n	b55aa <__adddf3+0xe6>
   b582e:	bf00      	nop

000b5830 <__aeabi_dmul>:
   b5830:	b570      	push	{r4, r5, r6, lr}
   b5832:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b5836:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b583a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b583e:	bf1d      	ittte	ne
   b5840:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b5844:	ea94 0f0c 	teqne	r4, ip
   b5848:	ea95 0f0c 	teqne	r5, ip
   b584c:	f000 f8de 	bleq	b5a0c <__aeabi_dmul+0x1dc>
   b5850:	442c      	add	r4, r5
   b5852:	ea81 0603 	eor.w	r6, r1, r3
   b5856:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b585a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b585e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b5862:	bf18      	it	ne
   b5864:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b5868:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b586c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b5870:	d038      	beq.n	b58e4 <__aeabi_dmul+0xb4>
   b5872:	fba0 ce02 	umull	ip, lr, r0, r2
   b5876:	f04f 0500 	mov.w	r5, #0
   b587a:	fbe1 e502 	umlal	lr, r5, r1, r2
   b587e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b5882:	fbe0 e503 	umlal	lr, r5, r0, r3
   b5886:	f04f 0600 	mov.w	r6, #0
   b588a:	fbe1 5603 	umlal	r5, r6, r1, r3
   b588e:	f09c 0f00 	teq	ip, #0
   b5892:	bf18      	it	ne
   b5894:	f04e 0e01 	orrne.w	lr, lr, #1
   b5898:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b589c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b58a0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b58a4:	d204      	bcs.n	b58b0 <__aeabi_dmul+0x80>
   b58a6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b58aa:	416d      	adcs	r5, r5
   b58ac:	eb46 0606 	adc.w	r6, r6, r6
   b58b0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b58b4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b58b8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b58bc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b58c0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b58c4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b58c8:	bf88      	it	hi
   b58ca:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b58ce:	d81e      	bhi.n	b590e <__aeabi_dmul+0xde>
   b58d0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b58d4:	bf08      	it	eq
   b58d6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b58da:	f150 0000 	adcs.w	r0, r0, #0
   b58de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b58e2:	bd70      	pop	{r4, r5, r6, pc}
   b58e4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b58e8:	ea46 0101 	orr.w	r1, r6, r1
   b58ec:	ea40 0002 	orr.w	r0, r0, r2
   b58f0:	ea81 0103 	eor.w	r1, r1, r3
   b58f4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b58f8:	bfc2      	ittt	gt
   b58fa:	ebd4 050c 	rsbsgt	r5, r4, ip
   b58fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b5902:	bd70      	popgt	{r4, r5, r6, pc}
   b5904:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b5908:	f04f 0e00 	mov.w	lr, #0
   b590c:	3c01      	subs	r4, #1
   b590e:	f300 80ab 	bgt.w	b5a68 <__aeabi_dmul+0x238>
   b5912:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b5916:	bfde      	ittt	le
   b5918:	2000      	movle	r0, #0
   b591a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b591e:	bd70      	pople	{r4, r5, r6, pc}
   b5920:	f1c4 0400 	rsb	r4, r4, #0
   b5924:	3c20      	subs	r4, #32
   b5926:	da35      	bge.n	b5994 <__aeabi_dmul+0x164>
   b5928:	340c      	adds	r4, #12
   b592a:	dc1b      	bgt.n	b5964 <__aeabi_dmul+0x134>
   b592c:	f104 0414 	add.w	r4, r4, #20
   b5930:	f1c4 0520 	rsb	r5, r4, #32
   b5934:	fa00 f305 	lsl.w	r3, r0, r5
   b5938:	fa20 f004 	lsr.w	r0, r0, r4
   b593c:	fa01 f205 	lsl.w	r2, r1, r5
   b5940:	ea40 0002 	orr.w	r0, r0, r2
   b5944:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b5948:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b594c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b5950:	fa21 f604 	lsr.w	r6, r1, r4
   b5954:	eb42 0106 	adc.w	r1, r2, r6
   b5958:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b595c:	bf08      	it	eq
   b595e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b5962:	bd70      	pop	{r4, r5, r6, pc}
   b5964:	f1c4 040c 	rsb	r4, r4, #12
   b5968:	f1c4 0520 	rsb	r5, r4, #32
   b596c:	fa00 f304 	lsl.w	r3, r0, r4
   b5970:	fa20 f005 	lsr.w	r0, r0, r5
   b5974:	fa01 f204 	lsl.w	r2, r1, r4
   b5978:	ea40 0002 	orr.w	r0, r0, r2
   b597c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b5980:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b5984:	f141 0100 	adc.w	r1, r1, #0
   b5988:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b598c:	bf08      	it	eq
   b598e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b5992:	bd70      	pop	{r4, r5, r6, pc}
   b5994:	f1c4 0520 	rsb	r5, r4, #32
   b5998:	fa00 f205 	lsl.w	r2, r0, r5
   b599c:	ea4e 0e02 	orr.w	lr, lr, r2
   b59a0:	fa20 f304 	lsr.w	r3, r0, r4
   b59a4:	fa01 f205 	lsl.w	r2, r1, r5
   b59a8:	ea43 0302 	orr.w	r3, r3, r2
   b59ac:	fa21 f004 	lsr.w	r0, r1, r4
   b59b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b59b4:	fa21 f204 	lsr.w	r2, r1, r4
   b59b8:	ea20 0002 	bic.w	r0, r0, r2
   b59bc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b59c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b59c4:	bf08      	it	eq
   b59c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b59ca:	bd70      	pop	{r4, r5, r6, pc}
   b59cc:	f094 0f00 	teq	r4, #0
   b59d0:	d10f      	bne.n	b59f2 <__aeabi_dmul+0x1c2>
   b59d2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b59d6:	0040      	lsls	r0, r0, #1
   b59d8:	eb41 0101 	adc.w	r1, r1, r1
   b59dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b59e0:	bf08      	it	eq
   b59e2:	3c01      	subeq	r4, #1
   b59e4:	d0f7      	beq.n	b59d6 <__aeabi_dmul+0x1a6>
   b59e6:	ea41 0106 	orr.w	r1, r1, r6
   b59ea:	f095 0f00 	teq	r5, #0
   b59ee:	bf18      	it	ne
   b59f0:	4770      	bxne	lr
   b59f2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b59f6:	0052      	lsls	r2, r2, #1
   b59f8:	eb43 0303 	adc.w	r3, r3, r3
   b59fc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b5a00:	bf08      	it	eq
   b5a02:	3d01      	subeq	r5, #1
   b5a04:	d0f7      	beq.n	b59f6 <__aeabi_dmul+0x1c6>
   b5a06:	ea43 0306 	orr.w	r3, r3, r6
   b5a0a:	4770      	bx	lr
   b5a0c:	ea94 0f0c 	teq	r4, ip
   b5a10:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b5a14:	bf18      	it	ne
   b5a16:	ea95 0f0c 	teqne	r5, ip
   b5a1a:	d00c      	beq.n	b5a36 <__aeabi_dmul+0x206>
   b5a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b5a20:	bf18      	it	ne
   b5a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b5a26:	d1d1      	bne.n	b59cc <__aeabi_dmul+0x19c>
   b5a28:	ea81 0103 	eor.w	r1, r1, r3
   b5a2c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b5a30:	f04f 0000 	mov.w	r0, #0
   b5a34:	bd70      	pop	{r4, r5, r6, pc}
   b5a36:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b5a3a:	bf06      	itte	eq
   b5a3c:	4610      	moveq	r0, r2
   b5a3e:	4619      	moveq	r1, r3
   b5a40:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b5a44:	d019      	beq.n	b5a7a <__aeabi_dmul+0x24a>
   b5a46:	ea94 0f0c 	teq	r4, ip
   b5a4a:	d102      	bne.n	b5a52 <__aeabi_dmul+0x222>
   b5a4c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b5a50:	d113      	bne.n	b5a7a <__aeabi_dmul+0x24a>
   b5a52:	ea95 0f0c 	teq	r5, ip
   b5a56:	d105      	bne.n	b5a64 <__aeabi_dmul+0x234>
   b5a58:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b5a5c:	bf1c      	itt	ne
   b5a5e:	4610      	movne	r0, r2
   b5a60:	4619      	movne	r1, r3
   b5a62:	d10a      	bne.n	b5a7a <__aeabi_dmul+0x24a>
   b5a64:	ea81 0103 	eor.w	r1, r1, r3
   b5a68:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b5a6c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b5a70:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b5a74:	f04f 0000 	mov.w	r0, #0
   b5a78:	bd70      	pop	{r4, r5, r6, pc}
   b5a7a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b5a7e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b5a82:	bd70      	pop	{r4, r5, r6, pc}

000b5a84 <__aeabi_ddiv>:
   b5a84:	b570      	push	{r4, r5, r6, lr}
   b5a86:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b5a8a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b5a8e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b5a92:	bf1d      	ittte	ne
   b5a94:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b5a98:	ea94 0f0c 	teqne	r4, ip
   b5a9c:	ea95 0f0c 	teqne	r5, ip
   b5aa0:	f000 f8a7 	bleq	b5bf2 <__aeabi_ddiv+0x16e>
   b5aa4:	eba4 0405 	sub.w	r4, r4, r5
   b5aa8:	ea81 0e03 	eor.w	lr, r1, r3
   b5aac:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b5ab0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b5ab4:	f000 8088 	beq.w	b5bc8 <__aeabi_ddiv+0x144>
   b5ab8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b5abc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b5ac0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b5ac4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b5ac8:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b5acc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b5ad0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b5ad4:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b5ad8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b5adc:	429d      	cmp	r5, r3
   b5ade:	bf08      	it	eq
   b5ae0:	4296      	cmpeq	r6, r2
   b5ae2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b5ae6:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b5aea:	d202      	bcs.n	b5af2 <__aeabi_ddiv+0x6e>
   b5aec:	085b      	lsrs	r3, r3, #1
   b5aee:	ea4f 0232 	mov.w	r2, r2, rrx
   b5af2:	1ab6      	subs	r6, r6, r2
   b5af4:	eb65 0503 	sbc.w	r5, r5, r3
   b5af8:	085b      	lsrs	r3, r3, #1
   b5afa:	ea4f 0232 	mov.w	r2, r2, rrx
   b5afe:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b5b02:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b5b06:	ebb6 0e02 	subs.w	lr, r6, r2
   b5b0a:	eb75 0e03 	sbcs.w	lr, r5, r3
   b5b0e:	bf22      	ittt	cs
   b5b10:	1ab6      	subcs	r6, r6, r2
   b5b12:	4675      	movcs	r5, lr
   b5b14:	ea40 000c 	orrcs.w	r0, r0, ip
   b5b18:	085b      	lsrs	r3, r3, #1
   b5b1a:	ea4f 0232 	mov.w	r2, r2, rrx
   b5b1e:	ebb6 0e02 	subs.w	lr, r6, r2
   b5b22:	eb75 0e03 	sbcs.w	lr, r5, r3
   b5b26:	bf22      	ittt	cs
   b5b28:	1ab6      	subcs	r6, r6, r2
   b5b2a:	4675      	movcs	r5, lr
   b5b2c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b5b30:	085b      	lsrs	r3, r3, #1
   b5b32:	ea4f 0232 	mov.w	r2, r2, rrx
   b5b36:	ebb6 0e02 	subs.w	lr, r6, r2
   b5b3a:	eb75 0e03 	sbcs.w	lr, r5, r3
   b5b3e:	bf22      	ittt	cs
   b5b40:	1ab6      	subcs	r6, r6, r2
   b5b42:	4675      	movcs	r5, lr
   b5b44:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b5b48:	085b      	lsrs	r3, r3, #1
   b5b4a:	ea4f 0232 	mov.w	r2, r2, rrx
   b5b4e:	ebb6 0e02 	subs.w	lr, r6, r2
   b5b52:	eb75 0e03 	sbcs.w	lr, r5, r3
   b5b56:	bf22      	ittt	cs
   b5b58:	1ab6      	subcs	r6, r6, r2
   b5b5a:	4675      	movcs	r5, lr
   b5b5c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b5b60:	ea55 0e06 	orrs.w	lr, r5, r6
   b5b64:	d018      	beq.n	b5b98 <__aeabi_ddiv+0x114>
   b5b66:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b5b6a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b5b6e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b5b72:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b5b76:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b5b7a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b5b7e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b5b82:	d1c0      	bne.n	b5b06 <__aeabi_ddiv+0x82>
   b5b84:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b5b88:	d10b      	bne.n	b5ba2 <__aeabi_ddiv+0x11e>
   b5b8a:	ea41 0100 	orr.w	r1, r1, r0
   b5b8e:	f04f 0000 	mov.w	r0, #0
   b5b92:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b5b96:	e7b6      	b.n	b5b06 <__aeabi_ddiv+0x82>
   b5b98:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b5b9c:	bf04      	itt	eq
   b5b9e:	4301      	orreq	r1, r0
   b5ba0:	2000      	moveq	r0, #0
   b5ba2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b5ba6:	bf88      	it	hi
   b5ba8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b5bac:	f63f aeaf 	bhi.w	b590e <__aeabi_dmul+0xde>
   b5bb0:	ebb5 0c03 	subs.w	ip, r5, r3
   b5bb4:	bf04      	itt	eq
   b5bb6:	ebb6 0c02 	subseq.w	ip, r6, r2
   b5bba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b5bbe:	f150 0000 	adcs.w	r0, r0, #0
   b5bc2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b5bc6:	bd70      	pop	{r4, r5, r6, pc}
   b5bc8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b5bcc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b5bd0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b5bd4:	bfc2      	ittt	gt
   b5bd6:	ebd4 050c 	rsbsgt	r5, r4, ip
   b5bda:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b5bde:	bd70      	popgt	{r4, r5, r6, pc}
   b5be0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b5be4:	f04f 0e00 	mov.w	lr, #0
   b5be8:	3c01      	subs	r4, #1
   b5bea:	e690      	b.n	b590e <__aeabi_dmul+0xde>
   b5bec:	ea45 0e06 	orr.w	lr, r5, r6
   b5bf0:	e68d      	b.n	b590e <__aeabi_dmul+0xde>
   b5bf2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b5bf6:	ea94 0f0c 	teq	r4, ip
   b5bfa:	bf08      	it	eq
   b5bfc:	ea95 0f0c 	teqeq	r5, ip
   b5c00:	f43f af3b 	beq.w	b5a7a <__aeabi_dmul+0x24a>
   b5c04:	ea94 0f0c 	teq	r4, ip
   b5c08:	d10a      	bne.n	b5c20 <__aeabi_ddiv+0x19c>
   b5c0a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b5c0e:	f47f af34 	bne.w	b5a7a <__aeabi_dmul+0x24a>
   b5c12:	ea95 0f0c 	teq	r5, ip
   b5c16:	f47f af25 	bne.w	b5a64 <__aeabi_dmul+0x234>
   b5c1a:	4610      	mov	r0, r2
   b5c1c:	4619      	mov	r1, r3
   b5c1e:	e72c      	b.n	b5a7a <__aeabi_dmul+0x24a>
   b5c20:	ea95 0f0c 	teq	r5, ip
   b5c24:	d106      	bne.n	b5c34 <__aeabi_ddiv+0x1b0>
   b5c26:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b5c2a:	f43f aefd 	beq.w	b5a28 <__aeabi_dmul+0x1f8>
   b5c2e:	4610      	mov	r0, r2
   b5c30:	4619      	mov	r1, r3
   b5c32:	e722      	b.n	b5a7a <__aeabi_dmul+0x24a>
   b5c34:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b5c38:	bf18      	it	ne
   b5c3a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b5c3e:	f47f aec5 	bne.w	b59cc <__aeabi_dmul+0x19c>
   b5c42:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b5c46:	f47f af0d 	bne.w	b5a64 <__aeabi_dmul+0x234>
   b5c4a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b5c4e:	f47f aeeb 	bne.w	b5a28 <__aeabi_dmul+0x1f8>
   b5c52:	e712      	b.n	b5a7a <__aeabi_dmul+0x24a>

000b5c54 <__gedf2>:
   b5c54:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   b5c58:	e006      	b.n	b5c68 <__cmpdf2+0x4>
   b5c5a:	bf00      	nop

000b5c5c <__ledf2>:
   b5c5c:	f04f 0c01 	mov.w	ip, #1
   b5c60:	e002      	b.n	b5c68 <__cmpdf2+0x4>
   b5c62:	bf00      	nop

000b5c64 <__cmpdf2>:
   b5c64:	f04f 0c01 	mov.w	ip, #1
   b5c68:	f84d cd04 	str.w	ip, [sp, #-4]!
   b5c6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b5c70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b5c74:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b5c78:	bf18      	it	ne
   b5c7a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   b5c7e:	d01b      	beq.n	b5cb8 <__cmpdf2+0x54>
   b5c80:	b001      	add	sp, #4
   b5c82:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   b5c86:	bf0c      	ite	eq
   b5c88:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   b5c8c:	ea91 0f03 	teqne	r1, r3
   b5c90:	bf02      	ittt	eq
   b5c92:	ea90 0f02 	teqeq	r0, r2
   b5c96:	2000      	moveq	r0, #0
   b5c98:	4770      	bxeq	lr
   b5c9a:	f110 0f00 	cmn.w	r0, #0
   b5c9e:	ea91 0f03 	teq	r1, r3
   b5ca2:	bf58      	it	pl
   b5ca4:	4299      	cmppl	r1, r3
   b5ca6:	bf08      	it	eq
   b5ca8:	4290      	cmpeq	r0, r2
   b5caa:	bf2c      	ite	cs
   b5cac:	17d8      	asrcs	r0, r3, #31
   b5cae:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   b5cb2:	f040 0001 	orr.w	r0, r0, #1
   b5cb6:	4770      	bx	lr
   b5cb8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b5cbc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b5cc0:	d102      	bne.n	b5cc8 <__cmpdf2+0x64>
   b5cc2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b5cc6:	d107      	bne.n	b5cd8 <__cmpdf2+0x74>
   b5cc8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b5ccc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b5cd0:	d1d6      	bne.n	b5c80 <__cmpdf2+0x1c>
   b5cd2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b5cd6:	d0d3      	beq.n	b5c80 <__cmpdf2+0x1c>
   b5cd8:	f85d 0b04 	ldr.w	r0, [sp], #4
   b5cdc:	4770      	bx	lr
   b5cde:	bf00      	nop

000b5ce0 <__aeabi_cdrcmple>:
   b5ce0:	4684      	mov	ip, r0
   b5ce2:	4610      	mov	r0, r2
   b5ce4:	4662      	mov	r2, ip
   b5ce6:	468c      	mov	ip, r1
   b5ce8:	4619      	mov	r1, r3
   b5cea:	4663      	mov	r3, ip
   b5cec:	e000      	b.n	b5cf0 <__aeabi_cdcmpeq>
   b5cee:	bf00      	nop

000b5cf0 <__aeabi_cdcmpeq>:
   b5cf0:	b501      	push	{r0, lr}
   b5cf2:	f7ff ffb7 	bl	b5c64 <__cmpdf2>
   b5cf6:	2800      	cmp	r0, #0
   b5cf8:	bf48      	it	mi
   b5cfa:	f110 0f00 	cmnmi.w	r0, #0
   b5cfe:	bd01      	pop	{r0, pc}

000b5d00 <__aeabi_dcmpeq>:
   b5d00:	f84d ed08 	str.w	lr, [sp, #-8]!
   b5d04:	f7ff fff4 	bl	b5cf0 <__aeabi_cdcmpeq>
   b5d08:	bf0c      	ite	eq
   b5d0a:	2001      	moveq	r0, #1
   b5d0c:	2000      	movne	r0, #0
   b5d0e:	f85d fb08 	ldr.w	pc, [sp], #8
   b5d12:	bf00      	nop

000b5d14 <__aeabi_dcmplt>:
   b5d14:	f84d ed08 	str.w	lr, [sp, #-8]!
   b5d18:	f7ff ffea 	bl	b5cf0 <__aeabi_cdcmpeq>
   b5d1c:	bf34      	ite	cc
   b5d1e:	2001      	movcc	r0, #1
   b5d20:	2000      	movcs	r0, #0
   b5d22:	f85d fb08 	ldr.w	pc, [sp], #8
   b5d26:	bf00      	nop

000b5d28 <__aeabi_dcmple>:
   b5d28:	f84d ed08 	str.w	lr, [sp, #-8]!
   b5d2c:	f7ff ffe0 	bl	b5cf0 <__aeabi_cdcmpeq>
   b5d30:	bf94      	ite	ls
   b5d32:	2001      	movls	r0, #1
   b5d34:	2000      	movhi	r0, #0
   b5d36:	f85d fb08 	ldr.w	pc, [sp], #8
   b5d3a:	bf00      	nop

000b5d3c <__aeabi_dcmpge>:
   b5d3c:	f84d ed08 	str.w	lr, [sp, #-8]!
   b5d40:	f7ff ffce 	bl	b5ce0 <__aeabi_cdrcmple>
   b5d44:	bf94      	ite	ls
   b5d46:	2001      	movls	r0, #1
   b5d48:	2000      	movhi	r0, #0
   b5d4a:	f85d fb08 	ldr.w	pc, [sp], #8
   b5d4e:	bf00      	nop

000b5d50 <__aeabi_dcmpgt>:
   b5d50:	f84d ed08 	str.w	lr, [sp, #-8]!
   b5d54:	f7ff ffc4 	bl	b5ce0 <__aeabi_cdrcmple>
   b5d58:	bf34      	ite	cc
   b5d5a:	2001      	movcc	r0, #1
   b5d5c:	2000      	movcs	r0, #0
   b5d5e:	f85d fb08 	ldr.w	pc, [sp], #8
   b5d62:	bf00      	nop

000b5d64 <__aeabi_d2uiz>:
   b5d64:	004a      	lsls	r2, r1, #1
   b5d66:	d211      	bcs.n	b5d8c <__aeabi_d2uiz+0x28>
   b5d68:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b5d6c:	d211      	bcs.n	b5d92 <__aeabi_d2uiz+0x2e>
   b5d6e:	d50d      	bpl.n	b5d8c <__aeabi_d2uiz+0x28>
   b5d70:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b5d74:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b5d78:	d40e      	bmi.n	b5d98 <__aeabi_d2uiz+0x34>
   b5d7a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b5d7e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b5d82:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b5d86:	fa23 f002 	lsr.w	r0, r3, r2
   b5d8a:	4770      	bx	lr
   b5d8c:	f04f 0000 	mov.w	r0, #0
   b5d90:	4770      	bx	lr
   b5d92:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b5d96:	d102      	bne.n	b5d9e <__aeabi_d2uiz+0x3a>
   b5d98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b5d9c:	4770      	bx	lr
   b5d9e:	f04f 0000 	mov.w	r0, #0
   b5da2:	4770      	bx	lr

000b5da4 <__aeabi_d2f>:
   b5da4:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b5da8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   b5dac:	bf24      	itt	cs
   b5dae:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   b5db2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   b5db6:	d90d      	bls.n	b5dd4 <__aeabi_d2f+0x30>
   b5db8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   b5dbc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   b5dc0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   b5dc4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   b5dc8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   b5dcc:	bf08      	it	eq
   b5dce:	f020 0001 	biceq.w	r0, r0, #1
   b5dd2:	4770      	bx	lr
   b5dd4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   b5dd8:	d121      	bne.n	b5e1e <__aeabi_d2f+0x7a>
   b5dda:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   b5dde:	bfbc      	itt	lt
   b5de0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   b5de4:	4770      	bxlt	lr
   b5de6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b5dea:	ea4f 5252 	mov.w	r2, r2, lsr #21
   b5dee:	f1c2 0218 	rsb	r2, r2, #24
   b5df2:	f1c2 0c20 	rsb	ip, r2, #32
   b5df6:	fa10 f30c 	lsls.w	r3, r0, ip
   b5dfa:	fa20 f002 	lsr.w	r0, r0, r2
   b5dfe:	bf18      	it	ne
   b5e00:	f040 0001 	orrne.w	r0, r0, #1
   b5e04:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b5e08:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   b5e0c:	fa03 fc0c 	lsl.w	ip, r3, ip
   b5e10:	ea40 000c 	orr.w	r0, r0, ip
   b5e14:	fa23 f302 	lsr.w	r3, r3, r2
   b5e18:	ea4f 0343 	mov.w	r3, r3, lsl #1
   b5e1c:	e7cc      	b.n	b5db8 <__aeabi_d2f+0x14>
   b5e1e:	ea7f 5362 	mvns.w	r3, r2, asr #21
   b5e22:	d107      	bne.n	b5e34 <__aeabi_d2f+0x90>
   b5e24:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   b5e28:	bf1e      	ittt	ne
   b5e2a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   b5e2e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   b5e32:	4770      	bxne	lr
   b5e34:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   b5e38:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   b5e3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b5e40:	4770      	bx	lr
   b5e42:	bf00      	nop

000b5e44 <__aeabi_d2ulz>:
   b5e44:	b5d0      	push	{r4, r6, r7, lr}
   b5e46:	4b0c      	ldr	r3, [pc, #48]	; (b5e78 <__aeabi_d2ulz+0x34>)
   b5e48:	2200      	movs	r2, #0
   b5e4a:	4606      	mov	r6, r0
   b5e4c:	460f      	mov	r7, r1
   b5e4e:	f7ff fcef 	bl	b5830 <__aeabi_dmul>
   b5e52:	f7ff ff87 	bl	b5d64 <__aeabi_d2uiz>
   b5e56:	4604      	mov	r4, r0
   b5e58:	f7ff fc70 	bl	b573c <__aeabi_ui2d>
   b5e5c:	4b07      	ldr	r3, [pc, #28]	; (b5e7c <__aeabi_d2ulz+0x38>)
   b5e5e:	2200      	movs	r2, #0
   b5e60:	f7ff fce6 	bl	b5830 <__aeabi_dmul>
   b5e64:	4602      	mov	r2, r0
   b5e66:	460b      	mov	r3, r1
   b5e68:	4630      	mov	r0, r6
   b5e6a:	4639      	mov	r1, r7
   b5e6c:	f7ff fb28 	bl	b54c0 <__aeabi_dsub>
   b5e70:	f7ff ff78 	bl	b5d64 <__aeabi_d2uiz>
   b5e74:	4621      	mov	r1, r4
   b5e76:	bdd0      	pop	{r4, r6, r7, pc}
   b5e78:	3df00000 	.word	0x3df00000
   b5e7c:	41f00000 	.word	0x41f00000

000b5e80 <atexit>:
   b5e80:	2300      	movs	r3, #0
   b5e82:	4601      	mov	r1, r0
   b5e84:	461a      	mov	r2, r3
   b5e86:	4618      	mov	r0, r3
   b5e88:	f000 beb8 	b.w	b6bfc <__register_exitproc>

000b5e8c <atof>:
   b5e8c:	2100      	movs	r1, #0
   b5e8e:	f000 bea9 	b.w	b6be4 <strtod>

000b5e92 <memcpy>:
   b5e92:	440a      	add	r2, r1
   b5e94:	4291      	cmp	r1, r2
   b5e96:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b5e9a:	d100      	bne.n	b5e9e <memcpy+0xc>
   b5e9c:	4770      	bx	lr
   b5e9e:	b510      	push	{r4, lr}
   b5ea0:	f811 4b01 	ldrb.w	r4, [r1], #1
   b5ea4:	f803 4f01 	strb.w	r4, [r3, #1]!
   b5ea8:	4291      	cmp	r1, r2
   b5eaa:	d1f9      	bne.n	b5ea0 <memcpy+0xe>
   b5eac:	bd10      	pop	{r4, pc}

000b5eae <memset>:
   b5eae:	4402      	add	r2, r0
   b5eb0:	4603      	mov	r3, r0
   b5eb2:	4293      	cmp	r3, r2
   b5eb4:	d100      	bne.n	b5eb8 <memset+0xa>
   b5eb6:	4770      	bx	lr
   b5eb8:	f803 1b01 	strb.w	r1, [r3], #1
   b5ebc:	e7f9      	b.n	b5eb2 <memset+0x4>
	...

000b5ec0 <srand>:
   b5ec0:	b538      	push	{r3, r4, r5, lr}
   b5ec2:	4b10      	ldr	r3, [pc, #64]	; (b5f04 <srand+0x44>)
   b5ec4:	681d      	ldr	r5, [r3, #0]
   b5ec6:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b5ec8:	4604      	mov	r4, r0
   b5eca:	b9b3      	cbnz	r3, b5efa <srand+0x3a>
   b5ecc:	2018      	movs	r0, #24
   b5ece:	f7fe fb2d 	bl	b452c <malloc>
   b5ed2:	4602      	mov	r2, r0
   b5ed4:	63a8      	str	r0, [r5, #56]	; 0x38
   b5ed6:	b920      	cbnz	r0, b5ee2 <srand+0x22>
   b5ed8:	4b0b      	ldr	r3, [pc, #44]	; (b5f08 <srand+0x48>)
   b5eda:	480c      	ldr	r0, [pc, #48]	; (b5f0c <srand+0x4c>)
   b5edc:	2142      	movs	r1, #66	; 0x42
   b5ede:	f7fe fb55 	bl	b458c <__assert_func>
   b5ee2:	490b      	ldr	r1, [pc, #44]	; (b5f10 <srand+0x50>)
   b5ee4:	4b0b      	ldr	r3, [pc, #44]	; (b5f14 <srand+0x54>)
   b5ee6:	e9c0 1300 	strd	r1, r3, [r0]
   b5eea:	4b0b      	ldr	r3, [pc, #44]	; (b5f18 <srand+0x58>)
   b5eec:	6083      	str	r3, [r0, #8]
   b5eee:	230b      	movs	r3, #11
   b5ef0:	8183      	strh	r3, [r0, #12]
   b5ef2:	2100      	movs	r1, #0
   b5ef4:	2001      	movs	r0, #1
   b5ef6:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b5efa:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b5efc:	2200      	movs	r2, #0
   b5efe:	611c      	str	r4, [r3, #16]
   b5f00:	615a      	str	r2, [r3, #20]
   b5f02:	bd38      	pop	{r3, r4, r5, pc}
   b5f04:	2003e4bc 	.word	0x2003e4bc
   b5f08:	000b7fd1 	.word	0x000b7fd1
   b5f0c:	000b7fe8 	.word	0x000b7fe8
   b5f10:	abcd330e 	.word	0xabcd330e
   b5f14:	e66d1234 	.word	0xe66d1234
   b5f18:	0005deec 	.word	0x0005deec

000b5f1c <strcpy>:
   b5f1c:	4603      	mov	r3, r0
   b5f1e:	f811 2b01 	ldrb.w	r2, [r1], #1
   b5f22:	f803 2b01 	strb.w	r2, [r3], #1
   b5f26:	2a00      	cmp	r2, #0
   b5f28:	d1f9      	bne.n	b5f1e <strcpy+0x2>
   b5f2a:	4770      	bx	lr

000b5f2c <strdup>:
   b5f2c:	4b02      	ldr	r3, [pc, #8]	; (b5f38 <strdup+0xc>)
   b5f2e:	4601      	mov	r1, r0
   b5f30:	6818      	ldr	r0, [r3, #0]
   b5f32:	f000 b803 	b.w	b5f3c <_strdup_r>
   b5f36:	bf00      	nop
   b5f38:	2003e4bc 	.word	0x2003e4bc

000b5f3c <_strdup_r>:
   b5f3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b5f3e:	4604      	mov	r4, r0
   b5f40:	4608      	mov	r0, r1
   b5f42:	460d      	mov	r5, r1
   b5f44:	f000 f80f 	bl	b5f66 <strlen>
   b5f48:	1c42      	adds	r2, r0, #1
   b5f4a:	4611      	mov	r1, r2
   b5f4c:	4620      	mov	r0, r4
   b5f4e:	9201      	str	r2, [sp, #4]
   b5f50:	f7fe fb14 	bl	b457c <_malloc_r>
   b5f54:	4604      	mov	r4, r0
   b5f56:	b118      	cbz	r0, b5f60 <_strdup_r+0x24>
   b5f58:	9a01      	ldr	r2, [sp, #4]
   b5f5a:	4629      	mov	r1, r5
   b5f5c:	f7ff ff99 	bl	b5e92 <memcpy>
   b5f60:	4620      	mov	r0, r4
   b5f62:	b003      	add	sp, #12
   b5f64:	bd30      	pop	{r4, r5, pc}

000b5f66 <strlen>:
   b5f66:	4603      	mov	r3, r0
   b5f68:	f813 2b01 	ldrb.w	r2, [r3], #1
   b5f6c:	2a00      	cmp	r2, #0
   b5f6e:	d1fb      	bne.n	b5f68 <strlen+0x2>
   b5f70:	1a18      	subs	r0, r3, r0
   b5f72:	3801      	subs	r0, #1
   b5f74:	4770      	bx	lr

000b5f76 <strncmp>:
   b5f76:	b510      	push	{r4, lr}
   b5f78:	b17a      	cbz	r2, b5f9a <strncmp+0x24>
   b5f7a:	4603      	mov	r3, r0
   b5f7c:	3901      	subs	r1, #1
   b5f7e:	1884      	adds	r4, r0, r2
   b5f80:	f813 0b01 	ldrb.w	r0, [r3], #1
   b5f84:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   b5f88:	4290      	cmp	r0, r2
   b5f8a:	d101      	bne.n	b5f90 <strncmp+0x1a>
   b5f8c:	42a3      	cmp	r3, r4
   b5f8e:	d101      	bne.n	b5f94 <strncmp+0x1e>
   b5f90:	1a80      	subs	r0, r0, r2
   b5f92:	bd10      	pop	{r4, pc}
   b5f94:	2800      	cmp	r0, #0
   b5f96:	d1f3      	bne.n	b5f80 <strncmp+0xa>
   b5f98:	e7fa      	b.n	b5f90 <strncmp+0x1a>
   b5f9a:	4610      	mov	r0, r2
   b5f9c:	e7f9      	b.n	b5f92 <strncmp+0x1c>

000b5f9e <sulp>:
   b5f9e:	b570      	push	{r4, r5, r6, lr}
   b5fa0:	4604      	mov	r4, r0
   b5fa2:	460d      	mov	r5, r1
   b5fa4:	ec45 4b10 	vmov	d0, r4, r5
   b5fa8:	4616      	mov	r6, r2
   b5faa:	f001 fd81 	bl	b7ab0 <__ulp>
   b5fae:	ec51 0b10 	vmov	r0, r1, d0
   b5fb2:	b17e      	cbz	r6, b5fd4 <sulp+0x36>
   b5fb4:	f3c5 530a 	ubfx	r3, r5, #20, #11
   b5fb8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   b5fbc:	2b00      	cmp	r3, #0
   b5fbe:	dd09      	ble.n	b5fd4 <sulp+0x36>
   b5fc0:	051b      	lsls	r3, r3, #20
   b5fc2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   b5fc6:	2400      	movs	r4, #0
   b5fc8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   b5fcc:	4622      	mov	r2, r4
   b5fce:	462b      	mov	r3, r5
   b5fd0:	f7ff fc2e 	bl	b5830 <__aeabi_dmul>
   b5fd4:	bd70      	pop	{r4, r5, r6, pc}
	...

000b5fd8 <_strtod_l>:
   b5fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5fdc:	ed2d 8b02 	vpush	{d8}
   b5fe0:	b09d      	sub	sp, #116	; 0x74
   b5fe2:	461f      	mov	r7, r3
   b5fe4:	2300      	movs	r3, #0
   b5fe6:	9318      	str	r3, [sp, #96]	; 0x60
   b5fe8:	4ba2      	ldr	r3, [pc, #648]	; (b6274 <_strtod_l+0x29c>)
   b5fea:	9213      	str	r2, [sp, #76]	; 0x4c
   b5fec:	681b      	ldr	r3, [r3, #0]
   b5fee:	9305      	str	r3, [sp, #20]
   b5ff0:	4604      	mov	r4, r0
   b5ff2:	4618      	mov	r0, r3
   b5ff4:	4688      	mov	r8, r1
   b5ff6:	f7ff ffb6 	bl	b5f66 <strlen>
   b5ffa:	f04f 0a00 	mov.w	sl, #0
   b5ffe:	4605      	mov	r5, r0
   b6000:	f04f 0b00 	mov.w	fp, #0
   b6004:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   b6008:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b600a:	781a      	ldrb	r2, [r3, #0]
   b600c:	2a2b      	cmp	r2, #43	; 0x2b
   b600e:	d04e      	beq.n	b60ae <_strtod_l+0xd6>
   b6010:	d83b      	bhi.n	b608a <_strtod_l+0xb2>
   b6012:	2a0d      	cmp	r2, #13
   b6014:	d834      	bhi.n	b6080 <_strtod_l+0xa8>
   b6016:	2a08      	cmp	r2, #8
   b6018:	d834      	bhi.n	b6084 <_strtod_l+0xac>
   b601a:	2a00      	cmp	r2, #0
   b601c:	d03e      	beq.n	b609c <_strtod_l+0xc4>
   b601e:	2300      	movs	r3, #0
   b6020:	930a      	str	r3, [sp, #40]	; 0x28
   b6022:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   b6024:	7833      	ldrb	r3, [r6, #0]
   b6026:	2b30      	cmp	r3, #48	; 0x30
   b6028:	f040 80b0 	bne.w	b618c <_strtod_l+0x1b4>
   b602c:	7873      	ldrb	r3, [r6, #1]
   b602e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   b6032:	2b58      	cmp	r3, #88	; 0x58
   b6034:	d168      	bne.n	b6108 <_strtod_l+0x130>
   b6036:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b6038:	9301      	str	r3, [sp, #4]
   b603a:	ab18      	add	r3, sp, #96	; 0x60
   b603c:	9702      	str	r7, [sp, #8]
   b603e:	9300      	str	r3, [sp, #0]
   b6040:	4a8d      	ldr	r2, [pc, #564]	; (b6278 <_strtod_l+0x2a0>)
   b6042:	ab19      	add	r3, sp, #100	; 0x64
   b6044:	a917      	add	r1, sp, #92	; 0x5c
   b6046:	4620      	mov	r0, r4
   b6048:	f000 fea2 	bl	b6d90 <__gethex>
   b604c:	f010 0707 	ands.w	r7, r0, #7
   b6050:	4605      	mov	r5, r0
   b6052:	d005      	beq.n	b6060 <_strtod_l+0x88>
   b6054:	2f06      	cmp	r7, #6
   b6056:	d12c      	bne.n	b60b2 <_strtod_l+0xda>
   b6058:	3601      	adds	r6, #1
   b605a:	2300      	movs	r3, #0
   b605c:	9617      	str	r6, [sp, #92]	; 0x5c
   b605e:	930a      	str	r3, [sp, #40]	; 0x28
   b6060:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b6062:	2b00      	cmp	r3, #0
   b6064:	f040 8590 	bne.w	b6b88 <_strtod_l+0xbb0>
   b6068:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b606a:	b1eb      	cbz	r3, b60a8 <_strtod_l+0xd0>
   b606c:	4652      	mov	r2, sl
   b606e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   b6072:	ec43 2b10 	vmov	d0, r2, r3
   b6076:	b01d      	add	sp, #116	; 0x74
   b6078:	ecbd 8b02 	vpop	{d8}
   b607c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b6080:	2a20      	cmp	r2, #32
   b6082:	d1cc      	bne.n	b601e <_strtod_l+0x46>
   b6084:	3301      	adds	r3, #1
   b6086:	9317      	str	r3, [sp, #92]	; 0x5c
   b6088:	e7be      	b.n	b6008 <_strtod_l+0x30>
   b608a:	2a2d      	cmp	r2, #45	; 0x2d
   b608c:	d1c7      	bne.n	b601e <_strtod_l+0x46>
   b608e:	2201      	movs	r2, #1
   b6090:	920a      	str	r2, [sp, #40]	; 0x28
   b6092:	1c5a      	adds	r2, r3, #1
   b6094:	9217      	str	r2, [sp, #92]	; 0x5c
   b6096:	785b      	ldrb	r3, [r3, #1]
   b6098:	2b00      	cmp	r3, #0
   b609a:	d1c2      	bne.n	b6022 <_strtod_l+0x4a>
   b609c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b609e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   b60a2:	2b00      	cmp	r3, #0
   b60a4:	f040 856e 	bne.w	b6b84 <_strtod_l+0xbac>
   b60a8:	4652      	mov	r2, sl
   b60aa:	465b      	mov	r3, fp
   b60ac:	e7e1      	b.n	b6072 <_strtod_l+0x9a>
   b60ae:	2200      	movs	r2, #0
   b60b0:	e7ee      	b.n	b6090 <_strtod_l+0xb8>
   b60b2:	9a18      	ldr	r2, [sp, #96]	; 0x60
   b60b4:	b13a      	cbz	r2, b60c6 <_strtod_l+0xee>
   b60b6:	2135      	movs	r1, #53	; 0x35
   b60b8:	a81a      	add	r0, sp, #104	; 0x68
   b60ba:	f001 fe04 	bl	b7cc6 <__copybits>
   b60be:	9918      	ldr	r1, [sp, #96]	; 0x60
   b60c0:	4620      	mov	r0, r4
   b60c2:	f001 f9c3 	bl	b744c <_Bfree>
   b60c6:	3f01      	subs	r7, #1
   b60c8:	2f04      	cmp	r7, #4
   b60ca:	d806      	bhi.n	b60da <_strtod_l+0x102>
   b60cc:	e8df f007 	tbb	[pc, r7]
   b60d0:	1714030a 	.word	0x1714030a
   b60d4:	0a          	.byte	0x0a
   b60d5:	00          	.byte	0x00
   b60d6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
   b60da:	0728      	lsls	r0, r5, #28
   b60dc:	d5c0      	bpl.n	b6060 <_strtod_l+0x88>
   b60de:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   b60e2:	e7bd      	b.n	b6060 <_strtod_l+0x88>
   b60e4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
   b60e8:	9a19      	ldr	r2, [sp, #100]	; 0x64
   b60ea:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   b60ee:	f202 4233 	addw	r2, r2, #1075	; 0x433
   b60f2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   b60f6:	e7f0      	b.n	b60da <_strtod_l+0x102>
   b60f8:	f8df b180 	ldr.w	fp, [pc, #384]	; b627c <_strtod_l+0x2a4>
   b60fc:	e7ed      	b.n	b60da <_strtod_l+0x102>
   b60fe:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   b6102:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   b6106:	e7e8      	b.n	b60da <_strtod_l+0x102>
   b6108:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b610a:	1c5a      	adds	r2, r3, #1
   b610c:	9217      	str	r2, [sp, #92]	; 0x5c
   b610e:	785b      	ldrb	r3, [r3, #1]
   b6110:	2b30      	cmp	r3, #48	; 0x30
   b6112:	d0f9      	beq.n	b6108 <_strtod_l+0x130>
   b6114:	2b00      	cmp	r3, #0
   b6116:	d0a3      	beq.n	b6060 <_strtod_l+0x88>
   b6118:	2301      	movs	r3, #1
   b611a:	f04f 0900 	mov.w	r9, #0
   b611e:	9304      	str	r3, [sp, #16]
   b6120:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b6122:	9308      	str	r3, [sp, #32]
   b6124:	f8cd 901c 	str.w	r9, [sp, #28]
   b6128:	464f      	mov	r7, r9
   b612a:	220a      	movs	r2, #10
   b612c:	9817      	ldr	r0, [sp, #92]	; 0x5c
   b612e:	7806      	ldrb	r6, [r0, #0]
   b6130:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   b6134:	b2d9      	uxtb	r1, r3
   b6136:	2909      	cmp	r1, #9
   b6138:	d92a      	bls.n	b6190 <_strtod_l+0x1b8>
   b613a:	9905      	ldr	r1, [sp, #20]
   b613c:	462a      	mov	r2, r5
   b613e:	f7ff ff1a 	bl	b5f76 <strncmp>
   b6142:	b398      	cbz	r0, b61ac <_strtod_l+0x1d4>
   b6144:	2000      	movs	r0, #0
   b6146:	4632      	mov	r2, r6
   b6148:	463d      	mov	r5, r7
   b614a:	9005      	str	r0, [sp, #20]
   b614c:	4603      	mov	r3, r0
   b614e:	2a65      	cmp	r2, #101	; 0x65
   b6150:	d001      	beq.n	b6156 <_strtod_l+0x17e>
   b6152:	2a45      	cmp	r2, #69	; 0x45
   b6154:	d118      	bne.n	b6188 <_strtod_l+0x1b0>
   b6156:	b91d      	cbnz	r5, b6160 <_strtod_l+0x188>
   b6158:	9a04      	ldr	r2, [sp, #16]
   b615a:	4302      	orrs	r2, r0
   b615c:	d09e      	beq.n	b609c <_strtod_l+0xc4>
   b615e:	2500      	movs	r5, #0
   b6160:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
   b6164:	f108 0201 	add.w	r2, r8, #1
   b6168:	9217      	str	r2, [sp, #92]	; 0x5c
   b616a:	f898 2001 	ldrb.w	r2, [r8, #1]
   b616e:	2a2b      	cmp	r2, #43	; 0x2b
   b6170:	d075      	beq.n	b625e <_strtod_l+0x286>
   b6172:	2a2d      	cmp	r2, #45	; 0x2d
   b6174:	d07b      	beq.n	b626e <_strtod_l+0x296>
   b6176:	f04f 0c00 	mov.w	ip, #0
   b617a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   b617e:	2909      	cmp	r1, #9
   b6180:	f240 8082 	bls.w	b6288 <_strtod_l+0x2b0>
   b6184:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   b6188:	2600      	movs	r6, #0
   b618a:	e09d      	b.n	b62c8 <_strtod_l+0x2f0>
   b618c:	2300      	movs	r3, #0
   b618e:	e7c4      	b.n	b611a <_strtod_l+0x142>
   b6190:	2f08      	cmp	r7, #8
   b6192:	bfd8      	it	le
   b6194:	9907      	ldrle	r1, [sp, #28]
   b6196:	f100 0001 	add.w	r0, r0, #1
   b619a:	bfda      	itte	le
   b619c:	fb02 3301 	mlale	r3, r2, r1, r3
   b61a0:	9307      	strle	r3, [sp, #28]
   b61a2:	fb02 3909 	mlagt	r9, r2, r9, r3
   b61a6:	3701      	adds	r7, #1
   b61a8:	9017      	str	r0, [sp, #92]	; 0x5c
   b61aa:	e7bf      	b.n	b612c <_strtod_l+0x154>
   b61ac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b61ae:	195a      	adds	r2, r3, r5
   b61b0:	9217      	str	r2, [sp, #92]	; 0x5c
   b61b2:	5d5a      	ldrb	r2, [r3, r5]
   b61b4:	2f00      	cmp	r7, #0
   b61b6:	d037      	beq.n	b6228 <_strtod_l+0x250>
   b61b8:	9005      	str	r0, [sp, #20]
   b61ba:	463d      	mov	r5, r7
   b61bc:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   b61c0:	2b09      	cmp	r3, #9
   b61c2:	d912      	bls.n	b61ea <_strtod_l+0x212>
   b61c4:	2301      	movs	r3, #1
   b61c6:	e7c2      	b.n	b614e <_strtod_l+0x176>
   b61c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b61ca:	1c5a      	adds	r2, r3, #1
   b61cc:	9217      	str	r2, [sp, #92]	; 0x5c
   b61ce:	785a      	ldrb	r2, [r3, #1]
   b61d0:	3001      	adds	r0, #1
   b61d2:	2a30      	cmp	r2, #48	; 0x30
   b61d4:	d0f8      	beq.n	b61c8 <_strtod_l+0x1f0>
   b61d6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
   b61da:	2b08      	cmp	r3, #8
   b61dc:	f200 84d9 	bhi.w	b6b92 <_strtod_l+0xbba>
   b61e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b61e2:	9005      	str	r0, [sp, #20]
   b61e4:	2000      	movs	r0, #0
   b61e6:	9308      	str	r3, [sp, #32]
   b61e8:	4605      	mov	r5, r0
   b61ea:	3a30      	subs	r2, #48	; 0x30
   b61ec:	f100 0301 	add.w	r3, r0, #1
   b61f0:	d014      	beq.n	b621c <_strtod_l+0x244>
   b61f2:	9905      	ldr	r1, [sp, #20]
   b61f4:	4419      	add	r1, r3
   b61f6:	9105      	str	r1, [sp, #20]
   b61f8:	462b      	mov	r3, r5
   b61fa:	eb00 0e05 	add.w	lr, r0, r5
   b61fe:	210a      	movs	r1, #10
   b6200:	4573      	cmp	r3, lr
   b6202:	d113      	bne.n	b622c <_strtod_l+0x254>
   b6204:	182b      	adds	r3, r5, r0
   b6206:	2b08      	cmp	r3, #8
   b6208:	f105 0501 	add.w	r5, r5, #1
   b620c:	4405      	add	r5, r0
   b620e:	dc1c      	bgt.n	b624a <_strtod_l+0x272>
   b6210:	9907      	ldr	r1, [sp, #28]
   b6212:	230a      	movs	r3, #10
   b6214:	fb03 2301 	mla	r3, r3, r1, r2
   b6218:	9307      	str	r3, [sp, #28]
   b621a:	2300      	movs	r3, #0
   b621c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b621e:	1c51      	adds	r1, r2, #1
   b6220:	9117      	str	r1, [sp, #92]	; 0x5c
   b6222:	7852      	ldrb	r2, [r2, #1]
   b6224:	4618      	mov	r0, r3
   b6226:	e7c9      	b.n	b61bc <_strtod_l+0x1e4>
   b6228:	4638      	mov	r0, r7
   b622a:	e7d2      	b.n	b61d2 <_strtod_l+0x1fa>
   b622c:	2b08      	cmp	r3, #8
   b622e:	dc04      	bgt.n	b623a <_strtod_l+0x262>
   b6230:	9e07      	ldr	r6, [sp, #28]
   b6232:	434e      	muls	r6, r1
   b6234:	9607      	str	r6, [sp, #28]
   b6236:	3301      	adds	r3, #1
   b6238:	e7e2      	b.n	b6200 <_strtod_l+0x228>
   b623a:	f103 0c01 	add.w	ip, r3, #1
   b623e:	f1bc 0f10 	cmp.w	ip, #16
   b6242:	bfd8      	it	le
   b6244:	fb01 f909 	mulle.w	r9, r1, r9
   b6248:	e7f5      	b.n	b6236 <_strtod_l+0x25e>
   b624a:	2d10      	cmp	r5, #16
   b624c:	bfdc      	itt	le
   b624e:	230a      	movle	r3, #10
   b6250:	fb03 2909 	mlale	r9, r3, r9, r2
   b6254:	e7e1      	b.n	b621a <_strtod_l+0x242>
   b6256:	2300      	movs	r3, #0
   b6258:	9305      	str	r3, [sp, #20]
   b625a:	2301      	movs	r3, #1
   b625c:	e77c      	b.n	b6158 <_strtod_l+0x180>
   b625e:	f04f 0c00 	mov.w	ip, #0
   b6262:	f108 0202 	add.w	r2, r8, #2
   b6266:	9217      	str	r2, [sp, #92]	; 0x5c
   b6268:	f898 2002 	ldrb.w	r2, [r8, #2]
   b626c:	e785      	b.n	b617a <_strtod_l+0x1a2>
   b626e:	f04f 0c01 	mov.w	ip, #1
   b6272:	e7f6      	b.n	b6262 <_strtod_l+0x28a>
   b6274:	000b8218 	.word	0x000b8218
   b6278:	000b8050 	.word	0x000b8050
   b627c:	7ff00000 	.word	0x7ff00000
   b6280:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b6282:	1c51      	adds	r1, r2, #1
   b6284:	9117      	str	r1, [sp, #92]	; 0x5c
   b6286:	7852      	ldrb	r2, [r2, #1]
   b6288:	2a30      	cmp	r2, #48	; 0x30
   b628a:	d0f9      	beq.n	b6280 <_strtod_l+0x2a8>
   b628c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
   b6290:	2908      	cmp	r1, #8
   b6292:	f63f af79 	bhi.w	b6188 <_strtod_l+0x1b0>
   b6296:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
   b629a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b629c:	9206      	str	r2, [sp, #24]
   b629e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b62a0:	1c51      	adds	r1, r2, #1
   b62a2:	9117      	str	r1, [sp, #92]	; 0x5c
   b62a4:	7852      	ldrb	r2, [r2, #1]
   b62a6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
   b62aa:	2e09      	cmp	r6, #9
   b62ac:	d937      	bls.n	b631e <_strtod_l+0x346>
   b62ae:	9e06      	ldr	r6, [sp, #24]
   b62b0:	1b89      	subs	r1, r1, r6
   b62b2:	2908      	cmp	r1, #8
   b62b4:	f644 661f 	movw	r6, #19999	; 0x4e1f
   b62b8:	dc02      	bgt.n	b62c0 <_strtod_l+0x2e8>
   b62ba:	4576      	cmp	r6, lr
   b62bc:	bfa8      	it	ge
   b62be:	4676      	movge	r6, lr
   b62c0:	f1bc 0f00 	cmp.w	ip, #0
   b62c4:	d000      	beq.n	b62c8 <_strtod_l+0x2f0>
   b62c6:	4276      	negs	r6, r6
   b62c8:	2d00      	cmp	r5, #0
   b62ca:	d14d      	bne.n	b6368 <_strtod_l+0x390>
   b62cc:	9904      	ldr	r1, [sp, #16]
   b62ce:	4301      	orrs	r1, r0
   b62d0:	f47f aec6 	bne.w	b6060 <_strtod_l+0x88>
   b62d4:	2b00      	cmp	r3, #0
   b62d6:	f47f aee1 	bne.w	b609c <_strtod_l+0xc4>
   b62da:	2a69      	cmp	r2, #105	; 0x69
   b62dc:	d027      	beq.n	b632e <_strtod_l+0x356>
   b62de:	dc24      	bgt.n	b632a <_strtod_l+0x352>
   b62e0:	2a49      	cmp	r2, #73	; 0x49
   b62e2:	d024      	beq.n	b632e <_strtod_l+0x356>
   b62e4:	2a4e      	cmp	r2, #78	; 0x4e
   b62e6:	f47f aed9 	bne.w	b609c <_strtod_l+0xc4>
   b62ea:	499f      	ldr	r1, [pc, #636]	; (b6568 <_strtod_l+0x590>)
   b62ec:	a817      	add	r0, sp, #92	; 0x5c
   b62ee:	f000 ffa7 	bl	b7240 <__match>
   b62f2:	2800      	cmp	r0, #0
   b62f4:	f43f aed2 	beq.w	b609c <_strtod_l+0xc4>
   b62f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b62fa:	781b      	ldrb	r3, [r3, #0]
   b62fc:	2b28      	cmp	r3, #40	; 0x28
   b62fe:	d12d      	bne.n	b635c <_strtod_l+0x384>
   b6300:	499a      	ldr	r1, [pc, #616]	; (b656c <_strtod_l+0x594>)
   b6302:	aa1a      	add	r2, sp, #104	; 0x68
   b6304:	a817      	add	r0, sp, #92	; 0x5c
   b6306:	f000 ffaf 	bl	b7268 <__hexnan>
   b630a:	2805      	cmp	r0, #5
   b630c:	d126      	bne.n	b635c <_strtod_l+0x384>
   b630e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   b6310:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   b6314:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   b6318:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   b631c:	e6a0      	b.n	b6060 <_strtod_l+0x88>
   b631e:	210a      	movs	r1, #10
   b6320:	fb01 2e0e 	mla	lr, r1, lr, r2
   b6324:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   b6328:	e7b9      	b.n	b629e <_strtod_l+0x2c6>
   b632a:	2a6e      	cmp	r2, #110	; 0x6e
   b632c:	e7db      	b.n	b62e6 <_strtod_l+0x30e>
   b632e:	4990      	ldr	r1, [pc, #576]	; (b6570 <_strtod_l+0x598>)
   b6330:	a817      	add	r0, sp, #92	; 0x5c
   b6332:	f000 ff85 	bl	b7240 <__match>
   b6336:	2800      	cmp	r0, #0
   b6338:	f43f aeb0 	beq.w	b609c <_strtod_l+0xc4>
   b633c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b633e:	498d      	ldr	r1, [pc, #564]	; (b6574 <_strtod_l+0x59c>)
   b6340:	3b01      	subs	r3, #1
   b6342:	a817      	add	r0, sp, #92	; 0x5c
   b6344:	9317      	str	r3, [sp, #92]	; 0x5c
   b6346:	f000 ff7b 	bl	b7240 <__match>
   b634a:	b910      	cbnz	r0, b6352 <_strtod_l+0x37a>
   b634c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b634e:	3301      	adds	r3, #1
   b6350:	9317      	str	r3, [sp, #92]	; 0x5c
   b6352:	f8df b230 	ldr.w	fp, [pc, #560]	; b6584 <_strtod_l+0x5ac>
   b6356:	f04f 0a00 	mov.w	sl, #0
   b635a:	e681      	b.n	b6060 <_strtod_l+0x88>
   b635c:	4886      	ldr	r0, [pc, #536]	; (b6578 <_strtod_l+0x5a0>)
   b635e:	f001 fd07 	bl	b7d70 <nan>
   b6362:	ec5b ab10 	vmov	sl, fp, d0
   b6366:	e67b      	b.n	b6060 <_strtod_l+0x88>
   b6368:	9b05      	ldr	r3, [sp, #20]
   b636a:	9807      	ldr	r0, [sp, #28]
   b636c:	1af3      	subs	r3, r6, r3
   b636e:	2f00      	cmp	r7, #0
   b6370:	bf08      	it	eq
   b6372:	462f      	moveq	r7, r5
   b6374:	2d10      	cmp	r5, #16
   b6376:	9306      	str	r3, [sp, #24]
   b6378:	46a8      	mov	r8, r5
   b637a:	bfa8      	it	ge
   b637c:	f04f 0810 	movge.w	r8, #16
   b6380:	f7ff f9dc 	bl	b573c <__aeabi_ui2d>
   b6384:	2d09      	cmp	r5, #9
   b6386:	4682      	mov	sl, r0
   b6388:	468b      	mov	fp, r1
   b638a:	dd13      	ble.n	b63b4 <_strtod_l+0x3dc>
   b638c:	4b7b      	ldr	r3, [pc, #492]	; (b657c <_strtod_l+0x5a4>)
   b638e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   b6392:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   b6396:	f7ff fa4b 	bl	b5830 <__aeabi_dmul>
   b639a:	4682      	mov	sl, r0
   b639c:	4648      	mov	r0, r9
   b639e:	468b      	mov	fp, r1
   b63a0:	f7ff f9cc 	bl	b573c <__aeabi_ui2d>
   b63a4:	4602      	mov	r2, r0
   b63a6:	460b      	mov	r3, r1
   b63a8:	4650      	mov	r0, sl
   b63aa:	4659      	mov	r1, fp
   b63ac:	f7ff f88a 	bl	b54c4 <__adddf3>
   b63b0:	4682      	mov	sl, r0
   b63b2:	468b      	mov	fp, r1
   b63b4:	2d0f      	cmp	r5, #15
   b63b6:	dc38      	bgt.n	b642a <_strtod_l+0x452>
   b63b8:	9b06      	ldr	r3, [sp, #24]
   b63ba:	2b00      	cmp	r3, #0
   b63bc:	f43f ae50 	beq.w	b6060 <_strtod_l+0x88>
   b63c0:	dd24      	ble.n	b640c <_strtod_l+0x434>
   b63c2:	2b16      	cmp	r3, #22
   b63c4:	dc0b      	bgt.n	b63de <_strtod_l+0x406>
   b63c6:	496d      	ldr	r1, [pc, #436]	; (b657c <_strtod_l+0x5a4>)
   b63c8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   b63cc:	e9d1 0100 	ldrd	r0, r1, [r1]
   b63d0:	4652      	mov	r2, sl
   b63d2:	465b      	mov	r3, fp
   b63d4:	f7ff fa2c 	bl	b5830 <__aeabi_dmul>
   b63d8:	4682      	mov	sl, r0
   b63da:	468b      	mov	fp, r1
   b63dc:	e640      	b.n	b6060 <_strtod_l+0x88>
   b63de:	9a06      	ldr	r2, [sp, #24]
   b63e0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   b63e4:	4293      	cmp	r3, r2
   b63e6:	db20      	blt.n	b642a <_strtod_l+0x452>
   b63e8:	4c64      	ldr	r4, [pc, #400]	; (b657c <_strtod_l+0x5a4>)
   b63ea:	f1c5 050f 	rsb	r5, r5, #15
   b63ee:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   b63f2:	4652      	mov	r2, sl
   b63f4:	465b      	mov	r3, fp
   b63f6:	e9d1 0100 	ldrd	r0, r1, [r1]
   b63fa:	f7ff fa19 	bl	b5830 <__aeabi_dmul>
   b63fe:	9b06      	ldr	r3, [sp, #24]
   b6400:	1b5d      	subs	r5, r3, r5
   b6402:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   b6406:	e9d4 2300 	ldrd	r2, r3, [r4]
   b640a:	e7e3      	b.n	b63d4 <_strtod_l+0x3fc>
   b640c:	9b06      	ldr	r3, [sp, #24]
   b640e:	3316      	adds	r3, #22
   b6410:	db0b      	blt.n	b642a <_strtod_l+0x452>
   b6412:	9b05      	ldr	r3, [sp, #20]
   b6414:	1b9e      	subs	r6, r3, r6
   b6416:	4b59      	ldr	r3, [pc, #356]	; (b657c <_strtod_l+0x5a4>)
   b6418:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   b641c:	e9d6 2300 	ldrd	r2, r3, [r6]
   b6420:	4650      	mov	r0, sl
   b6422:	4659      	mov	r1, fp
   b6424:	f7ff fb2e 	bl	b5a84 <__aeabi_ddiv>
   b6428:	e7d6      	b.n	b63d8 <_strtod_l+0x400>
   b642a:	9b06      	ldr	r3, [sp, #24]
   b642c:	eba5 0808 	sub.w	r8, r5, r8
   b6430:	4498      	add	r8, r3
   b6432:	f1b8 0f00 	cmp.w	r8, #0
   b6436:	dd74      	ble.n	b6522 <_strtod_l+0x54a>
   b6438:	f018 030f 	ands.w	r3, r8, #15
   b643c:	d00a      	beq.n	b6454 <_strtod_l+0x47c>
   b643e:	494f      	ldr	r1, [pc, #316]	; (b657c <_strtod_l+0x5a4>)
   b6440:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   b6444:	4652      	mov	r2, sl
   b6446:	465b      	mov	r3, fp
   b6448:	e9d1 0100 	ldrd	r0, r1, [r1]
   b644c:	f7ff f9f0 	bl	b5830 <__aeabi_dmul>
   b6450:	4682      	mov	sl, r0
   b6452:	468b      	mov	fp, r1
   b6454:	f038 080f 	bics.w	r8, r8, #15
   b6458:	d04f      	beq.n	b64fa <_strtod_l+0x522>
   b645a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   b645e:	dd22      	ble.n	b64a6 <_strtod_l+0x4ce>
   b6460:	2500      	movs	r5, #0
   b6462:	462e      	mov	r6, r5
   b6464:	9507      	str	r5, [sp, #28]
   b6466:	9505      	str	r5, [sp, #20]
   b6468:	2322      	movs	r3, #34	; 0x22
   b646a:	f8df b118 	ldr.w	fp, [pc, #280]	; b6584 <_strtod_l+0x5ac>
   b646e:	6023      	str	r3, [r4, #0]
   b6470:	f04f 0a00 	mov.w	sl, #0
   b6474:	9b07      	ldr	r3, [sp, #28]
   b6476:	2b00      	cmp	r3, #0
   b6478:	f43f adf2 	beq.w	b6060 <_strtod_l+0x88>
   b647c:	9918      	ldr	r1, [sp, #96]	; 0x60
   b647e:	4620      	mov	r0, r4
   b6480:	f000 ffe4 	bl	b744c <_Bfree>
   b6484:	9905      	ldr	r1, [sp, #20]
   b6486:	4620      	mov	r0, r4
   b6488:	f000 ffe0 	bl	b744c <_Bfree>
   b648c:	4631      	mov	r1, r6
   b648e:	4620      	mov	r0, r4
   b6490:	f000 ffdc 	bl	b744c <_Bfree>
   b6494:	9907      	ldr	r1, [sp, #28]
   b6496:	4620      	mov	r0, r4
   b6498:	f000 ffd8 	bl	b744c <_Bfree>
   b649c:	4629      	mov	r1, r5
   b649e:	4620      	mov	r0, r4
   b64a0:	f000 ffd4 	bl	b744c <_Bfree>
   b64a4:	e5dc      	b.n	b6060 <_strtod_l+0x88>
   b64a6:	4b36      	ldr	r3, [pc, #216]	; (b6580 <_strtod_l+0x5a8>)
   b64a8:	9304      	str	r3, [sp, #16]
   b64aa:	2300      	movs	r3, #0
   b64ac:	ea4f 1828 	mov.w	r8, r8, asr #4
   b64b0:	4650      	mov	r0, sl
   b64b2:	4659      	mov	r1, fp
   b64b4:	4699      	mov	r9, r3
   b64b6:	f1b8 0f01 	cmp.w	r8, #1
   b64ba:	dc21      	bgt.n	b6500 <_strtod_l+0x528>
   b64bc:	b10b      	cbz	r3, b64c2 <_strtod_l+0x4ea>
   b64be:	4682      	mov	sl, r0
   b64c0:	468b      	mov	fp, r1
   b64c2:	4b2f      	ldr	r3, [pc, #188]	; (b6580 <_strtod_l+0x5a8>)
   b64c4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   b64c8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   b64cc:	4652      	mov	r2, sl
   b64ce:	465b      	mov	r3, fp
   b64d0:	e9d9 0100 	ldrd	r0, r1, [r9]
   b64d4:	f7ff f9ac 	bl	b5830 <__aeabi_dmul>
   b64d8:	4b2a      	ldr	r3, [pc, #168]	; (b6584 <_strtod_l+0x5ac>)
   b64da:	460a      	mov	r2, r1
   b64dc:	400b      	ands	r3, r1
   b64de:	492a      	ldr	r1, [pc, #168]	; (b6588 <_strtod_l+0x5b0>)
   b64e0:	428b      	cmp	r3, r1
   b64e2:	4682      	mov	sl, r0
   b64e4:	d8bc      	bhi.n	b6460 <_strtod_l+0x488>
   b64e6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   b64ea:	428b      	cmp	r3, r1
   b64ec:	bf86      	itte	hi
   b64ee:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; b658c <_strtod_l+0x5b4>
   b64f2:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
   b64f6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   b64fa:	2300      	movs	r3, #0
   b64fc:	9304      	str	r3, [sp, #16]
   b64fe:	e084      	b.n	b660a <_strtod_l+0x632>
   b6500:	f018 0f01 	tst.w	r8, #1
   b6504:	d005      	beq.n	b6512 <_strtod_l+0x53a>
   b6506:	9b04      	ldr	r3, [sp, #16]
   b6508:	e9d3 2300 	ldrd	r2, r3, [r3]
   b650c:	f7ff f990 	bl	b5830 <__aeabi_dmul>
   b6510:	2301      	movs	r3, #1
   b6512:	9a04      	ldr	r2, [sp, #16]
   b6514:	3208      	adds	r2, #8
   b6516:	f109 0901 	add.w	r9, r9, #1
   b651a:	ea4f 0868 	mov.w	r8, r8, asr #1
   b651e:	9204      	str	r2, [sp, #16]
   b6520:	e7c9      	b.n	b64b6 <_strtod_l+0x4de>
   b6522:	d0ea      	beq.n	b64fa <_strtod_l+0x522>
   b6524:	f1c8 0800 	rsb	r8, r8, #0
   b6528:	f018 020f 	ands.w	r2, r8, #15
   b652c:	d00a      	beq.n	b6544 <_strtod_l+0x56c>
   b652e:	4b13      	ldr	r3, [pc, #76]	; (b657c <_strtod_l+0x5a4>)
   b6530:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   b6534:	4650      	mov	r0, sl
   b6536:	4659      	mov	r1, fp
   b6538:	e9d3 2300 	ldrd	r2, r3, [r3]
   b653c:	f7ff faa2 	bl	b5a84 <__aeabi_ddiv>
   b6540:	4682      	mov	sl, r0
   b6542:	468b      	mov	fp, r1
   b6544:	ea5f 1828 	movs.w	r8, r8, asr #4
   b6548:	d0d7      	beq.n	b64fa <_strtod_l+0x522>
   b654a:	f1b8 0f1f 	cmp.w	r8, #31
   b654e:	dd1f      	ble.n	b6590 <_strtod_l+0x5b8>
   b6550:	2500      	movs	r5, #0
   b6552:	462e      	mov	r6, r5
   b6554:	9507      	str	r5, [sp, #28]
   b6556:	9505      	str	r5, [sp, #20]
   b6558:	2322      	movs	r3, #34	; 0x22
   b655a:	f04f 0a00 	mov.w	sl, #0
   b655e:	f04f 0b00 	mov.w	fp, #0
   b6562:	6023      	str	r3, [r4, #0]
   b6564:	e786      	b.n	b6474 <_strtod_l+0x49c>
   b6566:	bf00      	nop
   b6568:	000b804a 	.word	0x000b804a
   b656c:	000b8064 	.word	0x000b8064
   b6570:	000b8041 	.word	0x000b8041
   b6574:	000b8044 	.word	0x000b8044
   b6578:	000b8214 	.word	0x000b8214
   b657c:	000b82b0 	.word	0x000b82b0
   b6580:	000b8288 	.word	0x000b8288
   b6584:	7ff00000 	.word	0x7ff00000
   b6588:	7ca00000 	.word	0x7ca00000
   b658c:	7fefffff 	.word	0x7fefffff
   b6590:	f018 0310 	ands.w	r3, r8, #16
   b6594:	bf18      	it	ne
   b6596:	236a      	movne	r3, #106	; 0x6a
   b6598:	f8df 93ac 	ldr.w	r9, [pc, #940]	; b6948 <_strtod_l+0x970>
   b659c:	9304      	str	r3, [sp, #16]
   b659e:	4650      	mov	r0, sl
   b65a0:	4659      	mov	r1, fp
   b65a2:	2300      	movs	r3, #0
   b65a4:	f018 0f01 	tst.w	r8, #1
   b65a8:	d004      	beq.n	b65b4 <_strtod_l+0x5dc>
   b65aa:	e9d9 2300 	ldrd	r2, r3, [r9]
   b65ae:	f7ff f93f 	bl	b5830 <__aeabi_dmul>
   b65b2:	2301      	movs	r3, #1
   b65b4:	ea5f 0868 	movs.w	r8, r8, asr #1
   b65b8:	f109 0908 	add.w	r9, r9, #8
   b65bc:	d1f2      	bne.n	b65a4 <_strtod_l+0x5cc>
   b65be:	b10b      	cbz	r3, b65c4 <_strtod_l+0x5ec>
   b65c0:	4682      	mov	sl, r0
   b65c2:	468b      	mov	fp, r1
   b65c4:	9b04      	ldr	r3, [sp, #16]
   b65c6:	b1c3      	cbz	r3, b65fa <_strtod_l+0x622>
   b65c8:	f3cb 520a 	ubfx	r2, fp, #20, #11
   b65cc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   b65d0:	2b00      	cmp	r3, #0
   b65d2:	4659      	mov	r1, fp
   b65d4:	dd11      	ble.n	b65fa <_strtod_l+0x622>
   b65d6:	2b1f      	cmp	r3, #31
   b65d8:	f340 8124 	ble.w	b6824 <_strtod_l+0x84c>
   b65dc:	2b34      	cmp	r3, #52	; 0x34
   b65de:	bfde      	ittt	le
   b65e0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
   b65e4:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
   b65e8:	fa03 f202 	lslle.w	r2, r3, r2
   b65ec:	f04f 0a00 	mov.w	sl, #0
   b65f0:	bfcc      	ite	gt
   b65f2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   b65f6:	ea02 0b01 	andle.w	fp, r2, r1
   b65fa:	2200      	movs	r2, #0
   b65fc:	2300      	movs	r3, #0
   b65fe:	4650      	mov	r0, sl
   b6600:	4659      	mov	r1, fp
   b6602:	f7ff fb7d 	bl	b5d00 <__aeabi_dcmpeq>
   b6606:	2800      	cmp	r0, #0
   b6608:	d1a2      	bne.n	b6550 <_strtod_l+0x578>
   b660a:	9b07      	ldr	r3, [sp, #28]
   b660c:	9300      	str	r3, [sp, #0]
   b660e:	9908      	ldr	r1, [sp, #32]
   b6610:	462b      	mov	r3, r5
   b6612:	463a      	mov	r2, r7
   b6614:	4620      	mov	r0, r4
   b6616:	f000 ff81 	bl	b751c <__s2b>
   b661a:	9007      	str	r0, [sp, #28]
   b661c:	2800      	cmp	r0, #0
   b661e:	f43f af1f 	beq.w	b6460 <_strtod_l+0x488>
   b6622:	9b05      	ldr	r3, [sp, #20]
   b6624:	1b9e      	subs	r6, r3, r6
   b6626:	9b06      	ldr	r3, [sp, #24]
   b6628:	2b00      	cmp	r3, #0
   b662a:	bfb4      	ite	lt
   b662c:	4633      	movlt	r3, r6
   b662e:	2300      	movge	r3, #0
   b6630:	930c      	str	r3, [sp, #48]	; 0x30
   b6632:	9b06      	ldr	r3, [sp, #24]
   b6634:	2500      	movs	r5, #0
   b6636:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   b663a:	9312      	str	r3, [sp, #72]	; 0x48
   b663c:	462e      	mov	r6, r5
   b663e:	9b07      	ldr	r3, [sp, #28]
   b6640:	4620      	mov	r0, r4
   b6642:	6859      	ldr	r1, [r3, #4]
   b6644:	f000 fec2 	bl	b73cc <_Balloc>
   b6648:	9005      	str	r0, [sp, #20]
   b664a:	2800      	cmp	r0, #0
   b664c:	f43f af0c 	beq.w	b6468 <_strtod_l+0x490>
   b6650:	9b07      	ldr	r3, [sp, #28]
   b6652:	691a      	ldr	r2, [r3, #16]
   b6654:	3202      	adds	r2, #2
   b6656:	f103 010c 	add.w	r1, r3, #12
   b665a:	0092      	lsls	r2, r2, #2
   b665c:	300c      	adds	r0, #12
   b665e:	f7ff fc18 	bl	b5e92 <memcpy>
   b6662:	ec4b ab10 	vmov	d0, sl, fp
   b6666:	aa1a      	add	r2, sp, #104	; 0x68
   b6668:	a919      	add	r1, sp, #100	; 0x64
   b666a:	4620      	mov	r0, r4
   b666c:	f001 fa9c 	bl	b7ba8 <__d2b>
   b6670:	ec4b ab18 	vmov	d8, sl, fp
   b6674:	9018      	str	r0, [sp, #96]	; 0x60
   b6676:	2800      	cmp	r0, #0
   b6678:	f43f aef6 	beq.w	b6468 <_strtod_l+0x490>
   b667c:	2101      	movs	r1, #1
   b667e:	4620      	mov	r0, r4
   b6680:	f000 ffe6 	bl	b7650 <__i2b>
   b6684:	4606      	mov	r6, r0
   b6686:	2800      	cmp	r0, #0
   b6688:	f43f aeee 	beq.w	b6468 <_strtod_l+0x490>
   b668c:	9b19      	ldr	r3, [sp, #100]	; 0x64
   b668e:	9904      	ldr	r1, [sp, #16]
   b6690:	2b00      	cmp	r3, #0
   b6692:	bfab      	itete	ge
   b6694:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
   b6696:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   b6698:	9f12      	ldrge	r7, [sp, #72]	; 0x48
   b669a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
   b669e:	bfac      	ite	ge
   b66a0:	eb03 0902 	addge.w	r9, r3, r2
   b66a4:	1ad7      	sublt	r7, r2, r3
   b66a6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   b66a8:	eba3 0801 	sub.w	r8, r3, r1
   b66ac:	4490      	add	r8, r2
   b66ae:	4ba1      	ldr	r3, [pc, #644]	; (b6934 <_strtod_l+0x95c>)
   b66b0:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b66b4:	4598      	cmp	r8, r3
   b66b6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   b66ba:	f280 80c7 	bge.w	b684c <_strtod_l+0x874>
   b66be:	eba3 0308 	sub.w	r3, r3, r8
   b66c2:	2b1f      	cmp	r3, #31
   b66c4:	eba2 0203 	sub.w	r2, r2, r3
   b66c8:	f04f 0101 	mov.w	r1, #1
   b66cc:	f300 80b1 	bgt.w	b6832 <_strtod_l+0x85a>
   b66d0:	fa01 f303 	lsl.w	r3, r1, r3
   b66d4:	930d      	str	r3, [sp, #52]	; 0x34
   b66d6:	2300      	movs	r3, #0
   b66d8:	9308      	str	r3, [sp, #32]
   b66da:	eb09 0802 	add.w	r8, r9, r2
   b66de:	9b04      	ldr	r3, [sp, #16]
   b66e0:	45c1      	cmp	r9, r8
   b66e2:	4417      	add	r7, r2
   b66e4:	441f      	add	r7, r3
   b66e6:	464b      	mov	r3, r9
   b66e8:	bfa8      	it	ge
   b66ea:	4643      	movge	r3, r8
   b66ec:	42bb      	cmp	r3, r7
   b66ee:	bfa8      	it	ge
   b66f0:	463b      	movge	r3, r7
   b66f2:	2b00      	cmp	r3, #0
   b66f4:	bfc2      	ittt	gt
   b66f6:	eba8 0803 	subgt.w	r8, r8, r3
   b66fa:	1aff      	subgt	r7, r7, r3
   b66fc:	eba9 0903 	subgt.w	r9, r9, r3
   b6700:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b6702:	2b00      	cmp	r3, #0
   b6704:	dd17      	ble.n	b6736 <_strtod_l+0x75e>
   b6706:	4631      	mov	r1, r6
   b6708:	461a      	mov	r2, r3
   b670a:	4620      	mov	r0, r4
   b670c:	f001 f860 	bl	b77d0 <__pow5mult>
   b6710:	4606      	mov	r6, r0
   b6712:	2800      	cmp	r0, #0
   b6714:	f43f aea8 	beq.w	b6468 <_strtod_l+0x490>
   b6718:	4601      	mov	r1, r0
   b671a:	9a18      	ldr	r2, [sp, #96]	; 0x60
   b671c:	4620      	mov	r0, r4
   b671e:	f000 ffad 	bl	b767c <__multiply>
   b6722:	900b      	str	r0, [sp, #44]	; 0x2c
   b6724:	2800      	cmp	r0, #0
   b6726:	f43f ae9f 	beq.w	b6468 <_strtod_l+0x490>
   b672a:	9918      	ldr	r1, [sp, #96]	; 0x60
   b672c:	4620      	mov	r0, r4
   b672e:	f000 fe8d 	bl	b744c <_Bfree>
   b6732:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b6734:	9318      	str	r3, [sp, #96]	; 0x60
   b6736:	f1b8 0f00 	cmp.w	r8, #0
   b673a:	f300 808c 	bgt.w	b6856 <_strtod_l+0x87e>
   b673e:	9b06      	ldr	r3, [sp, #24]
   b6740:	2b00      	cmp	r3, #0
   b6742:	dd08      	ble.n	b6756 <_strtod_l+0x77e>
   b6744:	9a12      	ldr	r2, [sp, #72]	; 0x48
   b6746:	9905      	ldr	r1, [sp, #20]
   b6748:	4620      	mov	r0, r4
   b674a:	f001 f841 	bl	b77d0 <__pow5mult>
   b674e:	9005      	str	r0, [sp, #20]
   b6750:	2800      	cmp	r0, #0
   b6752:	f43f ae89 	beq.w	b6468 <_strtod_l+0x490>
   b6756:	2f00      	cmp	r7, #0
   b6758:	dd08      	ble.n	b676c <_strtod_l+0x794>
   b675a:	9905      	ldr	r1, [sp, #20]
   b675c:	463a      	mov	r2, r7
   b675e:	4620      	mov	r0, r4
   b6760:	f001 f890 	bl	b7884 <__lshift>
   b6764:	9005      	str	r0, [sp, #20]
   b6766:	2800      	cmp	r0, #0
   b6768:	f43f ae7e 	beq.w	b6468 <_strtod_l+0x490>
   b676c:	f1b9 0f00 	cmp.w	r9, #0
   b6770:	dd08      	ble.n	b6784 <_strtod_l+0x7ac>
   b6772:	4631      	mov	r1, r6
   b6774:	464a      	mov	r2, r9
   b6776:	4620      	mov	r0, r4
   b6778:	f001 f884 	bl	b7884 <__lshift>
   b677c:	4606      	mov	r6, r0
   b677e:	2800      	cmp	r0, #0
   b6780:	f43f ae72 	beq.w	b6468 <_strtod_l+0x490>
   b6784:	9a05      	ldr	r2, [sp, #20]
   b6786:	9918      	ldr	r1, [sp, #96]	; 0x60
   b6788:	4620      	mov	r0, r4
   b678a:	f001 f907 	bl	b799c <__mdiff>
   b678e:	4605      	mov	r5, r0
   b6790:	2800      	cmp	r0, #0
   b6792:	f43f ae69 	beq.w	b6468 <_strtod_l+0x490>
   b6796:	68c3      	ldr	r3, [r0, #12]
   b6798:	930b      	str	r3, [sp, #44]	; 0x2c
   b679a:	2300      	movs	r3, #0
   b679c:	60c3      	str	r3, [r0, #12]
   b679e:	4631      	mov	r1, r6
   b67a0:	f001 f8e0 	bl	b7964 <__mcmp>
   b67a4:	2800      	cmp	r0, #0
   b67a6:	da60      	bge.n	b686a <_strtod_l+0x892>
   b67a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b67aa:	ea53 030a 	orrs.w	r3, r3, sl
   b67ae:	f040 8082 	bne.w	b68b6 <_strtod_l+0x8de>
   b67b2:	f3cb 0313 	ubfx	r3, fp, #0, #20
   b67b6:	2b00      	cmp	r3, #0
   b67b8:	d17d      	bne.n	b68b6 <_strtod_l+0x8de>
   b67ba:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   b67be:	0d1b      	lsrs	r3, r3, #20
   b67c0:	051b      	lsls	r3, r3, #20
   b67c2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   b67c6:	d976      	bls.n	b68b6 <_strtod_l+0x8de>
   b67c8:	696b      	ldr	r3, [r5, #20]
   b67ca:	b913      	cbnz	r3, b67d2 <_strtod_l+0x7fa>
   b67cc:	692b      	ldr	r3, [r5, #16]
   b67ce:	2b01      	cmp	r3, #1
   b67d0:	dd71      	ble.n	b68b6 <_strtod_l+0x8de>
   b67d2:	4629      	mov	r1, r5
   b67d4:	2201      	movs	r2, #1
   b67d6:	4620      	mov	r0, r4
   b67d8:	f001 f854 	bl	b7884 <__lshift>
   b67dc:	4631      	mov	r1, r6
   b67de:	4605      	mov	r5, r0
   b67e0:	f001 f8c0 	bl	b7964 <__mcmp>
   b67e4:	2800      	cmp	r0, #0
   b67e6:	dd66      	ble.n	b68b6 <_strtod_l+0x8de>
   b67e8:	9904      	ldr	r1, [sp, #16]
   b67ea:	4a53      	ldr	r2, [pc, #332]	; (b6938 <_strtod_l+0x960>)
   b67ec:	465b      	mov	r3, fp
   b67ee:	2900      	cmp	r1, #0
   b67f0:	f000 8081 	beq.w	b68f6 <_strtod_l+0x91e>
   b67f4:	ea02 010b 	and.w	r1, r2, fp
   b67f8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   b67fc:	dc7b      	bgt.n	b68f6 <_strtod_l+0x91e>
   b67fe:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   b6802:	f77f aea9 	ble.w	b6558 <_strtod_l+0x580>
   b6806:	4b4d      	ldr	r3, [pc, #308]	; (b693c <_strtod_l+0x964>)
   b6808:	4650      	mov	r0, sl
   b680a:	4659      	mov	r1, fp
   b680c:	2200      	movs	r2, #0
   b680e:	f7ff f80f 	bl	b5830 <__aeabi_dmul>
   b6812:	460b      	mov	r3, r1
   b6814:	4303      	orrs	r3, r0
   b6816:	bf08      	it	eq
   b6818:	2322      	moveq	r3, #34	; 0x22
   b681a:	4682      	mov	sl, r0
   b681c:	468b      	mov	fp, r1
   b681e:	bf08      	it	eq
   b6820:	6023      	streq	r3, [r4, #0]
   b6822:	e62b      	b.n	b647c <_strtod_l+0x4a4>
   b6824:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b6828:	fa02 f303 	lsl.w	r3, r2, r3
   b682c:	ea03 0a0a 	and.w	sl, r3, sl
   b6830:	e6e3      	b.n	b65fa <_strtod_l+0x622>
   b6832:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   b6836:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   b683a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   b683e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   b6842:	fa01 f308 	lsl.w	r3, r1, r8
   b6846:	9308      	str	r3, [sp, #32]
   b6848:	910d      	str	r1, [sp, #52]	; 0x34
   b684a:	e746      	b.n	b66da <_strtod_l+0x702>
   b684c:	2300      	movs	r3, #0
   b684e:	9308      	str	r3, [sp, #32]
   b6850:	2301      	movs	r3, #1
   b6852:	930d      	str	r3, [sp, #52]	; 0x34
   b6854:	e741      	b.n	b66da <_strtod_l+0x702>
   b6856:	9918      	ldr	r1, [sp, #96]	; 0x60
   b6858:	4642      	mov	r2, r8
   b685a:	4620      	mov	r0, r4
   b685c:	f001 f812 	bl	b7884 <__lshift>
   b6860:	9018      	str	r0, [sp, #96]	; 0x60
   b6862:	2800      	cmp	r0, #0
   b6864:	f47f af6b 	bne.w	b673e <_strtod_l+0x766>
   b6868:	e5fe      	b.n	b6468 <_strtod_l+0x490>
   b686a:	465f      	mov	r7, fp
   b686c:	d16e      	bne.n	b694c <_strtod_l+0x974>
   b686e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b6870:	f3cb 0313 	ubfx	r3, fp, #0, #20
   b6874:	b342      	cbz	r2, b68c8 <_strtod_l+0x8f0>
   b6876:	4a32      	ldr	r2, [pc, #200]	; (b6940 <_strtod_l+0x968>)
   b6878:	4293      	cmp	r3, r2
   b687a:	d128      	bne.n	b68ce <_strtod_l+0x8f6>
   b687c:	9b04      	ldr	r3, [sp, #16]
   b687e:	4651      	mov	r1, sl
   b6880:	b1eb      	cbz	r3, b68be <_strtod_l+0x8e6>
   b6882:	4b2d      	ldr	r3, [pc, #180]	; (b6938 <_strtod_l+0x960>)
   b6884:	403b      	ands	r3, r7
   b6886:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   b688a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b688e:	d819      	bhi.n	b68c4 <_strtod_l+0x8ec>
   b6890:	0d1b      	lsrs	r3, r3, #20
   b6892:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   b6896:	fa02 f303 	lsl.w	r3, r2, r3
   b689a:	4299      	cmp	r1, r3
   b689c:	d117      	bne.n	b68ce <_strtod_l+0x8f6>
   b689e:	4b29      	ldr	r3, [pc, #164]	; (b6944 <_strtod_l+0x96c>)
   b68a0:	429f      	cmp	r7, r3
   b68a2:	d102      	bne.n	b68aa <_strtod_l+0x8d2>
   b68a4:	3101      	adds	r1, #1
   b68a6:	f43f addf 	beq.w	b6468 <_strtod_l+0x490>
   b68aa:	4b23      	ldr	r3, [pc, #140]	; (b6938 <_strtod_l+0x960>)
   b68ac:	403b      	ands	r3, r7
   b68ae:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   b68b2:	f04f 0a00 	mov.w	sl, #0
   b68b6:	9b04      	ldr	r3, [sp, #16]
   b68b8:	2b00      	cmp	r3, #0
   b68ba:	d1a4      	bne.n	b6806 <_strtod_l+0x82e>
   b68bc:	e5de      	b.n	b647c <_strtod_l+0x4a4>
   b68be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b68c2:	e7ea      	b.n	b689a <_strtod_l+0x8c2>
   b68c4:	4613      	mov	r3, r2
   b68c6:	e7e8      	b.n	b689a <_strtod_l+0x8c2>
   b68c8:	ea53 030a 	orrs.w	r3, r3, sl
   b68cc:	d08c      	beq.n	b67e8 <_strtod_l+0x810>
   b68ce:	9b08      	ldr	r3, [sp, #32]
   b68d0:	b1db      	cbz	r3, b690a <_strtod_l+0x932>
   b68d2:	423b      	tst	r3, r7
   b68d4:	d0ef      	beq.n	b68b6 <_strtod_l+0x8de>
   b68d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b68d8:	9a04      	ldr	r2, [sp, #16]
   b68da:	4650      	mov	r0, sl
   b68dc:	4659      	mov	r1, fp
   b68de:	b1c3      	cbz	r3, b6912 <_strtod_l+0x93a>
   b68e0:	f7ff fb5d 	bl	b5f9e <sulp>
   b68e4:	4602      	mov	r2, r0
   b68e6:	460b      	mov	r3, r1
   b68e8:	ec51 0b18 	vmov	r0, r1, d8
   b68ec:	f7fe fdea 	bl	b54c4 <__adddf3>
   b68f0:	4682      	mov	sl, r0
   b68f2:	468b      	mov	fp, r1
   b68f4:	e7df      	b.n	b68b6 <_strtod_l+0x8de>
   b68f6:	4013      	ands	r3, r2
   b68f8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   b68fc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   b6900:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   b6904:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   b6908:	e7d5      	b.n	b68b6 <_strtod_l+0x8de>
   b690a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   b690c:	ea13 0f0a 	tst.w	r3, sl
   b6910:	e7e0      	b.n	b68d4 <_strtod_l+0x8fc>
   b6912:	f7ff fb44 	bl	b5f9e <sulp>
   b6916:	4602      	mov	r2, r0
   b6918:	460b      	mov	r3, r1
   b691a:	ec51 0b18 	vmov	r0, r1, d8
   b691e:	f7fe fdcf 	bl	b54c0 <__aeabi_dsub>
   b6922:	2200      	movs	r2, #0
   b6924:	2300      	movs	r3, #0
   b6926:	4682      	mov	sl, r0
   b6928:	468b      	mov	fp, r1
   b692a:	f7ff f9e9 	bl	b5d00 <__aeabi_dcmpeq>
   b692e:	2800      	cmp	r0, #0
   b6930:	d0c1      	beq.n	b68b6 <_strtod_l+0x8de>
   b6932:	e611      	b.n	b6558 <_strtod_l+0x580>
   b6934:	fffffc02 	.word	0xfffffc02
   b6938:	7ff00000 	.word	0x7ff00000
   b693c:	39500000 	.word	0x39500000
   b6940:	000fffff 	.word	0x000fffff
   b6944:	7fefffff 	.word	0x7fefffff
   b6948:	000b8078 	.word	0x000b8078
   b694c:	4631      	mov	r1, r6
   b694e:	4628      	mov	r0, r5
   b6950:	f001 f986 	bl	b7c60 <__ratio>
   b6954:	ec59 8b10 	vmov	r8, r9, d0
   b6958:	ee10 0a10 	vmov	r0, s0
   b695c:	2200      	movs	r2, #0
   b695e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   b6962:	4649      	mov	r1, r9
   b6964:	f7ff f9e0 	bl	b5d28 <__aeabi_dcmple>
   b6968:	2800      	cmp	r0, #0
   b696a:	d07a      	beq.n	b6a62 <_strtod_l+0xa8a>
   b696c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b696e:	2b00      	cmp	r3, #0
   b6970:	d04a      	beq.n	b6a08 <_strtod_l+0xa30>
   b6972:	4b95      	ldr	r3, [pc, #596]	; (b6bc8 <_strtod_l+0xbf0>)
   b6974:	2200      	movs	r2, #0
   b6976:	e9cd 2308 	strd	r2, r3, [sp, #32]
   b697a:	f8df 924c 	ldr.w	r9, [pc, #588]	; b6bc8 <_strtod_l+0xbf0>
   b697e:	f04f 0800 	mov.w	r8, #0
   b6982:	4b92      	ldr	r3, [pc, #584]	; (b6bcc <_strtod_l+0xbf4>)
   b6984:	403b      	ands	r3, r7
   b6986:	930d      	str	r3, [sp, #52]	; 0x34
   b6988:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   b698a:	4b91      	ldr	r3, [pc, #580]	; (b6bd0 <_strtod_l+0xbf8>)
   b698c:	429a      	cmp	r2, r3
   b698e:	f040 80b0 	bne.w	b6af2 <_strtod_l+0xb1a>
   b6992:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   b6996:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   b699a:	ec4b ab10 	vmov	d0, sl, fp
   b699e:	e9cd 0108 	strd	r0, r1, [sp, #32]
   b69a2:	f001 f885 	bl	b7ab0 <__ulp>
   b69a6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   b69aa:	ec53 2b10 	vmov	r2, r3, d0
   b69ae:	f7fe ff3f 	bl	b5830 <__aeabi_dmul>
   b69b2:	4652      	mov	r2, sl
   b69b4:	465b      	mov	r3, fp
   b69b6:	f7fe fd85 	bl	b54c4 <__adddf3>
   b69ba:	460b      	mov	r3, r1
   b69bc:	4983      	ldr	r1, [pc, #524]	; (b6bcc <_strtod_l+0xbf4>)
   b69be:	4a85      	ldr	r2, [pc, #532]	; (b6bd4 <_strtod_l+0xbfc>)
   b69c0:	4019      	ands	r1, r3
   b69c2:	4291      	cmp	r1, r2
   b69c4:	4682      	mov	sl, r0
   b69c6:	d960      	bls.n	b6a8a <_strtod_l+0xab2>
   b69c8:	ee18 3a90 	vmov	r3, s17
   b69cc:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   b69d0:	4293      	cmp	r3, r2
   b69d2:	d104      	bne.n	b69de <_strtod_l+0xa06>
   b69d4:	ee18 3a10 	vmov	r3, s16
   b69d8:	3301      	adds	r3, #1
   b69da:	f43f ad45 	beq.w	b6468 <_strtod_l+0x490>
   b69de:	f8df b200 	ldr.w	fp, [pc, #512]	; b6be0 <_strtod_l+0xc08>
   b69e2:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   b69e6:	9918      	ldr	r1, [sp, #96]	; 0x60
   b69e8:	4620      	mov	r0, r4
   b69ea:	f000 fd2f 	bl	b744c <_Bfree>
   b69ee:	9905      	ldr	r1, [sp, #20]
   b69f0:	4620      	mov	r0, r4
   b69f2:	f000 fd2b 	bl	b744c <_Bfree>
   b69f6:	4631      	mov	r1, r6
   b69f8:	4620      	mov	r0, r4
   b69fa:	f000 fd27 	bl	b744c <_Bfree>
   b69fe:	4629      	mov	r1, r5
   b6a00:	4620      	mov	r0, r4
   b6a02:	f000 fd23 	bl	b744c <_Bfree>
   b6a06:	e61a      	b.n	b663e <_strtod_l+0x666>
   b6a08:	f1ba 0f00 	cmp.w	sl, #0
   b6a0c:	d11b      	bne.n	b6a46 <_strtod_l+0xa6e>
   b6a0e:	f3cb 0313 	ubfx	r3, fp, #0, #20
   b6a12:	b9f3      	cbnz	r3, b6a52 <_strtod_l+0xa7a>
   b6a14:	4b6c      	ldr	r3, [pc, #432]	; (b6bc8 <_strtod_l+0xbf0>)
   b6a16:	2200      	movs	r2, #0
   b6a18:	4640      	mov	r0, r8
   b6a1a:	4649      	mov	r1, r9
   b6a1c:	f7ff f97a 	bl	b5d14 <__aeabi_dcmplt>
   b6a20:	b9d0      	cbnz	r0, b6a58 <_strtod_l+0xa80>
   b6a22:	4640      	mov	r0, r8
   b6a24:	4649      	mov	r1, r9
   b6a26:	4b6c      	ldr	r3, [pc, #432]	; (b6bd8 <_strtod_l+0xc00>)
   b6a28:	2200      	movs	r2, #0
   b6a2a:	f7fe ff01 	bl	b5830 <__aeabi_dmul>
   b6a2e:	4680      	mov	r8, r0
   b6a30:	4689      	mov	r9, r1
   b6a32:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   b6a36:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   b6a3a:	9315      	str	r3, [sp, #84]	; 0x54
   b6a3c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   b6a40:	e9cd 2308 	strd	r2, r3, [sp, #32]
   b6a44:	e79d      	b.n	b6982 <_strtod_l+0x9aa>
   b6a46:	f1ba 0f01 	cmp.w	sl, #1
   b6a4a:	d102      	bne.n	b6a52 <_strtod_l+0xa7a>
   b6a4c:	2f00      	cmp	r7, #0
   b6a4e:	f43f ad83 	beq.w	b6558 <_strtod_l+0x580>
   b6a52:	4b62      	ldr	r3, [pc, #392]	; (b6bdc <_strtod_l+0xc04>)
   b6a54:	2200      	movs	r2, #0
   b6a56:	e78e      	b.n	b6976 <_strtod_l+0x99e>
   b6a58:	f8df 917c 	ldr.w	r9, [pc, #380]	; b6bd8 <_strtod_l+0xc00>
   b6a5c:	f04f 0800 	mov.w	r8, #0
   b6a60:	e7e7      	b.n	b6a32 <_strtod_l+0xa5a>
   b6a62:	4b5d      	ldr	r3, [pc, #372]	; (b6bd8 <_strtod_l+0xc00>)
   b6a64:	4640      	mov	r0, r8
   b6a66:	4649      	mov	r1, r9
   b6a68:	2200      	movs	r2, #0
   b6a6a:	f7fe fee1 	bl	b5830 <__aeabi_dmul>
   b6a6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b6a70:	4680      	mov	r8, r0
   b6a72:	4689      	mov	r9, r1
   b6a74:	b933      	cbnz	r3, b6a84 <_strtod_l+0xaac>
   b6a76:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   b6a7a:	900e      	str	r0, [sp, #56]	; 0x38
   b6a7c:	930f      	str	r3, [sp, #60]	; 0x3c
   b6a7e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   b6a82:	e7dd      	b.n	b6a40 <_strtod_l+0xa68>
   b6a84:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
   b6a88:	e7f9      	b.n	b6a7e <_strtod_l+0xaa6>
   b6a8a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   b6a8e:	9b04      	ldr	r3, [sp, #16]
   b6a90:	2b00      	cmp	r3, #0
   b6a92:	d1a8      	bne.n	b69e6 <_strtod_l+0xa0e>
   b6a94:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   b6a98:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   b6a9a:	0d1b      	lsrs	r3, r3, #20
   b6a9c:	051b      	lsls	r3, r3, #20
   b6a9e:	429a      	cmp	r2, r3
   b6aa0:	d1a1      	bne.n	b69e6 <_strtod_l+0xa0e>
   b6aa2:	4640      	mov	r0, r8
   b6aa4:	4649      	mov	r1, r9
   b6aa6:	f001 f979 	bl	b7d9c <__aeabi_d2lz>
   b6aaa:	f7fe fe93 	bl	b57d4 <__aeabi_l2d>
   b6aae:	4602      	mov	r2, r0
   b6ab0:	460b      	mov	r3, r1
   b6ab2:	4640      	mov	r0, r8
   b6ab4:	4649      	mov	r1, r9
   b6ab6:	f7fe fd03 	bl	b54c0 <__aeabi_dsub>
   b6aba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b6abc:	f3cb 0313 	ubfx	r3, fp, #0, #20
   b6ac0:	ea43 030a 	orr.w	r3, r3, sl
   b6ac4:	4313      	orrs	r3, r2
   b6ac6:	4680      	mov	r8, r0
   b6ac8:	4689      	mov	r9, r1
   b6aca:	d055      	beq.n	b6b78 <_strtod_l+0xba0>
   b6acc:	a336      	add	r3, pc, #216	; (adr r3, b6ba8 <_strtod_l+0xbd0>)
   b6ace:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6ad2:	f7ff f91f 	bl	b5d14 <__aeabi_dcmplt>
   b6ad6:	2800      	cmp	r0, #0
   b6ad8:	f47f acd0 	bne.w	b647c <_strtod_l+0x4a4>
   b6adc:	a334      	add	r3, pc, #208	; (adr r3, b6bb0 <_strtod_l+0xbd8>)
   b6ade:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6ae2:	4640      	mov	r0, r8
   b6ae4:	4649      	mov	r1, r9
   b6ae6:	f7ff f933 	bl	b5d50 <__aeabi_dcmpgt>
   b6aea:	2800      	cmp	r0, #0
   b6aec:	f43f af7b 	beq.w	b69e6 <_strtod_l+0xa0e>
   b6af0:	e4c4      	b.n	b647c <_strtod_l+0x4a4>
   b6af2:	9b04      	ldr	r3, [sp, #16]
   b6af4:	b333      	cbz	r3, b6b44 <_strtod_l+0xb6c>
   b6af6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   b6af8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   b6afc:	d822      	bhi.n	b6b44 <_strtod_l+0xb6c>
   b6afe:	a32e      	add	r3, pc, #184	; (adr r3, b6bb8 <_strtod_l+0xbe0>)
   b6b00:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6b04:	4640      	mov	r0, r8
   b6b06:	4649      	mov	r1, r9
   b6b08:	f7ff f90e 	bl	b5d28 <__aeabi_dcmple>
   b6b0c:	b1a0      	cbz	r0, b6b38 <_strtod_l+0xb60>
   b6b0e:	4649      	mov	r1, r9
   b6b10:	4640      	mov	r0, r8
   b6b12:	f7ff f927 	bl	b5d64 <__aeabi_d2uiz>
   b6b16:	2801      	cmp	r0, #1
   b6b18:	bf38      	it	cc
   b6b1a:	2001      	movcc	r0, #1
   b6b1c:	f7fe fe0e 	bl	b573c <__aeabi_ui2d>
   b6b20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b6b22:	4680      	mov	r8, r0
   b6b24:	4689      	mov	r9, r1
   b6b26:	bb23      	cbnz	r3, b6b72 <_strtod_l+0xb9a>
   b6b28:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   b6b2c:	9010      	str	r0, [sp, #64]	; 0x40
   b6b2e:	9311      	str	r3, [sp, #68]	; 0x44
   b6b30:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   b6b34:	e9cd 2308 	strd	r2, r3, [sp, #32]
   b6b38:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b6b3a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   b6b3c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   b6b40:	1a9b      	subs	r3, r3, r2
   b6b42:	9309      	str	r3, [sp, #36]	; 0x24
   b6b44:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   b6b48:	eeb0 0a48 	vmov.f32	s0, s16
   b6b4c:	eef0 0a68 	vmov.f32	s1, s17
   b6b50:	e9cd 0108 	strd	r0, r1, [sp, #32]
   b6b54:	f000 ffac 	bl	b7ab0 <__ulp>
   b6b58:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   b6b5c:	ec53 2b10 	vmov	r2, r3, d0
   b6b60:	f7fe fe66 	bl	b5830 <__aeabi_dmul>
   b6b64:	ec53 2b18 	vmov	r2, r3, d8
   b6b68:	f7fe fcac 	bl	b54c4 <__adddf3>
   b6b6c:	4682      	mov	sl, r0
   b6b6e:	468b      	mov	fp, r1
   b6b70:	e78d      	b.n	b6a8e <_strtod_l+0xab6>
   b6b72:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
   b6b76:	e7db      	b.n	b6b30 <_strtod_l+0xb58>
   b6b78:	a311      	add	r3, pc, #68	; (adr r3, b6bc0 <_strtod_l+0xbe8>)
   b6b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
   b6b7e:	f7ff f8c9 	bl	b5d14 <__aeabi_dcmplt>
   b6b82:	e7b2      	b.n	b6aea <_strtod_l+0xb12>
   b6b84:	2300      	movs	r3, #0
   b6b86:	930a      	str	r3, [sp, #40]	; 0x28
   b6b88:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   b6b8a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b6b8c:	6013      	str	r3, [r2, #0]
   b6b8e:	f7ff ba6b 	b.w	b6068 <_strtod_l+0x90>
   b6b92:	2a65      	cmp	r2, #101	; 0x65
   b6b94:	f43f ab5f 	beq.w	b6256 <_strtod_l+0x27e>
   b6b98:	2a45      	cmp	r2, #69	; 0x45
   b6b9a:	f43f ab5c 	beq.w	b6256 <_strtod_l+0x27e>
   b6b9e:	2301      	movs	r3, #1
   b6ba0:	f7ff bb94 	b.w	b62cc <_strtod_l+0x2f4>
   b6ba4:	f3af 8000 	nop.w
   b6ba8:	94a03595 	.word	0x94a03595
   b6bac:	3fdfffff 	.word	0x3fdfffff
   b6bb0:	35afe535 	.word	0x35afe535
   b6bb4:	3fe00000 	.word	0x3fe00000
   b6bb8:	ffc00000 	.word	0xffc00000
   b6bbc:	41dfffff 	.word	0x41dfffff
   b6bc0:	94a03595 	.word	0x94a03595
   b6bc4:	3fcfffff 	.word	0x3fcfffff
   b6bc8:	3ff00000 	.word	0x3ff00000
   b6bcc:	7ff00000 	.word	0x7ff00000
   b6bd0:	7fe00000 	.word	0x7fe00000
   b6bd4:	7c9fffff 	.word	0x7c9fffff
   b6bd8:	3fe00000 	.word	0x3fe00000
   b6bdc:	bff00000 	.word	0xbff00000
   b6be0:	7fefffff 	.word	0x7fefffff

000b6be4 <strtod>:
   b6be4:	460a      	mov	r2, r1
   b6be6:	4601      	mov	r1, r0
   b6be8:	4802      	ldr	r0, [pc, #8]	; (b6bf4 <strtod+0x10>)
   b6bea:	4b03      	ldr	r3, [pc, #12]	; (b6bf8 <strtod+0x14>)
   b6bec:	6800      	ldr	r0, [r0, #0]
   b6bee:	f7ff b9f3 	b.w	b5fd8 <_strtod_l>
   b6bf2:	bf00      	nop
   b6bf4:	2003e4bc 	.word	0x2003e4bc
   b6bf8:	2003e528 	.word	0x2003e528

000b6bfc <__register_exitproc>:
   b6bfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b6c00:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b6cbc <__register_exitproc+0xc0>
   b6c04:	4606      	mov	r6, r0
   b6c06:	f8d8 0000 	ldr.w	r0, [r8]
   b6c0a:	461f      	mov	r7, r3
   b6c0c:	460d      	mov	r5, r1
   b6c0e:	4691      	mov	r9, r2
   b6c10:	f000 fbc6 	bl	b73a0 <__retarget_lock_acquire_recursive>
   b6c14:	4b25      	ldr	r3, [pc, #148]	; (b6cac <__register_exitproc+0xb0>)
   b6c16:	681c      	ldr	r4, [r3, #0]
   b6c18:	b934      	cbnz	r4, b6c28 <__register_exitproc+0x2c>
   b6c1a:	4c25      	ldr	r4, [pc, #148]	; (b6cb0 <__register_exitproc+0xb4>)
   b6c1c:	601c      	str	r4, [r3, #0]
   b6c1e:	4b25      	ldr	r3, [pc, #148]	; (b6cb4 <__register_exitproc+0xb8>)
   b6c20:	b113      	cbz	r3, b6c28 <__register_exitproc+0x2c>
   b6c22:	681b      	ldr	r3, [r3, #0]
   b6c24:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b6c28:	6863      	ldr	r3, [r4, #4]
   b6c2a:	2b1f      	cmp	r3, #31
   b6c2c:	dd07      	ble.n	b6c3e <__register_exitproc+0x42>
   b6c2e:	f8d8 0000 	ldr.w	r0, [r8]
   b6c32:	f000 fbb7 	bl	b73a4 <__retarget_lock_release_recursive>
   b6c36:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b6c3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b6c3e:	b34e      	cbz	r6, b6c94 <__register_exitproc+0x98>
   b6c40:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b6c44:	b988      	cbnz	r0, b6c6a <__register_exitproc+0x6e>
   b6c46:	4b1c      	ldr	r3, [pc, #112]	; (b6cb8 <__register_exitproc+0xbc>)
   b6c48:	b923      	cbnz	r3, b6c54 <__register_exitproc+0x58>
   b6c4a:	f8d8 0000 	ldr.w	r0, [r8]
   b6c4e:	f000 fba8 	bl	b73a2 <__retarget_lock_release>
   b6c52:	e7f0      	b.n	b6c36 <__register_exitproc+0x3a>
   b6c54:	f44f 7084 	mov.w	r0, #264	; 0x108
   b6c58:	f7fd fc68 	bl	b452c <malloc>
   b6c5c:	2800      	cmp	r0, #0
   b6c5e:	d0f4      	beq.n	b6c4a <__register_exitproc+0x4e>
   b6c60:	2300      	movs	r3, #0
   b6c62:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b6c66:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b6c6a:	6863      	ldr	r3, [r4, #4]
   b6c6c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b6c70:	2201      	movs	r2, #1
   b6c72:	409a      	lsls	r2, r3
   b6c74:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b6c78:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b6c7c:	4313      	orrs	r3, r2
   b6c7e:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b6c82:	2e02      	cmp	r6, #2
   b6c84:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b6c88:	bf02      	ittt	eq
   b6c8a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b6c8e:	4313      	orreq	r3, r2
   b6c90:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b6c94:	6863      	ldr	r3, [r4, #4]
   b6c96:	f8d8 0000 	ldr.w	r0, [r8]
   b6c9a:	1c5a      	adds	r2, r3, #1
   b6c9c:	3302      	adds	r3, #2
   b6c9e:	6062      	str	r2, [r4, #4]
   b6ca0:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b6ca4:	f000 fb7e 	bl	b73a4 <__retarget_lock_release_recursive>
   b6ca8:	2000      	movs	r0, #0
   b6caa:	e7c6      	b.n	b6c3a <__register_exitproc+0x3e>
   b6cac:	2003e7e8 	.word	0x2003e7e8
   b6cb0:	2003e75c 	.word	0x2003e75c
   b6cb4:	00000000 	.word	0x00000000
   b6cb8:	000b452d 	.word	0x000b452d
   b6cbc:	2003e520 	.word	0x2003e520

000b6cc0 <rshift>:
   b6cc0:	6903      	ldr	r3, [r0, #16]
   b6cc2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   b6cc6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6cca:	ea4f 1261 	mov.w	r2, r1, asr #5
   b6cce:	f100 0414 	add.w	r4, r0, #20
   b6cd2:	dd45      	ble.n	b6d60 <rshift+0xa0>
   b6cd4:	f011 011f 	ands.w	r1, r1, #31
   b6cd8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   b6cdc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   b6ce0:	d10c      	bne.n	b6cfc <rshift+0x3c>
   b6ce2:	f100 0710 	add.w	r7, r0, #16
   b6ce6:	4629      	mov	r1, r5
   b6ce8:	42b1      	cmp	r1, r6
   b6cea:	d334      	bcc.n	b6d56 <rshift+0x96>
   b6cec:	1a9b      	subs	r3, r3, r2
   b6cee:	009b      	lsls	r3, r3, #2
   b6cf0:	1eea      	subs	r2, r5, #3
   b6cf2:	4296      	cmp	r6, r2
   b6cf4:	bf38      	it	cc
   b6cf6:	2300      	movcc	r3, #0
   b6cf8:	4423      	add	r3, r4
   b6cfa:	e015      	b.n	b6d28 <rshift+0x68>
   b6cfc:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   b6d00:	f1c1 0820 	rsb	r8, r1, #32
   b6d04:	40cf      	lsrs	r7, r1
   b6d06:	f105 0e04 	add.w	lr, r5, #4
   b6d0a:	46a1      	mov	r9, r4
   b6d0c:	4576      	cmp	r6, lr
   b6d0e:	46f4      	mov	ip, lr
   b6d10:	d815      	bhi.n	b6d3e <rshift+0x7e>
   b6d12:	1a9a      	subs	r2, r3, r2
   b6d14:	0092      	lsls	r2, r2, #2
   b6d16:	3a04      	subs	r2, #4
   b6d18:	3501      	adds	r5, #1
   b6d1a:	42ae      	cmp	r6, r5
   b6d1c:	bf38      	it	cc
   b6d1e:	2200      	movcc	r2, #0
   b6d20:	18a3      	adds	r3, r4, r2
   b6d22:	50a7      	str	r7, [r4, r2]
   b6d24:	b107      	cbz	r7, b6d28 <rshift+0x68>
   b6d26:	3304      	adds	r3, #4
   b6d28:	1b1a      	subs	r2, r3, r4
   b6d2a:	42a3      	cmp	r3, r4
   b6d2c:	ea4f 02a2 	mov.w	r2, r2, asr #2
   b6d30:	bf08      	it	eq
   b6d32:	2300      	moveq	r3, #0
   b6d34:	6102      	str	r2, [r0, #16]
   b6d36:	bf08      	it	eq
   b6d38:	6143      	streq	r3, [r0, #20]
   b6d3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b6d3e:	f8dc c000 	ldr.w	ip, [ip]
   b6d42:	fa0c fc08 	lsl.w	ip, ip, r8
   b6d46:	ea4c 0707 	orr.w	r7, ip, r7
   b6d4a:	f849 7b04 	str.w	r7, [r9], #4
   b6d4e:	f85e 7b04 	ldr.w	r7, [lr], #4
   b6d52:	40cf      	lsrs	r7, r1
   b6d54:	e7da      	b.n	b6d0c <rshift+0x4c>
   b6d56:	f851 cb04 	ldr.w	ip, [r1], #4
   b6d5a:	f847 cf04 	str.w	ip, [r7, #4]!
   b6d5e:	e7c3      	b.n	b6ce8 <rshift+0x28>
   b6d60:	4623      	mov	r3, r4
   b6d62:	e7e1      	b.n	b6d28 <rshift+0x68>

000b6d64 <__hexdig_fun>:
   b6d64:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b6d68:	2b09      	cmp	r3, #9
   b6d6a:	d802      	bhi.n	b6d72 <__hexdig_fun+0xe>
   b6d6c:	3820      	subs	r0, #32
   b6d6e:	b2c0      	uxtb	r0, r0
   b6d70:	4770      	bx	lr
   b6d72:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   b6d76:	2b05      	cmp	r3, #5
   b6d78:	d801      	bhi.n	b6d7e <__hexdig_fun+0x1a>
   b6d7a:	3847      	subs	r0, #71	; 0x47
   b6d7c:	e7f7      	b.n	b6d6e <__hexdig_fun+0xa>
   b6d7e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   b6d82:	2b05      	cmp	r3, #5
   b6d84:	d801      	bhi.n	b6d8a <__hexdig_fun+0x26>
   b6d86:	3827      	subs	r0, #39	; 0x27
   b6d88:	e7f1      	b.n	b6d6e <__hexdig_fun+0xa>
   b6d8a:	2000      	movs	r0, #0
   b6d8c:	4770      	bx	lr
	...

000b6d90 <__gethex>:
   b6d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6d94:	ed2d 8b02 	vpush	{d8}
   b6d98:	b089      	sub	sp, #36	; 0x24
   b6d9a:	ee08 0a10 	vmov	s16, r0
   b6d9e:	9304      	str	r3, [sp, #16]
   b6da0:	4bb4      	ldr	r3, [pc, #720]	; (b7074 <__gethex+0x2e4>)
   b6da2:	681b      	ldr	r3, [r3, #0]
   b6da4:	9301      	str	r3, [sp, #4]
   b6da6:	4618      	mov	r0, r3
   b6da8:	468b      	mov	fp, r1
   b6daa:	4690      	mov	r8, r2
   b6dac:	f7ff f8db 	bl	b5f66 <strlen>
   b6db0:	9b01      	ldr	r3, [sp, #4]
   b6db2:	f8db 2000 	ldr.w	r2, [fp]
   b6db6:	4403      	add	r3, r0
   b6db8:	4682      	mov	sl, r0
   b6dba:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   b6dbe:	9305      	str	r3, [sp, #20]
   b6dc0:	1c93      	adds	r3, r2, #2
   b6dc2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   b6dc6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   b6dca:	32fe      	adds	r2, #254	; 0xfe
   b6dcc:	18d1      	adds	r1, r2, r3
   b6dce:	461f      	mov	r7, r3
   b6dd0:	f813 0b01 	ldrb.w	r0, [r3], #1
   b6dd4:	9100      	str	r1, [sp, #0]
   b6dd6:	2830      	cmp	r0, #48	; 0x30
   b6dd8:	d0f8      	beq.n	b6dcc <__gethex+0x3c>
   b6dda:	f7ff ffc3 	bl	b6d64 <__hexdig_fun>
   b6dde:	4604      	mov	r4, r0
   b6de0:	2800      	cmp	r0, #0
   b6de2:	d13a      	bne.n	b6e5a <__gethex+0xca>
   b6de4:	9901      	ldr	r1, [sp, #4]
   b6de6:	4652      	mov	r2, sl
   b6de8:	4638      	mov	r0, r7
   b6dea:	f7ff f8c4 	bl	b5f76 <strncmp>
   b6dee:	4605      	mov	r5, r0
   b6df0:	2800      	cmp	r0, #0
   b6df2:	d168      	bne.n	b6ec6 <__gethex+0x136>
   b6df4:	f817 000a 	ldrb.w	r0, [r7, sl]
   b6df8:	eb07 060a 	add.w	r6, r7, sl
   b6dfc:	f7ff ffb2 	bl	b6d64 <__hexdig_fun>
   b6e00:	2800      	cmp	r0, #0
   b6e02:	d062      	beq.n	b6eca <__gethex+0x13a>
   b6e04:	4633      	mov	r3, r6
   b6e06:	7818      	ldrb	r0, [r3, #0]
   b6e08:	2830      	cmp	r0, #48	; 0x30
   b6e0a:	461f      	mov	r7, r3
   b6e0c:	f103 0301 	add.w	r3, r3, #1
   b6e10:	d0f9      	beq.n	b6e06 <__gethex+0x76>
   b6e12:	f7ff ffa7 	bl	b6d64 <__hexdig_fun>
   b6e16:	2301      	movs	r3, #1
   b6e18:	fab0 f480 	clz	r4, r0
   b6e1c:	0964      	lsrs	r4, r4, #5
   b6e1e:	4635      	mov	r5, r6
   b6e20:	9300      	str	r3, [sp, #0]
   b6e22:	463a      	mov	r2, r7
   b6e24:	4616      	mov	r6, r2
   b6e26:	3201      	adds	r2, #1
   b6e28:	7830      	ldrb	r0, [r6, #0]
   b6e2a:	f7ff ff9b 	bl	b6d64 <__hexdig_fun>
   b6e2e:	2800      	cmp	r0, #0
   b6e30:	d1f8      	bne.n	b6e24 <__gethex+0x94>
   b6e32:	9901      	ldr	r1, [sp, #4]
   b6e34:	4652      	mov	r2, sl
   b6e36:	4630      	mov	r0, r6
   b6e38:	f7ff f89d 	bl	b5f76 <strncmp>
   b6e3c:	b980      	cbnz	r0, b6e60 <__gethex+0xd0>
   b6e3e:	b94d      	cbnz	r5, b6e54 <__gethex+0xc4>
   b6e40:	eb06 050a 	add.w	r5, r6, sl
   b6e44:	462a      	mov	r2, r5
   b6e46:	4616      	mov	r6, r2
   b6e48:	3201      	adds	r2, #1
   b6e4a:	7830      	ldrb	r0, [r6, #0]
   b6e4c:	f7ff ff8a 	bl	b6d64 <__hexdig_fun>
   b6e50:	2800      	cmp	r0, #0
   b6e52:	d1f8      	bne.n	b6e46 <__gethex+0xb6>
   b6e54:	1bad      	subs	r5, r5, r6
   b6e56:	00ad      	lsls	r5, r5, #2
   b6e58:	e004      	b.n	b6e64 <__gethex+0xd4>
   b6e5a:	2400      	movs	r4, #0
   b6e5c:	4625      	mov	r5, r4
   b6e5e:	e7e0      	b.n	b6e22 <__gethex+0x92>
   b6e60:	2d00      	cmp	r5, #0
   b6e62:	d1f7      	bne.n	b6e54 <__gethex+0xc4>
   b6e64:	7833      	ldrb	r3, [r6, #0]
   b6e66:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   b6e6a:	2b50      	cmp	r3, #80	; 0x50
   b6e6c:	d13b      	bne.n	b6ee6 <__gethex+0x156>
   b6e6e:	7873      	ldrb	r3, [r6, #1]
   b6e70:	2b2b      	cmp	r3, #43	; 0x2b
   b6e72:	d02c      	beq.n	b6ece <__gethex+0x13e>
   b6e74:	2b2d      	cmp	r3, #45	; 0x2d
   b6e76:	d02e      	beq.n	b6ed6 <__gethex+0x146>
   b6e78:	1c71      	adds	r1, r6, #1
   b6e7a:	f04f 0900 	mov.w	r9, #0
   b6e7e:	7808      	ldrb	r0, [r1, #0]
   b6e80:	f7ff ff70 	bl	b6d64 <__hexdig_fun>
   b6e84:	1e43      	subs	r3, r0, #1
   b6e86:	b2db      	uxtb	r3, r3
   b6e88:	2b18      	cmp	r3, #24
   b6e8a:	d82c      	bhi.n	b6ee6 <__gethex+0x156>
   b6e8c:	f1a0 0210 	sub.w	r2, r0, #16
   b6e90:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   b6e94:	f7ff ff66 	bl	b6d64 <__hexdig_fun>
   b6e98:	1e43      	subs	r3, r0, #1
   b6e9a:	b2db      	uxtb	r3, r3
   b6e9c:	2b18      	cmp	r3, #24
   b6e9e:	d91d      	bls.n	b6edc <__gethex+0x14c>
   b6ea0:	f1b9 0f00 	cmp.w	r9, #0
   b6ea4:	d000      	beq.n	b6ea8 <__gethex+0x118>
   b6ea6:	4252      	negs	r2, r2
   b6ea8:	4415      	add	r5, r2
   b6eaa:	f8cb 1000 	str.w	r1, [fp]
   b6eae:	b1e4      	cbz	r4, b6eea <__gethex+0x15a>
   b6eb0:	9b00      	ldr	r3, [sp, #0]
   b6eb2:	2b00      	cmp	r3, #0
   b6eb4:	bf14      	ite	ne
   b6eb6:	2700      	movne	r7, #0
   b6eb8:	2706      	moveq	r7, #6
   b6eba:	4638      	mov	r0, r7
   b6ebc:	b009      	add	sp, #36	; 0x24
   b6ebe:	ecbd 8b02 	vpop	{d8}
   b6ec2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b6ec6:	463e      	mov	r6, r7
   b6ec8:	4625      	mov	r5, r4
   b6eca:	2401      	movs	r4, #1
   b6ecc:	e7ca      	b.n	b6e64 <__gethex+0xd4>
   b6ece:	f04f 0900 	mov.w	r9, #0
   b6ed2:	1cb1      	adds	r1, r6, #2
   b6ed4:	e7d3      	b.n	b6e7e <__gethex+0xee>
   b6ed6:	f04f 0901 	mov.w	r9, #1
   b6eda:	e7fa      	b.n	b6ed2 <__gethex+0x142>
   b6edc:	230a      	movs	r3, #10
   b6ede:	fb03 0202 	mla	r2, r3, r2, r0
   b6ee2:	3a10      	subs	r2, #16
   b6ee4:	e7d4      	b.n	b6e90 <__gethex+0x100>
   b6ee6:	4631      	mov	r1, r6
   b6ee8:	e7df      	b.n	b6eaa <__gethex+0x11a>
   b6eea:	1bf3      	subs	r3, r6, r7
   b6eec:	3b01      	subs	r3, #1
   b6eee:	4621      	mov	r1, r4
   b6ef0:	2b07      	cmp	r3, #7
   b6ef2:	dc0b      	bgt.n	b6f0c <__gethex+0x17c>
   b6ef4:	ee18 0a10 	vmov	r0, s16
   b6ef8:	f000 fa68 	bl	b73cc <_Balloc>
   b6efc:	4604      	mov	r4, r0
   b6efe:	b940      	cbnz	r0, b6f12 <__gethex+0x182>
   b6f00:	4b5d      	ldr	r3, [pc, #372]	; (b7078 <__gethex+0x2e8>)
   b6f02:	4602      	mov	r2, r0
   b6f04:	21de      	movs	r1, #222	; 0xde
   b6f06:	485d      	ldr	r0, [pc, #372]	; (b707c <__gethex+0x2ec>)
   b6f08:	f7fd fb40 	bl	b458c <__assert_func>
   b6f0c:	3101      	adds	r1, #1
   b6f0e:	105b      	asrs	r3, r3, #1
   b6f10:	e7ee      	b.n	b6ef0 <__gethex+0x160>
   b6f12:	f100 0914 	add.w	r9, r0, #20
   b6f16:	f04f 0b00 	mov.w	fp, #0
   b6f1a:	f1ca 0301 	rsb	r3, sl, #1
   b6f1e:	f8cd 9008 	str.w	r9, [sp, #8]
   b6f22:	f8cd b000 	str.w	fp, [sp]
   b6f26:	9306      	str	r3, [sp, #24]
   b6f28:	42b7      	cmp	r7, r6
   b6f2a:	d340      	bcc.n	b6fae <__gethex+0x21e>
   b6f2c:	9802      	ldr	r0, [sp, #8]
   b6f2e:	9b00      	ldr	r3, [sp, #0]
   b6f30:	f840 3b04 	str.w	r3, [r0], #4
   b6f34:	eba0 0009 	sub.w	r0, r0, r9
   b6f38:	1080      	asrs	r0, r0, #2
   b6f3a:	0146      	lsls	r6, r0, #5
   b6f3c:	6120      	str	r0, [r4, #16]
   b6f3e:	4618      	mov	r0, r3
   b6f40:	f000 fb36 	bl	b75b0 <__hi0bits>
   b6f44:	1a30      	subs	r0, r6, r0
   b6f46:	f8d8 6000 	ldr.w	r6, [r8]
   b6f4a:	42b0      	cmp	r0, r6
   b6f4c:	dd63      	ble.n	b7016 <__gethex+0x286>
   b6f4e:	1b87      	subs	r7, r0, r6
   b6f50:	4639      	mov	r1, r7
   b6f52:	4620      	mov	r0, r4
   b6f54:	f000 feda 	bl	b7d0c <__any_on>
   b6f58:	4682      	mov	sl, r0
   b6f5a:	b1a8      	cbz	r0, b6f88 <__gethex+0x1f8>
   b6f5c:	1e7b      	subs	r3, r7, #1
   b6f5e:	1159      	asrs	r1, r3, #5
   b6f60:	f003 021f 	and.w	r2, r3, #31
   b6f64:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   b6f68:	f04f 0a01 	mov.w	sl, #1
   b6f6c:	fa0a f202 	lsl.w	r2, sl, r2
   b6f70:	420a      	tst	r2, r1
   b6f72:	d009      	beq.n	b6f88 <__gethex+0x1f8>
   b6f74:	4553      	cmp	r3, sl
   b6f76:	dd05      	ble.n	b6f84 <__gethex+0x1f4>
   b6f78:	1eb9      	subs	r1, r7, #2
   b6f7a:	4620      	mov	r0, r4
   b6f7c:	f000 fec6 	bl	b7d0c <__any_on>
   b6f80:	2800      	cmp	r0, #0
   b6f82:	d145      	bne.n	b7010 <__gethex+0x280>
   b6f84:	f04f 0a02 	mov.w	sl, #2
   b6f88:	4639      	mov	r1, r7
   b6f8a:	4620      	mov	r0, r4
   b6f8c:	f7ff fe98 	bl	b6cc0 <rshift>
   b6f90:	443d      	add	r5, r7
   b6f92:	f8d8 3008 	ldr.w	r3, [r8, #8]
   b6f96:	42ab      	cmp	r3, r5
   b6f98:	da4c      	bge.n	b7034 <__gethex+0x2a4>
   b6f9a:	ee18 0a10 	vmov	r0, s16
   b6f9e:	4621      	mov	r1, r4
   b6fa0:	f000 fa54 	bl	b744c <_Bfree>
   b6fa4:	9a14      	ldr	r2, [sp, #80]	; 0x50
   b6fa6:	2300      	movs	r3, #0
   b6fa8:	6013      	str	r3, [r2, #0]
   b6faa:	27a3      	movs	r7, #163	; 0xa3
   b6fac:	e785      	b.n	b6eba <__gethex+0x12a>
   b6fae:	1e73      	subs	r3, r6, #1
   b6fb0:	9a05      	ldr	r2, [sp, #20]
   b6fb2:	9303      	str	r3, [sp, #12]
   b6fb4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   b6fb8:	4293      	cmp	r3, r2
   b6fba:	d019      	beq.n	b6ff0 <__gethex+0x260>
   b6fbc:	f1bb 0f20 	cmp.w	fp, #32
   b6fc0:	d107      	bne.n	b6fd2 <__gethex+0x242>
   b6fc2:	9b02      	ldr	r3, [sp, #8]
   b6fc4:	9a00      	ldr	r2, [sp, #0]
   b6fc6:	f843 2b04 	str.w	r2, [r3], #4
   b6fca:	9302      	str	r3, [sp, #8]
   b6fcc:	2300      	movs	r3, #0
   b6fce:	9300      	str	r3, [sp, #0]
   b6fd0:	469b      	mov	fp, r3
   b6fd2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   b6fd6:	f7ff fec5 	bl	b6d64 <__hexdig_fun>
   b6fda:	9b00      	ldr	r3, [sp, #0]
   b6fdc:	f000 000f 	and.w	r0, r0, #15
   b6fe0:	fa00 f00b 	lsl.w	r0, r0, fp
   b6fe4:	4303      	orrs	r3, r0
   b6fe6:	9300      	str	r3, [sp, #0]
   b6fe8:	f10b 0b04 	add.w	fp, fp, #4
   b6fec:	9b03      	ldr	r3, [sp, #12]
   b6fee:	e00d      	b.n	b700c <__gethex+0x27c>
   b6ff0:	9b03      	ldr	r3, [sp, #12]
   b6ff2:	9a06      	ldr	r2, [sp, #24]
   b6ff4:	4413      	add	r3, r2
   b6ff6:	42bb      	cmp	r3, r7
   b6ff8:	d3e0      	bcc.n	b6fbc <__gethex+0x22c>
   b6ffa:	4618      	mov	r0, r3
   b6ffc:	9901      	ldr	r1, [sp, #4]
   b6ffe:	9307      	str	r3, [sp, #28]
   b7000:	4652      	mov	r2, sl
   b7002:	f7fe ffb8 	bl	b5f76 <strncmp>
   b7006:	9b07      	ldr	r3, [sp, #28]
   b7008:	2800      	cmp	r0, #0
   b700a:	d1d7      	bne.n	b6fbc <__gethex+0x22c>
   b700c:	461e      	mov	r6, r3
   b700e:	e78b      	b.n	b6f28 <__gethex+0x198>
   b7010:	f04f 0a03 	mov.w	sl, #3
   b7014:	e7b8      	b.n	b6f88 <__gethex+0x1f8>
   b7016:	da0a      	bge.n	b702e <__gethex+0x29e>
   b7018:	1a37      	subs	r7, r6, r0
   b701a:	4621      	mov	r1, r4
   b701c:	ee18 0a10 	vmov	r0, s16
   b7020:	463a      	mov	r2, r7
   b7022:	f000 fc2f 	bl	b7884 <__lshift>
   b7026:	1bed      	subs	r5, r5, r7
   b7028:	4604      	mov	r4, r0
   b702a:	f100 0914 	add.w	r9, r0, #20
   b702e:	f04f 0a00 	mov.w	sl, #0
   b7032:	e7ae      	b.n	b6f92 <__gethex+0x202>
   b7034:	f8d8 0004 	ldr.w	r0, [r8, #4]
   b7038:	42a8      	cmp	r0, r5
   b703a:	dd72      	ble.n	b7122 <__gethex+0x392>
   b703c:	1b45      	subs	r5, r0, r5
   b703e:	42ae      	cmp	r6, r5
   b7040:	dc36      	bgt.n	b70b0 <__gethex+0x320>
   b7042:	f8d8 300c 	ldr.w	r3, [r8, #12]
   b7046:	2b02      	cmp	r3, #2
   b7048:	d02a      	beq.n	b70a0 <__gethex+0x310>
   b704a:	2b03      	cmp	r3, #3
   b704c:	d02c      	beq.n	b70a8 <__gethex+0x318>
   b704e:	2b01      	cmp	r3, #1
   b7050:	d11c      	bne.n	b708c <__gethex+0x2fc>
   b7052:	42ae      	cmp	r6, r5
   b7054:	d11a      	bne.n	b708c <__gethex+0x2fc>
   b7056:	2e01      	cmp	r6, #1
   b7058:	d112      	bne.n	b7080 <__gethex+0x2f0>
   b705a:	9a04      	ldr	r2, [sp, #16]
   b705c:	f8d8 3004 	ldr.w	r3, [r8, #4]
   b7060:	6013      	str	r3, [r2, #0]
   b7062:	2301      	movs	r3, #1
   b7064:	6123      	str	r3, [r4, #16]
   b7066:	f8c9 3000 	str.w	r3, [r9]
   b706a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   b706c:	2762      	movs	r7, #98	; 0x62
   b706e:	601c      	str	r4, [r3, #0]
   b7070:	e723      	b.n	b6eba <__gethex+0x12a>
   b7072:	bf00      	nop
   b7074:	000b8218 	.word	0x000b8218
   b7078:	000b81a1 	.word	0x000b81a1
   b707c:	000b81b2 	.word	0x000b81b2
   b7080:	1e71      	subs	r1, r6, #1
   b7082:	4620      	mov	r0, r4
   b7084:	f000 fe42 	bl	b7d0c <__any_on>
   b7088:	2800      	cmp	r0, #0
   b708a:	d1e6      	bne.n	b705a <__gethex+0x2ca>
   b708c:	ee18 0a10 	vmov	r0, s16
   b7090:	4621      	mov	r1, r4
   b7092:	f000 f9db 	bl	b744c <_Bfree>
   b7096:	9a14      	ldr	r2, [sp, #80]	; 0x50
   b7098:	2300      	movs	r3, #0
   b709a:	6013      	str	r3, [r2, #0]
   b709c:	2750      	movs	r7, #80	; 0x50
   b709e:	e70c      	b.n	b6eba <__gethex+0x12a>
   b70a0:	9b15      	ldr	r3, [sp, #84]	; 0x54
   b70a2:	2b00      	cmp	r3, #0
   b70a4:	d1f2      	bne.n	b708c <__gethex+0x2fc>
   b70a6:	e7d8      	b.n	b705a <__gethex+0x2ca>
   b70a8:	9b15      	ldr	r3, [sp, #84]	; 0x54
   b70aa:	2b00      	cmp	r3, #0
   b70ac:	d1d5      	bne.n	b705a <__gethex+0x2ca>
   b70ae:	e7ed      	b.n	b708c <__gethex+0x2fc>
   b70b0:	1e6f      	subs	r7, r5, #1
   b70b2:	f1ba 0f00 	cmp.w	sl, #0
   b70b6:	d131      	bne.n	b711c <__gethex+0x38c>
   b70b8:	b127      	cbz	r7, b70c4 <__gethex+0x334>
   b70ba:	4639      	mov	r1, r7
   b70bc:	4620      	mov	r0, r4
   b70be:	f000 fe25 	bl	b7d0c <__any_on>
   b70c2:	4682      	mov	sl, r0
   b70c4:	117b      	asrs	r3, r7, #5
   b70c6:	2101      	movs	r1, #1
   b70c8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   b70cc:	f007 071f 	and.w	r7, r7, #31
   b70d0:	fa01 f707 	lsl.w	r7, r1, r7
   b70d4:	421f      	tst	r7, r3
   b70d6:	4629      	mov	r1, r5
   b70d8:	4620      	mov	r0, r4
   b70da:	bf18      	it	ne
   b70dc:	f04a 0a02 	orrne.w	sl, sl, #2
   b70e0:	1b76      	subs	r6, r6, r5
   b70e2:	f7ff fded 	bl	b6cc0 <rshift>
   b70e6:	f8d8 5004 	ldr.w	r5, [r8, #4]
   b70ea:	2702      	movs	r7, #2
   b70ec:	f1ba 0f00 	cmp.w	sl, #0
   b70f0:	d048      	beq.n	b7184 <__gethex+0x3f4>
   b70f2:	f8d8 300c 	ldr.w	r3, [r8, #12]
   b70f6:	2b02      	cmp	r3, #2
   b70f8:	d015      	beq.n	b7126 <__gethex+0x396>
   b70fa:	2b03      	cmp	r3, #3
   b70fc:	d017      	beq.n	b712e <__gethex+0x39e>
   b70fe:	2b01      	cmp	r3, #1
   b7100:	d109      	bne.n	b7116 <__gethex+0x386>
   b7102:	f01a 0f02 	tst.w	sl, #2
   b7106:	d006      	beq.n	b7116 <__gethex+0x386>
   b7108:	f8d9 0000 	ldr.w	r0, [r9]
   b710c:	ea4a 0a00 	orr.w	sl, sl, r0
   b7110:	f01a 0f01 	tst.w	sl, #1
   b7114:	d10e      	bne.n	b7134 <__gethex+0x3a4>
   b7116:	f047 0710 	orr.w	r7, r7, #16
   b711a:	e033      	b.n	b7184 <__gethex+0x3f4>
   b711c:	f04f 0a01 	mov.w	sl, #1
   b7120:	e7d0      	b.n	b70c4 <__gethex+0x334>
   b7122:	2701      	movs	r7, #1
   b7124:	e7e2      	b.n	b70ec <__gethex+0x35c>
   b7126:	9b15      	ldr	r3, [sp, #84]	; 0x54
   b7128:	f1c3 0301 	rsb	r3, r3, #1
   b712c:	9315      	str	r3, [sp, #84]	; 0x54
   b712e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   b7130:	2b00      	cmp	r3, #0
   b7132:	d0f0      	beq.n	b7116 <__gethex+0x386>
   b7134:	f8d4 b010 	ldr.w	fp, [r4, #16]
   b7138:	f104 0314 	add.w	r3, r4, #20
   b713c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
   b7140:	eb03 018b 	add.w	r1, r3, fp, lsl #2
   b7144:	f04f 0c00 	mov.w	ip, #0
   b7148:	4618      	mov	r0, r3
   b714a:	f853 2b04 	ldr.w	r2, [r3], #4
   b714e:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   b7152:	d01c      	beq.n	b718e <__gethex+0x3fe>
   b7154:	3201      	adds	r2, #1
   b7156:	6002      	str	r2, [r0, #0]
   b7158:	2f02      	cmp	r7, #2
   b715a:	f104 0314 	add.w	r3, r4, #20
   b715e:	d13f      	bne.n	b71e0 <__gethex+0x450>
   b7160:	f8d8 2000 	ldr.w	r2, [r8]
   b7164:	3a01      	subs	r2, #1
   b7166:	42b2      	cmp	r2, r6
   b7168:	d10a      	bne.n	b7180 <__gethex+0x3f0>
   b716a:	1171      	asrs	r1, r6, #5
   b716c:	2201      	movs	r2, #1
   b716e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   b7172:	f006 061f 	and.w	r6, r6, #31
   b7176:	fa02 f606 	lsl.w	r6, r2, r6
   b717a:	421e      	tst	r6, r3
   b717c:	bf18      	it	ne
   b717e:	4617      	movne	r7, r2
   b7180:	f047 0720 	orr.w	r7, r7, #32
   b7184:	9b14      	ldr	r3, [sp, #80]	; 0x50
   b7186:	601c      	str	r4, [r3, #0]
   b7188:	9b04      	ldr	r3, [sp, #16]
   b718a:	601d      	str	r5, [r3, #0]
   b718c:	e695      	b.n	b6eba <__gethex+0x12a>
   b718e:	4299      	cmp	r1, r3
   b7190:	f843 cc04 	str.w	ip, [r3, #-4]
   b7194:	d8d8      	bhi.n	b7148 <__gethex+0x3b8>
   b7196:	68a3      	ldr	r3, [r4, #8]
   b7198:	459b      	cmp	fp, r3
   b719a:	db19      	blt.n	b71d0 <__gethex+0x440>
   b719c:	6861      	ldr	r1, [r4, #4]
   b719e:	ee18 0a10 	vmov	r0, s16
   b71a2:	3101      	adds	r1, #1
   b71a4:	f000 f912 	bl	b73cc <_Balloc>
   b71a8:	4681      	mov	r9, r0
   b71aa:	b918      	cbnz	r0, b71b4 <__gethex+0x424>
   b71ac:	4b1a      	ldr	r3, [pc, #104]	; (b7218 <__gethex+0x488>)
   b71ae:	4602      	mov	r2, r0
   b71b0:	2184      	movs	r1, #132	; 0x84
   b71b2:	e6a8      	b.n	b6f06 <__gethex+0x176>
   b71b4:	6922      	ldr	r2, [r4, #16]
   b71b6:	3202      	adds	r2, #2
   b71b8:	f104 010c 	add.w	r1, r4, #12
   b71bc:	0092      	lsls	r2, r2, #2
   b71be:	300c      	adds	r0, #12
   b71c0:	f7fe fe67 	bl	b5e92 <memcpy>
   b71c4:	4621      	mov	r1, r4
   b71c6:	ee18 0a10 	vmov	r0, s16
   b71ca:	f000 f93f 	bl	b744c <_Bfree>
   b71ce:	464c      	mov	r4, r9
   b71d0:	6923      	ldr	r3, [r4, #16]
   b71d2:	1c5a      	adds	r2, r3, #1
   b71d4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   b71d8:	6122      	str	r2, [r4, #16]
   b71da:	2201      	movs	r2, #1
   b71dc:	615a      	str	r2, [r3, #20]
   b71de:	e7bb      	b.n	b7158 <__gethex+0x3c8>
   b71e0:	6922      	ldr	r2, [r4, #16]
   b71e2:	455a      	cmp	r2, fp
   b71e4:	dd0b      	ble.n	b71fe <__gethex+0x46e>
   b71e6:	2101      	movs	r1, #1
   b71e8:	4620      	mov	r0, r4
   b71ea:	f7ff fd69 	bl	b6cc0 <rshift>
   b71ee:	f8d8 3008 	ldr.w	r3, [r8, #8]
   b71f2:	3501      	adds	r5, #1
   b71f4:	42ab      	cmp	r3, r5
   b71f6:	f6ff aed0 	blt.w	b6f9a <__gethex+0x20a>
   b71fa:	2701      	movs	r7, #1
   b71fc:	e7c0      	b.n	b7180 <__gethex+0x3f0>
   b71fe:	f016 061f 	ands.w	r6, r6, #31
   b7202:	d0fa      	beq.n	b71fa <__gethex+0x46a>
   b7204:	4453      	add	r3, sl
   b7206:	f1c6 0620 	rsb	r6, r6, #32
   b720a:	f853 0c04 	ldr.w	r0, [r3, #-4]
   b720e:	f000 f9cf 	bl	b75b0 <__hi0bits>
   b7212:	42b0      	cmp	r0, r6
   b7214:	dbe7      	blt.n	b71e6 <__gethex+0x456>
   b7216:	e7f0      	b.n	b71fa <__gethex+0x46a>
   b7218:	000b81a1 	.word	0x000b81a1

000b721c <L_shift>:
   b721c:	f1c2 0208 	rsb	r2, r2, #8
   b7220:	0092      	lsls	r2, r2, #2
   b7222:	b570      	push	{r4, r5, r6, lr}
   b7224:	f1c2 0620 	rsb	r6, r2, #32
   b7228:	6843      	ldr	r3, [r0, #4]
   b722a:	6804      	ldr	r4, [r0, #0]
   b722c:	fa03 f506 	lsl.w	r5, r3, r6
   b7230:	432c      	orrs	r4, r5
   b7232:	40d3      	lsrs	r3, r2
   b7234:	6004      	str	r4, [r0, #0]
   b7236:	f840 3f04 	str.w	r3, [r0, #4]!
   b723a:	4288      	cmp	r0, r1
   b723c:	d3f4      	bcc.n	b7228 <L_shift+0xc>
   b723e:	bd70      	pop	{r4, r5, r6, pc}

000b7240 <__match>:
   b7240:	b530      	push	{r4, r5, lr}
   b7242:	6803      	ldr	r3, [r0, #0]
   b7244:	3301      	adds	r3, #1
   b7246:	f811 4b01 	ldrb.w	r4, [r1], #1
   b724a:	b914      	cbnz	r4, b7252 <__match+0x12>
   b724c:	6003      	str	r3, [r0, #0]
   b724e:	2001      	movs	r0, #1
   b7250:	bd30      	pop	{r4, r5, pc}
   b7252:	f813 2b01 	ldrb.w	r2, [r3], #1
   b7256:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   b725a:	2d19      	cmp	r5, #25
   b725c:	bf98      	it	ls
   b725e:	3220      	addls	r2, #32
   b7260:	42a2      	cmp	r2, r4
   b7262:	d0f0      	beq.n	b7246 <__match+0x6>
   b7264:	2000      	movs	r0, #0
   b7266:	e7f3      	b.n	b7250 <__match+0x10>

000b7268 <__hexnan>:
   b7268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b726c:	680b      	ldr	r3, [r1, #0]
   b726e:	115e      	asrs	r6, r3, #5
   b7270:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   b7274:	f013 031f 	ands.w	r3, r3, #31
   b7278:	b087      	sub	sp, #28
   b727a:	bf18      	it	ne
   b727c:	3604      	addne	r6, #4
   b727e:	2500      	movs	r5, #0
   b7280:	1f37      	subs	r7, r6, #4
   b7282:	4690      	mov	r8, r2
   b7284:	6802      	ldr	r2, [r0, #0]
   b7286:	9301      	str	r3, [sp, #4]
   b7288:	4682      	mov	sl, r0
   b728a:	f846 5c04 	str.w	r5, [r6, #-4]
   b728e:	46b9      	mov	r9, r7
   b7290:	463c      	mov	r4, r7
   b7292:	9502      	str	r5, [sp, #8]
   b7294:	46ab      	mov	fp, r5
   b7296:	7851      	ldrb	r1, [r2, #1]
   b7298:	1c53      	adds	r3, r2, #1
   b729a:	9303      	str	r3, [sp, #12]
   b729c:	b341      	cbz	r1, b72f0 <__hexnan+0x88>
   b729e:	4608      	mov	r0, r1
   b72a0:	9205      	str	r2, [sp, #20]
   b72a2:	9104      	str	r1, [sp, #16]
   b72a4:	f7ff fd5e 	bl	b6d64 <__hexdig_fun>
   b72a8:	2800      	cmp	r0, #0
   b72aa:	d14f      	bne.n	b734c <__hexnan+0xe4>
   b72ac:	9904      	ldr	r1, [sp, #16]
   b72ae:	9a05      	ldr	r2, [sp, #20]
   b72b0:	2920      	cmp	r1, #32
   b72b2:	d818      	bhi.n	b72e6 <__hexnan+0x7e>
   b72b4:	9b02      	ldr	r3, [sp, #8]
   b72b6:	459b      	cmp	fp, r3
   b72b8:	dd13      	ble.n	b72e2 <__hexnan+0x7a>
   b72ba:	454c      	cmp	r4, r9
   b72bc:	d206      	bcs.n	b72cc <__hexnan+0x64>
   b72be:	2d07      	cmp	r5, #7
   b72c0:	dc04      	bgt.n	b72cc <__hexnan+0x64>
   b72c2:	462a      	mov	r2, r5
   b72c4:	4649      	mov	r1, r9
   b72c6:	4620      	mov	r0, r4
   b72c8:	f7ff ffa8 	bl	b721c <L_shift>
   b72cc:	4544      	cmp	r4, r8
   b72ce:	d950      	bls.n	b7372 <__hexnan+0x10a>
   b72d0:	2300      	movs	r3, #0
   b72d2:	f1a4 0904 	sub.w	r9, r4, #4
   b72d6:	f844 3c04 	str.w	r3, [r4, #-4]
   b72da:	f8cd b008 	str.w	fp, [sp, #8]
   b72de:	464c      	mov	r4, r9
   b72e0:	461d      	mov	r5, r3
   b72e2:	9a03      	ldr	r2, [sp, #12]
   b72e4:	e7d7      	b.n	b7296 <__hexnan+0x2e>
   b72e6:	2929      	cmp	r1, #41	; 0x29
   b72e8:	d156      	bne.n	b7398 <__hexnan+0x130>
   b72ea:	3202      	adds	r2, #2
   b72ec:	f8ca 2000 	str.w	r2, [sl]
   b72f0:	f1bb 0f00 	cmp.w	fp, #0
   b72f4:	d050      	beq.n	b7398 <__hexnan+0x130>
   b72f6:	454c      	cmp	r4, r9
   b72f8:	d206      	bcs.n	b7308 <__hexnan+0xa0>
   b72fa:	2d07      	cmp	r5, #7
   b72fc:	dc04      	bgt.n	b7308 <__hexnan+0xa0>
   b72fe:	462a      	mov	r2, r5
   b7300:	4649      	mov	r1, r9
   b7302:	4620      	mov	r0, r4
   b7304:	f7ff ff8a 	bl	b721c <L_shift>
   b7308:	4544      	cmp	r4, r8
   b730a:	d934      	bls.n	b7376 <__hexnan+0x10e>
   b730c:	f1a8 0204 	sub.w	r2, r8, #4
   b7310:	4623      	mov	r3, r4
   b7312:	f853 1b04 	ldr.w	r1, [r3], #4
   b7316:	f842 1f04 	str.w	r1, [r2, #4]!
   b731a:	429f      	cmp	r7, r3
   b731c:	d2f9      	bcs.n	b7312 <__hexnan+0xaa>
   b731e:	1b3b      	subs	r3, r7, r4
   b7320:	f023 0303 	bic.w	r3, r3, #3
   b7324:	3304      	adds	r3, #4
   b7326:	3401      	adds	r4, #1
   b7328:	3e03      	subs	r6, #3
   b732a:	42b4      	cmp	r4, r6
   b732c:	bf88      	it	hi
   b732e:	2304      	movhi	r3, #4
   b7330:	4443      	add	r3, r8
   b7332:	2200      	movs	r2, #0
   b7334:	f843 2b04 	str.w	r2, [r3], #4
   b7338:	429f      	cmp	r7, r3
   b733a:	d2fb      	bcs.n	b7334 <__hexnan+0xcc>
   b733c:	683b      	ldr	r3, [r7, #0]
   b733e:	b91b      	cbnz	r3, b7348 <__hexnan+0xe0>
   b7340:	4547      	cmp	r7, r8
   b7342:	d127      	bne.n	b7394 <__hexnan+0x12c>
   b7344:	2301      	movs	r3, #1
   b7346:	603b      	str	r3, [r7, #0]
   b7348:	2005      	movs	r0, #5
   b734a:	e026      	b.n	b739a <__hexnan+0x132>
   b734c:	3501      	adds	r5, #1
   b734e:	2d08      	cmp	r5, #8
   b7350:	f10b 0b01 	add.w	fp, fp, #1
   b7354:	dd06      	ble.n	b7364 <__hexnan+0xfc>
   b7356:	4544      	cmp	r4, r8
   b7358:	d9c3      	bls.n	b72e2 <__hexnan+0x7a>
   b735a:	2300      	movs	r3, #0
   b735c:	f844 3c04 	str.w	r3, [r4, #-4]
   b7360:	2501      	movs	r5, #1
   b7362:	3c04      	subs	r4, #4
   b7364:	6822      	ldr	r2, [r4, #0]
   b7366:	f000 000f 	and.w	r0, r0, #15
   b736a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   b736e:	6022      	str	r2, [r4, #0]
   b7370:	e7b7      	b.n	b72e2 <__hexnan+0x7a>
   b7372:	2508      	movs	r5, #8
   b7374:	e7b5      	b.n	b72e2 <__hexnan+0x7a>
   b7376:	9b01      	ldr	r3, [sp, #4]
   b7378:	2b00      	cmp	r3, #0
   b737a:	d0df      	beq.n	b733c <__hexnan+0xd4>
   b737c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b7380:	f1c3 0320 	rsb	r3, r3, #32
   b7384:	fa22 f303 	lsr.w	r3, r2, r3
   b7388:	f856 2c04 	ldr.w	r2, [r6, #-4]
   b738c:	401a      	ands	r2, r3
   b738e:	f846 2c04 	str.w	r2, [r6, #-4]
   b7392:	e7d3      	b.n	b733c <__hexnan+0xd4>
   b7394:	3f04      	subs	r7, #4
   b7396:	e7d1      	b.n	b733c <__hexnan+0xd4>
   b7398:	2004      	movs	r0, #4
   b739a:	b007      	add	sp, #28
   b739c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b73a0 <__retarget_lock_acquire_recursive>:
   b73a0:	4770      	bx	lr

000b73a2 <__retarget_lock_release>:
   b73a2:	4770      	bx	lr

000b73a4 <__retarget_lock_release_recursive>:
   b73a4:	4770      	bx	lr

000b73a6 <__ascii_mbtowc>:
   b73a6:	b082      	sub	sp, #8
   b73a8:	b901      	cbnz	r1, b73ac <__ascii_mbtowc+0x6>
   b73aa:	a901      	add	r1, sp, #4
   b73ac:	b142      	cbz	r2, b73c0 <__ascii_mbtowc+0x1a>
   b73ae:	b14b      	cbz	r3, b73c4 <__ascii_mbtowc+0x1e>
   b73b0:	7813      	ldrb	r3, [r2, #0]
   b73b2:	600b      	str	r3, [r1, #0]
   b73b4:	7812      	ldrb	r2, [r2, #0]
   b73b6:	1e10      	subs	r0, r2, #0
   b73b8:	bf18      	it	ne
   b73ba:	2001      	movne	r0, #1
   b73bc:	b002      	add	sp, #8
   b73be:	4770      	bx	lr
   b73c0:	4610      	mov	r0, r2
   b73c2:	e7fb      	b.n	b73bc <__ascii_mbtowc+0x16>
   b73c4:	f06f 0001 	mvn.w	r0, #1
   b73c8:	e7f8      	b.n	b73bc <__ascii_mbtowc+0x16>
	...

000b73cc <_Balloc>:
   b73cc:	b570      	push	{r4, r5, r6, lr}
   b73ce:	6a46      	ldr	r6, [r0, #36]	; 0x24
   b73d0:	4604      	mov	r4, r0
   b73d2:	460d      	mov	r5, r1
   b73d4:	b976      	cbnz	r6, b73f4 <_Balloc+0x28>
   b73d6:	2010      	movs	r0, #16
   b73d8:	f7fd f8a8 	bl	b452c <malloc>
   b73dc:	4602      	mov	r2, r0
   b73de:	6260      	str	r0, [r4, #36]	; 0x24
   b73e0:	b920      	cbnz	r0, b73ec <_Balloc+0x20>
   b73e2:	4b18      	ldr	r3, [pc, #96]	; (b7444 <_Balloc+0x78>)
   b73e4:	4818      	ldr	r0, [pc, #96]	; (b7448 <_Balloc+0x7c>)
   b73e6:	2166      	movs	r1, #102	; 0x66
   b73e8:	f7fd f8d0 	bl	b458c <__assert_func>
   b73ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
   b73f0:	6006      	str	r6, [r0, #0]
   b73f2:	60c6      	str	r6, [r0, #12]
   b73f4:	6a66      	ldr	r6, [r4, #36]	; 0x24
   b73f6:	68f3      	ldr	r3, [r6, #12]
   b73f8:	b183      	cbz	r3, b741c <_Balloc+0x50>
   b73fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
   b73fc:	68db      	ldr	r3, [r3, #12]
   b73fe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   b7402:	b9b8      	cbnz	r0, b7434 <_Balloc+0x68>
   b7404:	2101      	movs	r1, #1
   b7406:	fa01 f605 	lsl.w	r6, r1, r5
   b740a:	1d72      	adds	r2, r6, #5
   b740c:	0092      	lsls	r2, r2, #2
   b740e:	4620      	mov	r0, r4
   b7410:	f000 fc9d 	bl	b7d4e <_calloc_r>
   b7414:	b160      	cbz	r0, b7430 <_Balloc+0x64>
   b7416:	e9c0 5601 	strd	r5, r6, [r0, #4]
   b741a:	e00e      	b.n	b743a <_Balloc+0x6e>
   b741c:	2221      	movs	r2, #33	; 0x21
   b741e:	2104      	movs	r1, #4
   b7420:	4620      	mov	r0, r4
   b7422:	f000 fc94 	bl	b7d4e <_calloc_r>
   b7426:	6a63      	ldr	r3, [r4, #36]	; 0x24
   b7428:	60f0      	str	r0, [r6, #12]
   b742a:	68db      	ldr	r3, [r3, #12]
   b742c:	2b00      	cmp	r3, #0
   b742e:	d1e4      	bne.n	b73fa <_Balloc+0x2e>
   b7430:	2000      	movs	r0, #0
   b7432:	bd70      	pop	{r4, r5, r6, pc}
   b7434:	6802      	ldr	r2, [r0, #0]
   b7436:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   b743a:	2300      	movs	r3, #0
   b743c:	e9c0 3303 	strd	r3, r3, [r0, #12]
   b7440:	e7f7      	b.n	b7432 <_Balloc+0x66>
   b7442:	bf00      	nop
   b7444:	000b7fd1 	.word	0x000b7fd1
   b7448:	000b822c 	.word	0x000b822c

000b744c <_Bfree>:
   b744c:	b570      	push	{r4, r5, r6, lr}
   b744e:	6a46      	ldr	r6, [r0, #36]	; 0x24
   b7450:	4605      	mov	r5, r0
   b7452:	460c      	mov	r4, r1
   b7454:	b976      	cbnz	r6, b7474 <_Bfree+0x28>
   b7456:	2010      	movs	r0, #16
   b7458:	f7fd f868 	bl	b452c <malloc>
   b745c:	4602      	mov	r2, r0
   b745e:	6268      	str	r0, [r5, #36]	; 0x24
   b7460:	b920      	cbnz	r0, b746c <_Bfree+0x20>
   b7462:	4b09      	ldr	r3, [pc, #36]	; (b7488 <_Bfree+0x3c>)
   b7464:	4809      	ldr	r0, [pc, #36]	; (b748c <_Bfree+0x40>)
   b7466:	218a      	movs	r1, #138	; 0x8a
   b7468:	f7fd f890 	bl	b458c <__assert_func>
   b746c:	e9c0 6601 	strd	r6, r6, [r0, #4]
   b7470:	6006      	str	r6, [r0, #0]
   b7472:	60c6      	str	r6, [r0, #12]
   b7474:	b13c      	cbz	r4, b7486 <_Bfree+0x3a>
   b7476:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   b7478:	6862      	ldr	r2, [r4, #4]
   b747a:	68db      	ldr	r3, [r3, #12]
   b747c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   b7480:	6021      	str	r1, [r4, #0]
   b7482:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   b7486:	bd70      	pop	{r4, r5, r6, pc}
   b7488:	000b7fd1 	.word	0x000b7fd1
   b748c:	000b822c 	.word	0x000b822c

000b7490 <__multadd>:
   b7490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7494:	690d      	ldr	r5, [r1, #16]
   b7496:	4607      	mov	r7, r0
   b7498:	460c      	mov	r4, r1
   b749a:	461e      	mov	r6, r3
   b749c:	f101 0c14 	add.w	ip, r1, #20
   b74a0:	2000      	movs	r0, #0
   b74a2:	f8dc 3000 	ldr.w	r3, [ip]
   b74a6:	b299      	uxth	r1, r3
   b74a8:	fb02 6101 	mla	r1, r2, r1, r6
   b74ac:	0c1e      	lsrs	r6, r3, #16
   b74ae:	0c0b      	lsrs	r3, r1, #16
   b74b0:	fb02 3306 	mla	r3, r2, r6, r3
   b74b4:	b289      	uxth	r1, r1
   b74b6:	3001      	adds	r0, #1
   b74b8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   b74bc:	4285      	cmp	r5, r0
   b74be:	f84c 1b04 	str.w	r1, [ip], #4
   b74c2:	ea4f 4613 	mov.w	r6, r3, lsr #16
   b74c6:	dcec      	bgt.n	b74a2 <__multadd+0x12>
   b74c8:	b30e      	cbz	r6, b750e <__multadd+0x7e>
   b74ca:	68a3      	ldr	r3, [r4, #8]
   b74cc:	42ab      	cmp	r3, r5
   b74ce:	dc19      	bgt.n	b7504 <__multadd+0x74>
   b74d0:	6861      	ldr	r1, [r4, #4]
   b74d2:	4638      	mov	r0, r7
   b74d4:	3101      	adds	r1, #1
   b74d6:	f7ff ff79 	bl	b73cc <_Balloc>
   b74da:	4680      	mov	r8, r0
   b74dc:	b928      	cbnz	r0, b74ea <__multadd+0x5a>
   b74de:	4602      	mov	r2, r0
   b74e0:	4b0c      	ldr	r3, [pc, #48]	; (b7514 <__multadd+0x84>)
   b74e2:	480d      	ldr	r0, [pc, #52]	; (b7518 <__multadd+0x88>)
   b74e4:	21b5      	movs	r1, #181	; 0xb5
   b74e6:	f7fd f851 	bl	b458c <__assert_func>
   b74ea:	6922      	ldr	r2, [r4, #16]
   b74ec:	3202      	adds	r2, #2
   b74ee:	f104 010c 	add.w	r1, r4, #12
   b74f2:	0092      	lsls	r2, r2, #2
   b74f4:	300c      	adds	r0, #12
   b74f6:	f7fe fccc 	bl	b5e92 <memcpy>
   b74fa:	4621      	mov	r1, r4
   b74fc:	4638      	mov	r0, r7
   b74fe:	f7ff ffa5 	bl	b744c <_Bfree>
   b7502:	4644      	mov	r4, r8
   b7504:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   b7508:	3501      	adds	r5, #1
   b750a:	615e      	str	r6, [r3, #20]
   b750c:	6125      	str	r5, [r4, #16]
   b750e:	4620      	mov	r0, r4
   b7510:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b7514:	000b81a1 	.word	0x000b81a1
   b7518:	000b822c 	.word	0x000b822c

000b751c <__s2b>:
   b751c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b7520:	460c      	mov	r4, r1
   b7522:	4615      	mov	r5, r2
   b7524:	461f      	mov	r7, r3
   b7526:	2209      	movs	r2, #9
   b7528:	3308      	adds	r3, #8
   b752a:	4606      	mov	r6, r0
   b752c:	fb93 f3f2 	sdiv	r3, r3, r2
   b7530:	2100      	movs	r1, #0
   b7532:	2201      	movs	r2, #1
   b7534:	429a      	cmp	r2, r3
   b7536:	db09      	blt.n	b754c <__s2b+0x30>
   b7538:	4630      	mov	r0, r6
   b753a:	f7ff ff47 	bl	b73cc <_Balloc>
   b753e:	b940      	cbnz	r0, b7552 <__s2b+0x36>
   b7540:	4602      	mov	r2, r0
   b7542:	4b19      	ldr	r3, [pc, #100]	; (b75a8 <__s2b+0x8c>)
   b7544:	4819      	ldr	r0, [pc, #100]	; (b75ac <__s2b+0x90>)
   b7546:	21ce      	movs	r1, #206	; 0xce
   b7548:	f7fd f820 	bl	b458c <__assert_func>
   b754c:	0052      	lsls	r2, r2, #1
   b754e:	3101      	adds	r1, #1
   b7550:	e7f0      	b.n	b7534 <__s2b+0x18>
   b7552:	9b08      	ldr	r3, [sp, #32]
   b7554:	6143      	str	r3, [r0, #20]
   b7556:	2d09      	cmp	r5, #9
   b7558:	f04f 0301 	mov.w	r3, #1
   b755c:	6103      	str	r3, [r0, #16]
   b755e:	dd16      	ble.n	b758e <__s2b+0x72>
   b7560:	f104 0909 	add.w	r9, r4, #9
   b7564:	46c8      	mov	r8, r9
   b7566:	442c      	add	r4, r5
   b7568:	f818 3b01 	ldrb.w	r3, [r8], #1
   b756c:	4601      	mov	r1, r0
   b756e:	3b30      	subs	r3, #48	; 0x30
   b7570:	220a      	movs	r2, #10
   b7572:	4630      	mov	r0, r6
   b7574:	f7ff ff8c 	bl	b7490 <__multadd>
   b7578:	45a0      	cmp	r8, r4
   b757a:	d1f5      	bne.n	b7568 <__s2b+0x4c>
   b757c:	f1a5 0408 	sub.w	r4, r5, #8
   b7580:	444c      	add	r4, r9
   b7582:	1b2d      	subs	r5, r5, r4
   b7584:	1963      	adds	r3, r4, r5
   b7586:	42bb      	cmp	r3, r7
   b7588:	db04      	blt.n	b7594 <__s2b+0x78>
   b758a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b758e:	340a      	adds	r4, #10
   b7590:	2509      	movs	r5, #9
   b7592:	e7f6      	b.n	b7582 <__s2b+0x66>
   b7594:	f814 3b01 	ldrb.w	r3, [r4], #1
   b7598:	4601      	mov	r1, r0
   b759a:	3b30      	subs	r3, #48	; 0x30
   b759c:	220a      	movs	r2, #10
   b759e:	4630      	mov	r0, r6
   b75a0:	f7ff ff76 	bl	b7490 <__multadd>
   b75a4:	e7ee      	b.n	b7584 <__s2b+0x68>
   b75a6:	bf00      	nop
   b75a8:	000b81a1 	.word	0x000b81a1
   b75ac:	000b822c 	.word	0x000b822c

000b75b0 <__hi0bits>:
   b75b0:	0c03      	lsrs	r3, r0, #16
   b75b2:	041b      	lsls	r3, r3, #16
   b75b4:	b9d3      	cbnz	r3, b75ec <__hi0bits+0x3c>
   b75b6:	0400      	lsls	r0, r0, #16
   b75b8:	2310      	movs	r3, #16
   b75ba:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   b75be:	bf04      	itt	eq
   b75c0:	0200      	lsleq	r0, r0, #8
   b75c2:	3308      	addeq	r3, #8
   b75c4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   b75c8:	bf04      	itt	eq
   b75ca:	0100      	lsleq	r0, r0, #4
   b75cc:	3304      	addeq	r3, #4
   b75ce:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   b75d2:	bf04      	itt	eq
   b75d4:	0080      	lsleq	r0, r0, #2
   b75d6:	3302      	addeq	r3, #2
   b75d8:	2800      	cmp	r0, #0
   b75da:	db05      	blt.n	b75e8 <__hi0bits+0x38>
   b75dc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   b75e0:	f103 0301 	add.w	r3, r3, #1
   b75e4:	bf08      	it	eq
   b75e6:	2320      	moveq	r3, #32
   b75e8:	4618      	mov	r0, r3
   b75ea:	4770      	bx	lr
   b75ec:	2300      	movs	r3, #0
   b75ee:	e7e4      	b.n	b75ba <__hi0bits+0xa>

000b75f0 <__lo0bits>:
   b75f0:	6803      	ldr	r3, [r0, #0]
   b75f2:	f013 0207 	ands.w	r2, r3, #7
   b75f6:	4601      	mov	r1, r0
   b75f8:	d00b      	beq.n	b7612 <__lo0bits+0x22>
   b75fa:	07da      	lsls	r2, r3, #31
   b75fc:	d423      	bmi.n	b7646 <__lo0bits+0x56>
   b75fe:	0798      	lsls	r0, r3, #30
   b7600:	bf49      	itett	mi
   b7602:	085b      	lsrmi	r3, r3, #1
   b7604:	089b      	lsrpl	r3, r3, #2
   b7606:	2001      	movmi	r0, #1
   b7608:	600b      	strmi	r3, [r1, #0]
   b760a:	bf5c      	itt	pl
   b760c:	600b      	strpl	r3, [r1, #0]
   b760e:	2002      	movpl	r0, #2
   b7610:	4770      	bx	lr
   b7612:	b298      	uxth	r0, r3
   b7614:	b9a8      	cbnz	r0, b7642 <__lo0bits+0x52>
   b7616:	0c1b      	lsrs	r3, r3, #16
   b7618:	2010      	movs	r0, #16
   b761a:	b2da      	uxtb	r2, r3
   b761c:	b90a      	cbnz	r2, b7622 <__lo0bits+0x32>
   b761e:	3008      	adds	r0, #8
   b7620:	0a1b      	lsrs	r3, r3, #8
   b7622:	071a      	lsls	r2, r3, #28
   b7624:	bf04      	itt	eq
   b7626:	091b      	lsreq	r3, r3, #4
   b7628:	3004      	addeq	r0, #4
   b762a:	079a      	lsls	r2, r3, #30
   b762c:	bf04      	itt	eq
   b762e:	089b      	lsreq	r3, r3, #2
   b7630:	3002      	addeq	r0, #2
   b7632:	07da      	lsls	r2, r3, #31
   b7634:	d403      	bmi.n	b763e <__lo0bits+0x4e>
   b7636:	085b      	lsrs	r3, r3, #1
   b7638:	f100 0001 	add.w	r0, r0, #1
   b763c:	d005      	beq.n	b764a <__lo0bits+0x5a>
   b763e:	600b      	str	r3, [r1, #0]
   b7640:	4770      	bx	lr
   b7642:	4610      	mov	r0, r2
   b7644:	e7e9      	b.n	b761a <__lo0bits+0x2a>
   b7646:	2000      	movs	r0, #0
   b7648:	4770      	bx	lr
   b764a:	2020      	movs	r0, #32
   b764c:	4770      	bx	lr
	...

000b7650 <__i2b>:
   b7650:	b510      	push	{r4, lr}
   b7652:	460c      	mov	r4, r1
   b7654:	2101      	movs	r1, #1
   b7656:	f7ff feb9 	bl	b73cc <_Balloc>
   b765a:	4602      	mov	r2, r0
   b765c:	b928      	cbnz	r0, b766a <__i2b+0x1a>
   b765e:	4b05      	ldr	r3, [pc, #20]	; (b7674 <__i2b+0x24>)
   b7660:	4805      	ldr	r0, [pc, #20]	; (b7678 <__i2b+0x28>)
   b7662:	f44f 71a0 	mov.w	r1, #320	; 0x140
   b7666:	f7fc ff91 	bl	b458c <__assert_func>
   b766a:	2301      	movs	r3, #1
   b766c:	6144      	str	r4, [r0, #20]
   b766e:	6103      	str	r3, [r0, #16]
   b7670:	bd10      	pop	{r4, pc}
   b7672:	bf00      	nop
   b7674:	000b81a1 	.word	0x000b81a1
   b7678:	000b822c 	.word	0x000b822c

000b767c <__multiply>:
   b767c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7680:	4691      	mov	r9, r2
   b7682:	690a      	ldr	r2, [r1, #16]
   b7684:	f8d9 3010 	ldr.w	r3, [r9, #16]
   b7688:	429a      	cmp	r2, r3
   b768a:	bfb8      	it	lt
   b768c:	460b      	movlt	r3, r1
   b768e:	460c      	mov	r4, r1
   b7690:	bfbc      	itt	lt
   b7692:	464c      	movlt	r4, r9
   b7694:	4699      	movlt	r9, r3
   b7696:	6927      	ldr	r7, [r4, #16]
   b7698:	f8d9 a010 	ldr.w	sl, [r9, #16]
   b769c:	68a3      	ldr	r3, [r4, #8]
   b769e:	6861      	ldr	r1, [r4, #4]
   b76a0:	eb07 060a 	add.w	r6, r7, sl
   b76a4:	42b3      	cmp	r3, r6
   b76a6:	b085      	sub	sp, #20
   b76a8:	bfb8      	it	lt
   b76aa:	3101      	addlt	r1, #1
   b76ac:	f7ff fe8e 	bl	b73cc <_Balloc>
   b76b0:	b930      	cbnz	r0, b76c0 <__multiply+0x44>
   b76b2:	4602      	mov	r2, r0
   b76b4:	4b44      	ldr	r3, [pc, #272]	; (b77c8 <__multiply+0x14c>)
   b76b6:	4845      	ldr	r0, [pc, #276]	; (b77cc <__multiply+0x150>)
   b76b8:	f240 115d 	movw	r1, #349	; 0x15d
   b76bc:	f7fc ff66 	bl	b458c <__assert_func>
   b76c0:	f100 0514 	add.w	r5, r0, #20
   b76c4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   b76c8:	462b      	mov	r3, r5
   b76ca:	2200      	movs	r2, #0
   b76cc:	4543      	cmp	r3, r8
   b76ce:	d321      	bcc.n	b7714 <__multiply+0x98>
   b76d0:	f104 0314 	add.w	r3, r4, #20
   b76d4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   b76d8:	f109 0314 	add.w	r3, r9, #20
   b76dc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
   b76e0:	9202      	str	r2, [sp, #8]
   b76e2:	1b3a      	subs	r2, r7, r4
   b76e4:	3a15      	subs	r2, #21
   b76e6:	f022 0203 	bic.w	r2, r2, #3
   b76ea:	3204      	adds	r2, #4
   b76ec:	f104 0115 	add.w	r1, r4, #21
   b76f0:	428f      	cmp	r7, r1
   b76f2:	bf38      	it	cc
   b76f4:	2204      	movcc	r2, #4
   b76f6:	9201      	str	r2, [sp, #4]
   b76f8:	9a02      	ldr	r2, [sp, #8]
   b76fa:	9303      	str	r3, [sp, #12]
   b76fc:	429a      	cmp	r2, r3
   b76fe:	d80c      	bhi.n	b771a <__multiply+0x9e>
   b7700:	2e00      	cmp	r6, #0
   b7702:	dd03      	ble.n	b770c <__multiply+0x90>
   b7704:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   b7708:	2b00      	cmp	r3, #0
   b770a:	d05a      	beq.n	b77c2 <__multiply+0x146>
   b770c:	6106      	str	r6, [r0, #16]
   b770e:	b005      	add	sp, #20
   b7710:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b7714:	f843 2b04 	str.w	r2, [r3], #4
   b7718:	e7d8      	b.n	b76cc <__multiply+0x50>
   b771a:	f8b3 a000 	ldrh.w	sl, [r3]
   b771e:	f1ba 0f00 	cmp.w	sl, #0
   b7722:	d024      	beq.n	b776e <__multiply+0xf2>
   b7724:	f104 0e14 	add.w	lr, r4, #20
   b7728:	46a9      	mov	r9, r5
   b772a:	f04f 0c00 	mov.w	ip, #0
   b772e:	f85e 2b04 	ldr.w	r2, [lr], #4
   b7732:	f8d9 1000 	ldr.w	r1, [r9]
   b7736:	fa1f fb82 	uxth.w	fp, r2
   b773a:	b289      	uxth	r1, r1
   b773c:	fb0a 110b 	mla	r1, sl, fp, r1
   b7740:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   b7744:	f8d9 2000 	ldr.w	r2, [r9]
   b7748:	4461      	add	r1, ip
   b774a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   b774e:	fb0a c20b 	mla	r2, sl, fp, ip
   b7752:	eb02 4211 	add.w	r2, r2, r1, lsr #16
   b7756:	b289      	uxth	r1, r1
   b7758:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   b775c:	4577      	cmp	r7, lr
   b775e:	f849 1b04 	str.w	r1, [r9], #4
   b7762:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   b7766:	d8e2      	bhi.n	b772e <__multiply+0xb2>
   b7768:	9a01      	ldr	r2, [sp, #4]
   b776a:	f845 c002 	str.w	ip, [r5, r2]
   b776e:	9a03      	ldr	r2, [sp, #12]
   b7770:	f8b2 9002 	ldrh.w	r9, [r2, #2]
   b7774:	3304      	adds	r3, #4
   b7776:	f1b9 0f00 	cmp.w	r9, #0
   b777a:	d020      	beq.n	b77be <__multiply+0x142>
   b777c:	6829      	ldr	r1, [r5, #0]
   b777e:	f104 0c14 	add.w	ip, r4, #20
   b7782:	46ae      	mov	lr, r5
   b7784:	f04f 0a00 	mov.w	sl, #0
   b7788:	f8bc b000 	ldrh.w	fp, [ip]
   b778c:	f8be 2002 	ldrh.w	r2, [lr, #2]
   b7790:	fb09 220b 	mla	r2, r9, fp, r2
   b7794:	4492      	add	sl, r2
   b7796:	b289      	uxth	r1, r1
   b7798:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   b779c:	f84e 1b04 	str.w	r1, [lr], #4
   b77a0:	f85c 2b04 	ldr.w	r2, [ip], #4
   b77a4:	f8be 1000 	ldrh.w	r1, [lr]
   b77a8:	0c12      	lsrs	r2, r2, #16
   b77aa:	fb09 1102 	mla	r1, r9, r2, r1
   b77ae:	eb01 411a 	add.w	r1, r1, sl, lsr #16
   b77b2:	4567      	cmp	r7, ip
   b77b4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
   b77b8:	d8e6      	bhi.n	b7788 <__multiply+0x10c>
   b77ba:	9a01      	ldr	r2, [sp, #4]
   b77bc:	50a9      	str	r1, [r5, r2]
   b77be:	3504      	adds	r5, #4
   b77c0:	e79a      	b.n	b76f8 <__multiply+0x7c>
   b77c2:	3e01      	subs	r6, #1
   b77c4:	e79c      	b.n	b7700 <__multiply+0x84>
   b77c6:	bf00      	nop
   b77c8:	000b81a1 	.word	0x000b81a1
   b77cc:	000b822c 	.word	0x000b822c

000b77d0 <__pow5mult>:
   b77d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b77d4:	4615      	mov	r5, r2
   b77d6:	f012 0203 	ands.w	r2, r2, #3
   b77da:	4606      	mov	r6, r0
   b77dc:	460f      	mov	r7, r1
   b77de:	d007      	beq.n	b77f0 <__pow5mult+0x20>
   b77e0:	4c25      	ldr	r4, [pc, #148]	; (b7878 <__pow5mult+0xa8>)
   b77e2:	3a01      	subs	r2, #1
   b77e4:	2300      	movs	r3, #0
   b77e6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   b77ea:	f7ff fe51 	bl	b7490 <__multadd>
   b77ee:	4607      	mov	r7, r0
   b77f0:	10ad      	asrs	r5, r5, #2
   b77f2:	d03d      	beq.n	b7870 <__pow5mult+0xa0>
   b77f4:	6a74      	ldr	r4, [r6, #36]	; 0x24
   b77f6:	b97c      	cbnz	r4, b7818 <__pow5mult+0x48>
   b77f8:	2010      	movs	r0, #16
   b77fa:	f7fc fe97 	bl	b452c <malloc>
   b77fe:	4602      	mov	r2, r0
   b7800:	6270      	str	r0, [r6, #36]	; 0x24
   b7802:	b928      	cbnz	r0, b7810 <__pow5mult+0x40>
   b7804:	4b1d      	ldr	r3, [pc, #116]	; (b787c <__pow5mult+0xac>)
   b7806:	481e      	ldr	r0, [pc, #120]	; (b7880 <__pow5mult+0xb0>)
   b7808:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   b780c:	f7fc febe 	bl	b458c <__assert_func>
   b7810:	e9c0 4401 	strd	r4, r4, [r0, #4]
   b7814:	6004      	str	r4, [r0, #0]
   b7816:	60c4      	str	r4, [r0, #12]
   b7818:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   b781c:	f8d8 4008 	ldr.w	r4, [r8, #8]
   b7820:	b94c      	cbnz	r4, b7836 <__pow5mult+0x66>
   b7822:	f240 2171 	movw	r1, #625	; 0x271
   b7826:	4630      	mov	r0, r6
   b7828:	f7ff ff12 	bl	b7650 <__i2b>
   b782c:	2300      	movs	r3, #0
   b782e:	f8c8 0008 	str.w	r0, [r8, #8]
   b7832:	4604      	mov	r4, r0
   b7834:	6003      	str	r3, [r0, #0]
   b7836:	f04f 0900 	mov.w	r9, #0
   b783a:	07eb      	lsls	r3, r5, #31
   b783c:	d50a      	bpl.n	b7854 <__pow5mult+0x84>
   b783e:	4639      	mov	r1, r7
   b7840:	4622      	mov	r2, r4
   b7842:	4630      	mov	r0, r6
   b7844:	f7ff ff1a 	bl	b767c <__multiply>
   b7848:	4639      	mov	r1, r7
   b784a:	4680      	mov	r8, r0
   b784c:	4630      	mov	r0, r6
   b784e:	f7ff fdfd 	bl	b744c <_Bfree>
   b7852:	4647      	mov	r7, r8
   b7854:	106d      	asrs	r5, r5, #1
   b7856:	d00b      	beq.n	b7870 <__pow5mult+0xa0>
   b7858:	6820      	ldr	r0, [r4, #0]
   b785a:	b938      	cbnz	r0, b786c <__pow5mult+0x9c>
   b785c:	4622      	mov	r2, r4
   b785e:	4621      	mov	r1, r4
   b7860:	4630      	mov	r0, r6
   b7862:	f7ff ff0b 	bl	b767c <__multiply>
   b7866:	6020      	str	r0, [r4, #0]
   b7868:	f8c0 9000 	str.w	r9, [r0]
   b786c:	4604      	mov	r4, r0
   b786e:	e7e4      	b.n	b783a <__pow5mult+0x6a>
   b7870:	4638      	mov	r0, r7
   b7872:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b7876:	bf00      	nop
   b7878:	000b8378 	.word	0x000b8378
   b787c:	000b7fd1 	.word	0x000b7fd1
   b7880:	000b822c 	.word	0x000b822c

000b7884 <__lshift>:
   b7884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b7888:	460c      	mov	r4, r1
   b788a:	6849      	ldr	r1, [r1, #4]
   b788c:	6923      	ldr	r3, [r4, #16]
   b788e:	eb03 1862 	add.w	r8, r3, r2, asr #5
   b7892:	68a3      	ldr	r3, [r4, #8]
   b7894:	4607      	mov	r7, r0
   b7896:	4691      	mov	r9, r2
   b7898:	ea4f 1a62 	mov.w	sl, r2, asr #5
   b789c:	f108 0601 	add.w	r6, r8, #1
   b78a0:	42b3      	cmp	r3, r6
   b78a2:	db0b      	blt.n	b78bc <__lshift+0x38>
   b78a4:	4638      	mov	r0, r7
   b78a6:	f7ff fd91 	bl	b73cc <_Balloc>
   b78aa:	4605      	mov	r5, r0
   b78ac:	b948      	cbnz	r0, b78c2 <__lshift+0x3e>
   b78ae:	4602      	mov	r2, r0
   b78b0:	4b2a      	ldr	r3, [pc, #168]	; (b795c <__lshift+0xd8>)
   b78b2:	482b      	ldr	r0, [pc, #172]	; (b7960 <__lshift+0xdc>)
   b78b4:	f240 11d9 	movw	r1, #473	; 0x1d9
   b78b8:	f7fc fe68 	bl	b458c <__assert_func>
   b78bc:	3101      	adds	r1, #1
   b78be:	005b      	lsls	r3, r3, #1
   b78c0:	e7ee      	b.n	b78a0 <__lshift+0x1c>
   b78c2:	2300      	movs	r3, #0
   b78c4:	f100 0114 	add.w	r1, r0, #20
   b78c8:	f100 0210 	add.w	r2, r0, #16
   b78cc:	4618      	mov	r0, r3
   b78ce:	4553      	cmp	r3, sl
   b78d0:	db37      	blt.n	b7942 <__lshift+0xbe>
   b78d2:	6920      	ldr	r0, [r4, #16]
   b78d4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   b78d8:	f104 0314 	add.w	r3, r4, #20
   b78dc:	f019 091f 	ands.w	r9, r9, #31
   b78e0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   b78e4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   b78e8:	d02f      	beq.n	b794a <__lshift+0xc6>
   b78ea:	f1c9 0e20 	rsb	lr, r9, #32
   b78ee:	468a      	mov	sl, r1
   b78f0:	f04f 0c00 	mov.w	ip, #0
   b78f4:	681a      	ldr	r2, [r3, #0]
   b78f6:	fa02 f209 	lsl.w	r2, r2, r9
   b78fa:	ea42 020c 	orr.w	r2, r2, ip
   b78fe:	f84a 2b04 	str.w	r2, [sl], #4
   b7902:	f853 2b04 	ldr.w	r2, [r3], #4
   b7906:	4298      	cmp	r0, r3
   b7908:	fa22 fc0e 	lsr.w	ip, r2, lr
   b790c:	d8f2      	bhi.n	b78f4 <__lshift+0x70>
   b790e:	1b03      	subs	r3, r0, r4
   b7910:	3b15      	subs	r3, #21
   b7912:	f023 0303 	bic.w	r3, r3, #3
   b7916:	3304      	adds	r3, #4
   b7918:	f104 0215 	add.w	r2, r4, #21
   b791c:	4290      	cmp	r0, r2
   b791e:	bf38      	it	cc
   b7920:	2304      	movcc	r3, #4
   b7922:	f841 c003 	str.w	ip, [r1, r3]
   b7926:	f1bc 0f00 	cmp.w	ip, #0
   b792a:	d001      	beq.n	b7930 <__lshift+0xac>
   b792c:	f108 0602 	add.w	r6, r8, #2
   b7930:	3e01      	subs	r6, #1
   b7932:	4638      	mov	r0, r7
   b7934:	612e      	str	r6, [r5, #16]
   b7936:	4621      	mov	r1, r4
   b7938:	f7ff fd88 	bl	b744c <_Bfree>
   b793c:	4628      	mov	r0, r5
   b793e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b7942:	f842 0f04 	str.w	r0, [r2, #4]!
   b7946:	3301      	adds	r3, #1
   b7948:	e7c1      	b.n	b78ce <__lshift+0x4a>
   b794a:	3904      	subs	r1, #4
   b794c:	f853 2b04 	ldr.w	r2, [r3], #4
   b7950:	f841 2f04 	str.w	r2, [r1, #4]!
   b7954:	4298      	cmp	r0, r3
   b7956:	d8f9      	bhi.n	b794c <__lshift+0xc8>
   b7958:	e7ea      	b.n	b7930 <__lshift+0xac>
   b795a:	bf00      	nop
   b795c:	000b81a1 	.word	0x000b81a1
   b7960:	000b822c 	.word	0x000b822c

000b7964 <__mcmp>:
   b7964:	b530      	push	{r4, r5, lr}
   b7966:	6902      	ldr	r2, [r0, #16]
   b7968:	690c      	ldr	r4, [r1, #16]
   b796a:	1b12      	subs	r2, r2, r4
   b796c:	d10e      	bne.n	b798c <__mcmp+0x28>
   b796e:	f100 0314 	add.w	r3, r0, #20
   b7972:	3114      	adds	r1, #20
   b7974:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   b7978:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   b797c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   b7980:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   b7984:	42a5      	cmp	r5, r4
   b7986:	d003      	beq.n	b7990 <__mcmp+0x2c>
   b7988:	d305      	bcc.n	b7996 <__mcmp+0x32>
   b798a:	2201      	movs	r2, #1
   b798c:	4610      	mov	r0, r2
   b798e:	bd30      	pop	{r4, r5, pc}
   b7990:	4283      	cmp	r3, r0
   b7992:	d3f3      	bcc.n	b797c <__mcmp+0x18>
   b7994:	e7fa      	b.n	b798c <__mcmp+0x28>
   b7996:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b799a:	e7f7      	b.n	b798c <__mcmp+0x28>

000b799c <__mdiff>:
   b799c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b79a0:	460c      	mov	r4, r1
   b79a2:	4606      	mov	r6, r0
   b79a4:	4611      	mov	r1, r2
   b79a6:	4620      	mov	r0, r4
   b79a8:	4690      	mov	r8, r2
   b79aa:	f7ff ffdb 	bl	b7964 <__mcmp>
   b79ae:	1e05      	subs	r5, r0, #0
   b79b0:	d110      	bne.n	b79d4 <__mdiff+0x38>
   b79b2:	4629      	mov	r1, r5
   b79b4:	4630      	mov	r0, r6
   b79b6:	f7ff fd09 	bl	b73cc <_Balloc>
   b79ba:	b930      	cbnz	r0, b79ca <__mdiff+0x2e>
   b79bc:	4b3a      	ldr	r3, [pc, #232]	; (b7aa8 <__mdiff+0x10c>)
   b79be:	4602      	mov	r2, r0
   b79c0:	f240 2132 	movw	r1, #562	; 0x232
   b79c4:	4839      	ldr	r0, [pc, #228]	; (b7aac <__mdiff+0x110>)
   b79c6:	f7fc fde1 	bl	b458c <__assert_func>
   b79ca:	2301      	movs	r3, #1
   b79cc:	e9c0 3504 	strd	r3, r5, [r0, #16]
   b79d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b79d4:	bfa4      	itt	ge
   b79d6:	4643      	movge	r3, r8
   b79d8:	46a0      	movge	r8, r4
   b79da:	4630      	mov	r0, r6
   b79dc:	f8d8 1004 	ldr.w	r1, [r8, #4]
   b79e0:	bfa6      	itte	ge
   b79e2:	461c      	movge	r4, r3
   b79e4:	2500      	movge	r5, #0
   b79e6:	2501      	movlt	r5, #1
   b79e8:	f7ff fcf0 	bl	b73cc <_Balloc>
   b79ec:	b920      	cbnz	r0, b79f8 <__mdiff+0x5c>
   b79ee:	4b2e      	ldr	r3, [pc, #184]	; (b7aa8 <__mdiff+0x10c>)
   b79f0:	4602      	mov	r2, r0
   b79f2:	f44f 7110 	mov.w	r1, #576	; 0x240
   b79f6:	e7e5      	b.n	b79c4 <__mdiff+0x28>
   b79f8:	f8d8 7010 	ldr.w	r7, [r8, #16]
   b79fc:	6926      	ldr	r6, [r4, #16]
   b79fe:	60c5      	str	r5, [r0, #12]
   b7a00:	f104 0914 	add.w	r9, r4, #20
   b7a04:	f108 0514 	add.w	r5, r8, #20
   b7a08:	f100 0e14 	add.w	lr, r0, #20
   b7a0c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
   b7a10:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   b7a14:	f108 0210 	add.w	r2, r8, #16
   b7a18:	46f2      	mov	sl, lr
   b7a1a:	2100      	movs	r1, #0
   b7a1c:	f859 3b04 	ldr.w	r3, [r9], #4
   b7a20:	f852 bf04 	ldr.w	fp, [r2, #4]!
   b7a24:	fa1f f883 	uxth.w	r8, r3
   b7a28:	fa11 f18b 	uxtah	r1, r1, fp
   b7a2c:	0c1b      	lsrs	r3, r3, #16
   b7a2e:	eba1 0808 	sub.w	r8, r1, r8
   b7a32:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   b7a36:	eb03 4328 	add.w	r3, r3, r8, asr #16
   b7a3a:	fa1f f888 	uxth.w	r8, r8
   b7a3e:	1419      	asrs	r1, r3, #16
   b7a40:	454e      	cmp	r6, r9
   b7a42:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   b7a46:	f84a 3b04 	str.w	r3, [sl], #4
   b7a4a:	d8e7      	bhi.n	b7a1c <__mdiff+0x80>
   b7a4c:	1b33      	subs	r3, r6, r4
   b7a4e:	3b15      	subs	r3, #21
   b7a50:	f023 0303 	bic.w	r3, r3, #3
   b7a54:	3304      	adds	r3, #4
   b7a56:	3415      	adds	r4, #21
   b7a58:	42a6      	cmp	r6, r4
   b7a5a:	bf38      	it	cc
   b7a5c:	2304      	movcc	r3, #4
   b7a5e:	441d      	add	r5, r3
   b7a60:	4473      	add	r3, lr
   b7a62:	469e      	mov	lr, r3
   b7a64:	462e      	mov	r6, r5
   b7a66:	4566      	cmp	r6, ip
   b7a68:	d30e      	bcc.n	b7a88 <__mdiff+0xec>
   b7a6a:	f10c 0203 	add.w	r2, ip, #3
   b7a6e:	1b52      	subs	r2, r2, r5
   b7a70:	f022 0203 	bic.w	r2, r2, #3
   b7a74:	3d03      	subs	r5, #3
   b7a76:	45ac      	cmp	ip, r5
   b7a78:	bf38      	it	cc
   b7a7a:	2200      	movcc	r2, #0
   b7a7c:	441a      	add	r2, r3
   b7a7e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   b7a82:	b17b      	cbz	r3, b7aa4 <__mdiff+0x108>
   b7a84:	6107      	str	r7, [r0, #16]
   b7a86:	e7a3      	b.n	b79d0 <__mdiff+0x34>
   b7a88:	f856 8b04 	ldr.w	r8, [r6], #4
   b7a8c:	fa11 f288 	uxtah	r2, r1, r8
   b7a90:	1414      	asrs	r4, r2, #16
   b7a92:	eb04 4418 	add.w	r4, r4, r8, lsr #16
   b7a96:	b292      	uxth	r2, r2
   b7a98:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   b7a9c:	f84e 2b04 	str.w	r2, [lr], #4
   b7aa0:	1421      	asrs	r1, r4, #16
   b7aa2:	e7e0      	b.n	b7a66 <__mdiff+0xca>
   b7aa4:	3f01      	subs	r7, #1
   b7aa6:	e7ea      	b.n	b7a7e <__mdiff+0xe2>
   b7aa8:	000b81a1 	.word	0x000b81a1
   b7aac:	000b822c 	.word	0x000b822c

000b7ab0 <__ulp>:
   b7ab0:	b082      	sub	sp, #8
   b7ab2:	ed8d 0b00 	vstr	d0, [sp]
   b7ab6:	9b01      	ldr	r3, [sp, #4]
   b7ab8:	4912      	ldr	r1, [pc, #72]	; (b7b04 <__ulp+0x54>)
   b7aba:	4019      	ands	r1, r3
   b7abc:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   b7ac0:	2900      	cmp	r1, #0
   b7ac2:	dd05      	ble.n	b7ad0 <__ulp+0x20>
   b7ac4:	2200      	movs	r2, #0
   b7ac6:	460b      	mov	r3, r1
   b7ac8:	ec43 2b10 	vmov	d0, r2, r3
   b7acc:	b002      	add	sp, #8
   b7ace:	4770      	bx	lr
   b7ad0:	4249      	negs	r1, r1
   b7ad2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   b7ad6:	ea4f 5021 	mov.w	r0, r1, asr #20
   b7ada:	f04f 0200 	mov.w	r2, #0
   b7ade:	f04f 0300 	mov.w	r3, #0
   b7ae2:	da04      	bge.n	b7aee <__ulp+0x3e>
   b7ae4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   b7ae8:	fa41 f300 	asr.w	r3, r1, r0
   b7aec:	e7ec      	b.n	b7ac8 <__ulp+0x18>
   b7aee:	f1a0 0114 	sub.w	r1, r0, #20
   b7af2:	291e      	cmp	r1, #30
   b7af4:	bfda      	itte	le
   b7af6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   b7afa:	fa20 f101 	lsrle.w	r1, r0, r1
   b7afe:	2101      	movgt	r1, #1
   b7b00:	460a      	mov	r2, r1
   b7b02:	e7e1      	b.n	b7ac8 <__ulp+0x18>
   b7b04:	7ff00000 	.word	0x7ff00000

000b7b08 <__b2d>:
   b7b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7b0a:	6905      	ldr	r5, [r0, #16]
   b7b0c:	f100 0714 	add.w	r7, r0, #20
   b7b10:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   b7b14:	1f2e      	subs	r6, r5, #4
   b7b16:	f855 4c04 	ldr.w	r4, [r5, #-4]
   b7b1a:	4620      	mov	r0, r4
   b7b1c:	f7ff fd48 	bl	b75b0 <__hi0bits>
   b7b20:	f1c0 0320 	rsb	r3, r0, #32
   b7b24:	280a      	cmp	r0, #10
   b7b26:	f8df c07c 	ldr.w	ip, [pc, #124]	; b7ba4 <__b2d+0x9c>
   b7b2a:	600b      	str	r3, [r1, #0]
   b7b2c:	dc14      	bgt.n	b7b58 <__b2d+0x50>
   b7b2e:	f1c0 0e0b 	rsb	lr, r0, #11
   b7b32:	fa24 f10e 	lsr.w	r1, r4, lr
   b7b36:	42b7      	cmp	r7, r6
   b7b38:	ea41 030c 	orr.w	r3, r1, ip
   b7b3c:	bf34      	ite	cc
   b7b3e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   b7b42:	2100      	movcs	r1, #0
   b7b44:	3015      	adds	r0, #21
   b7b46:	fa04 f000 	lsl.w	r0, r4, r0
   b7b4a:	fa21 f10e 	lsr.w	r1, r1, lr
   b7b4e:	ea40 0201 	orr.w	r2, r0, r1
   b7b52:	ec43 2b10 	vmov	d0, r2, r3
   b7b56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b7b58:	42b7      	cmp	r7, r6
   b7b5a:	bf3a      	itte	cc
   b7b5c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   b7b60:	f1a5 0608 	subcc.w	r6, r5, #8
   b7b64:	2100      	movcs	r1, #0
   b7b66:	380b      	subs	r0, #11
   b7b68:	d017      	beq.n	b7b9a <__b2d+0x92>
   b7b6a:	f1c0 0c20 	rsb	ip, r0, #32
   b7b6e:	fa04 f500 	lsl.w	r5, r4, r0
   b7b72:	42be      	cmp	r6, r7
   b7b74:	fa21 f40c 	lsr.w	r4, r1, ip
   b7b78:	ea45 0504 	orr.w	r5, r5, r4
   b7b7c:	bf8c      	ite	hi
   b7b7e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   b7b82:	2400      	movls	r4, #0
   b7b84:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   b7b88:	fa01 f000 	lsl.w	r0, r1, r0
   b7b8c:	fa24 f40c 	lsr.w	r4, r4, ip
   b7b90:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   b7b94:	ea40 0204 	orr.w	r2, r0, r4
   b7b98:	e7db      	b.n	b7b52 <__b2d+0x4a>
   b7b9a:	ea44 030c 	orr.w	r3, r4, ip
   b7b9e:	460a      	mov	r2, r1
   b7ba0:	e7d7      	b.n	b7b52 <__b2d+0x4a>
   b7ba2:	bf00      	nop
   b7ba4:	3ff00000 	.word	0x3ff00000

000b7ba8 <__d2b>:
   b7ba8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b7bac:	4689      	mov	r9, r1
   b7bae:	2101      	movs	r1, #1
   b7bb0:	ec57 6b10 	vmov	r6, r7, d0
   b7bb4:	4690      	mov	r8, r2
   b7bb6:	f7ff fc09 	bl	b73cc <_Balloc>
   b7bba:	4604      	mov	r4, r0
   b7bbc:	b930      	cbnz	r0, b7bcc <__d2b+0x24>
   b7bbe:	4602      	mov	r2, r0
   b7bc0:	4b25      	ldr	r3, [pc, #148]	; (b7c58 <__d2b+0xb0>)
   b7bc2:	4826      	ldr	r0, [pc, #152]	; (b7c5c <__d2b+0xb4>)
   b7bc4:	f240 310a 	movw	r1, #778	; 0x30a
   b7bc8:	f7fc fce0 	bl	b458c <__assert_func>
   b7bcc:	f3c7 550a 	ubfx	r5, r7, #20, #11
   b7bd0:	f3c7 0313 	ubfx	r3, r7, #0, #20
   b7bd4:	bb35      	cbnz	r5, b7c24 <__d2b+0x7c>
   b7bd6:	2e00      	cmp	r6, #0
   b7bd8:	9301      	str	r3, [sp, #4]
   b7bda:	d028      	beq.n	b7c2e <__d2b+0x86>
   b7bdc:	4668      	mov	r0, sp
   b7bde:	9600      	str	r6, [sp, #0]
   b7be0:	f7ff fd06 	bl	b75f0 <__lo0bits>
   b7be4:	9900      	ldr	r1, [sp, #0]
   b7be6:	b300      	cbz	r0, b7c2a <__d2b+0x82>
   b7be8:	9a01      	ldr	r2, [sp, #4]
   b7bea:	f1c0 0320 	rsb	r3, r0, #32
   b7bee:	fa02 f303 	lsl.w	r3, r2, r3
   b7bf2:	430b      	orrs	r3, r1
   b7bf4:	40c2      	lsrs	r2, r0
   b7bf6:	6163      	str	r3, [r4, #20]
   b7bf8:	9201      	str	r2, [sp, #4]
   b7bfa:	9b01      	ldr	r3, [sp, #4]
   b7bfc:	61a3      	str	r3, [r4, #24]
   b7bfe:	2b00      	cmp	r3, #0
   b7c00:	bf14      	ite	ne
   b7c02:	2202      	movne	r2, #2
   b7c04:	2201      	moveq	r2, #1
   b7c06:	6122      	str	r2, [r4, #16]
   b7c08:	b1d5      	cbz	r5, b7c40 <__d2b+0x98>
   b7c0a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   b7c0e:	4405      	add	r5, r0
   b7c10:	f8c9 5000 	str.w	r5, [r9]
   b7c14:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   b7c18:	f8c8 0000 	str.w	r0, [r8]
   b7c1c:	4620      	mov	r0, r4
   b7c1e:	b003      	add	sp, #12
   b7c20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b7c24:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b7c28:	e7d5      	b.n	b7bd6 <__d2b+0x2e>
   b7c2a:	6161      	str	r1, [r4, #20]
   b7c2c:	e7e5      	b.n	b7bfa <__d2b+0x52>
   b7c2e:	a801      	add	r0, sp, #4
   b7c30:	f7ff fcde 	bl	b75f0 <__lo0bits>
   b7c34:	9b01      	ldr	r3, [sp, #4]
   b7c36:	6163      	str	r3, [r4, #20]
   b7c38:	2201      	movs	r2, #1
   b7c3a:	6122      	str	r2, [r4, #16]
   b7c3c:	3020      	adds	r0, #32
   b7c3e:	e7e3      	b.n	b7c08 <__d2b+0x60>
   b7c40:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   b7c44:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   b7c48:	f8c9 0000 	str.w	r0, [r9]
   b7c4c:	6918      	ldr	r0, [r3, #16]
   b7c4e:	f7ff fcaf 	bl	b75b0 <__hi0bits>
   b7c52:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   b7c56:	e7df      	b.n	b7c18 <__d2b+0x70>
   b7c58:	000b81a1 	.word	0x000b81a1
   b7c5c:	000b822c 	.word	0x000b822c

000b7c60 <__ratio>:
   b7c60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7c64:	4688      	mov	r8, r1
   b7c66:	4669      	mov	r1, sp
   b7c68:	4681      	mov	r9, r0
   b7c6a:	f7ff ff4d 	bl	b7b08 <__b2d>
   b7c6e:	a901      	add	r1, sp, #4
   b7c70:	4640      	mov	r0, r8
   b7c72:	ec55 4b10 	vmov	r4, r5, d0
   b7c76:	f7ff ff47 	bl	b7b08 <__b2d>
   b7c7a:	f8d9 3010 	ldr.w	r3, [r9, #16]
   b7c7e:	f8d8 2010 	ldr.w	r2, [r8, #16]
   b7c82:	eba3 0c02 	sub.w	ip, r3, r2
   b7c86:	e9dd 3200 	ldrd	r3, r2, [sp]
   b7c8a:	1a9b      	subs	r3, r3, r2
   b7c8c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   b7c90:	ec51 0b10 	vmov	r0, r1, d0
   b7c94:	2b00      	cmp	r3, #0
   b7c96:	bfd6      	itet	le
   b7c98:	460a      	movle	r2, r1
   b7c9a:	462a      	movgt	r2, r5
   b7c9c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   b7ca0:	468b      	mov	fp, r1
   b7ca2:	462f      	mov	r7, r5
   b7ca4:	bfd4      	ite	le
   b7ca6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   b7caa:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   b7cae:	4620      	mov	r0, r4
   b7cb0:	ee10 2a10 	vmov	r2, s0
   b7cb4:	465b      	mov	r3, fp
   b7cb6:	4639      	mov	r1, r7
   b7cb8:	f7fd fee4 	bl	b5a84 <__aeabi_ddiv>
   b7cbc:	ec41 0b10 	vmov	d0, r0, r1
   b7cc0:	b003      	add	sp, #12
   b7cc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b7cc6 <__copybits>:
   b7cc6:	3901      	subs	r1, #1
   b7cc8:	b570      	push	{r4, r5, r6, lr}
   b7cca:	1149      	asrs	r1, r1, #5
   b7ccc:	6914      	ldr	r4, [r2, #16]
   b7cce:	3101      	adds	r1, #1
   b7cd0:	f102 0314 	add.w	r3, r2, #20
   b7cd4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   b7cd8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   b7cdc:	1f05      	subs	r5, r0, #4
   b7cde:	42a3      	cmp	r3, r4
   b7ce0:	d30c      	bcc.n	b7cfc <__copybits+0x36>
   b7ce2:	1aa3      	subs	r3, r4, r2
   b7ce4:	3b11      	subs	r3, #17
   b7ce6:	f023 0303 	bic.w	r3, r3, #3
   b7cea:	3211      	adds	r2, #17
   b7cec:	42a2      	cmp	r2, r4
   b7cee:	bf88      	it	hi
   b7cf0:	2300      	movhi	r3, #0
   b7cf2:	4418      	add	r0, r3
   b7cf4:	2300      	movs	r3, #0
   b7cf6:	4288      	cmp	r0, r1
   b7cf8:	d305      	bcc.n	b7d06 <__copybits+0x40>
   b7cfa:	bd70      	pop	{r4, r5, r6, pc}
   b7cfc:	f853 6b04 	ldr.w	r6, [r3], #4
   b7d00:	f845 6f04 	str.w	r6, [r5, #4]!
   b7d04:	e7eb      	b.n	b7cde <__copybits+0x18>
   b7d06:	f840 3b04 	str.w	r3, [r0], #4
   b7d0a:	e7f4      	b.n	b7cf6 <__copybits+0x30>

000b7d0c <__any_on>:
   b7d0c:	f100 0214 	add.w	r2, r0, #20
   b7d10:	6900      	ldr	r0, [r0, #16]
   b7d12:	114b      	asrs	r3, r1, #5
   b7d14:	4298      	cmp	r0, r3
   b7d16:	b510      	push	{r4, lr}
   b7d18:	db11      	blt.n	b7d3e <__any_on+0x32>
   b7d1a:	dd0a      	ble.n	b7d32 <__any_on+0x26>
   b7d1c:	f011 011f 	ands.w	r1, r1, #31
   b7d20:	d007      	beq.n	b7d32 <__any_on+0x26>
   b7d22:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   b7d26:	fa24 f001 	lsr.w	r0, r4, r1
   b7d2a:	fa00 f101 	lsl.w	r1, r0, r1
   b7d2e:	428c      	cmp	r4, r1
   b7d30:	d10b      	bne.n	b7d4a <__any_on+0x3e>
   b7d32:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   b7d36:	4293      	cmp	r3, r2
   b7d38:	d803      	bhi.n	b7d42 <__any_on+0x36>
   b7d3a:	2000      	movs	r0, #0
   b7d3c:	bd10      	pop	{r4, pc}
   b7d3e:	4603      	mov	r3, r0
   b7d40:	e7f7      	b.n	b7d32 <__any_on+0x26>
   b7d42:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   b7d46:	2900      	cmp	r1, #0
   b7d48:	d0f5      	beq.n	b7d36 <__any_on+0x2a>
   b7d4a:	2001      	movs	r0, #1
   b7d4c:	e7f6      	b.n	b7d3c <__any_on+0x30>

000b7d4e <_calloc_r>:
   b7d4e:	b513      	push	{r0, r1, r4, lr}
   b7d50:	434a      	muls	r2, r1
   b7d52:	4611      	mov	r1, r2
   b7d54:	9201      	str	r2, [sp, #4]
   b7d56:	f7fc fc11 	bl	b457c <_malloc_r>
   b7d5a:	4604      	mov	r4, r0
   b7d5c:	b118      	cbz	r0, b7d66 <_calloc_r+0x18>
   b7d5e:	9a01      	ldr	r2, [sp, #4]
   b7d60:	2100      	movs	r1, #0
   b7d62:	f7fe f8a4 	bl	b5eae <memset>
   b7d66:	4620      	mov	r0, r4
   b7d68:	b002      	add	sp, #8
   b7d6a:	bd10      	pop	{r4, pc}
   b7d6c:	0000      	movs	r0, r0
	...

000b7d70 <nan>:
   b7d70:	ed9f 0b01 	vldr	d0, [pc, #4]	; b7d78 <nan+0x8>
   b7d74:	4770      	bx	lr
   b7d76:	bf00      	nop
   b7d78:	00000000 	.word	0x00000000
   b7d7c:	7ff80000 	.word	0x7ff80000

000b7d80 <__ascii_wctomb>:
   b7d80:	b149      	cbz	r1, b7d96 <__ascii_wctomb+0x16>
   b7d82:	2aff      	cmp	r2, #255	; 0xff
   b7d84:	bf85      	ittet	hi
   b7d86:	238a      	movhi	r3, #138	; 0x8a
   b7d88:	6003      	strhi	r3, [r0, #0]
   b7d8a:	700a      	strbls	r2, [r1, #0]
   b7d8c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
   b7d90:	bf98      	it	ls
   b7d92:	2001      	movls	r0, #1
   b7d94:	4770      	bx	lr
   b7d96:	4608      	mov	r0, r1
   b7d98:	4770      	bx	lr
	...

000b7d9c <__aeabi_d2lz>:
   b7d9c:	b538      	push	{r3, r4, r5, lr}
   b7d9e:	2200      	movs	r2, #0
   b7da0:	2300      	movs	r3, #0
   b7da2:	4604      	mov	r4, r0
   b7da4:	460d      	mov	r5, r1
   b7da6:	f7fd ffb5 	bl	b5d14 <__aeabi_dcmplt>
   b7daa:	b928      	cbnz	r0, b7db8 <__aeabi_d2lz+0x1c>
   b7dac:	4620      	mov	r0, r4
   b7dae:	4629      	mov	r1, r5
   b7db0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b7db4:	f7fe b846 	b.w	b5e44 <__aeabi_d2ulz>
   b7db8:	4620      	mov	r0, r4
   b7dba:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   b7dbe:	f7fe f841 	bl	b5e44 <__aeabi_d2ulz>
   b7dc2:	4240      	negs	r0, r0
   b7dc4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b7dc8:	bd38      	pop	{r3, r4, r5, pc}
   b7dca:	bf00      	nop

000b7dcc <dynalib_user>:
   b7dcc:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   b7ddc:	0000 0000 6341 0063 2a25 2073 7325 2520     ....Acc.%*s %s %
   b7dec:	5e5b 5d2c 2c20 2520 732a 2520 2073 2a25     [^,] , %*s %s %*
   b7dfc:	2073 2a25 2073 7325 2520 732a 2520 732a     s %*s %s %*s %*s
   b7e0c:	2520 0073 6341 7563 756d 616c 6574 2064      %s.Accumulated 
   b7e1c:	6152 6e69 4100 6f6d 6e75 2074 666f 7220     Rain.Amount of r
   b7e2c:	6961 206e 6f66 2072 6874 7369 6520 6576     ain for this eve
   b7e3c:	746e 5400 746f 6c61 6120 6f6d 6e75 2074     nt.Total amount 
   b7e4c:	666f 7220 6961 006e 7543 7272 6e65 2074     of rain.Current 
   b7e5c:	6172 6e69 6920 746e 6e65 6973 7974 0000     rain intensity..

000b7e6c <_ZTVN5spark13CellularClassE>:
	...
   b7e74:	467f 000b 4675 000b 466b 000b 4621 000b     .F..uF..kF..!F..
   b7e84:	465f 000b 4653 000b 4da5 000b 4dad 000b     _F..SF...M...M..
   b7e94:	4647 000b 463f 000b 4635 000b 462b 000b     GF..?F..5F..+F..
   b7ea4:	4ddd 000b                                   .M..

000b7ea8 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b7eb0:	46b9 000b 46bf 000b 46fd 000b 46cd 000b     .F...F...F...F..
   b7ec0:	46bb 000b                                   .F..

000b7ec4 <_ZTVN5spark13EthernetClassE>:
	...
   b7ecc:	4c47 000b 4c3d 000b 4c33 000b 4c29 000b     GL..=L..3L..)L..
   b7edc:	4c1d 000b 4c11 000b 4da5 000b 4dad 000b     .L...L...M...M..
   b7eec:	4c05 000b 4bfd 000b 4bf3 000b 4be9 000b     .L...K...K...K..
   b7efc:	4ddd 000b                                   .M..

000b7f00 <_ZTV9IPAddress>:
	...
   b7f08:	4c75 000b 4c65 000b 4c67 000b 7061 0070     uL..eL..gL..app.

000b7f18 <_ZTVN5spark12NetworkClassE>:
	...
   b7f20:	4d65 000b 4d6f 000b 4d79 000b 4d83 000b     eM..oM..yM...M..
   b7f30:	4d8d 000b 4d99 000b 4da5 000b 4dad 000b     .M...M...M...M..
   b7f40:	4db5 000b 4dc1 000b 4dc9 000b 4dd3 000b     .M...M...M...M..
   b7f50:	4ddd 000b 5925 252d 2d6d 6425 2554 3a48     .M..%Y-%m-%dT%H:
   b7f60:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000b7f70 <_ZTV11USARTSerial>:
	...
   b7f78:	5141 000b 51ad 000b 5185 000b 4ec9 000b     AQ...Q...Q...N..
   b7f88:	5155 000b 5171 000b 5163 000b 517f 000b     UQ..qQ..cQ...Q..
   b7f98:	5143 000b 5147 000b                         CQ..GQ..

000b7fa0 <_ZTV9USBSerial>:
	...
   b7fa8:	51f9 000b 5261 000b 5237 000b 4ec9 000b     .Q..aR..7R...N..
   b7fb8:	5229 000b 51fb 000b 520b 000b 525b 000b     )R...Q...R..[R..
   b7fc8:	521b 000b 51f3 000b                         .R...Q..

000b7fd0 <_ZSt7nothrow>:
   b7fd0:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
   b7fe0:	6363 6565 6564 0064 742f 706d 6a2f 6e65     cceeded./tmp/jen
   b7ff0:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   b8000:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   b8010:	315f 3036 3136 3038 3336 2f39 7273 2f63     _1606180639/src/
   b8020:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   b8030:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
   b8040:	6e00 0066 6e69 7469 0079 6e61 0000 0000     .nf.inity.an....

000b8050 <fpi.1>:
   b8050:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   b8060:	0000 0000                                   ....

000b8064 <fpinan.0>:
   b8064:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
   b8074:	0000 0000                                   ....

000b8078 <tinytens>:
   b8078:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   b8088:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   b8098:	6f43 64ac 0628 1168                         Co.d(.h.

000b80a0 <_ctype_>:
   b80a0:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   b80b0:	2020 2020 2020 2020 2020 2020 2020 2020                     
   b80c0:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   b80d0:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   b80e0:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   b80f0:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   b8100:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   b8110:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   b8120:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
   b81a0:	4200 6c61 6f6c 2063 7573 6363 6565 6564     .Balloc succeede
   b81b0:	0064 742f 706d 6a2f 6e65 696b 736e 472d     d./tmp/jenkins-G
   b81c0:	4343 312d 2d30 6970 6570 696c 656e 342d     CC-10-pipeline-4
   b81d0:	5f38 3032 3032 3131 3432 315f 3036 3136     8_20201124_16061
   b81e0:	3038 3336 2f39 7273 2f63 656e 6c77 6269     80639/src/newlib
   b81f0:	6e2f 7765 696c 2f62 696c 6362 732f 6474     /newlib/libc/std
   b8200:	696c 2f62 6467 6f74 2d61 6567 6874 7865     lib/gdtoa-gethex
   b8210:	632e 2e00 0000 0000                         .c......

000b8218 <_C_numeric_locale>:
   b8218:	8213 000b 8214 000b e524 2003 0043 4f50     ........$.. C.PO
   b8228:	4953 0058 742f 706d 6a2f 6e65 696b 736e     SIX./tmp/jenkins
   b8238:	472d 4343 312d 2d30 6970 6570 696c 656e     -GCC-10-pipeline
   b8248:	342d 5f38 3032 3032 3131 3432 315f 3036     -48_20201124_160
   b8258:	3136 3038 3336 2f39 7273 2f63 656e 6c77     6180639/src/newl
   b8268:	6269 6e2f 7765 696c 2f62 696c 6362 732f     ib/newlib/libc/s
   b8278:	6474 696c 2f62 706d 6572 2e63 0063 0000     tdlib/mprec.c...

000b8288 <__mprec_bigtens>:
   b8288:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   b8298:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   b82a8:	bf3c 7f73 4fdd 7515                         <.s..O.u

000b82b0 <__mprec_tens>:
   b82b0:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   b82c0:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   b82d0:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   b82e0:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   b82f0:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   b8300:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   b8310:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   b8320:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   b8330:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   b8340:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   b8350:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   b8360:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   b8370:	9db4 79d9 7843 44ea                         ...yCx.D

000b8378 <p05.0>:
   b8378:	0005 0000 0019 0000 007d 0000               ........}...

000b8384 <link_const_variable_data_end>:
   b8384:	000b422d 	.word	0x000b422d
   b8388:	000b4611 	.word	0x000b4611
   b838c:	000b4689 	.word	0x000b4689
   b8390:	000b4c51 	.word	0x000b4c51
   b8394:	000b4d55 	.word	0x000b4d55
   b8398:	000b4eb5 	.word	0x000b4eb5
   b839c:	000b4f5d 	.word	0x000b4f5d
   b83a0:	000b5109 	.word	0x000b5109
   b83a4:	000b512d 	.word	0x000b512d

000b83a8 <link_constructors_end>:
	...
