
/Users/gashongore/Desktop/Farmsense/RainSensor_RG15_Serial/target/3.3.1/argon/RainSensor_RG15_Serial.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00005820  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b9840  000b9840  00009840  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000b9864  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001e4  2003e46c  000b9868  0001e46c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000001a0  2003e650  2003e650  0002e650  2**3
                  ALLOC
  7 .module_info_suffix 00000028  000b9a4c  000b9a4c  00029a4c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000b9a74  000b9a74  00029a74  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   000f14ba  00000000  00000000  00029a78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000f502  00000000  00000000  0011af32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    00035464  00000000  00000000  0012a434  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002828  00000000  00000000  0015f898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00009888  00000000  00000000  001620c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00032185  00000000  00000000  0016b948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000337ff  00000000  00000000  0019dacd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0012cf9b  00000000  00000000  001d12cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00007a50  00000000  00000000  002fe268  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f003 f82b 	bl	b708c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f003 f84d 	bl	b70dc <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003e46c 	.word	0x2003e46c
   b404c:	000b9868 	.word	0x000b9868
   b4050:	2003e650 	.word	0x2003e650
   b4054:	2003e650 	.word	0x2003e650
   b4058:	2003e7ed 	.word	0x2003e7ed

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f002 fab9 	bl	b65d8 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000b981c 	.word	0x000b981c
   b4080:	000b9840 	.word	0x000b9840

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f000 b84c 	b.w	b4120 <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f000 f863 	bl	b4154 <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f002 ba59 	b.w	b6548 <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f000 bb47 	b.w	b4728 <malloc>

000b409a <_Znaj>:
   b409a:	f000 bb45 	b.w	b4728 <malloc>

000b409e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409e:	f000 bb4b 	b.w	b4738 <free>
	...

000b40a4 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40a6:	4a03      	ldr	r2, [pc, #12]	; (b40b4 <__cxa_pure_virtual+0x10>)
   b40a8:	4903      	ldr	r1, [pc, #12]	; (b40b8 <__cxa_pure_virtual+0x14>)
   b40aa:	200c      	movs	r0, #12
   b40ac:	f000 fa90 	bl	b45d0 <panic_>
  while (1);
   b40b0:	e7fe      	b.n	b40b0 <__cxa_pure_virtual+0xc>
   b40b2:	bf00      	nop
   b40b4:	000b4461 	.word	0x000b4461
   b40b8:	000b9158 	.word	0x000b9158

000b40bc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40bc:	7800      	ldrb	r0, [r0, #0]
   b40be:	fab0 f080 	clz	r0, r0
   b40c2:	0940      	lsrs	r0, r0, #5
   b40c4:	4770      	bx	lr

000b40c6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40c6:	2301      	movs	r3, #1
   b40c8:	7003      	strb	r3, [r0, #0]
   b40ca:	4770      	bx	lr

000b40cc <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
   b40cc:	4770      	bx	lr

000b40ce <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
   b40ce:	6a00      	ldr	r0, [r0, #32]
   b40d0:	6803      	ldr	r3, [r0, #0]
   b40d2:	68db      	ldr	r3, [r3, #12]
   b40d4:	4718      	bx	r3
	...

000b40d8 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   b40d8:	4b0a      	ldr	r3, [pc, #40]	; (b4104 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   b40da:	b510      	push	{r4, lr}
   b40dc:	4604      	mov	r4, r0
   b40de:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   b40e0:	f000 ff8e 	bl	b5000 <_ZN5spark10LogManager8instanceEv>
   b40e4:	4621      	mov	r1, r4
   b40e6:	f001 f9c6 	bl	b5476 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   b40ea:	f002 f9a7 	bl	b643c <_Z16_fetch_usbserialv>
   b40ee:	f002 f999 	bl	b6424 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   b40f2:	4620      	mov	r0, r4
   b40f4:	4b04      	ldr	r3, [pc, #16]	; (b4108 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   b40f6:	f840 3b04 	str.w	r3, [r0], #4
   b40fa:	f001 f857 	bl	b51ac <_ZN5spark6detail9LogFilterD1Ev>
    }
   b40fe:	4620      	mov	r0, r4
   b4100:	bd10      	pop	{r4, pc}
   b4102:	bf00      	nop
   b4104:	000b9218 	.word	0x000b9218
   b4108:	000b9200 	.word	0x000b9200

000b410c <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   b410c:	b510      	push	{r4, lr}
   b410e:	4604      	mov	r4, r0
    }
   b4110:	f7ff ffe2 	bl	b40d8 <_ZN5spark16SerialLogHandlerD1Ev>
   b4114:	4620      	mov	r0, r4
   b4116:	2124      	movs	r1, #36	; 0x24
   b4118:	f7ff ffc1 	bl	b409e <_ZdlPvj>
   b411c:	4620      	mov	r0, r4
   b411e:	bd10      	pop	{r4, pc}

000b4120 <setup>:
double rInt_f=0;

SerialLogHandler logHandler;

void setup()
{
   b4120:	b508      	push	{r3, lr}
Serial1.begin(9600,SERIAL_8N1);
   b4122:	f002 faa7 	bl	b6674 <_Z22__fetch_global_Serial1v>
   b4126:	2200      	movs	r2, #0
   b4128:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b412c:	f002 f916 	bl	b635c <_ZN11USARTSerial5beginEmm>
  
Serial1.write('c');
   b4130:	f002 faa0 	bl	b6674 <_Z22__fetch_global_Serial1v>
  bool breakRx(void);

  inline size_t write(unsigned long n) { return write((uint16_t)n); }
  inline size_t write(long n) { return write((uint16_t)n); }
  inline size_t write(unsigned int n) { return write((uint16_t)n); }
  inline size_t write(int n) { return write((uint16_t)n); }
   b4134:	2163      	movs	r1, #99	; 0x63
   b4136:	f002 f91b 	bl	b6370 <_ZN11USARTSerial5writeEt>
Serial1.write('\n');
   b413a:	f002 fa9b 	bl	b6674 <_Z22__fetch_global_Serial1v>
   b413e:	210a      	movs	r1, #10
   b4140:	f002 f916 	bl	b6370 <_ZN11USARTSerial5writeEt>

Serial.begin(9600);
   b4144:	f002 f97a 	bl	b643c <_Z16_fetch_usbserialv>

}
   b4148:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
Serial.begin(9600);
   b414c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b4150:	f002 b964 	b.w	b641c <_ZN9USBSerial5beginEl>

000b4154 <loop>:


void loop() {
   b4154:	b5f0      	push	{r4, r5, r6, r7, lr}
   b4156:	b095      	sub	sp, #84	; 0x54
 

String response = Serial1.readStringUntil('\n');
   b4158:	f002 fa8c 	bl	b6674 <_Z22__fetch_global_Serial1v>

if (response.startsWith("Acc")) {
   b415c:	ac10      	add	r4, sp, #64	; 0x40
String response = Serial1.readStringUntil('\n');
   b415e:	4601      	mov	r1, r0
   b4160:	220a      	movs	r2, #10
   b4162:	a80c      	add	r0, sp, #48	; 0x30
   b4164:	f001 ff90 	bl	b6088 <_ZN6Stream15readStringUntilEc>
if (response.startsWith("Acc")) {
   b4168:	4934      	ldr	r1, [pc, #208]	; (b423c <loop+0xe8>)
   b416a:	4620      	mov	r0, r4
   b416c:	f001 ffef 	bl	b614e <_ZN6StringC1EPK19__FlashStringHelper>
   b4170:	4621      	mov	r1, r4
   b4172:	a80c      	add	r0, sp, #48	; 0x30
   b4174:	f002 f87b 	bl	b626e <_ZNK6String10startsWithERKS_>
   b4178:	4605      	mov	r5, r0
   b417a:	4620      	mov	r0, r4
   b417c:	f001 ff9c 	bl	b60b8 <_ZN6StringD1Ev>
   b4180:	2d00      	cmp	r5, #0
   b4182:	d052      	beq.n	b422a <loop+0xd6>
    char acc[7], eventAcc[7], totalAcc[7], rInt[7], unit[4];
    sscanf(response.c_str(),"%*s %s %[^,] , %*s %s %*s %*s %s %*s %*s %s", acc, unit, eventAcc, totalAcc, rInt);
   b4184:	ad0a      	add	r5, sp, #40	; 0x28
   b4186:	ae08      	add	r6, sp, #32
   b4188:	ab05      	add	r3, sp, #20
   b418a:	aa06      	add	r2, sp, #24
   b418c:	492c      	ldr	r1, [pc, #176]	; (b4240 <loop+0xec>)
   b418e:	9402      	str	r4, [sp, #8]
   b4190:	9501      	str	r5, [sp, #4]
   b4192:	9600      	str	r6, [sp, #0]
   b4194:	980c      	ldr	r0, [sp, #48]	; 0x30


acc_f=atof(acc);
   b4196:	4f2b      	ldr	r7, [pc, #172]	; (b4244 <loop+0xf0>)
    sscanf(response.c_str(),"%*s %s %[^,] , %*s %s %*s %*s %s %*s %*s %s", acc, unit, eventAcc, totalAcc, rInt);
   b4198:	f000 fade 	bl	b4758 <sscanf>
acc_f=atof(acc);
   b419c:	a806      	add	r0, sp, #24
   b419e:	f002 ff69 	bl	b7074 <atof>
eventAcc_f=atof(eventAcc);
   b41a2:	4630      	mov	r0, r6
acc_f=atof(acc);
   b41a4:	ed87 0b00 	vstr	d0, [r7]
eventAcc_f=atof(eventAcc);
   b41a8:	f002 ff64 	bl	b7074 <atof>
   b41ac:	4e26      	ldr	r6, [pc, #152]	; (b4248 <loop+0xf4>)
totalAcc_f=atof(totalAcc);
   b41ae:	4628      	mov	r0, r5
eventAcc_f=atof(eventAcc);
   b41b0:	ed86 0b00 	vstr	d0, [r6]
totalAcc_f=atof(totalAcc);
   b41b4:	f002 ff5e 	bl	b7074 <atof>
   b41b8:	4d24      	ldr	r5, [pc, #144]	; (b424c <loop+0xf8>)
rInt_f=atof(rInt);
   b41ba:	4620      	mov	r0, r4
totalAcc_f=atof(totalAcc);
   b41bc:	ed85 0b00 	vstr	d0, [r5]
rInt_f=atof(rInt);
   b41c0:	f002 ff58 	bl	b7074 <atof>
   b41c4:	4c22      	ldr	r4, [pc, #136]	; (b4250 <loop+0xfc>)
   b41c6:	ed84 0b00 	vstr	d0, [r4]
Particle.publish("Amount of rain for this event",eventAcc);
Particle.publish("Total amount of rain",totalAcc);
Particle.publish("Current rain intensity",rInt);
*/

Serial.print("Accumulated Rain");
   b41ca:	f002 f937 	bl	b643c <_Z16_fetch_usbserialv>
   b41ce:	4921      	ldr	r1, [pc, #132]	; (b4254 <loop+0x100>)
   b41d0:	f001 fe08 	bl	b5de4 <_ZN5Print5printEPKc>
Serial.println(acc_f);
   b41d4:	f002 f932 	bl	b643c <_Z16_fetch_usbserialv>
   b41d8:	ed97 0b00 	vldr	d0, [r7]
   b41dc:	2102      	movs	r1, #2
   b41de:	f001 fefb 	bl	b5fd8 <_ZN5Print7printlnEdi>

Serial.print("Amount of rain for this event");
   b41e2:	f002 f92b 	bl	b643c <_Z16_fetch_usbserialv>
   b41e6:	491c      	ldr	r1, [pc, #112]	; (b4258 <loop+0x104>)
   b41e8:	f001 fdfc 	bl	b5de4 <_ZN5Print5printEPKc>
Serial.println(eventAcc_f);
   b41ec:	f002 f926 	bl	b643c <_Z16_fetch_usbserialv>
   b41f0:	ed96 0b00 	vldr	d0, [r6]
   b41f4:	2102      	movs	r1, #2
   b41f6:	f001 feef 	bl	b5fd8 <_ZN5Print7printlnEdi>

Serial.print("Total amount of rain");
   b41fa:	f002 f91f 	bl	b643c <_Z16_fetch_usbserialv>
   b41fe:	4917      	ldr	r1, [pc, #92]	; (b425c <loop+0x108>)
   b4200:	f001 fdf0 	bl	b5de4 <_ZN5Print5printEPKc>
Serial.println(totalAcc_f);
   b4204:	f002 f91a 	bl	b643c <_Z16_fetch_usbserialv>
   b4208:	ed95 0b00 	vldr	d0, [r5]
   b420c:	2102      	movs	r1, #2
   b420e:	f001 fee3 	bl	b5fd8 <_ZN5Print7printlnEdi>

Serial.print("Current rain intensity");
   b4212:	f002 f913 	bl	b643c <_Z16_fetch_usbserialv>
   b4216:	4912      	ldr	r1, [pc, #72]	; (b4260 <loop+0x10c>)
   b4218:	f001 fde4 	bl	b5de4 <_ZN5Print5printEPKc>
Serial.println(rInt_f);
   b421c:	f002 f90e 	bl	b643c <_Z16_fetch_usbserialv>
   b4220:	ed94 0b00 	vldr	d0, [r4]
   b4224:	2102      	movs	r1, #2
   b4226:	f001 fed7 	bl	b5fd8 <_ZN5Print7printlnEdi>

}

  delay(3000);
   b422a:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b422e:	f000 fac3 	bl	b47b8 <delay>
String response = Serial1.readStringUntil('\n');
   b4232:	a80c      	add	r0, sp, #48	; 0x30
   b4234:	f001 ff40 	bl	b60b8 <_ZN6StringD1Ev>
}
   b4238:	b015      	add	sp, #84	; 0x54
   b423a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b423c:	000b916d 	.word	0x000b916d
   b4240:	000b9171 	.word	0x000b9171
   b4244:	2003e660 	.word	0x2003e660
   b4248:	2003e668 	.word	0x2003e668
   b424c:	2003e6a0 	.word	0x2003e6a0
   b4250:	2003e698 	.word	0x2003e698
   b4254:	000b919d 	.word	0x000b919d
   b4258:	000b91ae 	.word	0x000b91ae
   b425c:	000b91cc 	.word	0x000b91cc
   b4260:	000b91e1 	.word	0x000b91e1

000b4264 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   b4264:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b4266:	e9d0 5300 	ldrd	r5, r3, [r0]
   b426a:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b426c:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b426e:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b4272:	42ae      	cmp	r6, r5
   b4274:	d004      	beq.n	b4280 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   b4276:	4628      	mov	r0, r5
   b4278:	f001 ff1e 	bl	b60b8 <_ZN6StringD1Ev>
   b427c:	3514      	adds	r5, #20
   b427e:	e7f8      	b.n	b4272 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b4280:	6820      	ldr	r0, [r4, #0]
   b4282:	f000 fa59 	bl	b4738 <free>
    AllocatorT::free(data_);
}
   b4286:	4620      	mov	r0, r4
   b4288:	bd70      	pop	{r4, r5, r6, pc}

000b428a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b428a:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b428c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b428e:	4604      	mov	r4, r0
   b4290:	460d      	mov	r5, r1
   b4292:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b4294:	d916      	bls.n	b42c4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   b4296:	4290      	cmp	r0, r2
   b4298:	d215      	bcs.n	b42c6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
   b429a:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b429e:	1a75      	subs	r5, r6, r1
   b42a0:	f1a1 0714 	sub.w	r7, r1, #20
   b42a4:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b42a6:	42b7      	cmp	r7, r6
   b42a8:	d01c      	beq.n	b42e4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   b42aa:	b12c      	cbz	r4, b42b8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   b42ac:	4631      	mov	r1, r6
   b42ae:	4620      	mov	r0, r4
   b42b0:	f001 ff7e 	bl	b61b0 <_ZN6StringC1EOS_>
   b42b4:	7c33      	ldrb	r3, [r6, #16]
   b42b6:	7423      	strb	r3, [r4, #16]
   b42b8:	4630      	mov	r0, r6
   b42ba:	f001 fefd 	bl	b60b8 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b42be:	3e14      	subs	r6, #20
   b42c0:	3c14      	subs	r4, #20
   b42c2:	e7f0      	b.n	b42a6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b42c4:	d00e      	beq.n	b42e4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   b42c6:	42b5      	cmp	r5, r6
   b42c8:	d00c      	beq.n	b42e4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   b42ca:	b12c      	cbz	r4, b42d8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   b42cc:	4629      	mov	r1, r5
   b42ce:	4620      	mov	r0, r4
   b42d0:	f001 ff6e 	bl	b61b0 <_ZN6StringC1EOS_>
   b42d4:	7c2b      	ldrb	r3, [r5, #16]
   b42d6:	7423      	strb	r3, [r4, #16]
   b42d8:	4628      	mov	r0, r5
   b42da:	f001 feed 	bl	b60b8 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b42de:	3514      	adds	r5, #20
   b42e0:	3414      	adds	r4, #20
   b42e2:	e7f0      	b.n	b42c6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
   b42e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b42e6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b42e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   b42ea:	2300      	movs	r3, #0
   b42ec:	e9c0 3300 	strd	r3, r3, [r0]
   b42f0:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b42f2:	684f      	ldr	r7, [r1, #4]
   b42f4:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b42f6:	4604      	mov	r4, r0
   b42f8:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b42fa:	dd23      	ble.n	b4344 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   b42fc:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
   b4300:	fb08 f007 	mul.w	r0, r8, r7
   b4304:	f000 fa10 	bl	b4728 <malloc>
            if (!d) {
   b4308:	4605      	mov	r5, r0
   b430a:	b1d8      	cbz	r0, b4344 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            move(d, data_, data_ + size_);
   b430c:	e9d4 1200 	ldrd	r1, r2, [r4]
   b4310:	fb08 1202 	mla	r2, r8, r2, r1
   b4314:	f7ff ffb9 	bl	b428a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b4318:	6820      	ldr	r0, [r4, #0]
   b431a:	f000 fa0d 	bl	b4738 <free>
        data_ = d;
   b431e:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b4320:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b4322:	e9d6 7300 	ldrd	r7, r3, [r6]
   b4326:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
   b432a:	45b8      	cmp	r8, r7
   b432c:	d008      	beq.n	b4340 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5a>
   b432e:	4639      	mov	r1, r7
   b4330:	4628      	mov	r0, r5
   b4332:	f001 ff57 	bl	b61e4 <_ZN6StringC1ERKS_>
   b4336:	7c3b      	ldrb	r3, [r7, #16]
   b4338:	742b      	strb	r3, [r5, #16]
   b433a:	3714      	adds	r7, #20
   b433c:	3514      	adds	r5, #20
   b433e:	e7f4      	b.n	b432a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
   b4340:	6873      	ldr	r3, [r6, #4]
   b4342:	6063      	str	r3, [r4, #4]
}
   b4344:	4620      	mov	r0, r4
   b4346:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000b434c <_GLOBAL__sub_I_SystemMode>:
   b434c:	b570      	push	{r4, r5, r6, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b434e:	4b26      	ldr	r3, [pc, #152]	; (b43e8 <_GLOBAL__sub_I_SystemMode+0x9c>)
    SleepResult() {}
   b4350:	4a26      	ldr	r2, [pc, #152]	; (b43ec <_GLOBAL__sub_I_SystemMode+0xa0>)
   b4352:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b4354:	2400      	movs	r4, #0
   b4356:	b08c      	sub	sp, #48	; 0x30
   b4358:	e9c3 4400 	strd	r4, r4, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b435c:	2002      	movs	r0, #2
   b435e:	f000 f94f 	bl	b4600 <set_system_mode>
SYSTEM_THREAD(ENABLED);                                                                     // Means my code will not be held up by Particle processes.
   b4362:	4621      	mov	r1, r4
   b4364:	2001      	movs	r0, #1
   b4366:	f000 f95b 	bl	b4620 <system_thread_set_state>
        }
        return HAL_Feature_Get(feature);
    }

    inline int enableFeature(HAL_Feature feature) {
        return HAL_Feature_Set(feature, true);
   b436a:	2101      	movs	r1, #1
   b436c:	2004      	movs	r0, #4
   b436e:	f000 f867 	bl	b4440 <HAL_Feature_Set>
        capacity_(0) {
   b4372:	e9cd 4400 	strd	r4, r4, [sp]
   b4376:	9402      	str	r4, [sp, #8]
            StreamLogHandler(Serial, level, filters) {
   b4378:	f002 f860 	bl	b643c <_Z16_fetch_usbserialv>
        filter_(level, filters) {
   b437c:	4c1c      	ldr	r4, [pc, #112]	; (b43f0 <_GLOBAL__sub_I_SystemMode+0xa4>)
   b437e:	4605      	mov	r5, r0
   b4380:	4669      	mov	r1, sp
   b4382:	a803      	add	r0, sp, #12
   b4384:	f7ff ffaf 	bl	b42e6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b4388:	4626      	mov	r6, r4
        stream_(&stream) {
   b438a:	a903      	add	r1, sp, #12
   b438c:	a806      	add	r0, sp, #24
   b438e:	f7ff ffaa 	bl	b42e6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b4392:	4b18      	ldr	r3, [pc, #96]	; (b43f4 <_GLOBAL__sub_I_SystemMode+0xa8>)
   b4394:	f846 3b04 	str.w	r3, [r6], #4
   b4398:	a906      	add	r1, sp, #24
   b439a:	a809      	add	r0, sp, #36	; 0x24
   b439c:	f7ff ffa3 	bl	b42e6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b43a0:	aa09      	add	r2, sp, #36	; 0x24
   b43a2:	211e      	movs	r1, #30
   b43a4:	4630      	mov	r0, r6
   b43a6:	f001 f949 	bl	b563c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b43aa:	a809      	add	r0, sp, #36	; 0x24
   b43ac:	f7ff ff5a 	bl	b4264 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b43b0:	a806      	add	r0, sp, #24
   b43b2:	f7ff ff57 	bl	b4264 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b43b6:	4b10      	ldr	r3, [pc, #64]	; (b43f8 <_GLOBAL__sub_I_SystemMode+0xac>)
   b43b8:	6023      	str	r3, [r4, #0]
   b43ba:	6225      	str	r5, [r4, #32]
   b43bc:	a803      	add	r0, sp, #12
   b43be:	f7ff ff51 	bl	b4264 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b43c2:	4b0e      	ldr	r3, [pc, #56]	; (b43fc <_GLOBAL__sub_I_SystemMode+0xb0>)
   b43c4:	6023      	str	r3, [r4, #0]
        Serial.begin();
   b43c6:	f002 f839 	bl	b643c <_Z16_fetch_usbserialv>
   b43ca:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b43ce:	f002 f825 	bl	b641c <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   b43d2:	f000 fe15 	bl	b5000 <_ZN5spark10LogManager8instanceEv>
   b43d6:	4621      	mov	r1, r4
   b43d8:	f001 f806 	bl	b53e8 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler;
   b43dc:	4668      	mov	r0, sp
   b43de:	f7ff ff41 	bl	b4264 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
   b43e2:	b00c      	add	sp, #48	; 0x30
   b43e4:	bd70      	pop	{r4, r5, r6, pc}
   b43e6:	bf00      	nop
   b43e8:	2003e650 	.word	0x2003e650
   b43ec:	ffff0000 	.word	0xffff0000
   b43f0:	2003e670 	.word	0x2003e670
   b43f4:	000b9200 	.word	0x000b9200
   b43f8:	000b9314 	.word	0x000b9314
   b43fc:	000b9218 	.word	0x000b9218

000b4400 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b4400:	b508      	push	{r3, lr}
   b4402:	4b02      	ldr	r3, [pc, #8]	; (b440c <os_mutex_recursive_create+0xc>)
   b4404:	681b      	ldr	r3, [r3, #0]
   b4406:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4408:	9301      	str	r3, [sp, #4]
   b440a:	bd08      	pop	{r3, pc}
   b440c:	00030248 	.word	0x00030248

000b4410 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   b4410:	b508      	push	{r3, lr}
   b4412:	4b02      	ldr	r3, [pc, #8]	; (b441c <os_mutex_recursive_destroy+0xc>)
   b4414:	681b      	ldr	r3, [r3, #0]
   b4416:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b4418:	9301      	str	r3, [sp, #4]
   b441a:	bd08      	pop	{r3, pc}
   b441c:	00030248 	.word	0x00030248

000b4420 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b4420:	b508      	push	{r3, lr}
   b4422:	4b02      	ldr	r3, [pc, #8]	; (b442c <os_mutex_recursive_lock+0xc>)
   b4424:	681b      	ldr	r3, [r3, #0]
   b4426:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b4428:	9301      	str	r3, [sp, #4]
   b442a:	bd08      	pop	{r3, pc}
   b442c:	00030248 	.word	0x00030248

000b4430 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b4430:	b508      	push	{r3, lr}
   b4432:	4b02      	ldr	r3, [pc, #8]	; (b443c <os_mutex_recursive_unlock+0xc>)
   b4434:	681b      	ldr	r3, [r3, #0]
   b4436:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b4438:	9301      	str	r3, [sp, #4]
   b443a:	bd08      	pop	{r3, pc}
   b443c:	00030248 	.word	0x00030248

000b4440 <HAL_Feature_Set>:
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
   b4440:	b508      	push	{r3, lr}
   b4442:	4b02      	ldr	r3, [pc, #8]	; (b444c <HAL_Feature_Set+0xc>)
   b4444:	681b      	ldr	r3, [r3, #0]
   b4446:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   b4448:	9301      	str	r3, [sp, #4]
   b444a:	bd08      	pop	{r3, pc}
   b444c:	00030234 	.word	0x00030234

000b4450 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b4450:	b508      	push	{r3, lr}
   b4452:	4b02      	ldr	r3, [pc, #8]	; (b445c <HAL_RNG_GetRandomNumber+0xc>)
   b4454:	681b      	ldr	r3, [r3, #0]
   b4456:	685b      	ldr	r3, [r3, #4]
   b4458:	9301      	str	r3, [sp, #4]
   b445a:	bd08      	pop	{r3, pc}
   b445c:	00030218 	.word	0x00030218

000b4460 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b4460:	b508      	push	{r3, lr}
   b4462:	4b02      	ldr	r3, [pc, #8]	; (b446c <HAL_Delay_Microseconds+0xc>)
   b4464:	681b      	ldr	r3, [r3, #0]
   b4466:	68db      	ldr	r3, [r3, #12]
   b4468:	9301      	str	r3, [sp, #4]
   b446a:	bd08      	pop	{r3, pc}
   b446c:	00030218 	.word	0x00030218

000b4470 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b4470:	b508      	push	{r3, lr}
   b4472:	4b02      	ldr	r3, [pc, #8]	; (b447c <HAL_Timer_Get_Milli_Seconds+0xc>)
   b4474:	681b      	ldr	r3, [r3, #0]
   b4476:	695b      	ldr	r3, [r3, #20]
   b4478:	9301      	str	r3, [sp, #4]
   b447a:	bd08      	pop	{r3, pc}
   b447c:	00030218 	.word	0x00030218

000b4480 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b4480:	b508      	push	{r3, lr}
   b4482:	4b02      	ldr	r3, [pc, #8]	; (b448c <inet_inet_ntop+0xc>)
   b4484:	681b      	ldr	r3, [r3, #0]
   b4486:	695b      	ldr	r3, [r3, #20]
   b4488:	9301      	str	r3, [sp, #4]
   b448a:	bd08      	pop	{r3, pc}
   b448c:	00030264 	.word	0x00030264

000b4490 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b4490:	b508      	push	{r3, lr}
   b4492:	4b02      	ldr	r3, [pc, #8]	; (b449c <netdb_freeaddrinfo+0xc>)
   b4494:	681b      	ldr	r3, [r3, #0]
   b4496:	689b      	ldr	r3, [r3, #8]
   b4498:	9301      	str	r3, [sp, #4]
   b449a:	bd08      	pop	{r3, pc}
   b449c:	00030268 	.word	0x00030268

000b44a0 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b44a0:	b508      	push	{r3, lr}
   b44a2:	4b02      	ldr	r3, [pc, #8]	; (b44ac <netdb_getaddrinfo+0xc>)
   b44a4:	681b      	ldr	r3, [r3, #0]
   b44a6:	68db      	ldr	r3, [r3, #12]
   b44a8:	9301      	str	r3, [sp, #4]
   b44aa:	bd08      	pop	{r3, pc}
   b44ac:	00030268 	.word	0x00030268

000b44b0 <hal_usart_end>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   b44b0:	b508      	push	{r3, lr}
   b44b2:	4b02      	ldr	r3, [pc, #8]	; (b44bc <hal_usart_end+0xc>)
   b44b4:	681b      	ldr	r3, [r3, #0]
   b44b6:	689b      	ldr	r3, [r3, #8]
   b44b8:	9301      	str	r3, [sp, #4]
   b44ba:	bd08      	pop	{r3, pc}
   b44bc:	0003023c 	.word	0x0003023c

000b44c0 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b44c0:	b508      	push	{r3, lr}
   b44c2:	4b02      	ldr	r3, [pc, #8]	; (b44cc <hal_usart_write+0xc>)
   b44c4:	681b      	ldr	r3, [r3, #0]
   b44c6:	68db      	ldr	r3, [r3, #12]
   b44c8:	9301      	str	r3, [sp, #4]
   b44ca:	bd08      	pop	{r3, pc}
   b44cc:	0003023c 	.word	0x0003023c

000b44d0 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b44d0:	b508      	push	{r3, lr}
   b44d2:	4b02      	ldr	r3, [pc, #8]	; (b44dc <hal_usart_available+0xc>)
   b44d4:	681b      	ldr	r3, [r3, #0]
   b44d6:	691b      	ldr	r3, [r3, #16]
   b44d8:	9301      	str	r3, [sp, #4]
   b44da:	bd08      	pop	{r3, pc}
   b44dc:	0003023c 	.word	0x0003023c

000b44e0 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b44e0:	b508      	push	{r3, lr}
   b44e2:	4b02      	ldr	r3, [pc, #8]	; (b44ec <hal_usart_read+0xc>)
   b44e4:	681b      	ldr	r3, [r3, #0]
   b44e6:	695b      	ldr	r3, [r3, #20]
   b44e8:	9301      	str	r3, [sp, #4]
   b44ea:	bd08      	pop	{r3, pc}
   b44ec:	0003023c 	.word	0x0003023c

000b44f0 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b44f0:	b508      	push	{r3, lr}
   b44f2:	4b02      	ldr	r3, [pc, #8]	; (b44fc <hal_usart_peek+0xc>)
   b44f4:	681b      	ldr	r3, [r3, #0]
   b44f6:	699b      	ldr	r3, [r3, #24]
   b44f8:	9301      	str	r3, [sp, #4]
   b44fa:	bd08      	pop	{r3, pc}
   b44fc:	0003023c 	.word	0x0003023c

000b4500 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b4500:	b508      	push	{r3, lr}
   b4502:	4b02      	ldr	r3, [pc, #8]	; (b450c <hal_usart_flush+0xc>)
   b4504:	681b      	ldr	r3, [r3, #0]
   b4506:	69db      	ldr	r3, [r3, #28]
   b4508:	9301      	str	r3, [sp, #4]
   b450a:	bd08      	pop	{r3, pc}
   b450c:	0003023c 	.word	0x0003023c

000b4510 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b4510:	b508      	push	{r3, lr}
   b4512:	4b02      	ldr	r3, [pc, #8]	; (b451c <hal_usart_available_data_for_write+0xc>)
   b4514:	681b      	ldr	r3, [r3, #0]
   b4516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4518:	9301      	str	r3, [sp, #4]
   b451a:	bd08      	pop	{r3, pc}
   b451c:	0003023c 	.word	0x0003023c

000b4520 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   b4520:	b508      	push	{r3, lr}
   b4522:	4b02      	ldr	r3, [pc, #8]	; (b452c <hal_usart_begin_config+0xc>)
   b4524:	681b      	ldr	r3, [r3, #0]
   b4526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4528:	9301      	str	r3, [sp, #4]
   b452a:	bd08      	pop	{r3, pc}
   b452c:	0003023c 	.word	0x0003023c

000b4530 <hal_usart_write_nine_bits>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
   b4530:	b508      	push	{r3, lr}
   b4532:	4b02      	ldr	r3, [pc, #8]	; (b453c <hal_usart_write_nine_bits+0xc>)
   b4534:	681b      	ldr	r3, [r3, #0]
   b4536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4538:	9301      	str	r3, [sp, #4]
   b453a:	bd08      	pop	{r3, pc}
   b453c:	0003023c 	.word	0x0003023c

000b4540 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b4540:	b508      	push	{r3, lr}
   b4542:	4b02      	ldr	r3, [pc, #8]	; (b454c <hal_usart_init_ex+0xc>)
   b4544:	681b      	ldr	r3, [r3, #0]
   b4546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4548:	9301      	str	r3, [sp, #4]
   b454a:	bd08      	pop	{r3, pc}
   b454c:	0003023c 	.word	0x0003023c

000b4550 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b4550:	b508      	push	{r3, lr}
   b4552:	4b02      	ldr	r3, [pc, #8]	; (b455c <HAL_USB_USART_Init+0xc>)
   b4554:	681b      	ldr	r3, [r3, #0]
   b4556:	681b      	ldr	r3, [r3, #0]
   b4558:	9301      	str	r3, [sp, #4]
   b455a:	bd08      	pop	{r3, pc}
   b455c:	0003024c 	.word	0x0003024c

000b4560 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b4560:	b508      	push	{r3, lr}
   b4562:	4b02      	ldr	r3, [pc, #8]	; (b456c <HAL_USB_USART_Begin+0xc>)
   b4564:	681b      	ldr	r3, [r3, #0]
   b4566:	685b      	ldr	r3, [r3, #4]
   b4568:	9301      	str	r3, [sp, #4]
   b456a:	bd08      	pop	{r3, pc}
   b456c:	0003024c 	.word	0x0003024c

000b4570 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   b4570:	b508      	push	{r3, lr}
   b4572:	4b02      	ldr	r3, [pc, #8]	; (b457c <HAL_USB_USART_End+0xc>)
   b4574:	681b      	ldr	r3, [r3, #0]
   b4576:	689b      	ldr	r3, [r3, #8]
   b4578:	9301      	str	r3, [sp, #4]
   b457a:	bd08      	pop	{r3, pc}
   b457c:	0003024c 	.word	0x0003024c

000b4580 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b4580:	b508      	push	{r3, lr}
   b4582:	4b02      	ldr	r3, [pc, #8]	; (b458c <HAL_USB_USART_Available_Data+0xc>)
   b4584:	681b      	ldr	r3, [r3, #0]
   b4586:	691b      	ldr	r3, [r3, #16]
   b4588:	9301      	str	r3, [sp, #4]
   b458a:	bd08      	pop	{r3, pc}
   b458c:	0003024c 	.word	0x0003024c

000b4590 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b4590:	b508      	push	{r3, lr}
   b4592:	4b02      	ldr	r3, [pc, #8]	; (b459c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b4594:	681b      	ldr	r3, [r3, #0]
   b4596:	695b      	ldr	r3, [r3, #20]
   b4598:	9301      	str	r3, [sp, #4]
   b459a:	bd08      	pop	{r3, pc}
   b459c:	0003024c 	.word	0x0003024c

000b45a0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b45a0:	b508      	push	{r3, lr}
   b45a2:	4b02      	ldr	r3, [pc, #8]	; (b45ac <HAL_USB_USART_Receive_Data+0xc>)
   b45a4:	681b      	ldr	r3, [r3, #0]
   b45a6:	699b      	ldr	r3, [r3, #24]
   b45a8:	9301      	str	r3, [sp, #4]
   b45aa:	bd08      	pop	{r3, pc}
   b45ac:	0003024c 	.word	0x0003024c

000b45b0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b45b0:	b508      	push	{r3, lr}
   b45b2:	4b02      	ldr	r3, [pc, #8]	; (b45bc <HAL_USB_USART_Send_Data+0xc>)
   b45b4:	681b      	ldr	r3, [r3, #0]
   b45b6:	69db      	ldr	r3, [r3, #28]
   b45b8:	9301      	str	r3, [sp, #4]
   b45ba:	bd08      	pop	{r3, pc}
   b45bc:	0003024c 	.word	0x0003024c

000b45c0 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b45c0:	b508      	push	{r3, lr}
   b45c2:	4b02      	ldr	r3, [pc, #8]	; (b45cc <HAL_USB_USART_Flush_Data+0xc>)
   b45c4:	681b      	ldr	r3, [r3, #0]
   b45c6:	6a1b      	ldr	r3, [r3, #32]
   b45c8:	9301      	str	r3, [sp, #4]
   b45ca:	bd08      	pop	{r3, pc}
   b45cc:	0003024c 	.word	0x0003024c

000b45d0 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b45d0:	b508      	push	{r3, lr}
   b45d2:	4b02      	ldr	r3, [pc, #8]	; (b45dc <panic_+0xc>)
   b45d4:	681b      	ldr	r3, [r3, #0]
   b45d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b45d8:	9301      	str	r3, [sp, #4]
   b45da:	bd08      	pop	{r3, pc}
   b45dc:	00030260 	.word	0x00030260

000b45e0 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   b45e0:	b508      	push	{r3, lr}
   b45e2:	4b02      	ldr	r3, [pc, #8]	; (b45ec <log_level_name+0xc>)
   b45e4:	681b      	ldr	r3, [r3, #0]
   b45e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   b45e8:	9301      	str	r3, [sp, #4]
   b45ea:	bd08      	pop	{r3, pc}
   b45ec:	00030260 	.word	0x00030260

000b45f0 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   b45f0:	b508      	push	{r3, lr}
   b45f2:	4b02      	ldr	r3, [pc, #8]	; (b45fc <log_set_callbacks+0xc>)
   b45f4:	681b      	ldr	r3, [r3, #0]
   b45f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   b45f8:	9301      	str	r3, [sp, #4]
   b45fa:	bd08      	pop	{r3, pc}
   b45fc:	00030260 	.word	0x00030260

000b4600 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b4600:	b508      	push	{r3, lr}
   b4602:	4b02      	ldr	r3, [pc, #8]	; (b460c <set_system_mode+0xc>)
   b4604:	681b      	ldr	r3, [r3, #0]
   b4606:	685b      	ldr	r3, [r3, #4]
   b4608:	9301      	str	r3, [sp, #4]
   b460a:	bd08      	pop	{r3, pc}
   b460c:	00030220 	.word	0x00030220

000b4610 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b4610:	b508      	push	{r3, lr}
   b4612:	4b02      	ldr	r3, [pc, #8]	; (b461c <system_delay_ms+0xc>)
   b4614:	681b      	ldr	r3, [r3, #0]
   b4616:	695b      	ldr	r3, [r3, #20]
   b4618:	9301      	str	r3, [sp, #4]
   b461a:	bd08      	pop	{r3, pc}
   b461c:	00030220 	.word	0x00030220

000b4620 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b4620:	b508      	push	{r3, lr}
   b4622:	4b02      	ldr	r3, [pc, #8]	; (b462c <system_thread_set_state+0xc>)
   b4624:	681b      	ldr	r3, [r3, #0]
   b4626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4628:	9301      	str	r3, [sp, #4]
   b462a:	bd08      	pop	{r3, pc}
   b462c:	00030220 	.word	0x00030220

000b4630 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b4630:	b508      	push	{r3, lr}
   b4632:	4b03      	ldr	r3, [pc, #12]	; (b4640 <system_ctrl_set_app_request_handler+0x10>)
   b4634:	681b      	ldr	r3, [r3, #0]
   b4636:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b463a:	9301      	str	r3, [sp, #4]
   b463c:	bd08      	pop	{r3, pc}
   b463e:	0000      	.short	0x0000
   b4640:	00030220 	.word	0x00030220

000b4644 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b4644:	b508      	push	{r3, lr}
   b4646:	4b03      	ldr	r3, [pc, #12]	; (b4654 <system_ctrl_set_result+0x10>)
   b4648:	681b      	ldr	r3, [r3, #0]
   b464a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b464e:	9301      	str	r3, [sp, #4]
   b4650:	bd08      	pop	{r3, pc}
   b4652:	0000      	.short	0x0000
   b4654:	00030220 	.word	0x00030220

000b4658 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b4658:	b508      	push	{r3, lr}
   b465a:	4b02      	ldr	r3, [pc, #8]	; (b4664 <spark_set_random_seed_from_cloud_handler+0xc>)
   b465c:	681b      	ldr	r3, [r3, #0]
   b465e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b4660:	9301      	str	r3, [sp, #4]
   b4662:	bd08      	pop	{r3, pc}
   b4664:	00030244 	.word	0x00030244

000b4668 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b4668:	b508      	push	{r3, lr}
   b466a:	4b02      	ldr	r3, [pc, #8]	; (b4674 <network_connect+0xc>)
   b466c:	681b      	ldr	r3, [r3, #0]
   b466e:	685b      	ldr	r3, [r3, #4]
   b4670:	9301      	str	r3, [sp, #4]
   b4672:	bd08      	pop	{r3, pc}
   b4674:	00030240 	.word	0x00030240

000b4678 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b4678:	b508      	push	{r3, lr}
   b467a:	4b02      	ldr	r3, [pc, #8]	; (b4684 <network_connecting+0xc>)
   b467c:	681b      	ldr	r3, [r3, #0]
   b467e:	689b      	ldr	r3, [r3, #8]
   b4680:	9301      	str	r3, [sp, #4]
   b4682:	bd08      	pop	{r3, pc}
   b4684:	00030240 	.word	0x00030240

000b4688 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b4688:	b508      	push	{r3, lr}
   b468a:	4b02      	ldr	r3, [pc, #8]	; (b4694 <network_disconnect+0xc>)
   b468c:	681b      	ldr	r3, [r3, #0]
   b468e:	68db      	ldr	r3, [r3, #12]
   b4690:	9301      	str	r3, [sp, #4]
   b4692:	bd08      	pop	{r3, pc}
   b4694:	00030240 	.word	0x00030240

000b4698 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b4698:	b508      	push	{r3, lr}
   b469a:	4b02      	ldr	r3, [pc, #8]	; (b46a4 <network_ready+0xc>)
   b469c:	681b      	ldr	r3, [r3, #0]
   b469e:	691b      	ldr	r3, [r3, #16]
   b46a0:	9301      	str	r3, [sp, #4]
   b46a2:	bd08      	pop	{r3, pc}
   b46a4:	00030240 	.word	0x00030240

000b46a8 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b46a8:	b508      	push	{r3, lr}
   b46aa:	4b02      	ldr	r3, [pc, #8]	; (b46b4 <network_on+0xc>)
   b46ac:	681b      	ldr	r3, [r3, #0]
   b46ae:	695b      	ldr	r3, [r3, #20]
   b46b0:	9301      	str	r3, [sp, #4]
   b46b2:	bd08      	pop	{r3, pc}
   b46b4:	00030240 	.word	0x00030240

000b46b8 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b46b8:	b508      	push	{r3, lr}
   b46ba:	4b02      	ldr	r3, [pc, #8]	; (b46c4 <network_off+0xc>)
   b46bc:	681b      	ldr	r3, [r3, #0]
   b46be:	699b      	ldr	r3, [r3, #24]
   b46c0:	9301      	str	r3, [sp, #4]
   b46c2:	bd08      	pop	{r3, pc}
   b46c4:	00030240 	.word	0x00030240

000b46c8 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b46c8:	b508      	push	{r3, lr}
   b46ca:	4b02      	ldr	r3, [pc, #8]	; (b46d4 <network_listen+0xc>)
   b46cc:	681b      	ldr	r3, [r3, #0]
   b46ce:	69db      	ldr	r3, [r3, #28]
   b46d0:	9301      	str	r3, [sp, #4]
   b46d2:	bd08      	pop	{r3, pc}
   b46d4:	00030240 	.word	0x00030240

000b46d8 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b46d8:	b508      	push	{r3, lr}
   b46da:	4b02      	ldr	r3, [pc, #8]	; (b46e4 <network_listening+0xc>)
   b46dc:	681b      	ldr	r3, [r3, #0]
   b46de:	6a1b      	ldr	r3, [r3, #32]
   b46e0:	9301      	str	r3, [sp, #4]
   b46e2:	bd08      	pop	{r3, pc}
   b46e4:	00030240 	.word	0x00030240

000b46e8 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b46e8:	b508      	push	{r3, lr}
   b46ea:	4b02      	ldr	r3, [pc, #8]	; (b46f4 <network_set_listen_timeout+0xc>)
   b46ec:	681b      	ldr	r3, [r3, #0]
   b46ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b46f0:	9301      	str	r3, [sp, #4]
   b46f2:	bd08      	pop	{r3, pc}
   b46f4:	00030240 	.word	0x00030240

000b46f8 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b46f8:	b508      	push	{r3, lr}
   b46fa:	4b02      	ldr	r3, [pc, #8]	; (b4704 <network_get_listen_timeout+0xc>)
   b46fc:	681b      	ldr	r3, [r3, #0]
   b46fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4700:	9301      	str	r3, [sp, #4]
   b4702:	bd08      	pop	{r3, pc}
   b4704:	00030240 	.word	0x00030240

000b4708 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b4708:	b508      	push	{r3, lr}
   b470a:	4b02      	ldr	r3, [pc, #8]	; (b4714 <network_is_on+0xc>)
   b470c:	681b      	ldr	r3, [r3, #0]
   b470e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4710:	9301      	str	r3, [sp, #4]
   b4712:	bd08      	pop	{r3, pc}
   b4714:	00030240 	.word	0x00030240

000b4718 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b4718:	b508      	push	{r3, lr}
   b471a:	4b02      	ldr	r3, [pc, #8]	; (b4724 <network_is_off+0xc>)
   b471c:	681b      	ldr	r3, [r3, #0]
   b471e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4720:	9301      	str	r3, [sp, #4]
   b4722:	bd08      	pop	{r3, pc}
   b4724:	00030240 	.word	0x00030240

000b4728 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b4728:	b508      	push	{r3, lr}
   b472a:	4b02      	ldr	r3, [pc, #8]	; (b4734 <malloc+0xc>)
   b472c:	681b      	ldr	r3, [r3, #0]
   b472e:	681b      	ldr	r3, [r3, #0]
   b4730:	9301      	str	r3, [sp, #4]
   b4732:	bd08      	pop	{r3, pc}
   b4734:	0003021c 	.word	0x0003021c

000b4738 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b4738:	b508      	push	{r3, lr}
   b473a:	4b02      	ldr	r3, [pc, #8]	; (b4744 <free+0xc>)
   b473c:	681b      	ldr	r3, [r3, #0]
   b473e:	685b      	ldr	r3, [r3, #4]
   b4740:	9301      	str	r3, [sp, #4]
   b4742:	bd08      	pop	{r3, pc}
   b4744:	0003021c 	.word	0x0003021c

000b4748 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b4748:	b508      	push	{r3, lr}
   b474a:	4b02      	ldr	r3, [pc, #8]	; (b4754 <realloc+0xc>)
   b474c:	681b      	ldr	r3, [r3, #0]
   b474e:	689b      	ldr	r3, [r3, #8]
   b4750:	9301      	str	r3, [sp, #4]
   b4752:	bd08      	pop	{r3, pc}
   b4754:	0003021c 	.word	0x0003021c

000b4758 <sscanf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
   b4758:	b508      	push	{r3, lr}
   b475a:	4b02      	ldr	r3, [pc, #8]	; (b4764 <sscanf+0xc>)
   b475c:	681b      	ldr	r3, [r3, #0]
   b475e:	695b      	ldr	r3, [r3, #20]
   b4760:	9301      	str	r3, [sp, #4]
   b4762:	bd08      	pop	{r3, pc}
   b4764:	0003021c 	.word	0x0003021c

000b4768 <vsnprintf>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b4768:	b508      	push	{r3, lr}
   b476a:	4b02      	ldr	r3, [pc, #8]	; (b4774 <vsnprintf+0xc>)
   b476c:	681b      	ldr	r3, [r3, #0]
   b476e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4770:	9301      	str	r3, [sp, #4]
   b4772:	bd08      	pop	{r3, pc}
   b4774:	0003021c 	.word	0x0003021c

000b4778 <_malloc_r>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b4778:	b508      	push	{r3, lr}
   b477a:	4b02      	ldr	r3, [pc, #8]	; (b4784 <_malloc_r+0xc>)
   b477c:	681b      	ldr	r3, [r3, #0]
   b477e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4780:	9301      	str	r3, [sp, #4]
   b4782:	bd08      	pop	{r3, pc}
   b4784:	0003021c 	.word	0x0003021c

000b4788 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b4788:	b508      	push	{r3, lr}
   b478a:	4b02      	ldr	r3, [pc, #8]	; (b4794 <__errno+0xc>)
   b478c:	681b      	ldr	r3, [r3, #0]
   b478e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b4790:	9301      	str	r3, [sp, #4]
   b4792:	bd08      	pop	{r3, pc}
   b4794:	0003021c 	.word	0x0003021c

000b4798 <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b4798:	b508      	push	{r3, lr}
   b479a:	4b02      	ldr	r3, [pc, #8]	; (b47a4 <__assert_func+0xc>)
   b479c:	681b      	ldr	r3, [r3, #0]
   b479e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b47a0:	9301      	str	r3, [sp, #4]
   b47a2:	bd08      	pop	{r3, pc}
   b47a4:	0003021c 	.word	0x0003021c

000b47a8 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b47a8:	b508      	push	{r3, lr}
   b47aa:	4b02      	ldr	r3, [pc, #8]	; (b47b4 <newlib_impure_ptr_callback+0xc>)
   b47ac:	681b      	ldr	r3, [r3, #0]
   b47ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b47b0:	9301      	str	r3, [sp, #4]
   b47b2:	bd08      	pop	{r3, pc}
   b47b4:	0003021c 	.word	0x0003021c

000b47b8 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b47b8:	2100      	movs	r1, #0
   b47ba:	f7ff bf29 	b.w	b4610 <system_delay_ms>

000b47be <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
   b47be:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b47c0:	6843      	ldr	r3, [r0, #4]
   b47c2:	3b01      	subs	r3, #1
    {
   b47c4:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b47c6:	6043      	str	r3, [r0, #4]
   b47c8:	b963      	cbnz	r3, b47e4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
        {
          _M_dispose();
   b47ca:	6803      	ldr	r3, [r0, #0]
   b47cc:	689b      	ldr	r3, [r3, #8]
   b47ce:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b47d0:	68a3      	ldr	r3, [r4, #8]
   b47d2:	3b01      	subs	r3, #1
   b47d4:	60a3      	str	r3, [r4, #8]
   b47d6:	b92b      	cbnz	r3, b47e4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b47d8:	6823      	ldr	r3, [r4, #0]
   b47da:	4620      	mov	r0, r4
   b47dc:	68db      	ldr	r3, [r3, #12]
        }
    }
   b47de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b47e2:	4718      	bx	r3
    }
   b47e4:	bd10      	pop	{r4, pc}

000b47e6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   b47e6:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b47e8:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b47ec:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b47ee:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   b47f2:	42ae      	cmp	r6, r5
   b47f4:	d004      	beq.n	b4800 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   b47f6:	4628      	mov	r0, r5
   b47f8:	f001 fc5e 	bl	b60b8 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   b47fc:	3510      	adds	r5, #16
   b47fe:	e7f8      	b.n	b47f2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b4800:	6820      	ldr	r0, [r4, #0]
   b4802:	f7ff ff99 	bl	b4738 <free>
    AllocatorT::free(data_);
}
   b4806:	4620      	mov	r0, r4
   b4808:	bd70      	pop	{r4, r5, r6, pc}

000b480a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   b480a:	b510      	push	{r4, lr}
   b480c:	4604      	mov	r4, r0
      {
	if (_M_pi != nullptr)
   b480e:	6800      	ldr	r0, [r0, #0]
   b4810:	b108      	cbz	r0, b4816 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
   b4812:	f7ff ffd4 	bl	b47be <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
   b4816:	4620      	mov	r0, r4
   b4818:	bd10      	pop	{r4, pc}
	...

000b481c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b481c:	4802      	ldr	r0, [pc, #8]	; (b4828 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b481e:	2300      	movs	r3, #0
   b4820:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b4822:	f7ff bded 	b.w	b4400 <os_mutex_recursive_create>
   b4826:	bf00      	nop
   b4828:	2003e6a8 	.word	0x2003e6a8

000b482c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b482c:	2200      	movs	r2, #0
   b482e:	6840      	ldr	r0, [r0, #4]
   b4830:	4611      	mov	r1, r2
   b4832:	f7ff bf51 	b.w	b46d8 <network_listening>

000b4836 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b4836:	2200      	movs	r2, #0
   b4838:	6840      	ldr	r0, [r0, #4]
   b483a:	4611      	mov	r1, r2
   b483c:	f7ff bf5c 	b.w	b46f8 <network_get_listen_timeout>

000b4840 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b4840:	6840      	ldr	r0, [r0, #4]
   b4842:	2200      	movs	r2, #0
   b4844:	f7ff bf50 	b.w	b46e8 <network_set_listen_timeout>

000b4848 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b4848:	6840      	ldr	r0, [r0, #4]
   b484a:	2200      	movs	r2, #0
   b484c:	f081 0101 	eor.w	r1, r1, #1
   b4850:	f7ff bf3a 	b.w	b46c8 <network_listen>

000b4854 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b4854:	2300      	movs	r3, #0
   b4856:	6840      	ldr	r0, [r0, #4]
   b4858:	461a      	mov	r2, r3
   b485a:	4619      	mov	r1, r3
   b485c:	f7ff bf2c 	b.w	b46b8 <network_off>

000b4860 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b4860:	2300      	movs	r3, #0
   b4862:	6840      	ldr	r0, [r0, #4]
   b4864:	461a      	mov	r2, r3
   b4866:	4619      	mov	r1, r3
   b4868:	f7ff bf1e 	b.w	b46a8 <network_on>

000b486c <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b486c:	2200      	movs	r2, #0
   b486e:	6840      	ldr	r0, [r0, #4]
   b4870:	4611      	mov	r1, r2
   b4872:	f7ff bf11 	b.w	b4698 <network_ready>

000b4876 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b4876:	2200      	movs	r2, #0
   b4878:	6840      	ldr	r0, [r0, #4]
   b487a:	4611      	mov	r1, r2
   b487c:	f7ff befc 	b.w	b4678 <network_connecting>

000b4880 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b4880:	6840      	ldr	r0, [r0, #4]
   b4882:	2200      	movs	r2, #0
   b4884:	2102      	movs	r1, #2
   b4886:	f7ff beff 	b.w	b4688 <network_disconnect>

000b488a <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b488a:	2300      	movs	r3, #0
   b488c:	6840      	ldr	r0, [r0, #4]
   b488e:	461a      	mov	r2, r3
   b4890:	f7ff beea 	b.w	b4668 <network_connect>

000b4894 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b4894:	4b02      	ldr	r3, [pc, #8]	; (b48a0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b4896:	2203      	movs	r2, #3
   b4898:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b489a:	4a02      	ldr	r2, [pc, #8]	; (b48a4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b489c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b489e:	4770      	bx	lr
   b48a0:	2003e6ac 	.word	0x2003e6ac
   b48a4:	000b9230 	.word	0x000b9230

000b48a8 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b48a8:	4770      	bx	lr

000b48aa <_ZN9IPAddressD0Ev>:
   b48aa:	b510      	push	{r4, lr}
   b48ac:	2118      	movs	r1, #24
   b48ae:	4604      	mov	r4, r0
   b48b0:	f7ff fbf5 	bl	b409e <_ZdlPvj>
   b48b4:	4620      	mov	r0, r4
   b48b6:	bd10      	pop	{r4, pc}

000b48b8 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b48b8:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b48ba:	7d03      	ldrb	r3, [r0, #20]
   b48bc:	2b06      	cmp	r3, #6
{
   b48be:	b08d      	sub	sp, #52	; 0x34
   b48c0:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b48c2:	f100 0704 	add.w	r7, r0, #4
   b48c6:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b48ca:	d012      	beq.n	b48f2 <_ZNK9IPAddress7printToER5Print+0x3a>
   b48cc:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b48d0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b48d4:	220a      	movs	r2, #10
   b48d6:	4630      	mov	r0, r6
   b48d8:	f001 fa97 	bl	b5e0a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b48dc:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b48de:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b48e0:	d019      	beq.n	b4916 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b48e2:	2c00      	cmp	r4, #0
   b48e4:	d0f4      	beq.n	b48d0 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b48e6:	212e      	movs	r1, #46	; 0x2e
   b48e8:	4630      	mov	r0, r6
   b48ea:	f001 fa7f 	bl	b5dec <_ZN5Print5printEc>
   b48ee:	4404      	add	r4, r0
   b48f0:	e7ee      	b.n	b48d0 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b48f2:	232f      	movs	r3, #47	; 0x2f
   b48f4:	466a      	mov	r2, sp
   b48f6:	4639      	mov	r1, r7
   b48f8:	200a      	movs	r0, #10
		buf[0] = 0;
   b48fa:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b48fe:	f7ff fdbf 	bl	b4480 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b4902:	4668      	mov	r0, sp
   b4904:	f002 fc49 	bl	b719a <strlen>
   b4908:	6833      	ldr	r3, [r6, #0]
   b490a:	4602      	mov	r2, r0
   b490c:	68db      	ldr	r3, [r3, #12]
   b490e:	4669      	mov	r1, sp
   b4910:	4630      	mov	r0, r6
   b4912:	4798      	blx	r3
   b4914:	4604      	mov	r4, r0
    }
    return n;
}
   b4916:	4620      	mov	r0, r4
   b4918:	b00d      	add	sp, #52	; 0x34
   b491a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b491c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b491c:	b510      	push	{r4, lr}
   b491e:	4b05      	ldr	r3, [pc, #20]	; (b4934 <_ZN9IPAddressC1Ev+0x18>)
   b4920:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b4922:	2211      	movs	r2, #17
   b4924:	f840 3b04 	str.w	r3, [r0], #4
   b4928:	2100      	movs	r1, #0
   b492a:	f002 fbd7 	bl	b70dc <memset>
}
   b492e:	4620      	mov	r0, r4
   b4930:	bd10      	pop	{r4, pc}
   b4932:	bf00      	nop
   b4934:	000b926c 	.word	0x000b926c

000b4938 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b4938:	4603      	mov	r3, r0
   b493a:	4a07      	ldr	r2, [pc, #28]	; (b4958 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b493c:	b510      	push	{r4, lr}
   b493e:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b4942:	f101 0210 	add.w	r2, r1, #16
   b4946:	f851 4b04 	ldr.w	r4, [r1], #4
   b494a:	f843 4b04 	str.w	r4, [r3], #4
   b494e:	4291      	cmp	r1, r2
   b4950:	d1f9      	bne.n	b4946 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b4952:	780a      	ldrb	r2, [r1, #0]
   b4954:	701a      	strb	r2, [r3, #0]
}
   b4956:	bd10      	pop	{r4, pc}
   b4958:	000b926c 	.word	0x000b926c

000b495c <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b495c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b495e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b4962:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b4966:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b496a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b496e:	2304      	movs	r3, #4
   b4970:	6041      	str	r1, [r0, #4]
   b4972:	7503      	strb	r3, [r0, #20]
}
   b4974:	bd10      	pop	{r4, pc}
	...

000b4978 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b4978:	b507      	push	{r0, r1, r2, lr}
   b497a:	4b06      	ldr	r3, [pc, #24]	; (b4994 <_ZN9IPAddressC1EPKh+0x1c>)
   b497c:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b497e:	78cb      	ldrb	r3, [r1, #3]
   b4980:	9300      	str	r3, [sp, #0]
   b4982:	788b      	ldrb	r3, [r1, #2]
   b4984:	784a      	ldrb	r2, [r1, #1]
   b4986:	7809      	ldrb	r1, [r1, #0]
   b4988:	f7ff ffe8 	bl	b495c <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b498c:	b003      	add	sp, #12
   b498e:	f85d fb04 	ldr.w	pc, [sp], #4
   b4992:	bf00      	nop
   b4994:	000b926c 	.word	0x000b926c

000b4998 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   b4998:	f100 0310 	add.w	r3, r0, #16
   b499c:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   b499e:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   b49a2:	2901      	cmp	r1, #1
   b49a4:	4618      	mov	r0, r3
   b49a6:	d108      	bne.n	b49ba <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   b49a8:	f853 1c04 	ldr.w	r1, [r3, #-4]
   b49ac:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   b49b0:	3a01      	subs	r2, #1
   b49b2:	f103 0310 	add.w	r3, r3, #16
   b49b6:	d1f2      	bne.n	b499e <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   b49b8:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   b49ba:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   b49bc:	bf04      	itt	eq
   b49be:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   b49c2:	1852      	addeq	r2, r2, r1
   b49c4:	e7f4      	b.n	b49b0 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000b49c6 <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   b49c6:	b40e      	push	{r1, r2, r3}
   b49c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   b49ca:	b088      	sub	sp, #32
   b49cc:	af00      	add	r7, sp, #0
   b49ce:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b49d2:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   b49d4:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b49d8:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   b49da:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b49dc:	462b      	mov	r3, r5
   b49de:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   b49e0:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b49e2:	f7ff fec1 	bl	b4768 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   b49e6:	280f      	cmp	r0, #15
   b49e8:	687a      	ldr	r2, [r7, #4]
   b49ea:	d91a      	bls.n	b4a22 <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   b49ec:	f100 0308 	add.w	r3, r0, #8
   b49f0:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   b49f4:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   b49f6:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b49fa:	1c41      	adds	r1, r0, #1
   b49fc:	462b      	mov	r3, r5
   b49fe:	4668      	mov	r0, sp
        va_start(args, fmt);
   b4a00:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b4a02:	f7ff feb1 	bl	b4768 <vsnprintf>
        if (n > 0) {
   b4a06:	1e02      	subs	r2, r0, #0
   b4a08:	dd04      	ble.n	b4a14 <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   b4a0a:	6823      	ldr	r3, [r4, #0]
   b4a0c:	4669      	mov	r1, sp
   b4a0e:	689b      	ldr	r3, [r3, #8]
   b4a10:	4620      	mov	r0, r4
   b4a12:	4798      	blx	r3
   b4a14:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   b4a16:	3720      	adds	r7, #32
   b4a18:	46bd      	mov	sp, r7
   b4a1a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b4a1e:	b003      	add	sp, #12
   b4a20:	4770      	bx	lr
    } else if (n > 0) {
   b4a22:	2800      	cmp	r0, #0
   b4a24:	d0f7      	beq.n	b4a16 <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   b4a26:	6823      	ldr	r3, [r4, #0]
   b4a28:	4602      	mov	r2, r0
   b4a2a:	689b      	ldr	r3, [r3, #8]
   b4a2c:	f107 0110 	add.w	r1, r7, #16
   b4a30:	4620      	mov	r0, r4
   b4a32:	4798      	blx	r3
}
   b4a34:	e7ef      	b.n	b4a16 <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000b4a36 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>:
	  _M_refcount._M_swap(__r._M_refcount);
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b4a36:	b538      	push	{r3, r4, r5, lr}
   b4a38:	680b      	ldr	r3, [r1, #0]
   b4a3a:	6003      	str	r3, [r0, #0]
   b4a3c:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   b4a3e:	6843      	ldr	r3, [r0, #4]
   b4a40:	429d      	cmp	r5, r3
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b4a42:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   b4a44:	d008      	beq.n	b4a58 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x22>
	    if (__tmp != 0)
   b4a46:	b115      	cbz	r5, b4a4e <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x18>
    { ++_M_use_count; }
   b4a48:	686b      	ldr	r3, [r5, #4]
   b4a4a:	3301      	adds	r3, #1
   b4a4c:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   b4a4e:	6860      	ldr	r0, [r4, #4]
   b4a50:	b108      	cbz	r0, b4a56 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x20>
	      _M_pi->_M_release();
   b4a52:	f7ff feb4 	bl	b47be <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   b4a56:	6065      	str	r5, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b4a58:	bd38      	pop	{r3, r4, r5, pc}

000b4a5a <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   b4a5a:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   b4a5c:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   b4a5e:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   b4a62:	689b      	ldr	r3, [r3, #8]
   b4a64:	2201      	movs	r2, #1
   b4a66:	f10d 0107 	add.w	r1, sp, #7
   b4a6a:	4798      	blx	r3
}
   b4a6c:	b003      	add	sp, #12
   b4a6e:	f85d fb04 	ldr.w	pc, [sp], #4

000b4a72 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   b4a72:	460b      	mov	r3, r1
   b4a74:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   b4a76:	2200      	movs	r2, #0
   b4a78:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   b4a7a:	e9c0 2200 	strd	r2, r2, [r0]
   b4a7e:	4604      	mov	r4, r0
        t_ = t;
   b4a80:	6083      	str	r3, [r0, #8]
    if (t) {
   b4a82:	b90b      	cbnz	r3, b4a88 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   b4a84:	4620      	mov	r0, r4
   b4a86:	bd10      	pop	{r4, pc}
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count() == 0 && get() == nullptr
       */
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }

      shared_ptr& operator=(const shared_ptr&) noexcept = default;
   b4a88:	f7ff ffd5 	bl	b4a36 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
   b4a8c:	e7fa      	b.n	b4a84 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000b4a8e <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   b4a8e:	6883      	ldr	r3, [r0, #8]
   b4a90:	b1eb      	cbz	r3, b4ace <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   b4a92:	781a      	ldrb	r2, [r3, #0]
   b4a94:	2a03      	cmp	r2, #3
   b4a96:	d81a      	bhi.n	b4ace <_ZNK5spark9JSONValue4typeEv+0x40>
   b4a98:	e8df f002 	tbb	[pc, r2]
   b4a9c:	1b021704 	.word	0x1b021704
   b4aa0:	2005      	movs	r0, #5
   b4aa2:	4770      	bx	lr
        const char c = d_->json[t_->start];
   b4aa4:	6802      	ldr	r2, [r0, #0]
   b4aa6:	685b      	ldr	r3, [r3, #4]
   b4aa8:	6852      	ldr	r2, [r2, #4]
   b4aaa:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   b4aac:	282d      	cmp	r0, #45	; 0x2d
   b4aae:	d012      	beq.n	b4ad6 <_ZNK5spark9JSONValue4typeEv+0x48>
   b4ab0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b4ab4:	2b09      	cmp	r3, #9
   b4ab6:	d90e      	bls.n	b4ad6 <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   b4ab8:	2874      	cmp	r0, #116	; 0x74
   b4aba:	d00e      	beq.n	b4ada <_ZNK5spark9JSONValue4typeEv+0x4c>
   b4abc:	2866      	cmp	r0, #102	; 0x66
   b4abe:	d00c      	beq.n	b4ada <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   b4ac0:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   b4ac4:	4258      	negs	r0, r3
   b4ac6:	4158      	adcs	r0, r3
   b4ac8:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   b4aca:	2006      	movs	r0, #6
   b4acc:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   b4ace:	2000      	movs	r0, #0
   b4ad0:	4770      	bx	lr
        return JSON_TYPE_STRING;
   b4ad2:	2004      	movs	r0, #4
   b4ad4:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   b4ad6:	2003      	movs	r0, #3
   b4ad8:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   b4ada:	2002      	movs	r0, #2
}
   b4adc:	4770      	bx	lr

000b4ade <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   b4ade:	b510      	push	{r4, lr}
   b4ae0:	4604      	mov	r4, r0
    switch (type()) {
   b4ae2:	f7ff ffd4 	bl	b4a8e <_ZNK5spark9JSONValue4typeEv>
   b4ae6:	2802      	cmp	r0, #2
   b4ae8:	d00e      	beq.n	b4b08 <_ZNK5spark9JSONValue5toIntEv+0x2a>
   b4aea:	1ec3      	subs	r3, r0, #3
   b4aec:	b2db      	uxtb	r3, r3
   b4aee:	2b01      	cmp	r3, #1
   b4af0:	d814      	bhi.n	b4b1c <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   b4af2:	6822      	ldr	r2, [r4, #0]
   b4af4:	68a3      	ldr	r3, [r4, #8]
   b4af6:	6850      	ldr	r0, [r2, #4]
   b4af8:	685b      	ldr	r3, [r3, #4]
}
   b4afa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   b4afe:	220a      	movs	r2, #10
   b4b00:	2100      	movs	r1, #0
   b4b02:	4418      	add	r0, r3
   b4b04:	f003 ba2c 	b.w	b7f60 <strtol>
        const char* const s = d_->json + t_->start;
   b4b08:	6822      	ldr	r2, [r4, #0]
   b4b0a:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   b4b0c:	6852      	ldr	r2, [r2, #4]
   b4b0e:	685b      	ldr	r3, [r3, #4]
   b4b10:	5cd0      	ldrb	r0, [r2, r3]
   b4b12:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   b4b16:	4258      	negs	r0, r3
   b4b18:	4158      	adcs	r0, r3
}
   b4b1a:	bd10      	pop	{r4, pc}
    switch (type()) {
   b4b1c:	2000      	movs	r0, #0
   b4b1e:	e7fc      	b.n	b4b1a <_ZNK5spark9JSONValue5toIntEv+0x3c>

000b4b20 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   b4b20:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   b4b22:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   b4b24:	e9c0 3300 	strd	r3, r3, [r0]
   b4b28:	4604      	mov	r4, r0
        n_(0) {
   b4b2a:	480e      	ldr	r0, [pc, #56]	; (b4b64 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   b4b2c:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   b4b30:	b1a9      	cbz	r1, b4b5e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   b4b32:	780b      	ldrb	r3, [r1, #0]
   b4b34:	2b03      	cmp	r3, #3
   b4b36:	d006      	beq.n	b4b46 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   b4b38:	b98b      	cbnz	r3, b4b5e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   b4b3a:	6813      	ldr	r3, [r2, #0]
   b4b3c:	6858      	ldr	r0, [r3, #4]
   b4b3e:	684b      	ldr	r3, [r1, #4]
   b4b40:	5cc3      	ldrb	r3, [r0, r3]
   b4b42:	2b6e      	cmp	r3, #110	; 0x6e
   b4b44:	d007      	beq.n	b4b56 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   b4b46:	6813      	ldr	r3, [r2, #0]
   b4b48:	684d      	ldr	r5, [r1, #4]
   b4b4a:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   b4b4c:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   b4b4e:	4428      	add	r0, r5
            n_ = t->end - t->start;
   b4b50:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   b4b52:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   b4b54:	60e3      	str	r3, [r4, #12]
   b4b56:	4611      	mov	r1, r2
   b4b58:	4620      	mov	r0, r4
   b4b5a:	f7ff ff6c 	bl	b4a36 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   b4b5e:	4620      	mov	r0, r4
   b4b60:	bd38      	pop	{r3, r4, r5, pc}
   b4b62:	bf00      	nop
   b4b64:	000b92de 	.word	0x000b92de

000b4b68 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   b4b68:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   b4b6a:	2500      	movs	r5, #0
   b4b6c:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   b4b6e:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   b4b72:	e9c0 5502 	strd	r5, r5, [r0, #8]
   b4b76:	e9c0 5504 	strd	r5, r5, [r0, #16]
   b4b7a:	4604      	mov	r4, r0
   b4b7c:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   b4b7e:	b14b      	cbz	r3, b4b94 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   b4b80:	781a      	ldrb	r2, [r3, #0]
   b4b82:	2a01      	cmp	r2, #1
   b4b84:	d106      	bne.n	b4b94 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   b4b86:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   b4b8a:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   b4b8c:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   b4b8e:	6143      	str	r3, [r0, #20]
   b4b90:	f7ff ff51 	bl	b4a36 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   b4b94:	4620      	mov	r0, r4
   b4b96:	bd38      	pop	{r3, r4, r5, pc}

000b4b98 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   b4b98:	b510      	push	{r4, lr}
    if (!n_) {
   b4b9a:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   b4b9c:	4604      	mov	r4, r0
    if (!n_) {
   b4b9e:	b163      	cbz	r3, b4bba <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   b4ba0:	6880      	ldr	r0, [r0, #8]
   b4ba2:	60e0      	str	r0, [r4, #12]
    --n_;
   b4ba4:	3b01      	subs	r3, #1
    ++t_;
   b4ba6:	3010      	adds	r0, #16
   b4ba8:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   b4baa:	6120      	str	r0, [r4, #16]
    --n_;
   b4bac:	6163      	str	r3, [r4, #20]
    if (n_) {
   b4bae:	b113      	cbz	r3, b4bb6 <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   b4bb0:	f7ff fef2 	bl	b4998 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   b4bb4:	60a0      	str	r0, [r4, #8]
    return true;
   b4bb6:	2001      	movs	r0, #1
   b4bb8:	e000      	b.n	b4bbc <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   b4bba:	4618      	mov	r0, r3
}
   b4bbc:	bd10      	pop	{r4, pc}

000b4bbe <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   b4bbe:	b510      	push	{r4, lr}
    write('}');
   b4bc0:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   b4bc2:	4604      	mov	r4, r0
    write('}');
   b4bc4:	f7ff ff49 	bl	b4a5a <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   b4bc8:	2301      	movs	r3, #1
   b4bca:	7123      	strb	r3, [r4, #4]
}
   b4bcc:	4620      	mov	r0, r4
   b4bce:	bd10      	pop	{r4, pc}

000b4bd0 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   b4bd0:	b508      	push	{r3, lr}
    switch (state_) {
   b4bd2:	7903      	ldrb	r3, [r0, #4]
   b4bd4:	2b01      	cmp	r3, #1
   b4bd6:	d002      	beq.n	b4bde <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   b4bd8:	2b02      	cmp	r3, #2
   b4bda:	d004      	beq.n	b4be6 <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   b4bdc:	bd08      	pop	{r3, pc}
        write(',');
   b4bde:	212c      	movs	r1, #44	; 0x2c
        write(':');
   b4be0:	f7ff ff3b 	bl	b4a5a <_ZN5spark10JSONWriter5writeEc>
}
   b4be4:	e7fa      	b.n	b4bdc <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   b4be6:	213a      	movs	r1, #58	; 0x3a
   b4be8:	e7fa      	b.n	b4be0 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000b4bea <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   b4bea:	b510      	push	{r4, lr}
   b4bec:	4604      	mov	r4, r0
    writeSeparator();
   b4bee:	f7ff ffef 	bl	b4bd0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   b4bf2:	4620      	mov	r0, r4
   b4bf4:	217b      	movs	r1, #123	; 0x7b
   b4bf6:	f7ff ff30 	bl	b4a5a <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   b4bfa:	2300      	movs	r3, #0
   b4bfc:	7123      	strb	r3, [r4, #4]
}
   b4bfe:	4620      	mov	r0, r4
   b4c00:	bd10      	pop	{r4, pc}
	...

000b4c04 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   b4c04:	b513      	push	{r0, r1, r4, lr}
   b4c06:	4604      	mov	r4, r0
   b4c08:	9101      	str	r1, [sp, #4]
    writeSeparator();
   b4c0a:	f7ff ffe1 	bl	b4bd0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   b4c0e:	6823      	ldr	r3, [r4, #0]
   b4c10:	9a01      	ldr	r2, [sp, #4]
   b4c12:	68db      	ldr	r3, [r3, #12]
   b4c14:	4903      	ldr	r1, [pc, #12]	; (b4c24 <_ZN5spark10JSONWriter5valueEi+0x20>)
   b4c16:	4620      	mov	r0, r4
   b4c18:	4798      	blx	r3
    state_ = NEXT;
   b4c1a:	2301      	movs	r3, #1
}
   b4c1c:	4620      	mov	r0, r4
    state_ = NEXT;
   b4c1e:	7123      	strb	r3, [r4, #4]
}
   b4c20:	b002      	add	sp, #8
   b4c22:	bd10      	pop	{r4, pc}
   b4c24:	000b9278 	.word	0x000b9278

000b4c28 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   b4c28:	b513      	push	{r0, r1, r4, lr}
   b4c2a:	4604      	mov	r4, r0
   b4c2c:	9101      	str	r1, [sp, #4]
    writeSeparator();
   b4c2e:	f7ff ffcf 	bl	b4bd0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   b4c32:	6823      	ldr	r3, [r4, #0]
   b4c34:	9a01      	ldr	r2, [sp, #4]
   b4c36:	68db      	ldr	r3, [r3, #12]
   b4c38:	4903      	ldr	r1, [pc, #12]	; (b4c48 <_ZN5spark10JSONWriter5valueEj+0x20>)
   b4c3a:	4620      	mov	r0, r4
   b4c3c:	4798      	blx	r3
    state_ = NEXT;
   b4c3e:	2301      	movs	r3, #1
}
   b4c40:	4620      	mov	r0, r4
    state_ = NEXT;
   b4c42:	7123      	strb	r3, [r4, #4]
}
   b4c44:	b002      	add	sp, #8
   b4c46:	bd10      	pop	{r4, pc}
   b4c48:	000b927b 	.word	0x000b927b

000b4c4c <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   b4c4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b4c50:	460d      	mov	r5, r1
    write('"');
   b4c52:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   b4c54:	4690      	mov	r8, r2
   b4c56:	4604      	mov	r4, r0
    write('"');
   b4c58:	f7ff feff 	bl	b4a5a <_ZN5spark10JSONWriter5writeEc>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   b4c5c:	f8df 90a4 	ldr.w	r9, [pc, #164]	; b4d04 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
   b4c60:	44a8      	add	r8, r5
    const char *s = str;
   b4c62:	462f      	mov	r7, r5
    while (s != end) {
   b4c64:	4547      	cmp	r7, r8
   b4c66:	46ba      	mov	sl, r7
   b4c68:	d03d      	beq.n	b4ce6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
   b4c6a:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
   b4c6e:	2e22      	cmp	r6, #34	; 0x22
   b4c70:	d006      	beq.n	b4c80 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   b4c72:	2e5c      	cmp	r6, #92	; 0x5c
   b4c74:	d004      	beq.n	b4c80 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   b4c76:	4630      	mov	r0, r6
   b4c78:	f002 fa00 	bl	b707c <isprint>
   b4c7c:	2800      	cmp	r0, #0
   b4c7e:	d1f1      	bne.n	b4c64 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   b4c80:	6823      	ldr	r3, [r4, #0]
   b4c82:	ebaa 0205 	sub.w	r2, sl, r5
   b4c86:	689b      	ldr	r3, [r3, #8]
   b4c88:	4629      	mov	r1, r5
   b4c8a:	4620      	mov	r0, r4
   b4c8c:	4798      	blx	r3
            write('\\');
   b4c8e:	215c      	movs	r1, #92	; 0x5c
   b4c90:	4620      	mov	r0, r4
   b4c92:	f7ff fee2 	bl	b4a5a <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   b4c96:	2e0d      	cmp	r6, #13
   b4c98:	d80a      	bhi.n	b4cb0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
   b4c9a:	2e07      	cmp	r6, #7
   b4c9c:	d91c      	bls.n	b4cd8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   b4c9e:	f1a6 0308 	sub.w	r3, r6, #8
   b4ca2:	2b05      	cmp	r3, #5
   b4ca4:	d818      	bhi.n	b4cd8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   b4ca6:	e8df f003 	tbb	[pc, r3]
   b4caa:	0f0d      	.short	0x0f0d
   b4cac:	15131711 	.word	0x15131711
   b4cb0:	2e22      	cmp	r6, #34	; 0x22
   b4cb2:	d001      	beq.n	b4cb8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
   b4cb4:	2e5c      	cmp	r6, #92	; 0x5c
   b4cb6:	d10f      	bne.n	b4cd8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
   b4cb8:	4631      	mov	r1, r6
                write('b');
   b4cba:	4620      	mov	r0, r4
   b4cbc:	f7ff fecd 	bl	b4a5a <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   b4cc0:	463d      	mov	r5, r7
    while (s != end) {
   b4cc2:	e7cf      	b.n	b4c64 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   b4cc4:	2162      	movs	r1, #98	; 0x62
   b4cc6:	e7f8      	b.n	b4cba <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
   b4cc8:	2174      	movs	r1, #116	; 0x74
   b4cca:	e7f6      	b.n	b4cba <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
   b4ccc:	216e      	movs	r1, #110	; 0x6e
   b4cce:	e7f4      	b.n	b4cba <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
   b4cd0:	2166      	movs	r1, #102	; 0x66
   b4cd2:	e7f2      	b.n	b4cba <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
   b4cd4:	2172      	movs	r1, #114	; 0x72
   b4cd6:	e7f0      	b.n	b4cba <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
   b4cd8:	6823      	ldr	r3, [r4, #0]
   b4cda:	4632      	mov	r2, r6
   b4cdc:	68db      	ldr	r3, [r3, #12]
   b4cde:	4649      	mov	r1, r9
   b4ce0:	4620      	mov	r0, r4
   b4ce2:	4798      	blx	r3
                break;
   b4ce4:	e7ec      	b.n	b4cc0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
        }
        ++s;
    }
    if (s != str) {
   b4ce6:	42bd      	cmp	r5, r7
   b4ce8:	d005      	beq.n	b4cf6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
   b4cea:	6823      	ldr	r3, [r4, #0]
   b4cec:	1b7a      	subs	r2, r7, r5
   b4cee:	689b      	ldr	r3, [r3, #8]
   b4cf0:	4629      	mov	r1, r5
   b4cf2:	4620      	mov	r0, r4
   b4cf4:	4798      	blx	r3
    }
    write('"');
   b4cf6:	2122      	movs	r1, #34	; 0x22
   b4cf8:	4620      	mov	r0, r4
   b4cfa:	f7ff feae 	bl	b4a5a <_ZN5spark10JSONWriter5writeEc>
}
   b4cfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b4d02:	bf00      	nop
   b4d04:	000b927e 	.word	0x000b927e

000b4d08 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   b4d08:	b513      	push	{r0, r1, r4, lr}
   b4d0a:	4604      	mov	r4, r0
   b4d0c:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   b4d10:	f7ff ff5e 	bl	b4bd0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   b4d14:	4620      	mov	r0, r4
   b4d16:	e9dd 2100 	ldrd	r2, r1, [sp]
   b4d1a:	f7ff ff97 	bl	b4c4c <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   b4d1e:	2302      	movs	r3, #2
}
   b4d20:	4620      	mov	r0, r4
    state_ = VALUE;
   b4d22:	7123      	strb	r3, [r4, #4]
}
   b4d24:	b002      	add	sp, #8
   b4d26:	bd10      	pop	{r4, pc}

000b4d28 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   b4d28:	b513      	push	{r0, r1, r4, lr}
   b4d2a:	4604      	mov	r4, r0
   b4d2c:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   b4d30:	f7ff ff4e 	bl	b4bd0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   b4d34:	4620      	mov	r0, r4
   b4d36:	e9dd 2100 	ldrd	r2, r1, [sp]
   b4d3a:	f7ff ff87 	bl	b4c4c <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   b4d3e:	2301      	movs	r3, #1
}
   b4d40:	4620      	mov	r0, r4
    state_ = NEXT;
   b4d42:	7123      	strb	r3, [r4, #4]
}
   b4d44:	b002      	add	sp, #8
   b4d46:	bd10      	pop	{r4, pc}

000b4d48 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   b4d48:	6880      	ldr	r0, [r0, #8]
   b4d4a:	6803      	ldr	r3, [r0, #0]
   b4d4c:	68db      	ldr	r3, [r3, #12]
   b4d4e:	4718      	bx	r3

000b4d50 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   b4d50:	4770      	bx	lr

000b4d52 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   b4d52:	4608      	mov	r0, r1
   b4d54:	b111      	cbz	r1, b4d5c <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   b4d56:	680b      	ldr	r3, [r1, #0]
   b4d58:	685b      	ldr	r3, [r3, #4]
   b4d5a:	4718      	bx	r3
}
   b4d5c:	4770      	bx	lr

000b4d5e <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
   b4d5e:	4770      	bx	lr

000b4d60 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   b4d60:	4770      	bx	lr

000b4d62 <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   b4d62:	4770      	bx	lr

000b4d64 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   b4d64:	4770      	bx	lr

000b4d66 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
   b4d66:	b538      	push	{r3, r4, r5, lr}
   b4d68:	4604      	mov	r4, r0
   b4d6a:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   b4d6c:	6800      	ldr	r0, [r0, #0]
   b4d6e:	212e      	movs	r1, #46	; 0x2e
   b4d70:	f002 f9f7 	bl	b7162 <strchrnul>
    size = s - category;
   b4d74:	6823      	ldr	r3, [r4, #0]
   b4d76:	1ac3      	subs	r3, r0, r3
   b4d78:	602b      	str	r3, [r5, #0]
    if (size) {
   b4d7a:	b123      	cbz	r3, b4d86 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   b4d7c:	7803      	ldrb	r3, [r0, #0]
   b4d7e:	b103      	cbz	r3, b4d82 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   b4d80:	3001      	adds	r0, #1
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   b4d82:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b4d84:	6020      	str	r0, [r4, #0]
}
   b4d86:	4618      	mov	r0, r3
   b4d88:	bd38      	pop	{r3, r4, r5, pc}

000b4d8a <_ZN5spark16JSONStreamWriterD0Ev>:
   b4d8a:	b510      	push	{r4, lr}
   b4d8c:	210c      	movs	r1, #12
   b4d8e:	4604      	mov	r4, r0
   b4d90:	f7ff f985 	bl	b409e <_ZdlPvj>
   b4d94:	4620      	mov	r0, r4
   b4d96:	bd10      	pop	{r4, pc}

000b4d98 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   b4d98:	b510      	push	{r4, lr}
   b4d9a:	2104      	movs	r1, #4
   b4d9c:	4604      	mov	r4, r0
   b4d9e:	f7ff f97e 	bl	b409e <_ZdlPvj>
   b4da2:	4620      	mov	r0, r4
   b4da4:	bd10      	pop	{r4, pc}

000b4da6 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   b4da6:	b510      	push	{r4, lr}
   b4da8:	2104      	movs	r1, #4
   b4daa:	4604      	mov	r4, r0
   b4dac:	f7ff f977 	bl	b409e <_ZdlPvj>
   b4db0:	4620      	mov	r0, r4
   b4db2:	bd10      	pop	{r4, pc}

000b4db4 <_ZN14RecursiveMutex4lockEv.isra.0>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   b4db4:	f7ff bb34 	b.w	b4420 <os_mutex_recursive_lock>

000b4db8 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   b4db8:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   b4dba:	f002 f9dc 	bl	b7176 <strcmp>
}
   b4dbe:	fab0 f080 	clz	r0, r0
   b4dc2:	0940      	lsrs	r0, r0, #5
   b4dc4:	bd08      	pop	{r3, pc}

000b4dc6 <__tcf_1>:
   b4dc6:	4770      	bx	lr

000b4dc8 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != 3
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   b4dc8:	b510      	push	{r4, lr}
   b4dca:	460c      	mov	r4, r1
#if PLATFORM_ID != 3
    if (stream == &Serial) {
   b4dcc:	f001 fb36 	bl	b643c <_Z16_fetch_usbserialv>
   b4dd0:	4284      	cmp	r4, r0
   b4dd2:	d010      	beq.n	b4df6 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   b4dd4:	f001 fc4e 	bl	b6674 <_Z22__fetch_global_Serial1v>
   b4dd8:	4284      	cmp	r4, r0
   b4dda:	d105      	bne.n	b4de8 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   b4ddc:	f001 fc4a 	bl	b6674 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}
   b4de0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   b4de4:	f001 bac1 	b.w	b636a <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   b4de8:	b12c      	cbz	r4, b4df6 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   b4dea:	6823      	ldr	r3, [r4, #0]
   b4dec:	4620      	mov	r0, r4
   b4dee:	685b      	ldr	r3, [r3, #4]
}
   b4df0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b4df4:	4718      	bx	r3
   b4df6:	bd10      	pop	{r4, pc}

000b4df8 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b4df8:	680b      	ldr	r3, [r1, #0]
   b4dfa:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b4dfc:	684b      	ldr	r3, [r1, #4]
   b4dfe:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b4e00:	b113      	cbz	r3, b4e08 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
   b4e02:	685a      	ldr	r2, [r3, #4]
   b4e04:	3201      	adds	r2, #1
   b4e06:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b4e08:	4770      	bx	lr

000b4e0a <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   b4e0a:	b513      	push	{r0, r1, r4, lr}
   b4e0c:	4604      	mov	r4, r0
    return value(val, strlen(val));
   b4e0e:	4608      	mov	r0, r1
   b4e10:	9101      	str	r1, [sp, #4]
   b4e12:	f002 f9c2 	bl	b719a <strlen>
   b4e16:	9901      	ldr	r1, [sp, #4]
   b4e18:	4602      	mov	r2, r0
   b4e1a:	4620      	mov	r0, r4
}
   b4e1c:	b002      	add	sp, #8
   b4e1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   b4e22:	f7ff bf81 	b.w	b4d28 <_ZN5spark10JSONWriter5valueEPKcj>

000b4e26 <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   b4e26:	b513      	push	{r0, r1, r4, lr}
   b4e28:	4604      	mov	r4, r0
    write(str, strlen(str));
   b4e2a:	4608      	mov	r0, r1
   b4e2c:	9101      	str	r1, [sp, #4]
   b4e2e:	f002 f9b4 	bl	b719a <strlen>
   b4e32:	6823      	ldr	r3, [r4, #0]
   b4e34:	9901      	ldr	r1, [sp, #4]
   b4e36:	68db      	ldr	r3, [r3, #12]
   b4e38:	4602      	mov	r2, r0
   b4e3a:	4620      	mov	r0, r4
}
   b4e3c:	b002      	add	sp, #8
   b4e3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   b4e42:	4718      	bx	r3

000b4e44 <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   b4e44:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   b4e46:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   b4e48:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   b4e4c:	68db      	ldr	r3, [r3, #12]
   b4e4e:	2201      	movs	r2, #1
   b4e50:	f10d 0107 	add.w	r1, sp, #7
   b4e54:	4798      	blx	r3
}
   b4e56:	b003      	add	sp, #12
   b4e58:	f85d fb04 	ldr.w	pc, [sp], #4

000b4e5c <_ZN5spark16StreamLogHandler6printfEPKcz>:
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   b4e5c:	b40e      	push	{r1, r2, r3}
   b4e5e:	b503      	push	{r0, r1, lr}
   b4e60:	ab03      	add	r3, sp, #12
    stream_->vprintf(false, fmt, args);
   b4e62:	2100      	movs	r1, #0
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   b4e64:	f853 2b04 	ldr.w	r2, [r3], #4
    stream_->vprintf(false, fmt, args);
   b4e68:	6a00      	ldr	r0, [r0, #32]
    va_start(args, fmt);
   b4e6a:	9301      	str	r3, [sp, #4]
    stream_->vprintf(false, fmt, args);
   b4e6c:	f001 f8bf 	bl	b5fee <_ZN5Print7vprintfEbPKcSt9__va_list>
}
   b4e70:	b002      	add	sp, #8
   b4e72:	f85d eb04 	ldr.w	lr, [sp], #4
   b4e76:	b003      	add	sp, #12
   b4e78:	4770      	bx	lr

000b4e7a <_ZN5spark6detail9LogFilter4NodeC1EOS2_>:
struct spark::detail::LogFilter::Node {
   b4e7a:	680a      	ldr	r2, [r1, #0]
   b4e7c:	6002      	str	r2, [r0, #0]
   b4e7e:	684a      	ldr	r2, [r1, #4]
   b4e80:	6042      	str	r2, [r0, #4]
        capacity_(0) {
   b4e82:	2200      	movs	r2, #0
   b4e84:	e9c0 2202 	strd	r2, r2, [r0, #8]
   b4e88:	b510      	push	{r4, lr}
   b4e8a:	6102      	str	r2, [r0, #16]
      __a = _GLIBCXX_MOVE(__b);
   b4e8c:	688c      	ldr	r4, [r1, #8]
   b4e8e:	6084      	str	r4, [r0, #8]
   b4e90:	68cc      	ldr	r4, [r1, #12]
   b4e92:	60c4      	str	r4, [r0, #12]
   b4e94:	690c      	ldr	r4, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   b4e96:	608a      	str	r2, [r1, #8]
   b4e98:	60ca      	str	r2, [r1, #12]
      __a = _GLIBCXX_MOVE(__b);
   b4e9a:	6104      	str	r4, [r0, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   b4e9c:	610a      	str	r2, [r1, #16]
   b4e9e:	bd10      	pop	{r4, pc}

000b4ea0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   b4ea0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   b4ea4:	e9d0 8400 	ldrd	r8, r4, [r0]
   b4ea8:	f04f 0a14 	mov.w	sl, #20
   b4eac:	9300      	str	r3, [sp, #0]
   b4eae:	fb0a f404 	mul.w	r4, sl, r4
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   b4eb2:	4b18      	ldr	r3, [pc, #96]	; (b4f14 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   b4eb4:	10a4      	asrs	r4, r4, #2
   b4eb6:	4617      	mov	r7, r2
   b4eb8:	435c      	muls	r4, r3
   b4eba:	4645      	mov	r5, r8
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   b4ebc:	2c00      	cmp	r4, #0
   b4ebe:	dd21      	ble.n	b4f04 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
	{
	  _DistanceType __half = __len >> 1;
   b4ec0:	1066      	asrs	r6, r4, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   b4ec2:	fb0a f006 	mul.w	r0, sl, r6
   b4ec6:	eb05 0900 	add.w	r9, r5, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   b4eca:	463a      	mov	r2, r7
   b4ecc:	f8b9 b004 	ldrh.w	fp, [r9, #4]
   b4ed0:	5828      	ldr	r0, [r5, r0]
   b4ed2:	9101      	str	r1, [sp, #4]
   b4ed4:	455f      	cmp	r7, fp
   b4ed6:	bf28      	it	cs
   b4ed8:	465a      	movcs	r2, fp
   b4eda:	f002 f966 	bl	b71aa <strncmp>
                if (cmp == 0) {
   b4ede:	2800      	cmp	r0, #0
   b4ee0:	9901      	ldr	r1, [sp, #4]
   b4ee2:	f04f 0301 	mov.w	r3, #1
   b4ee6:	d10b      	bne.n	b4f00 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                    if (node.size == value.second) { // Lengths are equal
   b4ee8:	455f      	cmp	r7, fp
   b4eea:	d103      	bne.n	b4ef4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x54>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   b4eec:	9a00      	ldr	r2, [sp, #0]
   b4eee:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   b4ef0:	4634      	mov	r4, r6
   b4ef2:	e7e3      	b.n	b4ebc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   b4ef4:	d9fc      	bls.n	b4ef0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   b4ef6:	1ba6      	subs	r6, r4, r6
	      ++__first;
   b4ef8:	f109 0514 	add.w	r5, r9, #20
	      __len = __len - __half - 1;
   b4efc:	3e01      	subs	r6, #1
   b4efe:	e7f7      	b.n	b4ef0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	  if (__comp(__middle, __val))
   b4f00:	dbf9      	blt.n	b4ef6 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
   b4f02:	e7f5      	b.n	b4ef0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
      return __last - __first;
   b4f04:	eba5 0508 	sub.w	r5, r5, r8
}
   b4f08:	4802      	ldr	r0, [pc, #8]	; (b4f14 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   b4f0a:	10ad      	asrs	r5, r5, #2
   b4f0c:	4368      	muls	r0, r5
   b4f0e:	b003      	add	sp, #12
   b4f10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b4f14:	cccccccd 	.word	0xcccccccd

000b4f18 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   b4f18:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   b4f1a:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   b4f1c:	7e05      	ldrb	r5, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   b4f1e:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   b4f20:	b303      	cbz	r3, b4f64 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
   b4f22:	b1f9      	cbz	r1, b4f64 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
   b4f24:	2600      	movs	r6, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   b4f26:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   b4f2a:	9603      	str	r6, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   b4f2c:	a903      	add	r1, sp, #12
   b4f2e:	a801      	add	r0, sp, #4
   b4f30:	f7ff ff19 	bl	b4d66 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   b4f34:	4601      	mov	r1, r0
   b4f36:	b1a8      	cbz	r0, b4f64 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
   b4f38:	f10d 030b 	add.w	r3, sp, #11
   b4f3c:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   b4f3e:	f88d 600b 	strb.w	r6, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   b4f42:	4620      	mov	r0, r4
   b4f44:	f7ff ffac 	bl	b4ea0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   b4f48:	f89d 300b 	ldrb.w	r3, [sp, #11]
   b4f4c:	b153      	cbz	r3, b4f64 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
   b4f4e:	6823      	ldr	r3, [r4, #0]
   b4f50:	2414      	movs	r4, #20
   b4f52:	fb04 3400 	mla	r4, r4, r0, r3
            pNodes = &node.nodes;
   b4f56:	3408      	adds	r4, #8
            if (node.level >= 0) {
   b4f58:	f934 3c02 	ldrsh.w	r3, [r4, #-2]
   b4f5c:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   b4f5e:	bfa8      	it	ge
   b4f60:	b2dd      	uxtbge	r5, r3
        while ((name = nextSubcategoryName(category, size))) {
   b4f62:	e7e3      	b.n	b4f2c <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   b4f64:	4628      	mov	r0, r5
   b4f66:	b004      	add	sp, #16
   b4f68:	bd70      	pop	{r4, r5, r6, pc}
	...

000b4f6c <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   b4f6c:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   b4f6e:	4c09      	ldr	r4, [pc, #36]	; (b4f94 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   b4f70:	7823      	ldrb	r3, [r4, #0]
   b4f72:	f3bf 8f5b 	dmb	ish
   b4f76:	07db      	lsls	r3, r3, #31
   b4f78:	d409      	bmi.n	b4f8e <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   b4f7a:	4620      	mov	r0, r4
   b4f7c:	f7ff f89e 	bl	b40bc <__cxa_guard_acquire>
   b4f80:	b128      	cbz	r0, b4f8e <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   b4f82:	4620      	mov	r0, r4
   b4f84:	f7ff f89f 	bl	b40c6 <__cxa_guard_release>
   b4f88:	4803      	ldr	r0, [pc, #12]	; (b4f98 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   b4f8a:	f002 f86d 	bl	b7068 <atexit>
}
   b4f8e:	4803      	ldr	r0, [pc, #12]	; (b4f9c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   b4f90:	bd10      	pop	{r4, pc}
   b4f92:	bf00      	nop
   b4f94:	2003e6b8 	.word	0x2003e6b8
   b4f98:	000b4d5f 	.word	0x000b4d5f
   b4f9c:	2003e46c 	.word	0x2003e46c

000b4fa0 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   b4fa0:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   b4fa2:	4c09      	ldr	r4, [pc, #36]	; (b4fc8 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   b4fa4:	7823      	ldrb	r3, [r4, #0]
   b4fa6:	f3bf 8f5b 	dmb	ish
   b4faa:	07db      	lsls	r3, r3, #31
   b4fac:	d409      	bmi.n	b4fc2 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   b4fae:	4620      	mov	r0, r4
   b4fb0:	f7ff f884 	bl	b40bc <__cxa_guard_acquire>
   b4fb4:	b128      	cbz	r0, b4fc2 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   b4fb6:	4620      	mov	r0, r4
   b4fb8:	f7ff f885 	bl	b40c6 <__cxa_guard_release>
   b4fbc:	4803      	ldr	r0, [pc, #12]	; (b4fcc <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   b4fbe:	f002 f853 	bl	b7068 <atexit>
    return &factory;
}
   b4fc2:	4803      	ldr	r0, [pc, #12]	; (b4fd0 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   b4fc4:	bd10      	pop	{r4, pc}
   b4fc6:	bf00      	nop
   b4fc8:	2003e6bc 	.word	0x2003e6bc
   b4fcc:	000b4dc7 	.word	0x000b4dc7
   b4fd0:	2003e470 	.word	0x2003e470

000b4fd4 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   b4fd4:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   b4fd6:	2500      	movs	r5, #0
   b4fd8:	4604      	mov	r4, r0
   b4fda:	e9c0 5500 	strd	r5, r5, [r0]
   b4fde:	e9c0 5504 	strd	r5, r5, [r0, #16]
   b4fe2:	6085      	str	r5, [r0, #8]
   b4fe4:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   b4fe6:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   b4fea:	f7ff fa09 	bl	b4400 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   b4fee:	f7ff ffbd 	bl	b4f6c <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   b4ff2:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   b4ff4:	f7ff ffd4 	bl	b4fa0 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   b4ff8:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   b4ffa:	6220      	str	r0, [r4, #32]
}
   b4ffc:	4620      	mov	r0, r4
   b4ffe:	bd38      	pop	{r3, r4, r5, pc}

000b5000 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   b5000:	b510      	push	{r4, lr}
    static LogManager mgr;
   b5002:	4c0a      	ldr	r4, [pc, #40]	; (b502c <_ZN5spark10LogManager8instanceEv+0x2c>)
   b5004:	7823      	ldrb	r3, [r4, #0]
   b5006:	f3bf 8f5b 	dmb	ish
   b500a:	07db      	lsls	r3, r3, #31
   b500c:	d40c      	bmi.n	b5028 <_ZN5spark10LogManager8instanceEv+0x28>
   b500e:	4620      	mov	r0, r4
   b5010:	f7ff f854 	bl	b40bc <__cxa_guard_acquire>
   b5014:	b140      	cbz	r0, b5028 <_ZN5spark10LogManager8instanceEv+0x28>
   b5016:	4806      	ldr	r0, [pc, #24]	; (b5030 <_ZN5spark10LogManager8instanceEv+0x30>)
   b5018:	f7ff ffdc 	bl	b4fd4 <_ZN5spark10LogManagerC1Ev>
   b501c:	4620      	mov	r0, r4
   b501e:	f7ff f852 	bl	b40c6 <__cxa_guard_release>
   b5022:	4804      	ldr	r0, [pc, #16]	; (b5034 <_ZN5spark10LogManager8instanceEv+0x34>)
   b5024:	f002 f820 	bl	b7068 <atexit>
    return &mgr;
}
   b5028:	4801      	ldr	r0, [pc, #4]	; (b5030 <_ZN5spark10LogManager8instanceEv+0x30>)
   b502a:	bd10      	pop	{r4, pc}
   b502c:	2003e6b4 	.word	0x2003e6b4
   b5030:	2003e6c4 	.word	0x2003e6c4
   b5034:	000b5555 	.word	0x000b5555

000b5038 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   b5038:	4a02      	ldr	r2, [pc, #8]	; (b5044 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   b503a:	4903      	ldr	r1, [pc, #12]	; (b5048 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   b503c:	4803      	ldr	r0, [pc, #12]	; (b504c <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   b503e:	2300      	movs	r3, #0
   b5040:	f7ff bad6 	b.w	b45f0 <log_set_callbacks>
   b5044:	000b5339 	.word	0x000b5339
   b5048:	000b52c5 	.word	0x000b52c5
   b504c:	000b5245 	.word	0x000b5245

000b5050 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   b5050:	2300      	movs	r3, #0
   b5052:	461a      	mov	r2, r3
   b5054:	4619      	mov	r1, r3
   b5056:	4618      	mov	r0, r3
   b5058:	f7ff baca 	b.w	b45f0 <log_set_callbacks>

000b505c <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b505c:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   b505e:	688d      	ldr	r5, [r1, #8]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b5060:	4604      	mov	r4, r0
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b5062:	4668      	mov	r0, sp
   b5064:	f7ff fec8 	bl	b4df8 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
        JSONObjectIterator(value.t_, value.d_) {
   b5068:	466a      	mov	r2, sp
   b506a:	4629      	mov	r1, r5
   b506c:	4620      	mov	r0, r4
   b506e:	f7ff fd7b 	bl	b4b68 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   b5072:	a801      	add	r0, sp, #4
   b5074:	f7ff fbc9 	bl	b480a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b5078:	4620      	mov	r0, r4
   b507a:	b003      	add	sp, #12
   b507c:	bd30      	pop	{r4, r5, pc}

000b507e <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
   b507e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   b5080:	68cd      	ldr	r5, [r1, #12]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   b5082:	4604      	mov	r4, r0
   b5084:	4668      	mov	r0, sp
   b5086:	f7ff feb7 	bl	b4df8 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONString(k_, d_);
   b508a:	466a      	mov	r2, sp
   b508c:	4629      	mov	r1, r5
   b508e:	4620      	mov	r0, r4
   b5090:	f7ff fd46 	bl	b4b20 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b5094:	a801      	add	r0, sp, #4
   b5096:	f7ff fbb8 	bl	b480a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b509a:	4620      	mov	r0, r4
   b509c:	b003      	add	sp, #12
   b509e:	bd30      	pop	{r4, r5, pc}

000b50a0 <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b50a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   b50a2:	690d      	ldr	r5, [r1, #16]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b50a4:	4604      	mov	r4, r0
   b50a6:	4668      	mov	r0, sp
   b50a8:	f7ff fea6 	bl	b4df8 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONValue(v_, d_);
   b50ac:	466a      	mov	r2, sp
   b50ae:	4629      	mov	r1, r5
   b50b0:	4620      	mov	r0, r4
   b50b2:	f7ff fcde 	bl	b4a72 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b50b6:	a801      	add	r0, sp, #4
   b50b8:	f7ff fba7 	bl	b480a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b50bc:	4620      	mov	r0, r4
   b50be:	b003      	add	sp, #12
   b50c0:	bd30      	pop	{r4, r5, pc}
	...

000b50c4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   b50c4:	b570      	push	{r4, r5, r6, lr}
   b50c6:	b08a      	sub	sp, #40	; 0x28
   b50c8:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   b50ca:	4601      	mov	r1, r0
   b50cc:	a804      	add	r0, sp, #16
   b50ce:	f7ff ffc5 	bl	b505c <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   b50d2:	4e14      	ldr	r6, [pc, #80]	; (b5124 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   b50d4:	a804      	add	r0, sp, #16
   b50d6:	f7ff fd5f 	bl	b4b98 <_ZN5spark18JSONObjectIterator4nextEv>
   b50da:	b1e8      	cbz	r0, b5118 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   b50dc:	a904      	add	r1, sp, #16
   b50de:	4668      	mov	r0, sp
   b50e0:	f7ff ffcd 	bl	b507e <_ZNK5spark18JSONObjectIterator4nameEv>
   b50e4:	9802      	ldr	r0, [sp, #8]
   b50e6:	4631      	mov	r1, r6
   b50e8:	f7ff fe66 	bl	b4db8 <_ZNK5spark10JSONStringeqEPKc.isra.0>
   b50ec:	4604      	mov	r4, r0
   b50ee:	b110      	cbz	r0, b50f6 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   b50f0:	1e2c      	subs	r4, r5, #0
   b50f2:	bf18      	it	ne
   b50f4:	2401      	movne	r4, #1
   b50f6:	a801      	add	r0, sp, #4
   b50f8:	f7ff fb87 	bl	b480a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b50fc:	2c00      	cmp	r4, #0
   b50fe:	d0e9      	beq.n	b50d4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   b5100:	a904      	add	r1, sp, #16
   b5102:	4668      	mov	r0, sp
   b5104:	f7ff ffcc 	bl	b50a0 <_ZNK5spark18JSONObjectIterator5valueEv>
   b5108:	4668      	mov	r0, sp
   b510a:	f7ff fce8 	bl	b4ade <_ZNK5spark9JSONValue5toIntEv>
   b510e:	6028      	str	r0, [r5, #0]
   b5110:	a801      	add	r0, sp, #4
   b5112:	f7ff fb7a 	bl	b480a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5116:	e7dd      	b.n	b50d4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   b5118:	a805      	add	r0, sp, #20
   b511a:	f7ff fb76 	bl	b480a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b511e:	b00a      	add	sp, #40	; 0x28
   b5120:	bd70      	pop	{r4, r5, r6, pc}
   b5122:	bf00      	nop
   b5124:	000b9284 	.word	0x000b9284

000b5128 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   b5128:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b512a:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   b512c:	4620      	mov	r0, r4
   b512e:	4913      	ldr	r1, [pc, #76]	; (b517c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   b5130:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   b5132:	f002 f820 	bl	b7176 <strcmp>
   b5136:	b950      	cbnz	r0, b514e <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x26>
        Serial.begin();
   b5138:	f001 f980 	bl	b643c <_Z16_fetch_usbserialv>
   b513c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b5140:	f001 f96c 	bl	b641c <_ZN9USBSerial5beginEl>
}
   b5144:	b003      	add	sp, #12
   b5146:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &Serial;
   b514a:	f001 b977 	b.w	b643c <_Z16_fetch_usbserialv>
    if (strcmp(type, "Serial1") == 0) {
   b514e:	490c      	ldr	r1, [pc, #48]	; (b5180 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
   b5150:	4620      	mov	r0, r4
   b5152:	f002 f810 	bl	b7176 <strcmp>
   b5156:	b978      	cbnz	r0, b5178 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>
        int baud = 9600;
   b5158:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   b515c:	a901      	add	r1, sp, #4
   b515e:	4628      	mov	r0, r5
        int baud = 9600;
   b5160:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   b5162:	f7ff ffaf 	bl	b50c4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   b5166:	f001 fa85 	bl	b6674 <_Z22__fetch_global_Serial1v>
   b516a:	9901      	ldr	r1, [sp, #4]
   b516c:	f001 f8fa 	bl	b6364 <_ZN11USARTSerial5beginEm>
        return &Serial1;
   b5170:	f001 fa80 	bl	b6674 <_Z22__fetch_global_Serial1v>
}
   b5174:	b003      	add	sp, #12
   b5176:	bd30      	pop	{r4, r5, pc}
    return nullptr;
   b5178:	2000      	movs	r0, #0
   b517a:	e7fb      	b.n	b5174 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
   b517c:	000b9289 	.word	0x000b9289
   b5180:	000b9290 	.word	0x000b9290

000b5184 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b5184:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b5186:	e9d0 5300 	ldrd	r5, r3, [r0]
   b518a:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b518c:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b518e:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b5192:	42ae      	cmp	r6, r5
   b5194:	d005      	beq.n	b51a2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   b5196:	f105 0008 	add.w	r0, r5, #8
   b519a:	f7ff fff3 	bl	b5184 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b519e:	3514      	adds	r5, #20
   b51a0:	e7f7      	b.n	b5192 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b51a2:	6820      	ldr	r0, [r4, #0]
   b51a4:	f7ff fac8 	bl	b4738 <free>
}
   b51a8:	4620      	mov	r0, r4
   b51aa:	bd70      	pop	{r4, r5, r6, pc}

000b51ac <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   b51ac:	b510      	push	{r4, lr}
   b51ae:	4604      	mov	r4, r0
   b51b0:	300c      	adds	r0, #12
   b51b2:	f7ff ffe7 	bl	b5184 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b51b6:	4620      	mov	r0, r4
   b51b8:	f7ff fb15 	bl	b47e6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   b51bc:	4620      	mov	r0, r4
   b51be:	bd10      	pop	{r4, pc}

000b51c0 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   b51c0:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   b51c2:	4b04      	ldr	r3, [pc, #16]	; (b51d4 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   b51c4:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   b51c6:	f840 3b04 	str.w	r3, [r0], #4
   b51ca:	f7ff ffef 	bl	b51ac <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   b51ce:	4620      	mov	r0, r4
   b51d0:	bd10      	pop	{r4, pc}
   b51d2:	bf00      	nop
   b51d4:	000b9200 	.word	0x000b9200

000b51d8 <_ZN5spark16StreamLogHandlerD0Ev>:
   b51d8:	b510      	push	{r4, lr}
   b51da:	4604      	mov	r4, r0
   b51dc:	f7ff fff0 	bl	b51c0 <_ZN5spark16StreamLogHandlerD1Ev>
   b51e0:	4620      	mov	r0, r4
   b51e2:	2124      	movs	r1, #36	; 0x24
   b51e4:	f7fe ff5b 	bl	b409e <_ZdlPvj>
   b51e8:	4620      	mov	r0, r4
   b51ea:	bd10      	pop	{r4, pc}

000b51ec <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   b51ec:	b510      	push	{r4, lr}
   b51ee:	4b03      	ldr	r3, [pc, #12]	; (b51fc <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   b51f0:	6003      	str	r3, [r0, #0]
   b51f2:	4604      	mov	r4, r0
   b51f4:	f7ff ffe4 	bl	b51c0 <_ZN5spark16StreamLogHandlerD1Ev>
   b51f8:	4620      	mov	r0, r4
   b51fa:	bd10      	pop	{r4, pc}
   b51fc:	000b932c 	.word	0x000b932c

000b5200 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   b5200:	b510      	push	{r4, lr}
   b5202:	4604      	mov	r4, r0
   b5204:	f7ff fff2 	bl	b51ec <_ZN5spark20JSONStreamLogHandlerD1Ev>
   b5208:	4620      	mov	r0, r4
   b520a:	2124      	movs	r1, #36	; 0x24
   b520c:	f7fe ff47 	bl	b409e <_ZdlPvj>
   b5210:	4620      	mov	r0, r4
   b5212:	bd10      	pop	{r4, pc}

000b5214 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
   b5214:	2200      	movs	r2, #0
   b5216:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   b521a:	b510      	push	{r4, lr}
        capacity_(0) {
   b521c:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   b521e:	680c      	ldr	r4, [r1, #0]
   b5220:	6004      	str	r4, [r0, #0]
   b5222:	684c      	ldr	r4, [r1, #4]
   b5224:	6044      	str	r4, [r0, #4]
   b5226:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b5228:	600a      	str	r2, [r1, #0]
   b522a:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b522c:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b522e:	608a      	str	r2, [r1, #8]
}
   b5230:	bd10      	pop	{r4, pc}

000b5232 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   b5232:	b510      	push	{r4, lr}
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b5234:	6803      	ldr	r3, [r0, #0]
   b5236:	4604      	mov	r4, r0
   b5238:	6818      	ldr	r0, [r3, #0]
   b523a:	f7ff f8f9 	bl	b4430 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   b523e:	4620      	mov	r0, r4
   b5240:	bd10      	pop	{r4, pc}
	...

000b5244 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   b5244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5248:	b087      	sub	sp, #28
   b524a:	4680      	mov	r8, r0
   b524c:	9303      	str	r3, [sp, #12]
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   b524e:	4b1c      	ldr	r3, [pc, #112]	; (b52c0 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   b5250:	685b      	ldr	r3, [r3, #4]
   b5252:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b5256:	4689      	mov	r9, r1
   b5258:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   b525a:	b96b      	cbnz	r3, b5278 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   b525c:	f7ff fed0 	bl	b5000 <_ZN5spark10LogManager8instanceEv>
   b5260:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   b5262:	f100 0324 	add.w	r3, r0, #36	; 0x24
      { _M_device.lock(); }
   b5266:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b5268:	9305      	str	r3, [sp, #20]
      { _M_device.lock(); }
   b526a:	f7ff fda3 	bl	b4db4 <_ZN14RecursiveMutex4lockEv.isra.0>
        // prevent re-entry
        if (that->isActive()) {
   b526e:	7b23      	ldrb	r3, [r4, #12]
   b5270:	b12b      	cbz	r3, b527e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   b5272:	a805      	add	r0, sp, #20
   b5274:	f7ff ffdd 	bl	b5232 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   b5278:	b007      	add	sp, #28
   b527a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   b527e:	2301      	movs	r3, #1
   b5280:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   b5282:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   b5286:	fa5f f989 	uxtb.w	r9, r9
   b528a:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b528e:	45aa      	cmp	sl, r5
   b5290:	d012      	beq.n	b52b8 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   b5292:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   b5296:	4631      	mov	r1, r6
   b5298:	1d38      	adds	r0, r7, #4
   b529a:	f7ff fe3d 	bl	b4f18 <_ZNK5spark6detail9LogFilter5levelEPKc>
   b529e:	4581      	cmp	r9, r0
   b52a0:	d3f5      	bcc.n	b528e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   b52a2:	683b      	ldr	r3, [r7, #0]
   b52a4:	9a03      	ldr	r2, [sp, #12]
   b52a6:	9200      	str	r2, [sp, #0]
   b52a8:	f8d3 b008 	ldr.w	fp, [r3, #8]
   b52ac:	464a      	mov	r2, r9
   b52ae:	4633      	mov	r3, r6
   b52b0:	4641      	mov	r1, r8
   b52b2:	4638      	mov	r0, r7
   b52b4:	47d8      	blx	fp
   b52b6:	e7ea      	b.n	b528e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   b52b8:	2300      	movs	r3, #0
   b52ba:	7323      	strb	r3, [r4, #12]
   b52bc:	e7d9      	b.n	b5272 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   b52be:	bf00      	nop
   b52c0:	e000ed00 	.word	0xe000ed00

000b52c4 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   b52c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b52c8:	469b      	mov	fp, r3
   b52ca:	4b1a      	ldr	r3, [pc, #104]	; (b5334 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   b52cc:	685b      	ldr	r3, [r3, #4]
   b52ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b52d2:	4680      	mov	r8, r0
   b52d4:	4689      	mov	r9, r1
   b52d6:	4616      	mov	r6, r2
    if (HAL_IsISR()) {
   b52d8:	b96b      	cbnz	r3, b52f6 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   b52da:	f7ff fe91 	bl	b5000 <_ZN5spark10LogManager8instanceEv>
   b52de:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   b52e0:	f100 0324 	add.w	r3, r0, #36	; 0x24
   b52e4:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b52e6:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b52e8:	f7ff fd64 	bl	b4db4 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (that->isActive()) {
   b52ec:	7b23      	ldrb	r3, [r4, #12]
   b52ee:	b12b      	cbz	r3, b52fc <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   b52f0:	a801      	add	r0, sp, #4
   b52f2:	f7ff ff9e 	bl	b5232 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   b52f6:	b003      	add	sp, #12
   b52f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   b52fc:	2301      	movs	r3, #1
   b52fe:	7323      	strb	r3, [r4, #12]
   b5300:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   b5304:	b2f6      	uxtb	r6, r6
   b5306:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b530a:	4555      	cmp	r5, sl
   b530c:	d00e      	beq.n	b532c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   b530e:	f855 7b04 	ldr.w	r7, [r5], #4
   b5312:	4659      	mov	r1, fp
   b5314:	1d38      	adds	r0, r7, #4
   b5316:	f7ff fdff 	bl	b4f18 <_ZNK5spark6detail9LogFilter5levelEPKc>
   b531a:	4286      	cmp	r6, r0
   b531c:	d3f5      	bcc.n	b530a <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   b531e:	683b      	ldr	r3, [r7, #0]
   b5320:	464a      	mov	r2, r9
   b5322:	68db      	ldr	r3, [r3, #12]
   b5324:	4641      	mov	r1, r8
   b5326:	4638      	mov	r0, r7
   b5328:	4798      	blx	r3
   b532a:	e7ee      	b.n	b530a <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   b532c:	2300      	movs	r3, #0
   b532e:	7323      	strb	r3, [r4, #12]
   b5330:	e7de      	b.n	b52f0 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   b5332:	bf00      	nop
   b5334:	e000ed00 	.word	0xe000ed00

000b5338 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   b5338:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b533c:	4b16      	ldr	r3, [pc, #88]	; (b5398 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   b533e:	685b      	ldr	r3, [r3, #4]
   b5340:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b5344:	4605      	mov	r5, r0
   b5346:	460f      	mov	r7, r1
    if (HAL_IsISR()) {
   b5348:	bb1b      	cbnz	r3, b5392 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   b534a:	f7ff fe59 	bl	b5000 <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   b534e:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   b5352:	4604      	mov	r4, r0
   b5354:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b5356:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b5358:	f7ff fd2c 	bl	b4db4 <_ZN14RecursiveMutex4lockEv.isra.0>
   b535c:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   b5360:	2446      	movs	r4, #70	; 0x46
   b5362:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b5366:	45b0      	cmp	r8, r6
   b5368:	d109      	bne.n	b537e <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   b536a:	a801      	add	r0, sp, #4
   b536c:	f7ff ff61 	bl	b5232 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   b5370:	42a5      	cmp	r5, r4
   b5372:	bfb4      	ite	lt
   b5374:	2000      	movlt	r0, #0
   b5376:	2001      	movge	r0, #1
}
   b5378:	b002      	add	sp, #8
   b537a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   b537e:	f856 0b04 	ldr.w	r0, [r6], #4
   b5382:	4639      	mov	r1, r7
   b5384:	3004      	adds	r0, #4
   b5386:	f7ff fdc7 	bl	b4f18 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   b538a:	4284      	cmp	r4, r0
   b538c:	bfa8      	it	ge
   b538e:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   b5390:	e7e9      	b.n	b5366 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   b5392:	2000      	movs	r0, #0
   b5394:	e7f0      	b.n	b5378 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   b5396:	bf00      	nop
   b5398:	e000ed00 	.word	0xe000ed00

000b539c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b539c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b539e:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   b53a2:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b53a4:	4604      	mov	r4, r0
   b53a6:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b53a8:	db0d      	blt.n	b53c6 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x2a>
   b53aa:	1c6f      	adds	r7, r5, #1
        if (n > 0) {
   b53ac:	2f00      	cmp	r7, #0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b53ae:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b53b0:	dd04      	ble.n	b53bc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x20>
    return ::realloc(ptr, size);
   b53b2:	00b9      	lsls	r1, r7, #2
   b53b4:	f7ff f9c8 	bl	b4748 <realloc>
            if (!d) {
   b53b8:	b918      	cbnz	r0, b53c2 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x26>
}
   b53ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   b53bc:	f7ff f9bc 	bl	b4738 <free>
        T* d = nullptr;
   b53c0:	2000      	movs	r0, #0
        data_ = d;
   b53c2:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b53c4:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b53c6:	6827      	ldr	r7, [r4, #0]
    move(p + 1, p, data_ + size_);
   b53c8:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b53ca:	eb07 0185 	add.w	r1, r7, r5, lsl #2
    move(p + 1, p, data_ + size_);
   b53ce:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   b53d0:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
   b53d4:	1d08      	adds	r0, r1, #4
   b53d6:	f001 fe67 	bl	b70a8 <memmove>
    new(p) T(std::move(value));
   b53da:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
    ++size_;
   b53de:	6863      	ldr	r3, [r4, #4]
   b53e0:	3301      	adds	r3, #1
   b53e2:	6063      	str	r3, [r4, #4]
    return true;
   b53e4:	2001      	movs	r0, #1
   b53e6:	e7e8      	b.n	b53ba <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x1e>

000b53e8 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   b53e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   b53ea:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   b53ee:	4604      	mov	r4, r0
   b53f0:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b53f2:	9301      	str	r3, [sp, #4]
   b53f4:	460d      	mov	r5, r1
      { _M_device.lock(); }
   b53f6:	f7ff fcdd 	bl	b4db4 <_ZN14RecursiveMutex4lockEv.isra.0>
    return find(data_, data_ + size_, value);
   b53fa:	e9d4 3200 	ldrd	r3, r2, [r4]
   b53fe:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (; p != end; ++p) {
   b5402:	4293      	cmp	r3, r2
   b5404:	4619      	mov	r1, r3
   b5406:	d00b      	beq.n	b5420 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   b5408:	6809      	ldr	r1, [r1, #0]
   b540a:	42a9      	cmp	r1, r5
   b540c:	f103 0304 	add.w	r3, r3, #4
   b5410:	d1f7      	bne.n	b5402 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
            return false;
   b5412:	a801      	add	r0, sp, #4
   b5414:	f7ff ff0d 	bl	b5232 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   b5418:	2500      	movs	r5, #0
}
   b541a:	4628      	mov	r0, r5
   b541c:	b003      	add	sp, #12
   b541e:	bd30      	pop	{r4, r5, pc}
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   b5420:	4629      	mov	r1, r5
   b5422:	4620      	mov	r0, r4
   b5424:	f7ff ffba 	bl	b539c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>
   b5428:	4605      	mov	r5, r0
   b542a:	2800      	cmp	r0, #0
   b542c:	d0f1      	beq.n	b5412 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   b542e:	6863      	ldr	r3, [r4, #4]
   b5430:	2b01      	cmp	r3, #1
   b5432:	d101      	bne.n	b5438 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   b5434:	f7ff fe00 	bl	b5038 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b5438:	a801      	add	r0, sp, #4
   b543a:	f7ff fefa 	bl	b5232 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   b543e:	e7ec      	b.n	b541a <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000b5440 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b5440:	b570      	push	{r4, r5, r6, lr}
   b5442:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   b5444:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b5448:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   b544a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   b544e:	4282      	cmp	r2, r0
   b5450:	d00f      	beq.n	b5472 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x32>
    move(p, p + 1, data_ + size_);
   b5452:	4601      	mov	r1, r0
            if (*p == value) {
   b5454:	681d      	ldr	r5, [r3, #0]
   b5456:	f851 6b04 	ldr.w	r6, [r1], #4
   b545a:	42ae      	cmp	r6, r5
   b545c:	d107      	bne.n	b546e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
        ::memmove(dest, p, (end - p) * sizeof(T));
   b545e:	1a52      	subs	r2, r2, r1
   b5460:	f001 fe22 	bl	b70a8 <memmove>
    --size_;
   b5464:	6863      	ldr	r3, [r4, #4]
   b5466:	3b01      	subs	r3, #1
   b5468:	6063      	str	r3, [r4, #4]
    return true;
   b546a:	2001      	movs	r0, #1
}
   b546c:	bd70      	pop	{r4, r5, r6, pc}
    move(p, p + 1, data_ + size_);
   b546e:	4608      	mov	r0, r1
   b5470:	e7ed      	b.n	b544e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   b5472:	2000      	movs	r0, #0
   b5474:	e7fa      	b.n	b546c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>

000b5476 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   b5476:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   b5478:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   b547c:	4604      	mov	r4, r0
   b547e:	6a40      	ldr	r0, [r0, #36]	; 0x24
   b5480:	9101      	str	r1, [sp, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b5482:	9303      	str	r3, [sp, #12]
      { _M_device.lock(); }
   b5484:	f7ff fc96 	bl	b4db4 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   b5488:	a901      	add	r1, sp, #4
   b548a:	4620      	mov	r0, r4
   b548c:	f7ff ffd8 	bl	b5440 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   b5490:	b118      	cbz	r0, b549a <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   b5492:	6863      	ldr	r3, [r4, #4]
   b5494:	b90b      	cbnz	r3, b549a <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   b5496:	f7ff fddb 	bl	b5050 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b549a:	a803      	add	r0, sp, #12
   b549c:	f7ff fec9 	bl	b5232 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   b54a0:	b004      	add	sp, #16
   b54a2:	bd10      	pop	{r4, pc}

000b54a4 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   b54a4:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   b54a6:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   b54aa:	2318      	movs	r3, #24
   b54ac:	4604      	mov	r4, r0
   b54ae:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   b54b2:	42ae      	cmp	r6, r5
   b54b4:	d015      	beq.n	b54e2 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   b54b6:	f105 0110 	add.w	r1, r5, #16
   b54ba:	4620      	mov	r0, r4
   b54bc:	f7ff ffc0 	bl	b5440 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   b54c0:	6863      	ldr	r3, [r4, #4]
   b54c2:	b90b      	cbnz	r3, b54c8 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   b54c4:	f7ff fdc4 	bl	b5050 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   b54c8:	69e0      	ldr	r0, [r4, #28]
   b54ca:	6929      	ldr	r1, [r5, #16]
   b54cc:	6803      	ldr	r3, [r0, #0]
   b54ce:	68db      	ldr	r3, [r3, #12]
   b54d0:	4798      	blx	r3
        if (h.stream) {
   b54d2:	6969      	ldr	r1, [r5, #20]
   b54d4:	b119      	cbz	r1, b54de <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   b54d6:	6a20      	ldr	r0, [r4, #32]
   b54d8:	6803      	ldr	r3, [r0, #0]
   b54da:	68db      	ldr	r3, [r3, #12]
   b54dc:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   b54de:	3518      	adds	r5, #24
   b54e0:	e7e7      	b.n	b54b2 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   b54e2:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   b54e6:	2618      	movs	r6, #24
   b54e8:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b54ec:	42ae      	cmp	r6, r5
   b54ee:	d004      	beq.n	b54fa <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   b54f0:	4628      	mov	r0, r5
   b54f2:	f000 fde1 	bl	b60b8 <_ZN6StringD1Ev>
   b54f6:	3518      	adds	r5, #24
   b54f8:	e7f8      	b.n	b54ec <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   b54fa:	2300      	movs	r3, #0
   b54fc:	6163      	str	r3, [r4, #20]
}
   b54fe:	bd70      	pop	{r4, r5, r6, pc}

000b5500 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   b5500:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b5502:	4604      	mov	r4, r0
    resetSystemCallbacks();
   b5504:	f7ff fda4 	bl	b5050 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b5508:	f104 0324 	add.w	r3, r4, #36	; 0x24
   b550c:	6a60      	ldr	r0, [r4, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b550e:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b5510:	f7ff fc50 	bl	b4db4 <_ZN14RecursiveMutex4lockEv.isra.0>
         destroyFactoryHandlers();
   b5514:	4620      	mov	r0, r4
   b5516:	f7ff ffc5 	bl	b54a4 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   b551a:	a801      	add	r0, sp, #4
   b551c:	f7ff fe89 	bl	b5232 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   b5520:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b5522:	b108      	cbz	r0, b5528 <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   b5524:	f7fe ff74 	bl	b4410 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   b5528:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   b552c:	2618      	movs	r6, #24
   b552e:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b5532:	42ae      	cmp	r6, r5
   b5534:	d004      	beq.n	b5540 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   b5536:	4628      	mov	r0, r5
   b5538:	f000 fdbe 	bl	b60b8 <_ZN6StringD1Ev>
   b553c:	3518      	adds	r5, #24
   b553e:	e7f8      	b.n	b5532 <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   b5540:	6920      	ldr	r0, [r4, #16]
   b5542:	f7ff f8f9 	bl	b4738 <free>
   b5546:	6820      	ldr	r0, [r4, #0]
   b5548:	f7ff f8f6 	bl	b4738 <free>
}
   b554c:	4620      	mov	r0, r4
   b554e:	b002      	add	sp, #8
   b5550:	bd70      	pop	{r4, r5, r6, pc}
	...

000b5554 <__tcf_2>:
    static LogManager mgr;
   b5554:	4801      	ldr	r0, [pc, #4]	; (b555c <__tcf_2+0x8>)
   b5556:	f7ff bfd3 	b.w	b5500 <_ZN5spark10LogManagerD1Ev>
   b555a:	bf00      	nop
   b555c:	2003e6c4 	.word	0x2003e6c4

000b5560 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   b5560:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b5562:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5564:	4604      	mov	r4, r0
   b5566:	460d      	mov	r5, r1
   b5568:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b556a:	d915      	bls.n	b5598 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x38>
   b556c:	4290      	cmp	r0, r2
   b556e:	d214      	bcs.n	b559a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
            --end;
   b5570:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b5574:	1a75      	subs	r5, r6, r1
   b5576:	f1a1 0714 	sub.w	r7, r1, #20
   b557a:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b557c:	42b7      	cmp	r7, r6
   b557e:	d01a      	beq.n	b55b6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*end));
   b5580:	b11c      	cbz	r4, b558a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x2a>
   b5582:	4631      	mov	r1, r6
   b5584:	4620      	mov	r0, r4
   b5586:	f7ff fc78 	bl	b4e7a <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
struct spark::detail::LogFilter::Node {
   b558a:	f106 0008 	add.w	r0, r6, #8
   b558e:	f7ff fdf9 	bl	b5184 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   b5592:	3e14      	subs	r6, #20
   b5594:	3c14      	subs	r4, #20
   b5596:	e7f1      	b.n	b557c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1c>
        } else if (dest != p) {
   b5598:	d00d      	beq.n	b55b6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
            for (; p != end; ++p, ++dest) {
   b559a:	42b5      	cmp	r5, r6
   b559c:	d00b      	beq.n	b55b6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*p));
   b559e:	b11c      	cbz	r4, b55a8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x48>
   b55a0:	4629      	mov	r1, r5
   b55a2:	4620      	mov	r0, r4
   b55a4:	f7ff fc69 	bl	b4e7a <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
   b55a8:	f105 0008 	add.w	r0, r5, #8
   b55ac:	f7ff fdea 	bl	b5184 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   b55b0:	3514      	adds	r5, #20
   b55b2:	3414      	adds	r4, #20
   b55b4:	e7f1      	b.n	b559a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
    }
   b55b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b55b8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b55b8:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b55ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b55bc:	4604      	mov	r4, r0
   b55be:	460d      	mov	r5, r1
   b55c0:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b55c2:	d914      	bls.n	b55ee <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   b55c4:	4290      	cmp	r0, r2
   b55c6:	d213      	bcs.n	b55f0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   b55c8:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   b55cc:	1a75      	subs	r5, r6, r1
   b55ce:	f1a1 0710 	sub.w	r7, r1, #16
   b55d2:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b55d4:	42b7      	cmp	r7, r6
   b55d6:	d018      	beq.n	b560a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   b55d8:	b11c      	cbz	r4, b55e2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   b55da:	4631      	mov	r1, r6
   b55dc:	4620      	mov	r0, r4
   b55de:	f000 fde7 	bl	b61b0 <_ZN6StringC1EOS_>
                end->~T();
   b55e2:	4630      	mov	r0, r6
   b55e4:	f000 fd68 	bl	b60b8 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b55e8:	3e10      	subs	r6, #16
   b55ea:	3c10      	subs	r4, #16
   b55ec:	e7f2      	b.n	b55d4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b55ee:	d00c      	beq.n	b560a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   b55f0:	42b5      	cmp	r5, r6
   b55f2:	d00a      	beq.n	b560a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   b55f4:	b11c      	cbz	r4, b55fe <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   b55f6:	4629      	mov	r1, r5
   b55f8:	4620      	mov	r0, r4
   b55fa:	f000 fdd9 	bl	b61b0 <_ZN6StringC1EOS_>
                p->~T();
   b55fe:	4628      	mov	r0, r5
   b5600:	f000 fd5a 	bl	b60b8 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b5604:	3510      	adds	r5, #16
   b5606:	3410      	adds	r4, #16
   b5608:	e7f2      	b.n	b55f0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   b560a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b560c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   b560c:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b560e:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b5610:	4605      	mov	r5, r0
        if (n > 0) {
   b5612:	dd11      	ble.n	b5638 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   b5614:	0130      	lsls	r0, r6, #4
   b5616:	f7ff f887 	bl	b4728 <malloc>
            if (!d) {
   b561a:	4604      	mov	r4, r0
   b561c:	b158      	cbz	r0, b5636 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b561e:	e9d5 1200 	ldrd	r1, r2, [r5]
   b5622:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   b5626:	f7ff ffc7 	bl	b55b8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b562a:	6828      	ldr	r0, [r5, #0]
   b562c:	f7ff f884 	bl	b4738 <free>
        data_ = d;
   b5630:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b5632:	60ae      	str	r6, [r5, #8]
        return true;
   b5634:	2001      	movs	r0, #1
    }
   b5636:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b5638:	2400      	movs	r4, #0
   b563a:	e7f6      	b.n	b562a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000b563c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   b563c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5640:	4690      	mov	r8, r2
   b5642:	b095      	sub	sp, #84	; 0x54
        capacity_(0) {
   b5644:	2300      	movs	r3, #0
   b5646:	9103      	str	r1, [sp, #12]
    return size_;
   b5648:	f8d8 1004 	ldr.w	r1, [r8, #4]
        capacity_(0) {
   b564c:	930a      	str	r3, [sp, #40]	; 0x28
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   b564e:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   b5650:	4299      	cmp	r1, r3
        capacity_(0) {
   b5652:	e9c0 3300 	strd	r3, r3, [r0]
   b5656:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b565a:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b565e:	e9cd 3308 	strd	r3, r3, [sp, #32]
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   b5662:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   b5664:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   b5666:	dc23      	bgt.n	b56b0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   b5668:	e9d8 5700 	ldrd	r5, r7, [r8]
   b566c:	2314      	movs	r3, #20
   b566e:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   b5672:	42af      	cmp	r7, r5
   b5674:	d03b      	beq.n	b56ee <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   b5676:	4629      	mov	r1, r5
   b5678:	a80b      	add	r0, sp, #44	; 0x2c
   b567a:	f000 fd99 	bl	b61b0 <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   b567e:	a90b      	add	r1, sp, #44	; 0x2c
   b5680:	a80f      	add	r0, sp, #60	; 0x3c
   b5682:	9e09      	ldr	r6, [sp, #36]	; 0x24
   b5684:	f000 fd94 	bl	b61b0 <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b5688:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
   b568c:	4299      	cmp	r1, r3
   b568e:	da1b      	bge.n	b56c8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   b5690:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
   b5692:	9a09      	ldr	r2, [sp, #36]	; 0x24
    T* const p = data_ + i;
   b5694:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   b5698:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   b569c:	4631      	mov	r1, r6
   b569e:	f106 0010 	add.w	r0, r6, #16
   b56a2:	f7ff ff89 	bl	b55b8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   b56a6:	b9ee      	cbnz	r6, b56e4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   b56a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b56aa:	3301      	adds	r3, #1
   b56ac:	9309      	str	r3, [sp, #36]	; 0x24
    return true;
   b56ae:	e011      	b.n	b56d4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   b56b0:	a808      	add	r0, sp, #32
   b56b2:	f7ff ffab 	bl	b560c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   b56b6:	2800      	cmp	r0, #0
   b56b8:	d1d6      	bne.n	b5668 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
        return;
   b56ba:	a808      	add	r0, sp, #32
   b56bc:	f7ff f893 	bl	b47e6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   b56c0:	4620      	mov	r0, r4
   b56c2:	b015      	add	sp, #84	; 0x54
   b56c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b56c8:	3101      	adds	r1, #1
   b56ca:	a808      	add	r0, sp, #32
   b56cc:	f7ff ff9e 	bl	b560c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   b56d0:	2800      	cmp	r0, #0
   b56d2:	d1dd      	bne.n	b5690 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   b56d4:	a80f      	add	r0, sp, #60	; 0x3c
   b56d6:	f000 fcef 	bl	b60b8 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   b56da:	a80b      	add	r0, sp, #44	; 0x2c
   b56dc:	f000 fcec 	bl	b60b8 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   b56e0:	3514      	adds	r5, #20
   b56e2:	e7c6      	b.n	b5672 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   b56e4:	a90f      	add	r1, sp, #60	; 0x3c
   b56e6:	4630      	mov	r0, r6
   b56e8:	f000 fd62 	bl	b61b0 <_ZN6StringC1EOS_>
   b56ec:	e7dc      	b.n	b56a8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   b56ee:	2600      	movs	r6, #0
   b56f0:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
   b56f4:	960d      	str	r6, [sp, #52]	; 0x34
    for (int i = 0; i < cats.size(); ++i) {
   b56f6:	f04f 0914 	mov.w	r9, #20
    return data_[i];
   b56fa:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   b56fe:	429e      	cmp	r6, r3
   b5700:	da7c      	bge.n	b57fc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c0>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   b5702:	0133      	lsls	r3, r6, #4
   b5704:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
   b5706:	9306      	str	r3, [sp, #24]
        if (!category) {
   b5708:	b90b      	cbnz	r3, b570e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
    for (int i = 0; i < cats.size(); ++i) {
   b570a:	3601      	adds	r6, #1
   b570c:	e7f5      	b.n	b56fa <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xbe>
        size_t size = 0; // Name length
   b570e:	2300      	movs	r3, #0
   b5710:	9307      	str	r3, [sp, #28]
   b5712:	fb09 f306 	mul.w	r3, r9, r6
   b5716:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   b5718:	ad0b      	add	r5, sp, #44	; 0x2c
        while ((name = nextSubcategoryName(category, size))) {
   b571a:	a907      	add	r1, sp, #28
   b571c:	a806      	add	r0, sp, #24
   b571e:	f7ff fb22 	bl	b4d66 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   b5722:	4682      	mov	sl, r0
   b5724:	2800      	cmp	r0, #0
   b5726:	d0f0      	beq.n	b570a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xce>
            bool found = false;
   b5728:	f04f 0300 	mov.w	r3, #0
   b572c:	f88d 3017 	strb.w	r3, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   b5730:	4601      	mov	r1, r0
   b5732:	9a07      	ldr	r2, [sp, #28]
   b5734:	f10d 0317 	add.w	r3, sp, #23
   b5738:	4628      	mov	r0, r5
   b573a:	f7ff fbb1 	bl	b4ea0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b573e:	f89d 7017 	ldrb.w	r7, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   b5742:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b5744:	2f00      	cmp	r7, #0
   b5746:	d14a      	bne.n	b57de <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
   b5748:	f8bd 301c 	ldrh.w	r3, [sp, #28]
            level(-1) {
   b574c:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        capacity_(0) {
   b5750:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
   b5754:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b5758:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   b575c:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   b5760:	9713      	str	r7, [sp, #76]	; 0x4c
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b5762:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   b5766:	4293      	cmp	r3, r2
   b5768:	db17      	blt.n	b579a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15e>
   b576a:	f103 0a01 	add.w	sl, r3, #1
        if (n > 0) {
   b576e:	f1ba 0f00 	cmp.w	sl, #0
   b5772:	dd30      	ble.n	b57d6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19a>
    return ::malloc(size);
   b5774:	fb09 f00a 	mul.w	r0, r9, sl
   b5778:	f7fe ffd6 	bl	b4728 <malloc>
            if (!d) {
   b577c:	4683      	mov	fp, r0
   b577e:	b360      	cbz	r0, b57da <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19e>
            move(d, data_, data_ + size_);
   b5780:	e9d5 1200 	ldrd	r1, r2, [r5]
   b5784:	fb09 1202 	mla	r2, r9, r2, r1
   b5788:	f7ff feea 	bl	b5560 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    ::free(ptr);
   b578c:	6828      	ldr	r0, [r5, #0]
   b578e:	f7fe ffd3 	bl	b4738 <free>
        data_ = d;
   b5792:	f8c5 b000 	str.w	fp, [r5]
        capacity_ = n;
   b5796:	f8c5 a008 	str.w	sl, [r5, #8]
    T* const p = data_ + i;
   b579a:	682b      	ldr	r3, [r5, #0]
   b579c:	9a01      	ldr	r2, [sp, #4]
   b579e:	fb09 3a02 	mla	sl, r9, r2, r3
    move(p + 1, p, data_ + size_);
   b57a2:	686a      	ldr	r2, [r5, #4]
   b57a4:	4651      	mov	r1, sl
   b57a6:	fb09 3202 	mla	r2, r9, r2, r3
   b57aa:	f10a 0014 	add.w	r0, sl, #20
   b57ae:	f7ff fed7 	bl	b5560 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   b57b2:	f1ba 0f00 	cmp.w	sl, #0
   b57b6:	d003      	beq.n	b57c0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x184>
   b57b8:	a90f      	add	r1, sp, #60	; 0x3c
   b57ba:	4650      	mov	r0, sl
   b57bc:	f7ff fb5d 	bl	b4e7a <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
    ++size_;
   b57c0:	686b      	ldr	r3, [r5, #4]
   b57c2:	3301      	adds	r3, #1
   b57c4:	606b      	str	r3, [r5, #4]
struct spark::detail::LogFilter::Node {
   b57c6:	a811      	add	r0, sp, #68	; 0x44
   b57c8:	f7ff fcdc 	bl	b5184 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b57cc:	b13f      	cbz	r7, b57de <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
    Vector<Node> nodes;
   b57ce:	a80b      	add	r0, sp, #44	; 0x2c
   b57d0:	f7ff fcd8 	bl	b5184 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b57d4:	e771      	b.n	b56ba <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   b57d6:	46bb      	mov	fp, r7
   b57d8:	e7d8      	b.n	b578c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x150>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b57da:	2701      	movs	r7, #1
   b57dc:	e7f3      	b.n	b57c6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x18a>
    return data_[i];
   b57de:	9b01      	ldr	r3, [sp, #4]
   b57e0:	682d      	ldr	r5, [r5, #0]
   b57e2:	fb09 5503 	mla	r5, r9, r3, r5
            if (!*category) { // Check if it's last subcategory
   b57e6:	9b06      	ldr	r3, [sp, #24]
   b57e8:	781b      	ldrb	r3, [r3, #0]
   b57ea:	b92b      	cbnz	r3, b57f8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
                node.level = filters.at(i).level_;
   b57ec:	f8d8 3000 	ldr.w	r3, [r8]
   b57f0:	9a02      	ldr	r2, [sp, #8]
   b57f2:	4413      	add	r3, r2
   b57f4:	7c1b      	ldrb	r3, [r3, #16]
   b57f6:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   b57f8:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   b57fa:	e78e      	b.n	b571a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xde>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b57fc:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   b57fe:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5800:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   b5802:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5804:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b5806:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
   b5808:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
   b580a:	930a      	str	r3, [sp, #40]	; 0x28
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b580c:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   b580e:	60a2      	str	r2, [r4, #8]
   b5810:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
   b5812:	930b      	str	r3, [sp, #44]	; 0x2c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5814:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   b5816:	60e2      	str	r2, [r4, #12]
   b5818:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   b581a:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b581c:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   b581e:	6122      	str	r2, [r4, #16]
   b5820:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   b5822:	930d      	str	r3, [sp, #52]	; 0x34
    level_ = level;
   b5824:	9b03      	ldr	r3, [sp, #12]
   b5826:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
   b5828:	6162      	str	r2, [r4, #20]
   b582a:	7623      	strb	r3, [r4, #24]
   b582c:	e7cf      	b.n	b57ce <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x192>
	...

000b5830 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   b5830:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5832:	4604      	mov	r4, r0
   b5834:	b087      	sub	sp, #28
   b5836:	460d      	mov	r5, r1
        filter_(level, filters) {
   b5838:	4626      	mov	r6, r4
        stream_(&stream) {
   b583a:	4619      	mov	r1, r3
   b583c:	4668      	mov	r0, sp
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   b583e:	4617      	mov	r7, r2
        stream_(&stream) {
   b5840:	f7fe fd51 	bl	b42e6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b5844:	4b0b      	ldr	r3, [pc, #44]	; (b5874 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x44>)
   b5846:	f846 3b04 	str.w	r3, [r6], #4
   b584a:	4669      	mov	r1, sp
   b584c:	a803      	add	r0, sp, #12
   b584e:	f7fe fd4a 	bl	b42e6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b5852:	aa03      	add	r2, sp, #12
   b5854:	4639      	mov	r1, r7
   b5856:	4630      	mov	r0, r6
   b5858:	f7ff fef0 	bl	b563c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b585c:	a803      	add	r0, sp, #12
   b585e:	f7fe fd01 	bl	b4264 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b5862:	4668      	mov	r0, sp
   b5864:	f7fe fcfe 	bl	b4264 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b5868:	4b03      	ldr	r3, [pc, #12]	; (b5878 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x48>)
   b586a:	6023      	str	r3, [r4, #0]
}
   b586c:	4620      	mov	r0, r4
        stream_(&stream) {
   b586e:	6225      	str	r5, [r4, #32]
}
   b5870:	b007      	add	sp, #28
   b5872:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b5874:	000b9200 	.word	0x000b9200
   b5878:	000b9314 	.word	0x000b9314

000b587c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   b587c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b587e:	460f      	mov	r7, r1
   b5880:	b085      	sub	sp, #20
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b5882:	491d      	ldr	r1, [pc, #116]	; (b58f8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x7c>)
            Print *stream, const JSONValue &params) {
   b5884:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b5886:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   b5888:	4616      	mov	r6, r2
   b588a:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b588c:	f001 fc73 	bl	b7176 <strcmp>
   b5890:	b9c0      	cbnz	r0, b58c4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x48>
        if (!stream) {
   b5892:	b1a4      	cbz	r4, b58be <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   b5894:	4629      	mov	r1, r5
   b5896:	a801      	add	r0, sp, #4
   b5898:	f7ff fcbc 	bl	b5214 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   b589c:	4917      	ldr	r1, [pc, #92]	; (b58fc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   b589e:	2024      	movs	r0, #36	; 0x24
   b58a0:	f000 ff0c 	bl	b66bc <_ZnwjRKSt9nothrow_t>
   b58a4:	4605      	mov	r5, r0
   b58a6:	b130      	cbz	r0, b58b6 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
    using StreamLogHandler::StreamLogHandler;
   b58a8:	ab01      	add	r3, sp, #4
   b58aa:	4632      	mov	r2, r6
   b58ac:	4621      	mov	r1, r4
   b58ae:	f7ff ffbf 	bl	b5830 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b58b2:	4b13      	ldr	r3, [pc, #76]	; (b5900 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x84>)
   b58b4:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   b58b6:	a801      	add	r0, sp, #4
   b58b8:	f7fe fcd4 	bl	b4264 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b58bc:	462c      	mov	r4, r5
}
   b58be:	4620      	mov	r0, r4
   b58c0:	b005      	add	sp, #20
   b58c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   b58c4:	490f      	ldr	r1, [pc, #60]	; (b5904 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x88>)
   b58c6:	4638      	mov	r0, r7
   b58c8:	f001 fc55 	bl	b7176 <strcmp>
   b58cc:	b990      	cbnz	r0, b58f4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x78>
        if (!stream) {
   b58ce:	2c00      	cmp	r4, #0
   b58d0:	d0f5      	beq.n	b58be <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   b58d2:	4629      	mov	r1, r5
   b58d4:	a801      	add	r0, sp, #4
   b58d6:	f7ff fc9d 	bl	b5214 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   b58da:	4908      	ldr	r1, [pc, #32]	; (b58fc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   b58dc:	2024      	movs	r0, #36	; 0x24
   b58de:	f000 feed 	bl	b66bc <_ZnwjRKSt9nothrow_t>
   b58e2:	4605      	mov	r5, r0
   b58e4:	2800      	cmp	r0, #0
   b58e6:	d0e6      	beq.n	b58b6 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
   b58e8:	ab01      	add	r3, sp, #4
   b58ea:	4632      	mov	r2, r6
   b58ec:	4621      	mov	r1, r4
   b58ee:	f7ff ff9f 	bl	b5830 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b58f2:	e7e0      	b.n	b58b6 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
            return nullptr; // Output stream is not specified
   b58f4:	2400      	movs	r4, #0
   b58f6:	e7e2      	b.n	b58be <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
   b58f8:	000b9298 	.word	0x000b9298
   b58fc:	000b9470 	.word	0x000b9470
   b5900:	000b932c 	.word	0x000b932c
   b5904:	000b929c 	.word	0x000b929c

000b5908 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   b5908:	4b01      	ldr	r3, [pc, #4]	; (b5910 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b590a:	4a02      	ldr	r2, [pc, #8]	; (b5914 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b590c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b590e:	4770      	bx	lr
   b5910:	2003e6c0 	.word	0x2003e6c0
   b5914:	000b92ad 	.word	0x000b92ad

000b5918 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b5918:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b591c:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   b591e:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b5922:	4604      	mov	r4, r0
   b5924:	460e      	mov	r6, r1
   b5926:	4617      	mov	r7, r2
   b5928:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   b592a:	f000 fd87 	bl	b643c <_Z16_fetch_usbserialv>
   b592e:	4581      	cmp	r9, r0
   b5930:	d04c      	beq.n	b59cc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   b5932:	792b      	ldrb	r3, [r5, #4]
   b5934:	0719      	lsls	r1, r3, #28
   b5936:	d504      	bpl.n	b5942 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   b5938:	696a      	ldr	r2, [r5, #20]
   b593a:	4954      	ldr	r1, [pc, #336]	; (b5a8c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   b593c:	4620      	mov	r0, r4
   b593e:	f7ff fa8d 	bl	b4e5c <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   b5942:	f1b8 0f00 	cmp.w	r8, #0
   b5946:	d00d      	beq.n	b5964 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   b5948:	215b      	movs	r1, #91	; 0x5b
   b594a:	4620      	mov	r0, r4
   b594c:	f7ff fa7a 	bl	b4e44 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   b5950:	4641      	mov	r1, r8
   b5952:	4620      	mov	r0, r4
   b5954:	f7ff fa67 	bl	b4e26 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   b5958:	6823      	ldr	r3, [r4, #0]
   b595a:	494d      	ldr	r1, [pc, #308]	; (b5a90 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   b595c:	68db      	ldr	r3, [r3, #12]
   b595e:	2202      	movs	r2, #2
   b5960:	4620      	mov	r0, r4
   b5962:	4798      	blx	r3
    if (attr.has_file) {
   b5964:	792b      	ldrb	r3, [r5, #4]
   b5966:	07da      	lsls	r2, r3, #31
   b5968:	d523      	bpl.n	b59b2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   b596a:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   b596e:	212f      	movs	r1, #47	; 0x2f
   b5970:	4640      	mov	r0, r8
   b5972:	f001 fc2e 	bl	b71d2 <strrchr>
    if (s1) {
   b5976:	b108      	cbz	r0, b597c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   b5978:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   b597c:	4641      	mov	r1, r8
   b597e:	4620      	mov	r0, r4
   b5980:	f7ff fa51 	bl	b4e26 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   b5984:	792b      	ldrb	r3, [r5, #4]
   b5986:	079b      	lsls	r3, r3, #30
   b5988:	d508      	bpl.n	b599c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   b598a:	213a      	movs	r1, #58	; 0x3a
   b598c:	4620      	mov	r0, r4
   b598e:	f7ff fa59 	bl	b4e44 <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   b5992:	68ea      	ldr	r2, [r5, #12]
   b5994:	493f      	ldr	r1, [pc, #252]	; (b5a94 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   b5996:	4620      	mov	r0, r4
   b5998:	f7ff fa60 	bl	b4e5c <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   b599c:	792a      	ldrb	r2, [r5, #4]
            write(", ", 2);
   b599e:	6823      	ldr	r3, [r4, #0]
        if (attr.has_function) {
   b59a0:	f012 0f04 	tst.w	r2, #4
            write(", ", 2);
   b59a4:	68db      	ldr	r3, [r3, #12]
   b59a6:	bf14      	ite	ne
   b59a8:	493b      	ldrne	r1, [pc, #236]	; (b5a98 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   b59aa:	493c      	ldreq	r1, [pc, #240]	; (b5a9c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   b59ac:	2202      	movs	r2, #2
            write(": ", 2);
   b59ae:	4620      	mov	r0, r4
   b59b0:	4798      	blx	r3
    if (attr.has_function) {
   b59b2:	792b      	ldrb	r3, [r5, #4]
   b59b4:	0758      	lsls	r0, r3, #29
   b59b6:	d51d      	bpl.n	b59f4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   b59b8:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   b59ba:	460b      	mov	r3, r1
   b59bc:	461a      	mov	r2, r3
    for (; *s; ++s) {
   b59be:	f813 0b01 	ldrb.w	r0, [r3], #1
   b59c2:	b160      	cbz	r0, b59de <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   b59c4:	2820      	cmp	r0, #32
   b59c6:	d108      	bne.n	b59da <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   b59c8:	4619      	mov	r1, r3
   b59ca:	e7f7      	b.n	b59bc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   b59cc:	4834      	ldr	r0, [pc, #208]	; (b5aa0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   b59ce:	f000 f966 	bl	b5c9e <_ZN5spark12NetworkClass9listeningEv>
   b59d2:	2800      	cmp	r0, #0
   b59d4:	d0ad      	beq.n	b5932 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   b59d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   b59da:	2828      	cmp	r0, #40	; 0x28
   b59dc:	d1ee      	bne.n	b59bc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   b59de:	6823      	ldr	r3, [r4, #0]
   b59e0:	1a52      	subs	r2, r2, r1
   b59e2:	68db      	ldr	r3, [r3, #12]
   b59e4:	4620      	mov	r0, r4
   b59e6:	4798      	blx	r3
        write("(): ", 4);
   b59e8:	6823      	ldr	r3, [r4, #0]
   b59ea:	492e      	ldr	r1, [pc, #184]	; (b5aa4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   b59ec:	68db      	ldr	r3, [r3, #12]
   b59ee:	2204      	movs	r2, #4
   b59f0:	4620      	mov	r0, r4
   b59f2:	4798      	blx	r3
    return log_level_name(level, nullptr);
   b59f4:	2100      	movs	r1, #0
   b59f6:	4638      	mov	r0, r7
   b59f8:	f7fe fdf2 	bl	b45e0 <log_level_name>
   b59fc:	4601      	mov	r1, r0
    write(s);
   b59fe:	4620      	mov	r0, r4
   b5a00:	f7ff fa11 	bl	b4e26 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   b5a04:	6823      	ldr	r3, [r4, #0]
   b5a06:	4925      	ldr	r1, [pc, #148]	; (b5a9c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   b5a08:	68db      	ldr	r3, [r3, #12]
   b5a0a:	2202      	movs	r2, #2
   b5a0c:	4620      	mov	r0, r4
   b5a0e:	4798      	blx	r3
    if (msg) {
   b5a10:	b11e      	cbz	r6, b5a1a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   b5a12:	4631      	mov	r1, r6
   b5a14:	4620      	mov	r0, r4
   b5a16:	f7ff fa06 	bl	b4e26 <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   b5a1a:	792b      	ldrb	r3, [r5, #4]
   b5a1c:	f013 0f30 	tst.w	r3, #48	; 0x30
   b5a20:	d02c      	beq.n	b5a7c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   b5a22:	6823      	ldr	r3, [r4, #0]
   b5a24:	4920      	ldr	r1, [pc, #128]	; (b5aa8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   b5a26:	68db      	ldr	r3, [r3, #12]
   b5a28:	2202      	movs	r2, #2
   b5a2a:	4620      	mov	r0, r4
   b5a2c:	4798      	blx	r3
        if (attr.has_code) {
   b5a2e:	792b      	ldrb	r3, [r5, #4]
   b5a30:	06d9      	lsls	r1, r3, #27
   b5a32:	d50a      	bpl.n	b5a4a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   b5a34:	6823      	ldr	r3, [r4, #0]
   b5a36:	491d      	ldr	r1, [pc, #116]	; (b5aac <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   b5a38:	68db      	ldr	r3, [r3, #12]
   b5a3a:	2207      	movs	r2, #7
   b5a3c:	4620      	mov	r0, r4
   b5a3e:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   b5a40:	69aa      	ldr	r2, [r5, #24]
   b5a42:	491b      	ldr	r1, [pc, #108]	; (b5ab0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   b5a44:	4620      	mov	r0, r4
   b5a46:	f7ff fa09 	bl	b4e5c <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   b5a4a:	792b      	ldrb	r3, [r5, #4]
   b5a4c:	069a      	lsls	r2, r3, #26
   b5a4e:	d511      	bpl.n	b5a74 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   b5a50:	06db      	lsls	r3, r3, #27
   b5a52:	d505      	bpl.n	b5a60 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   b5a54:	6823      	ldr	r3, [r4, #0]
   b5a56:	4910      	ldr	r1, [pc, #64]	; (b5a98 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   b5a58:	68db      	ldr	r3, [r3, #12]
   b5a5a:	2202      	movs	r2, #2
   b5a5c:	4620      	mov	r0, r4
   b5a5e:	4798      	blx	r3
            write("details = ", 10);
   b5a60:	6823      	ldr	r3, [r4, #0]
   b5a62:	4914      	ldr	r1, [pc, #80]	; (b5ab4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   b5a64:	68db      	ldr	r3, [r3, #12]
   b5a66:	4620      	mov	r0, r4
   b5a68:	220a      	movs	r2, #10
   b5a6a:	4798      	blx	r3
            write(attr.details);
   b5a6c:	69e9      	ldr	r1, [r5, #28]
   b5a6e:	4620      	mov	r0, r4
   b5a70:	f7ff f9d9 	bl	b4e26 <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   b5a74:	215d      	movs	r1, #93	; 0x5d
   b5a76:	4620      	mov	r0, r4
   b5a78:	f7ff f9e4 	bl	b4e44 <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   b5a7c:	6823      	ldr	r3, [r4, #0]
   b5a7e:	490e      	ldr	r1, [pc, #56]	; (b5ab8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   b5a80:	68db      	ldr	r3, [r3, #12]
   b5a82:	4620      	mov	r0, r4
   b5a84:	2202      	movs	r2, #2
}
   b5a86:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   b5a8a:	4718      	bx	r3
   b5a8c:	000b92b1 	.word	0x000b92b1
   b5a90:	000b92b8 	.word	0x000b92b8
   b5a94:	000b9278 	.word	0x000b9278
   b5a98:	000b92bb 	.word	0x000b92bb
   b5a9c:	000b92c0 	.word	0x000b92c0
   b5aa0:	2003e6ec 	.word	0x2003e6ec
   b5aa4:	000b92be 	.word	0x000b92be
   b5aa8:	000b92c3 	.word	0x000b92c3
   b5aac:	000b92c6 	.word	0x000b92c6
   b5ab0:	000b92ce 	.word	0x000b92ce
   b5ab4:	000b92d1 	.word	0x000b92d1
   b5ab8:	000b92dc 	.word	0x000b92dc

000b5abc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b5abc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b5ac0:	b085      	sub	sp, #20
    return stream_;
   b5ac2:	f8d0 9020 	ldr.w	r9, [r0, #32]
   b5ac6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   b5ac8:	4605      	mov	r5, r0
   b5aca:	460f      	mov	r7, r1
   b5acc:	4690      	mov	r8, r2
   b5ace:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   b5ad0:	f000 fcb4 	bl	b643c <_Z16_fetch_usbserialv>
   b5ad4:	4581      	cmp	r9, r0
   b5ad6:	d105      	bne.n	b5ae4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   b5ad8:	4849      	ldr	r0, [pc, #292]	; (b5c00 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   b5ada:	f000 f8e0 	bl	b5c9e <_ZN5spark12NetworkClass9listeningEv>
   b5ade:	2800      	cmp	r0, #0
   b5ae0:	f040 808a 	bne.w	b5bf8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
   b5ae4:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
   b5ae6:	4a47      	ldr	r2, [pc, #284]	; (b5c04 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   b5ae8:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   b5aea:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   b5aee:	a801      	add	r0, sp, #4
        strm_(stream) {
   b5af0:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
   b5af2:	f88d 9008 	strb.w	r9, [sp, #8]
   b5af6:	f7ff f878 	bl	b4bea <_ZN5spark10JSONWriter11beginObjectEv>
    return log_level_name(level, nullptr);
   b5afa:	4649      	mov	r1, r9
   b5afc:	4640      	mov	r0, r8
   b5afe:	f7fe fd6f 	bl	b45e0 <log_level_name>
    json.name("l", 1).value(s);
   b5b02:	4941      	ldr	r1, [pc, #260]	; (b5c08 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   b5b04:	4680      	mov	r8, r0
   b5b06:	2201      	movs	r2, #1
   b5b08:	a801      	add	r0, sp, #4
   b5b0a:	f7ff f8fd 	bl	b4d08 <_ZN5spark10JSONWriter4nameEPKcj>
   b5b0e:	4641      	mov	r1, r8
   b5b10:	f7ff f97b 	bl	b4e0a <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   b5b14:	b13f      	cbz	r7, b5b26 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   b5b16:	493d      	ldr	r1, [pc, #244]	; (b5c0c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   b5b18:	2201      	movs	r2, #1
   b5b1a:	a801      	add	r0, sp, #4
   b5b1c:	f7ff f8f4 	bl	b4d08 <_ZN5spark10JSONWriter4nameEPKcj>
   b5b20:	4639      	mov	r1, r7
   b5b22:	f7ff f972 	bl	b4e0a <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   b5b26:	b13e      	cbz	r6, b5b38 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   b5b28:	4939      	ldr	r1, [pc, #228]	; (b5c10 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   b5b2a:	2201      	movs	r2, #1
   b5b2c:	a801      	add	r0, sp, #4
   b5b2e:	f7ff f8eb 	bl	b4d08 <_ZN5spark10JSONWriter4nameEPKcj>
   b5b32:	4631      	mov	r1, r6
   b5b34:	f7ff f969 	bl	b4e0a <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   b5b38:	7923      	ldrb	r3, [r4, #4]
   b5b3a:	07df      	lsls	r7, r3, #31
   b5b3c:	d50e      	bpl.n	b5b5c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   b5b3e:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   b5b40:	212f      	movs	r1, #47	; 0x2f
   b5b42:	4630      	mov	r0, r6
   b5b44:	f001 fb45 	bl	b71d2 <strrchr>
    if (s1) {
   b5b48:	b100      	cbz	r0, b5b4c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   b5b4a:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   b5b4c:	4931      	ldr	r1, [pc, #196]	; (b5c14 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   b5b4e:	2201      	movs	r2, #1
   b5b50:	a801      	add	r0, sp, #4
   b5b52:	f7ff f8d9 	bl	b4d08 <_ZN5spark10JSONWriter4nameEPKcj>
   b5b56:	4631      	mov	r1, r6
   b5b58:	f7ff f957 	bl	b4e0a <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   b5b5c:	7923      	ldrb	r3, [r4, #4]
   b5b5e:	079e      	lsls	r6, r3, #30
   b5b60:	d507      	bpl.n	b5b72 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   b5b62:	492d      	ldr	r1, [pc, #180]	; (b5c18 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   b5b64:	2202      	movs	r2, #2
   b5b66:	a801      	add	r0, sp, #4
   b5b68:	f7ff f8ce 	bl	b4d08 <_ZN5spark10JSONWriter4nameEPKcj>
   b5b6c:	68e1      	ldr	r1, [r4, #12]
   b5b6e:	f7ff f849 	bl	b4c04 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   b5b72:	7923      	ldrb	r3, [r4, #4]
   b5b74:	0758      	lsls	r0, r3, #29
   b5b76:	d514      	bpl.n	b5ba2 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   b5b78:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   b5b7a:	4633      	mov	r3, r6
   b5b7c:	461f      	mov	r7, r3
    for (; *s; ++s) {
   b5b7e:	f813 2b01 	ldrb.w	r2, [r3], #1
   b5b82:	b12a      	cbz	r2, b5b90 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
   b5b84:	2a20      	cmp	r2, #32
   b5b86:	d101      	bne.n	b5b8c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   b5b88:	461e      	mov	r6, r3
   b5b8a:	e7f7      	b.n	b5b7c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
   b5b8c:	2a28      	cmp	r2, #40	; 0x28
   b5b8e:	d1f5      	bne.n	b5b7c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
   b5b90:	4922      	ldr	r1, [pc, #136]	; (b5c1c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   b5b92:	2202      	movs	r2, #2
   b5b94:	a801      	add	r0, sp, #4
   b5b96:	f7ff f8b7 	bl	b4d08 <_ZN5spark10JSONWriter4nameEPKcj>
   b5b9a:	1bba      	subs	r2, r7, r6
   b5b9c:	4631      	mov	r1, r6
   b5b9e:	f7ff f8c3 	bl	b4d28 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   b5ba2:	7923      	ldrb	r3, [r4, #4]
   b5ba4:	0719      	lsls	r1, r3, #28
   b5ba6:	d507      	bpl.n	b5bb8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
   b5ba8:	491d      	ldr	r1, [pc, #116]	; (b5c20 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   b5baa:	2201      	movs	r2, #1
   b5bac:	a801      	add	r0, sp, #4
   b5bae:	f7ff f8ab 	bl	b4d08 <_ZN5spark10JSONWriter4nameEPKcj>
   b5bb2:	6961      	ldr	r1, [r4, #20]
   b5bb4:	f7ff f838 	bl	b4c28 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   b5bb8:	7923      	ldrb	r3, [r4, #4]
   b5bba:	06da      	lsls	r2, r3, #27
   b5bbc:	d508      	bpl.n	b5bd0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   b5bbe:	2204      	movs	r2, #4
   b5bc0:	4918      	ldr	r1, [pc, #96]	; (b5c24 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   b5bc2:	eb0d 0002 	add.w	r0, sp, r2
   b5bc6:	f7ff f89f 	bl	b4d08 <_ZN5spark10JSONWriter4nameEPKcj>
   b5bca:	69a1      	ldr	r1, [r4, #24]
   b5bcc:	f7ff f81a 	bl	b4c04 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   b5bd0:	7923      	ldrb	r3, [r4, #4]
   b5bd2:	069b      	lsls	r3, r3, #26
   b5bd4:	d507      	bpl.n	b5be6 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   b5bd6:	4914      	ldr	r1, [pc, #80]	; (b5c28 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   b5bd8:	2206      	movs	r2, #6
   b5bda:	a801      	add	r0, sp, #4
   b5bdc:	f7ff f894 	bl	b4d08 <_ZN5spark10JSONWriter4nameEPKcj>
   b5be0:	69e1      	ldr	r1, [r4, #28]
   b5be2:	f7ff f912 	bl	b4e0a <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   b5be6:	a801      	add	r0, sp, #4
   b5be8:	f7fe ffe9 	bl	b4bbe <_ZN5spark10JSONWriter9endObjectEv>
    return stream_;
   b5bec:	6a28      	ldr	r0, [r5, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
   b5bee:	490f      	ldr	r1, [pc, #60]	; (b5c2c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   b5bf0:	6803      	ldr	r3, [r0, #0]
   b5bf2:	2202      	movs	r2, #2
   b5bf4:	68db      	ldr	r3, [r3, #12]
   b5bf6:	4798      	blx	r3
}
   b5bf8:	b005      	add	sp, #20
   b5bfa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b5bfe:	bf00      	nop
   b5c00:	2003e6ec 	.word	0x2003e6ec
   b5c04:	000b92fc 	.word	0x000b92fc
   b5c08:	000b928e 	.word	0x000b928e
   b5c0c:	000b92df 	.word	0x000b92df
   b5c10:	000b9718 	.word	0x000b9718
   b5c14:	000b93ae 	.word	0x000b93ae
   b5c18:	000b92e1 	.word	0x000b92e1
   b5c1c:	000b92e4 	.word	0x000b92e4
   b5c20:	000b91ca 	.word	0x000b91ca
   b5c24:	000b92e7 	.word	0x000b92e7
   b5c28:	000b92ec 	.word	0x000b92ec
   b5c2c:	000b92dc 	.word	0x000b92dc

000b5c30 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b5c30:	2300      	movs	r3, #0
   b5c32:	6840      	ldr	r0, [r0, #4]
   b5c34:	461a      	mov	r2, r3
   b5c36:	f7fe bd17 	b.w	b4668 <network_connect>

000b5c3a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b5c3a:	6840      	ldr	r0, [r0, #4]
   b5c3c:	2200      	movs	r2, #0
   b5c3e:	2102      	movs	r1, #2
   b5c40:	f7fe bd22 	b.w	b4688 <network_disconnect>

000b5c44 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b5c44:	2200      	movs	r2, #0
   b5c46:	6840      	ldr	r0, [r0, #4]
   b5c48:	4611      	mov	r1, r2
   b5c4a:	f7fe bd15 	b.w	b4678 <network_connecting>

000b5c4e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b5c4e:	2200      	movs	r2, #0
   b5c50:	6840      	ldr	r0, [r0, #4]
   b5c52:	4611      	mov	r1, r2
   b5c54:	f7fe bd20 	b.w	b4698 <network_ready>

000b5c58 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b5c58:	2300      	movs	r3, #0
   b5c5a:	6840      	ldr	r0, [r0, #4]
   b5c5c:	461a      	mov	r2, r3
   b5c5e:	4619      	mov	r1, r3
   b5c60:	f7fe bd22 	b.w	b46a8 <network_on>

000b5c64 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b5c64:	2300      	movs	r3, #0
   b5c66:	6840      	ldr	r0, [r0, #4]
   b5c68:	461a      	mov	r2, r3
   b5c6a:	4619      	mov	r1, r3
   b5c6c:	f7fe bd24 	b.w	b46b8 <network_off>

000b5c70 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b5c70:	6840      	ldr	r0, [r0, #4]
   b5c72:	2100      	movs	r1, #0
   b5c74:	f7fe bd48 	b.w	b4708 <network_is_on>

000b5c78 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b5c78:	6840      	ldr	r0, [r0, #4]
   b5c7a:	2100      	movs	r1, #0
   b5c7c:	f7fe bd4c 	b.w	b4718 <network_is_off>

000b5c80 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b5c80:	6840      	ldr	r0, [r0, #4]
   b5c82:	2200      	movs	r2, #0
   b5c84:	f081 0101 	eor.w	r1, r1, #1
   b5c88:	f7fe bd1e 	b.w	b46c8 <network_listen>

000b5c8c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b5c8c:	6840      	ldr	r0, [r0, #4]
   b5c8e:	2200      	movs	r2, #0
   b5c90:	f7fe bd2a 	b.w	b46e8 <network_set_listen_timeout>

000b5c94 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b5c94:	2200      	movs	r2, #0
   b5c96:	6840      	ldr	r0, [r0, #4]
   b5c98:	4611      	mov	r1, r2
   b5c9a:	f7fe bd2d 	b.w	b46f8 <network_get_listen_timeout>

000b5c9e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b5c9e:	2200      	movs	r2, #0
   b5ca0:	6840      	ldr	r0, [r0, #4]
   b5ca2:	4611      	mov	r1, r2
   b5ca4:	f7fe bd18 	b.w	b46d8 <network_listening>

000b5ca8 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b5ca8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b5cac:	b095      	sub	sp, #84	; 0x54
   b5cae:	4614      	mov	r4, r2
   b5cb0:	460d      	mov	r5, r1
   b5cb2:	4607      	mov	r7, r0
    IPAddress addr;
   b5cb4:	f7fe fe32 	bl	b491c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b5cb8:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b5cba:	221c      	movs	r2, #28
   b5cbc:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b5cbe:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b5cc0:	f001 fa0c 	bl	b70dc <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b5cc4:	2340      	movs	r3, #64	; 0x40
   b5cc6:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b5cc8:	4620      	mov	r0, r4
   b5cca:	466b      	mov	r3, sp
   b5ccc:	aa0c      	add	r2, sp, #48	; 0x30
   b5cce:	2100      	movs	r1, #0
   b5cd0:	f7fe fbe6 	bl	b44a0 <netdb_getaddrinfo>
    if (!r) {
   b5cd4:	4604      	mov	r4, r0
   b5cd6:	2800      	cmp	r0, #0
   b5cd8:	d14b      	bne.n	b5d72 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b5cda:	4602      	mov	r2, r0
   b5cdc:	2101      	movs	r1, #1
   b5cde:	6868      	ldr	r0, [r5, #4]
   b5ce0:	f7fe fcda 	bl	b4698 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5ce4:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b5ce6:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5ce8:	4622      	mov	r2, r4
   b5cea:	6868      	ldr	r0, [r5, #4]
   b5cec:	f7fe fcd4 	bl	b4698 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5cf0:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5cf2:	4681      	mov	r9, r0
        bool ok = false;
   b5cf4:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5cf6:	2e00      	cmp	r6, #0
   b5cf8:	d03b      	beq.n	b5d72 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b5cfa:	2900      	cmp	r1, #0
   b5cfc:	d139      	bne.n	b5d72 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b5cfe:	6873      	ldr	r3, [r6, #4]
   b5d00:	2b02      	cmp	r3, #2
   b5d02:	d003      	beq.n	b5d0c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b5d04:	2b0a      	cmp	r3, #10
   b5d06:	d011      	beq.n	b5d2c <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5d08:	69f6      	ldr	r6, [r6, #28]
   b5d0a:	e7f4      	b.n	b5cf6 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b5d0c:	f1b8 0f00 	cmp.w	r8, #0
   b5d10:	d0fa      	beq.n	b5d08 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b5d12:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b5d14:	a806      	add	r0, sp, #24
   b5d16:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b5d18:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b5d1a:	f7fe fe2d 	bl	b4978 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b5d1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5d20:	1d3c      	adds	r4, r7, #4
   b5d22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5d24:	682b      	ldr	r3, [r5, #0]
   b5d26:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b5d28:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b5d2a:	e7ed      	b.n	b5d08 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b5d2c:	f1b9 0f00 	cmp.w	r9, #0
   b5d30:	d0ea      	beq.n	b5d08 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b5d32:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b5d34:	2210      	movs	r2, #16
   b5d36:	a801      	add	r0, sp, #4
   b5d38:	f001 f9d0 	bl	b70dc <memset>
                    a.v = 6;
   b5d3c:	2306      	movs	r3, #6
   b5d3e:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b5d42:	ad01      	add	r5, sp, #4
   b5d44:	f104 0308 	add.w	r3, r4, #8
   b5d48:	3418      	adds	r4, #24
   b5d4a:	6818      	ldr	r0, [r3, #0]
   b5d4c:	6859      	ldr	r1, [r3, #4]
   b5d4e:	462a      	mov	r2, r5
   b5d50:	c203      	stmia	r2!, {r0, r1}
   b5d52:	3308      	adds	r3, #8
   b5d54:	42a3      	cmp	r3, r4
   b5d56:	4615      	mov	r5, r2
   b5d58:	d1f7      	bne.n	b5d4a <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b5d5a:	a901      	add	r1, sp, #4
   b5d5c:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b5d5e:	ad07      	add	r5, sp, #28
   b5d60:	f7fe fdea 	bl	b4938 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b5d64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5d66:	1d3c      	adds	r4, r7, #4
   b5d68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5d6a:	682b      	ldr	r3, [r5, #0]
   b5d6c:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b5d6e:	4649      	mov	r1, r9
   b5d70:	e7ca      	b.n	b5d08 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b5d72:	9800      	ldr	r0, [sp, #0]
   b5d74:	f7fe fb8c 	bl	b4490 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b5d78:	4638      	mov	r0, r7
   b5d7a:	b015      	add	sp, #84	; 0x54
   b5d7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b5d80 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b5d80:	4b02      	ldr	r3, [pc, #8]	; (b5d8c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b5d82:	4a03      	ldr	r2, [pc, #12]	; (b5d90 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b5d84:	601a      	str	r2, [r3, #0]
   b5d86:	2200      	movs	r2, #0
   b5d88:	605a      	str	r2, [r3, #4]

} // spark
   b5d8a:	4770      	bx	lr
   b5d8c:	2003e6ec 	.word	0x2003e6ec
   b5d90:	000b9374 	.word	0x000b9374

000b5d94 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b5d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5d96:	4606      	mov	r6, r0
   b5d98:	460d      	mov	r5, r1
  size_t n = 0;
   b5d9a:	188f      	adds	r7, r1, r2
   b5d9c:	2400      	movs	r4, #0
  while (size--) {
   b5d9e:	42bd      	cmp	r5, r7
   b5da0:	d00c      	beq.n	b5dbc <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b5da2:	6833      	ldr	r3, [r6, #0]
   b5da4:	f815 1b01 	ldrb.w	r1, [r5], #1
   b5da8:	689b      	ldr	r3, [r3, #8]
   b5daa:	4630      	mov	r0, r6
   b5dac:	4798      	blx	r3
     if (chunk>=0)
   b5dae:	1e03      	subs	r3, r0, #0
   b5db0:	db01      	blt.n	b5db6 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b5db2:	441c      	add	r4, r3
  while (size--) {
   b5db4:	e7f3      	b.n	b5d9e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b5db6:	2c00      	cmp	r4, #0
   b5db8:	bf08      	it	eq
   b5dba:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b5dbc:	4620      	mov	r0, r4
   b5dbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5dc0 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b5dc0:	b513      	push	{r0, r1, r4, lr}
   b5dc2:	4604      	mov	r4, r0
    }
   b5dc4:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b5dc6:	b159      	cbz	r1, b5de0 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b5dc8:	9101      	str	r1, [sp, #4]
   b5dca:	f001 f9e6 	bl	b719a <strlen>
   b5dce:	6823      	ldr	r3, [r4, #0]
   b5dd0:	9901      	ldr	r1, [sp, #4]
   b5dd2:	68db      	ldr	r3, [r3, #12]
   b5dd4:	4602      	mov	r2, r0
   b5dd6:	4620      	mov	r0, r4
    }
   b5dd8:	b002      	add	sp, #8
   b5dda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b5dde:	4718      	bx	r3
    }
   b5de0:	b002      	add	sp, #8
   b5de2:	bd10      	pop	{r4, pc}

000b5de4 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b5de4:	b508      	push	{r3, lr}
  return write(str);
   b5de6:	f7ff ffeb 	bl	b5dc0 <_ZN5Print5writeEPKc>
}
   b5dea:	bd08      	pop	{r3, pc}

000b5dec <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b5dec:	6803      	ldr	r3, [r0, #0]
   b5dee:	689b      	ldr	r3, [r3, #8]
   b5df0:	4718      	bx	r3

000b5df2 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b5df2:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b5df4:	210d      	movs	r1, #13
{
   b5df6:	4605      	mov	r5, r0
  size_t n = print('\r');
   b5df8:	f7ff fff8 	bl	b5dec <_ZN5Print5printEc>
  n += print('\n');
   b5dfc:	210a      	movs	r1, #10
  size_t n = print('\r');
   b5dfe:	4604      	mov	r4, r0
  n += print('\n');
   b5e00:	4628      	mov	r0, r5
   b5e02:	f7ff fff3 	bl	b5dec <_ZN5Print5printEc>
  return n;
}
   b5e06:	4420      	add	r0, r4
   b5e08:	bd38      	pop	{r3, r4, r5, pc}

000b5e0a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b5e0a:	b530      	push	{r4, r5, lr}
   b5e0c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b5e0e:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b5e10:	2a01      	cmp	r2, #1
  *str = '\0';
   b5e12:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b5e16:	bf98      	it	ls
   b5e18:	220a      	movls	r2, #10
   b5e1a:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b5e1c:	460d      	mov	r5, r1
   b5e1e:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b5e22:	fb01 5312 	mls	r3, r1, r2, r5
   b5e26:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b5e2a:	2b09      	cmp	r3, #9
   b5e2c:	bf94      	ite	ls
   b5e2e:	3330      	addls	r3, #48	; 0x30
   b5e30:	3337      	addhi	r3, #55	; 0x37
   b5e32:	b2db      	uxtb	r3, r3
  } while(n);
   b5e34:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b5e36:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b5e3a:	d9ef      	bls.n	b5e1c <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b5e3c:	4621      	mov	r1, r4
   b5e3e:	f7ff ffbf 	bl	b5dc0 <_ZN5Print5writeEPKc>
}
   b5e42:	b00b      	add	sp, #44	; 0x2c
   b5e44:	bd30      	pop	{r4, r5, pc}
	...

000b5e48 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   b5e48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5e4c:	ec55 4b10 	vmov	r4, r5, d0
   b5e50:	4606      	mov	r6, r0
   b5e52:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   b5e54:	ee10 2a10 	vmov	r2, s0
   b5e58:	ee10 0a10 	vmov	r0, s0
   b5e5c:	462b      	mov	r3, r5
   b5e5e:	4629      	mov	r1, r5
   b5e60:	f001 f886 	bl	b6f70 <__aeabi_dcmpun>
   b5e64:	b140      	cbz	r0, b5e78 <_ZN5Print10printFloatEdh+0x30>
  return write(str);
   b5e66:	4953      	ldr	r1, [pc, #332]	; (b5fb4 <_ZN5Print10printFloatEdh+0x16c>)
   b5e68:	4630      	mov	r0, r6
   b5e6a:	f7ff ffa9 	bl	b5dc0 <_ZN5Print5writeEPKc>
   b5e6e:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
   b5e70:	4650      	mov	r0, sl
   b5e72:	b003      	add	sp, #12
   b5e74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
   b5e78:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
   b5e7c:	4b4e      	ldr	r3, [pc, #312]	; (b5fb8 <_ZN5Print10printFloatEdh+0x170>)
   b5e7e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b5e82:	4620      	mov	r0, r4
   b5e84:	4649      	mov	r1, r9
   b5e86:	f001 f873 	bl	b6f70 <__aeabi_dcmpun>
   b5e8a:	b948      	cbnz	r0, b5ea0 <_ZN5Print10printFloatEdh+0x58>
   b5e8c:	4b4a      	ldr	r3, [pc, #296]	; (b5fb8 <_ZN5Print10printFloatEdh+0x170>)
   b5e8e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b5e92:	4620      	mov	r0, r4
   b5e94:	4649      	mov	r1, r9
   b5e96:	f001 f84d 	bl	b6f34 <__aeabi_dcmple>
   b5e9a:	b908      	cbnz	r0, b5ea0 <_ZN5Print10printFloatEdh+0x58>
  return write(str);
   b5e9c:	4947      	ldr	r1, [pc, #284]	; (b5fbc <_ZN5Print10printFloatEdh+0x174>)
   b5e9e:	e7e3      	b.n	b5e68 <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   b5ea0:	4b47      	ldr	r3, [pc, #284]	; (b5fc0 <_ZN5Print10printFloatEdh+0x178>)
   b5ea2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   b5ea6:	4620      	mov	r0, r4
   b5ea8:	4629      	mov	r1, r5
   b5eaa:	f001 f857 	bl	b6f5c <__aeabi_dcmpgt>
   b5eae:	b108      	cbz	r0, b5eb4 <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
   b5eb0:	4944      	ldr	r1, [pc, #272]	; (b5fc4 <_ZN5Print10printFloatEdh+0x17c>)
   b5eb2:	e7d9      	b.n	b5e68 <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   b5eb4:	4b44      	ldr	r3, [pc, #272]	; (b5fc8 <_ZN5Print10printFloatEdh+0x180>)
   b5eb6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   b5eba:	4620      	mov	r0, r4
   b5ebc:	4629      	mov	r1, r5
   b5ebe:	f001 f82f 	bl	b6f20 <__aeabi_dcmplt>
   b5ec2:	2800      	cmp	r0, #0
   b5ec4:	d1f4      	bne.n	b5eb0 <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
   b5ec6:	2200      	movs	r2, #0
   b5ec8:	2300      	movs	r3, #0
   b5eca:	4620      	mov	r0, r4
   b5ecc:	4629      	mov	r1, r5
   b5ece:	f001 f827 	bl	b6f20 <__aeabi_dcmplt>
   b5ed2:	b1d0      	cbz	r0, b5f0a <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
   b5ed4:	212d      	movs	r1, #45	; 0x2d
   b5ed6:	4630      	mov	r0, r6
   b5ed8:	f7ff ff88 	bl	b5dec <_ZN5Print5printEc>
     number = -number;
   b5edc:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
   b5ee0:	4682      	mov	sl, r0
     number = -number;
   b5ee2:	461d      	mov	r5, r3
  double rounding = 0.5;
   b5ee4:	4939      	ldr	r1, [pc, #228]	; (b5fcc <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
   b5ee6:	f8df 90ec 	ldr.w	r9, [pc, #236]	; b5fd4 <_ZN5Print10printFloatEdh+0x18c>
  size_t n = 0;
   b5eea:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
   b5eee:	2000      	movs	r0, #0
    rounding /= 10.0;
   b5ef0:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i=0; i<digits; ++i)
   b5ef4:	fa5f f38b 	uxtb.w	r3, fp
   b5ef8:	429f      	cmp	r7, r3
   b5efa:	d908      	bls.n	b5f0e <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
   b5efc:	4642      	mov	r2, r8
   b5efe:	464b      	mov	r3, r9
   b5f00:	f000 fec6 	bl	b6c90 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
   b5f04:	f10b 0b01 	add.w	fp, fp, #1
   b5f08:	e7f4      	b.n	b5ef4 <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
   b5f0a:	4682      	mov	sl, r0
   b5f0c:	e7ea      	b.n	b5ee4 <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
   b5f0e:	4622      	mov	r2, r4
   b5f10:	462b      	mov	r3, r5
   b5f12:	f000 fbdd 	bl	b66d0 <__adddf3>
   b5f16:	460d      	mov	r5, r1
   b5f18:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
   b5f1a:	f001 f867 	bl	b6fec <__aeabi_d2uiz>
   b5f1e:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
   b5f20:	f000 fd12 	bl	b6948 <__aeabi_ui2d>
   b5f24:	4602      	mov	r2, r0
   b5f26:	460b      	mov	r3, r1
   b5f28:	4620      	mov	r0, r4
   b5f2a:	4629      	mov	r1, r5
   b5f2c:	f000 fbce 	bl	b66cc <__aeabi_dsub>
        return printNumber(val, base) + t;
   b5f30:	220a      	movs	r2, #10
   b5f32:	4604      	mov	r4, r0
   b5f34:	460d      	mov	r5, r1
   b5f36:	4630      	mov	r0, r6
   b5f38:	4641      	mov	r1, r8
   b5f3a:	f7ff ff66 	bl	b5e0a <_ZN5Print11printNumberEmh>
  n += print(int_part);
   b5f3e:	4482      	add	sl, r0
  if (digits > 0) {
   b5f40:	2f00      	cmp	r7, #0
   b5f42:	d095      	beq.n	b5e70 <_ZN5Print10printFloatEdh+0x28>
  return write(str);
   b5f44:	4922      	ldr	r1, [pc, #136]	; (b5fd0 <_ZN5Print10printFloatEdh+0x188>)
    remainder *= 10.0;
   b5f46:	f8df 908c 	ldr.w	r9, [pc, #140]	; b5fd4 <_ZN5Print10printFloatEdh+0x18c>
  return write(str);
   b5f4a:	4630      	mov	r0, r6
   b5f4c:	f7ff ff38 	bl	b5dc0 <_ZN5Print5writeEPKc>
    remainder *= 10.0;
   b5f50:	f04f 0800 	mov.w	r8, #0
    n += print(".");
   b5f54:	4482      	add	sl, r0
  while (digits-- > 0)
   b5f56:	2f00      	cmp	r7, #0
   b5f58:	d08a      	beq.n	b5e70 <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
   b5f5a:	4642      	mov	r2, r8
   b5f5c:	464b      	mov	r3, r9
   b5f5e:	4620      	mov	r0, r4
   b5f60:	4629      	mov	r1, r5
   b5f62:	f000 fd6b 	bl	b6a3c <__aeabi_dmul>
   b5f66:	4604      	mov	r4, r0
   b5f68:	460d      	mov	r5, r1
    int toPrint = int(remainder);
   b5f6a:	f001 f817 	bl	b6f9c <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   b5f6e:	f1b0 0b00 	subs.w	fp, r0, #0
   b5f72:	da1c      	bge.n	b5fae <_ZN5Print10printFloatEdh+0x166>
            t = print('-');
   b5f74:	212d      	movs	r1, #45	; 0x2d
   b5f76:	4630      	mov	r0, r6
   b5f78:	f7ff ff38 	bl	b5dec <_ZN5Print5printEc>
            val = -n;
   b5f7c:	f1cb 0100 	rsb	r1, fp, #0
            t = print('-');
   b5f80:	4603      	mov	r3, r0
        return printNumber(val, base) + t;
   b5f82:	220a      	movs	r2, #10
   b5f84:	4630      	mov	r0, r6
   b5f86:	9301      	str	r3, [sp, #4]
   b5f88:	f7ff ff3f 	bl	b5e0a <_ZN5Print11printNumberEmh>
   b5f8c:	9b01      	ldr	r3, [sp, #4]
   b5f8e:	4418      	add	r0, r3
    n += print(toPrint);
   b5f90:	4482      	add	sl, r0
    remainder -= toPrint;
   b5f92:	4658      	mov	r0, fp
   b5f94:	f000 fce8 	bl	b6968 <__aeabi_i2d>
   b5f98:	4602      	mov	r2, r0
   b5f9a:	460b      	mov	r3, r1
   b5f9c:	4620      	mov	r0, r4
   b5f9e:	4629      	mov	r1, r5
   b5fa0:	f000 fb94 	bl	b66cc <__aeabi_dsub>
   b5fa4:	3f01      	subs	r7, #1
   b5fa6:	4604      	mov	r4, r0
   b5fa8:	460d      	mov	r5, r1
   b5faa:	b2ff      	uxtb	r7, r7
  while (digits-- > 0)
   b5fac:	e7d3      	b.n	b5f56 <_ZN5Print10printFloatEdh+0x10e>
            val = n;
   b5fae:	4659      	mov	r1, fp
        size_t t = 0;
   b5fb0:	2300      	movs	r3, #0
   b5fb2:	e7e6      	b.n	b5f82 <_ZN5Print10printFloatEdh+0x13a>
   b5fb4:	000b93a8 	.word	0x000b93a8
   b5fb8:	7fefffff 	.word	0x7fefffff
   b5fbc:	000b93ac 	.word	0x000b93ac
   b5fc0:	41efffff 	.word	0x41efffff
   b5fc4:	000b93b0 	.word	0x000b93b0
   b5fc8:	c1efffff 	.word	0xc1efffff
   b5fcc:	3fe00000 	.word	0x3fe00000
   b5fd0:	000b93b4 	.word	0x000b93b4
   b5fd4:	40240000 	.word	0x40240000

000b5fd8 <_ZN5Print7printlnEdi>:
{
   b5fd8:	b538      	push	{r3, r4, r5, lr}
  return printFloat(n, digits);
   b5fda:	b2c9      	uxtb	r1, r1
{
   b5fdc:	4605      	mov	r5, r0
  return printFloat(n, digits);
   b5fde:	f7ff ff33 	bl	b5e48 <_ZN5Print10printFloatEdh>
   b5fe2:	4604      	mov	r4, r0
  n += println();
   b5fe4:	4628      	mov	r0, r5
   b5fe6:	f7ff ff04 	bl	b5df2 <_ZN5Print7printlnEv>
}
   b5fea:	4420      	add	r0, r4
   b5fec:	bd38      	pop	{r3, r4, r5, pc}

000b5fee <_ZN5Print7vprintfEbPKcSt9__va_list>:

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b5fee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5ff2:	b086      	sub	sp, #24
   b5ff4:	af00      	add	r7, sp, #0
   b5ff6:	4605      	mov	r5, r0
   b5ff8:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b5ffa:	1d38      	adds	r0, r7, #4
   b5ffc:	2114      	movs	r1, #20
{
   b5ffe:	4614      	mov	r4, r2
    va_copy(args2, args);
   b6000:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b6002:	f7fe fbb1 	bl	b4768 <vsnprintf>

    if (n<bufsize)
   b6006:	2813      	cmp	r0, #19
   b6008:	d80e      	bhi.n	b6028 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b600a:	1d39      	adds	r1, r7, #4
   b600c:	4628      	mov	r0, r5
   b600e:	f7ff fed7 	bl	b5dc0 <_ZN5Print5writeEPKc>
   b6012:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b6014:	b11e      	cbz	r6, b601e <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b6016:	4628      	mov	r0, r5
   b6018:	f7ff feeb 	bl	b5df2 <_ZN5Print7printlnEv>
   b601c:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b601e:	4620      	mov	r0, r4
   b6020:	3718      	adds	r7, #24
   b6022:	46bd      	mov	sp, r7
   b6024:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b6028:	f100 0308 	add.w	r3, r0, #8
   b602c:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b6030:	46e8      	mov	r8, sp
        char bigger[n+1];
   b6032:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b6036:	4622      	mov	r2, r4
   b6038:	1c41      	adds	r1, r0, #1
   b603a:	683b      	ldr	r3, [r7, #0]
   b603c:	4668      	mov	r0, sp
   b603e:	f7fe fb93 	bl	b4768 <vsnprintf>
  return write(str);
   b6042:	4669      	mov	r1, sp
   b6044:	4628      	mov	r0, r5
   b6046:	f7ff febb 	bl	b5dc0 <_ZN5Print5writeEPKc>
   b604a:	4604      	mov	r4, r0
   b604c:	46c5      	mov	sp, r8
   b604e:	e7e1      	b.n	b6014 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b6050 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b6050:	4b01      	ldr	r3, [pc, #4]	; (b6058 <_GLOBAL__sub_I_RGB+0x8>)
   b6052:	2200      	movs	r2, #0
   b6054:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b6056:	4770      	bx	lr
   b6058:	2003e6f4 	.word	0x2003e6f4

000b605c <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   b605c:	b510      	push	{r4, lr}
   b605e:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b6060:	f7fe fa06 	bl	b4470 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   b6064:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   b6066:	6823      	ldr	r3, [r4, #0]
   b6068:	4620      	mov	r0, r4
   b606a:	695b      	ldr	r3, [r3, #20]
   b606c:	4798      	blx	r3
    if (c >= 0) return c;
   b606e:	2800      	cmp	r0, #0
   b6070:	da08      	bge.n	b6084 <_ZN6Stream9timedReadEv+0x28>
   b6072:	f7fe f9fd 	bl	b4470 <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
   b6076:	68e3      	ldr	r3, [r4, #12]
   b6078:	1ac0      	subs	r0, r0, r3
   b607a:	68a3      	ldr	r3, [r4, #8]
   b607c:	4298      	cmp	r0, r3
   b607e:	d3f2      	bcc.n	b6066 <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
   b6080:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   b6084:	bd10      	pop	{r4, pc}
	...

000b6088 <_ZN6Stream15readStringUntilEc>:
  }
  return ret;
}

String Stream::readStringUntil(char terminator)
{
   b6088:	b570      	push	{r4, r5, r6, lr}
   b608a:	460d      	mov	r5, r1
  String ret;
   b608c:	4909      	ldr	r1, [pc, #36]	; (b60b4 <_ZN6Stream15readStringUntilEc+0x2c>)
{
   b608e:	4604      	mov	r4, r0
   b6090:	4616      	mov	r6, r2
  String ret;
   b6092:	f000 f85c 	bl	b614e <_ZN6StringC1EPK19__FlashStringHelper>
  int c = timedRead();
   b6096:	4628      	mov	r0, r5
   b6098:	f7ff ffe0 	bl	b605c <_ZN6Stream9timedReadEv>
  while (c >= 0 && c != terminator)
   b609c:	2800      	cmp	r0, #0
   b609e:	db06      	blt.n	b60ae <_ZN6Stream15readStringUntilEc+0x26>
   b60a0:	4286      	cmp	r6, r0
   b60a2:	d004      	beq.n	b60ae <_ZN6Stream15readStringUntilEc+0x26>
	String & operator += (char c)			{concat(c); return (*this);}
   b60a4:	b2c1      	uxtb	r1, r0
   b60a6:	4620      	mov	r0, r4
   b60a8:	f000 f8be 	bl	b6228 <_ZN6String6concatEc>
  {
    ret += (char)c;
    c = timedRead();
   b60ac:	e7f3      	b.n	b6096 <_ZN6Stream15readStringUntilEc+0xe>
  }
  return ret;
}
   b60ae:	4620      	mov	r0, r4
   b60b0:	bd70      	pop	{r4, r5, r6, pc}
   b60b2:	bf00      	nop
   b60b4:	000b92de 	.word	0x000b92de

000b60b8 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b60b8:	b510      	push	{r4, lr}
   b60ba:	4604      	mov	r4, r0
{
	free(buffer);
   b60bc:	6800      	ldr	r0, [r0, #0]
   b60be:	f7fe fb3b 	bl	b4738 <free>
}
   b60c2:	4620      	mov	r0, r4
   b60c4:	bd10      	pop	{r4, pc}

000b60c6 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b60c6:	b510      	push	{r4, lr}
   b60c8:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b60ca:	6800      	ldr	r0, [r0, #0]
   b60cc:	b108      	cbz	r0, b60d2 <_ZN6String10invalidateEv+0xc>
   b60ce:	f7fe fb33 	bl	b4738 <free>
	buffer = NULL;
   b60d2:	2300      	movs	r3, #0
	capacity = len = 0;
   b60d4:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b60d8:	6023      	str	r3, [r4, #0]
}
   b60da:	bd10      	pop	{r4, pc}

000b60dc <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b60dc:	b538      	push	{r3, r4, r5, lr}
   b60de:	4604      	mov	r4, r0
   b60e0:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b60e2:	6800      	ldr	r0, [r0, #0]
   b60e4:	3101      	adds	r1, #1
   b60e6:	f7fe fb2f 	bl	b4748 <realloc>
	if (newbuffer) {
   b60ea:	b110      	cbz	r0, b60f2 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b60ec:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b60f0:	2001      	movs	r0, #1
	}
	return 0;
}
   b60f2:	bd38      	pop	{r3, r4, r5, pc}

000b60f4 <_ZN6String7reserveEj>:
{
   b60f4:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b60f6:	6803      	ldr	r3, [r0, #0]
{
   b60f8:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b60fa:	b123      	cbz	r3, b6106 <_ZN6String7reserveEj+0x12>
   b60fc:	6843      	ldr	r3, [r0, #4]
   b60fe:	428b      	cmp	r3, r1
   b6100:	d301      	bcc.n	b6106 <_ZN6String7reserveEj+0x12>
   b6102:	2001      	movs	r0, #1
}
   b6104:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b6106:	4620      	mov	r0, r4
   b6108:	f7ff ffe8 	bl	b60dc <_ZN6String12changeBufferEj>
   b610c:	2800      	cmp	r0, #0
   b610e:	d0f9      	beq.n	b6104 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b6110:	68a3      	ldr	r3, [r4, #8]
   b6112:	2b00      	cmp	r3, #0
   b6114:	d1f5      	bne.n	b6102 <_ZN6String7reserveEj+0xe>
   b6116:	6822      	ldr	r2, [r4, #0]
   b6118:	7013      	strb	r3, [r2, #0]
   b611a:	e7f2      	b.n	b6102 <_ZN6String7reserveEj+0xe>

000b611c <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b611c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b611e:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b6120:	4611      	mov	r1, r2
   b6122:	9201      	str	r2, [sp, #4]
{
   b6124:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b6126:	f7ff ffe5 	bl	b60f4 <_ZN6String7reserveEj>
   b612a:	9a01      	ldr	r2, [sp, #4]
   b612c:	b928      	cbnz	r0, b613a <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b612e:	4620      	mov	r0, r4
   b6130:	f7ff ffc9 	bl	b60c6 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b6134:	4620      	mov	r0, r4
   b6136:	b003      	add	sp, #12
   b6138:	bd30      	pop	{r4, r5, pc}
	len = length;
   b613a:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b613c:	4629      	mov	r1, r5
   b613e:	6820      	ldr	r0, [r4, #0]
   b6140:	f000 ffa4 	bl	b708c <memcpy>
	buffer[len] = 0;
   b6144:	6822      	ldr	r2, [r4, #0]
   b6146:	68a3      	ldr	r3, [r4, #8]
   b6148:	2100      	movs	r1, #0
   b614a:	54d1      	strb	r1, [r2, r3]
	return *this;
   b614c:	e7f2      	b.n	b6134 <_ZN6String4copyEPKcj+0x18>

000b614e <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b614e:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b6150:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b6152:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b6156:	4604      	mov	r4, r0
	len = 0;
   b6158:	6083      	str	r3, [r0, #8]
	flags = 0;
   b615a:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b615c:	b141      	cbz	r1, b6170 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b615e:	4608      	mov	r0, r1
   b6160:	9101      	str	r1, [sp, #4]
   b6162:	f001 f81a 	bl	b719a <strlen>
   b6166:	9901      	ldr	r1, [sp, #4]
   b6168:	4602      	mov	r2, r0
   b616a:	4620      	mov	r0, r4
   b616c:	f7ff ffd6 	bl	b611c <_ZN6String4copyEPKcj>
}
   b6170:	4620      	mov	r0, r4
   b6172:	b002      	add	sp, #8
   b6174:	bd10      	pop	{r4, pc}

000b6176 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   b6176:	b538      	push	{r3, r4, r5, lr}
   b6178:	4605      	mov	r5, r0
	if (buffer) {
   b617a:	6800      	ldr	r0, [r0, #0]
{
   b617c:	460c      	mov	r4, r1
	if (buffer) {
   b617e:	b168      	cbz	r0, b619c <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   b6180:	686a      	ldr	r2, [r5, #4]
   b6182:	688b      	ldr	r3, [r1, #8]
   b6184:	429a      	cmp	r2, r3
   b6186:	d307      	bcc.n	b6198 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   b6188:	6809      	ldr	r1, [r1, #0]
   b618a:	f000 fffe 	bl	b718a <strcpy>
			len = rhs.len;
   b618e:	68a3      	ldr	r3, [r4, #8]
   b6190:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   b6192:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   b6194:	60a3      	str	r3, [r4, #8]
}
   b6196:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   b6198:	f7fe face 	bl	b4738 <free>
	buffer = rhs.buffer;
   b619c:	6823      	ldr	r3, [r4, #0]
   b619e:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   b61a0:	6863      	ldr	r3, [r4, #4]
   b61a2:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   b61a4:	68a3      	ldr	r3, [r4, #8]
   b61a6:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   b61a8:	2300      	movs	r3, #0
	rhs.capacity = 0;
   b61aa:	e9c4 3300 	strd	r3, r3, [r4]
   b61ae:	e7f1      	b.n	b6194 <_ZN6String4moveERS_+0x1e>

000b61b0 <_ZN6StringC1EOS_>:
String::String(String &&rval)
   b61b0:	b510      	push	{r4, lr}
	buffer = NULL;
   b61b2:	2300      	movs	r3, #0
	capacity = 0;
   b61b4:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   b61b8:	4604      	mov	r4, r0
	len = 0;
   b61ba:	6083      	str	r3, [r0, #8]
	flags = 0;
   b61bc:	7303      	strb	r3, [r0, #12]
	move(rval);
   b61be:	f7ff ffda 	bl	b6176 <_ZN6String4moveERS_>
}
   b61c2:	4620      	mov	r0, r4
   b61c4:	bd10      	pop	{r4, pc}

000b61c6 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b61c6:	4288      	cmp	r0, r1
{
   b61c8:	b510      	push	{r4, lr}
   b61ca:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b61cc:	d005      	beq.n	b61da <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b61ce:	680b      	ldr	r3, [r1, #0]
   b61d0:	b12b      	cbz	r3, b61de <_ZN6StringaSERKS_+0x18>
   b61d2:	688a      	ldr	r2, [r1, #8]
   b61d4:	4619      	mov	r1, r3
   b61d6:	f7ff ffa1 	bl	b611c <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b61da:	4620      	mov	r0, r4
   b61dc:	bd10      	pop	{r4, pc}
	else invalidate();
   b61de:	f7ff ff72 	bl	b60c6 <_ZN6String10invalidateEv>
   b61e2:	e7fa      	b.n	b61da <_ZN6StringaSERKS_+0x14>

000b61e4 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b61e4:	b510      	push	{r4, lr}
	buffer = NULL;
   b61e6:	2300      	movs	r3, #0
String::String(const String &value)
   b61e8:	4604      	mov	r4, r0
	capacity = 0;
   b61ea:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b61ee:	6083      	str	r3, [r0, #8]
	flags = 0;
   b61f0:	7303      	strb	r3, [r0, #12]
	*this = value;
   b61f2:	f7ff ffe8 	bl	b61c6 <_ZN6StringaSERKS_>
}
   b61f6:	4620      	mov	r0, r4
   b61f8:	bd10      	pop	{r4, pc}

000b61fa <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b61fa:	b570      	push	{r4, r5, r6, lr}
   b61fc:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b61fe:	460e      	mov	r6, r1
   b6200:	b909      	cbnz	r1, b6206 <_ZN6String6concatEPKcj+0xc>
   b6202:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b6204:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b6206:	b16a      	cbz	r2, b6224 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b6208:	6884      	ldr	r4, [r0, #8]
   b620a:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b620c:	4621      	mov	r1, r4
   b620e:	f7ff ff71 	bl	b60f4 <_ZN6String7reserveEj>
   b6212:	2800      	cmp	r0, #0
   b6214:	d0f5      	beq.n	b6202 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b6216:	6828      	ldr	r0, [r5, #0]
   b6218:	68ab      	ldr	r3, [r5, #8]
   b621a:	4631      	mov	r1, r6
   b621c:	4418      	add	r0, r3
   b621e:	f000 ffb4 	bl	b718a <strcpy>
	len = newlen;
   b6222:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b6224:	2001      	movs	r0, #1
   b6226:	e7ed      	b.n	b6204 <_ZN6String6concatEPKcj+0xa>

000b6228 <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   b6228:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   b622a:	2300      	movs	r3, #0
	buf[0] = c;
   b622c:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   b6230:	2201      	movs	r2, #1
   b6232:	a901      	add	r1, sp, #4
	buf[1] = 0;
   b6234:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   b6238:	f7ff ffdf 	bl	b61fa <_ZN6String6concatEPKcj>
}
   b623c:	b003      	add	sp, #12
   b623e:	f85d fb04 	ldr.w	pc, [sp], #4

000b6242 <_ZNK6String10startsWithERKS_j>:
	if (len < s2.len) return 0;
	return startsWith(s2, 0);
}

unsigned char String::startsWith( const String &s2, unsigned int offset ) const
{
   b6242:	b510      	push	{r4, lr}
   b6244:	4613      	mov	r3, r2
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
   b6246:	6884      	ldr	r4, [r0, #8]
   b6248:	688a      	ldr	r2, [r1, #8]
   b624a:	1aa4      	subs	r4, r4, r2
   b624c:	429c      	cmp	r4, r3
   b624e:	d30a      	bcc.n	b6266 <_ZNK6String10startsWithERKS_j+0x24>
   b6250:	6800      	ldr	r0, [r0, #0]
   b6252:	b138      	cbz	r0, b6264 <_ZNK6String10startsWithERKS_j+0x22>
   b6254:	6809      	ldr	r1, [r1, #0]
   b6256:	b141      	cbz	r1, b626a <_ZNK6String10startsWithERKS_j+0x28>
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
   b6258:	4418      	add	r0, r3
   b625a:	f000 ffa6 	bl	b71aa <strncmp>
   b625e:	fab0 f080 	clz	r0, r0
   b6262:	0940      	lsrs	r0, r0, #5
}
   b6264:	bd10      	pop	{r4, pc}
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
   b6266:	2000      	movs	r0, #0
   b6268:	e7fc      	b.n	b6264 <_ZNK6String10startsWithERKS_j+0x22>
   b626a:	4608      	mov	r0, r1
   b626c:	e7fa      	b.n	b6264 <_ZNK6String10startsWithERKS_j+0x22>

000b626e <_ZNK6String10startsWithERKS_>:
	if (len < s2.len) return 0;
   b626e:	6882      	ldr	r2, [r0, #8]
   b6270:	688b      	ldr	r3, [r1, #8]
   b6272:	429a      	cmp	r2, r3
   b6274:	d302      	bcc.n	b627c <_ZNK6String10startsWithERKS_+0xe>
	return startsWith(s2, 0);
   b6276:	2200      	movs	r2, #0
   b6278:	f7ff bfe3 	b.w	b6242 <_ZNK6String10startsWithERKS_j>
}
   b627c:	2000      	movs	r0, #0
   b627e:	4770      	bx	lr

000b6280 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b6280:	4b05      	ldr	r3, [pc, #20]	; (b6298 <_GLOBAL__sub_I_System+0x18>)
   b6282:	2202      	movs	r2, #2
   b6284:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b6286:	4b05      	ldr	r3, [pc, #20]	; (b629c <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b6288:	4a05      	ldr	r2, [pc, #20]	; (b62a0 <_GLOBAL__sub_I_System+0x20>)
   b628a:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b628c:	2000      	movs	r0, #0
   b628e:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b6292:	f7fe b9b5 	b.w	b4600 <set_system_mode>
   b6296:	bf00      	nop
   b6298:	2003e710 	.word	0x2003e710
   b629c:	2003e704 	.word	0x2003e704
   b62a0:	ffff0000 	.word	0xffff0000

000b62a4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b62a4:	4b02      	ldr	r3, [pc, #8]	; (b62b0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b62a6:	681a      	ldr	r2, [r3, #0]
   b62a8:	4b02      	ldr	r3, [pc, #8]	; (b62b4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b62aa:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b62ac:	4770      	bx	lr
   b62ae:	bf00      	nop
   b62b0:	2003e474 	.word	0x2003e474
   b62b4:	2003e714 	.word	0x2003e714

000b62b8 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b62b8:	4770      	bx	lr

000b62ba <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b62ba:	7441      	strb	r1, [r0, #17]
}
   b62bc:	4770      	bx	lr

000b62be <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b62be:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b62c0:	7c00      	ldrb	r0, [r0, #16]
   b62c2:	f7fe f925 	bl	b4510 <hal_usart_available_data_for_write>
}
   b62c6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b62ca:	bd08      	pop	{r3, pc}

000b62cc <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b62cc:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b62ce:	7c00      	ldrb	r0, [r0, #16]
   b62d0:	f7fe f8fe 	bl	b44d0 <hal_usart_available>
}
   b62d4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b62d8:	bd08      	pop	{r3, pc}

000b62da <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b62da:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b62dc:	7c00      	ldrb	r0, [r0, #16]
   b62de:	f7fe f907 	bl	b44f0 <hal_usart_peek>
}
   b62e2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b62e6:	bd08      	pop	{r3, pc}

000b62e8 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b62e8:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b62ea:	7c00      	ldrb	r0, [r0, #16]
   b62ec:	f7fe f8f8 	bl	b44e0 <hal_usart_read>
}
   b62f0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b62f4:	bd08      	pop	{r3, pc}

000b62f6 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b62f6:	7c00      	ldrb	r0, [r0, #16]
   b62f8:	f7fe b902 	b.w	b4500 <hal_usart_flush>

000b62fc <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b62fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b62fe:	7c45      	ldrb	r5, [r0, #17]
{
   b6300:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6302:	b12d      	cbz	r5, b6310 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b6304:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b6306:	b003      	add	sp, #12
   b6308:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b630c:	f7fe b8d8 	b.w	b44c0 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6310:	7c00      	ldrb	r0, [r0, #16]
   b6312:	9101      	str	r1, [sp, #4]
   b6314:	f7fe f8fc 	bl	b4510 <hal_usart_available_data_for_write>
   b6318:	2800      	cmp	r0, #0
   b631a:	9901      	ldr	r1, [sp, #4]
   b631c:	dcf2      	bgt.n	b6304 <_ZN11USARTSerial5writeEh+0x8>
}
   b631e:	4628      	mov	r0, r5
   b6320:	b003      	add	sp, #12
   b6322:	bd30      	pop	{r4, r5, pc}

000b6324 <_ZN11USARTSerialD0Ev>:
   b6324:	b510      	push	{r4, lr}
   b6326:	2114      	movs	r1, #20
   b6328:	4604      	mov	r4, r0
   b632a:	f7fd feb8 	bl	b409e <_ZdlPvj>
   b632e:	4620      	mov	r0, r4
   b6330:	bd10      	pop	{r4, pc}
	...

000b6334 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b6334:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b6336:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b633a:	4604      	mov	r4, r0
   b633c:	4608      	mov	r0, r1
   b633e:	4611      	mov	r1, r2
   b6340:	2200      	movs	r2, #0
   b6342:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b6346:	4b04      	ldr	r3, [pc, #16]	; (b6358 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b6348:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b634a:	2301      	movs	r3, #1
  _serial = serial;
   b634c:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b634e:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b6350:	f7fe f8f6 	bl	b4540 <hal_usart_init_ex>
}
   b6354:	4620      	mov	r0, r4
   b6356:	bd10      	pop	{r4, pc}
   b6358:	000b93dc 	.word	0x000b93dc

000b635c <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   b635c:	7c00      	ldrb	r0, [r0, #16]
   b635e:	2300      	movs	r3, #0
   b6360:	f7fe b8de 	b.w	b4520 <hal_usart_begin_config>

000b6364 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   b6364:	2200      	movs	r2, #0
   b6366:	f7ff bff9 	b.w	b635c <_ZN11USARTSerial5beginEmm>

000b636a <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   b636a:	7c00      	ldrb	r0, [r0, #16]
   b636c:	f7fe b8a0 	b.w	b44b0 <hal_usart_end>

000b6370 <_ZN11USARTSerial5writeEt>:

size_t USARTSerial::write(uint16_t c)
{
  return hal_usart_write_nine_bits(_serial, c);
   b6370:	7c00      	ldrb	r0, [r0, #16]
   b6372:	f7fe b8dd 	b.w	b4530 <hal_usart_write_nine_bits>

000b6376 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b6376:	7441      	strb	r1, [r0, #17]
}
   b6378:	4770      	bx	lr

000b637a <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b637a:	4770      	bx	lr

000b637c <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b637c:	4770      	bx	lr

000b637e <_ZN9USBSerial4readEv>:
{
   b637e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b6380:	2100      	movs	r1, #0
   b6382:	7c00      	ldrb	r0, [r0, #16]
   b6384:	f7fe f90c 	bl	b45a0 <HAL_USB_USART_Receive_Data>
}
   b6388:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b638c:	bd08      	pop	{r3, pc}

000b638e <_ZN9USBSerial4peekEv>:
{
   b638e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b6390:	2101      	movs	r1, #1
   b6392:	7c00      	ldrb	r0, [r0, #16]
   b6394:	f7fe f904 	bl	b45a0 <HAL_USB_USART_Receive_Data>
}
   b6398:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b639c:	bd08      	pop	{r3, pc}

000b639e <_ZN9USBSerial17availableForWriteEv>:
{
   b639e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b63a0:	7c00      	ldrb	r0, [r0, #16]
   b63a2:	f7fe f8f5 	bl	b4590 <HAL_USB_USART_Available_Data_For_Write>
}
   b63a6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b63aa:	bd08      	pop	{r3, pc}

000b63ac <_ZN9USBSerial9availableEv>:
{
   b63ac:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b63ae:	7c00      	ldrb	r0, [r0, #16]
   b63b0:	f7fe f8e6 	bl	b4580 <HAL_USB_USART_Available_Data>
}
   b63b4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b63b8:	bd08      	pop	{r3, pc}

000b63ba <_ZN9USBSerial5writeEh>:
{
   b63ba:	b513      	push	{r0, r1, r4, lr}
   b63bc:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b63be:	7c00      	ldrb	r0, [r0, #16]
{
   b63c0:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b63c2:	f7fe f8e5 	bl	b4590 <HAL_USB_USART_Available_Data_For_Write>
   b63c6:	2800      	cmp	r0, #0
   b63c8:	9901      	ldr	r1, [sp, #4]
   b63ca:	dc01      	bgt.n	b63d0 <_ZN9USBSerial5writeEh+0x16>
   b63cc:	7c60      	ldrb	r0, [r4, #17]
   b63ce:	b120      	cbz	r0, b63da <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b63d0:	7c20      	ldrb	r0, [r4, #16]
   b63d2:	f7fe f8ed 	bl	b45b0 <HAL_USB_USART_Send_Data>
   b63d6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b63da:	b002      	add	sp, #8
   b63dc:	bd10      	pop	{r4, pc}

000b63de <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b63de:	7c00      	ldrb	r0, [r0, #16]
   b63e0:	f7fe b8ee 	b.w	b45c0 <HAL_USB_USART_Flush_Data>

000b63e4 <_ZN9USBSerialD0Ev>:
   b63e4:	b510      	push	{r4, lr}
   b63e6:	2114      	movs	r1, #20
   b63e8:	4604      	mov	r4, r0
   b63ea:	f7fd fe58 	bl	b409e <_ZdlPvj>
   b63ee:	4620      	mov	r0, r4
   b63f0:	bd10      	pop	{r4, pc}
	...

000b63f4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b63f4:	b510      	push	{r4, lr}
   b63f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b63fa:	4604      	mov	r4, r0
   b63fc:	4608      	mov	r0, r1
   b63fe:	2100      	movs	r1, #0
   b6400:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b6404:	4b04      	ldr	r3, [pc, #16]	; (b6418 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b6406:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b6408:	2301      	movs	r3, #1
  _serial = serial;
   b640a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b640c:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b640e:	4611      	mov	r1, r2
   b6410:	f7fe f89e 	bl	b4550 <HAL_USB_USART_Init>
}
   b6414:	4620      	mov	r0, r4
   b6416:	bd10      	pop	{r4, pc}
   b6418:	000b940c 	.word	0x000b940c

000b641c <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b641c:	7c00      	ldrb	r0, [r0, #16]
   b641e:	2200      	movs	r2, #0
   b6420:	f7fe b89e 	b.w	b4560 <HAL_USB_USART_Begin>

000b6424 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   b6424:	7c00      	ldrb	r0, [r0, #16]
   b6426:	f7fe b8a3 	b.w	b4570 <HAL_USB_USART_End>

000b642a <_Z19acquireSerialBufferv>:
{
   b642a:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b642c:	2214      	movs	r2, #20
{
   b642e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b6430:	2100      	movs	r1, #0
   b6432:	f000 fe53 	bl	b70dc <memset>
}
   b6436:	4620      	mov	r0, r4
   b6438:	bd10      	pop	{r4, pc}
	...

000b643c <_Z16_fetch_usbserialv>:
{
   b643c:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b643e:	4c0f      	ldr	r4, [pc, #60]	; (b647c <_Z16_fetch_usbserialv+0x40>)
{
   b6440:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b6442:	a803      	add	r0, sp, #12
   b6444:	f7ff fff1 	bl	b642a <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b6448:	7821      	ldrb	r1, [r4, #0]
   b644a:	f3bf 8f5b 	dmb	ish
   b644e:	f011 0101 	ands.w	r1, r1, #1
   b6452:	d10f      	bne.n	b6474 <_Z16_fetch_usbserialv+0x38>
   b6454:	4620      	mov	r0, r4
   b6456:	9101      	str	r1, [sp, #4]
   b6458:	f7fd fe30 	bl	b40bc <__cxa_guard_acquire>
   b645c:	9901      	ldr	r1, [sp, #4]
   b645e:	b148      	cbz	r0, b6474 <_Z16_fetch_usbserialv+0x38>
   b6460:	aa03      	add	r2, sp, #12
   b6462:	4807      	ldr	r0, [pc, #28]	; (b6480 <_Z16_fetch_usbserialv+0x44>)
   b6464:	f7ff ffc6 	bl	b63f4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b6468:	4620      	mov	r0, r4
   b646a:	f7fd fe2c 	bl	b40c6 <__cxa_guard_release>
   b646e:	4805      	ldr	r0, [pc, #20]	; (b6484 <_Z16_fetch_usbserialv+0x48>)
   b6470:	f000 fdfa 	bl	b7068 <atexit>
	return _usbserial;
}
   b6474:	4802      	ldr	r0, [pc, #8]	; (b6480 <_Z16_fetch_usbserialv+0x44>)
   b6476:	b008      	add	sp, #32
   b6478:	bd10      	pop	{r4, pc}
   b647a:	bf00      	nop
   b647c:	2003e718 	.word	0x2003e718
   b6480:	2003e71c 	.word	0x2003e71c
   b6484:	000b637b 	.word	0x000b637b

000b6488 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b6488:	2200      	movs	r2, #0
   b648a:	6840      	ldr	r0, [r0, #4]
   b648c:	4611      	mov	r1, r2
   b648e:	f7fe b903 	b.w	b4698 <network_ready>

000b6492 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b6492:	2200      	movs	r2, #0
   b6494:	6840      	ldr	r0, [r0, #4]
   b6496:	4611      	mov	r1, r2
   b6498:	f7fe b91e 	b.w	b46d8 <network_listening>

000b649c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b649c:	2200      	movs	r2, #0
   b649e:	6840      	ldr	r0, [r0, #4]
   b64a0:	4611      	mov	r1, r2
   b64a2:	f7fe b929 	b.w	b46f8 <network_get_listen_timeout>

000b64a6 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b64a6:	6840      	ldr	r0, [r0, #4]
   b64a8:	2200      	movs	r2, #0
   b64aa:	f7fe b91d 	b.w	b46e8 <network_set_listen_timeout>

000b64ae <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b64ae:	6840      	ldr	r0, [r0, #4]
   b64b0:	2200      	movs	r2, #0
   b64b2:	f081 0101 	eor.w	r1, r1, #1
   b64b6:	f7fe b907 	b.w	b46c8 <network_listen>

000b64ba <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b64ba:	2300      	movs	r3, #0
   b64bc:	6840      	ldr	r0, [r0, #4]
   b64be:	461a      	mov	r2, r3
   b64c0:	4619      	mov	r1, r3
   b64c2:	f7fe b8f9 	b.w	b46b8 <network_off>

000b64c6 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b64c6:	2300      	movs	r3, #0
   b64c8:	6840      	ldr	r0, [r0, #4]
   b64ca:	461a      	mov	r2, r3
   b64cc:	4619      	mov	r1, r3
   b64ce:	f7fe b8eb 	b.w	b46a8 <network_on>

000b64d2 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b64d2:	2200      	movs	r2, #0
   b64d4:	6840      	ldr	r0, [r0, #4]
   b64d6:	4611      	mov	r1, r2
   b64d8:	f7fe b8ce 	b.w	b4678 <network_connecting>

000b64dc <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b64dc:	6840      	ldr	r0, [r0, #4]
   b64de:	2200      	movs	r2, #0
   b64e0:	2102      	movs	r1, #2
   b64e2:	f7fe b8d1 	b.w	b4688 <network_disconnect>

000b64e6 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b64e6:	2300      	movs	r3, #0
   b64e8:	6840      	ldr	r0, [r0, #4]
   b64ea:	461a      	mov	r2, r3
   b64ec:	f7fe b8bc 	b.w	b4668 <network_connect>

000b64f0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b64f0:	4b02      	ldr	r3, [pc, #8]	; (b64fc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b64f2:	2204      	movs	r2, #4
   b64f4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b64f6:	4a02      	ldr	r2, [pc, #8]	; (b6500 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b64f8:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b64fa:	4770      	bx	lr
   b64fc:	2003e730 	.word	0x2003e730
   b6500:	000b943c 	.word	0x000b943c

000b6504 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b6504:	4b01      	ldr	r3, [pc, #4]	; (b650c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b6506:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b6508:	4770      	bx	lr
   b650a:	bf00      	nop
   b650c:	2003e478 	.word	0x2003e478

000b6510 <serialEventRun>:
{
   b6510:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b6512:	4b0b      	ldr	r3, [pc, #44]	; (b6540 <serialEventRun+0x30>)
   b6514:	b143      	cbz	r3, b6528 <serialEventRun+0x18>
   b6516:	f7ff ff91 	bl	b643c <_Z16_fetch_usbserialv>
   b651a:	6803      	ldr	r3, [r0, #0]
   b651c:	691b      	ldr	r3, [r3, #16]
   b651e:	4798      	blx	r3
   b6520:	2800      	cmp	r0, #0
   b6522:	dd01      	ble.n	b6528 <serialEventRun+0x18>
        serialEvent();
   b6524:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b6528:	4b06      	ldr	r3, [pc, #24]	; (b6544 <serialEventRun+0x34>)
   b652a:	b143      	cbz	r3, b653e <serialEventRun+0x2e>
   b652c:	f000 f8a2 	bl	b6674 <_Z22__fetch_global_Serial1v>
   b6530:	6803      	ldr	r3, [r0, #0]
   b6532:	691b      	ldr	r3, [r3, #16]
   b6534:	4798      	blx	r3
   b6536:	2800      	cmp	r0, #0
   b6538:	dd01      	ble.n	b653e <serialEventRun+0x2e>
        serialEvent1();
   b653a:	f3af 8000 	nop.w
}
   b653e:	bd08      	pop	{r3, pc}
	...

000b6548 <_post_loop>:
{
   b6548:	b508      	push	{r3, lr}
	serialEventRun();
   b654a:	f7ff ffe1 	bl	b6510 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b654e:	f7fd ff8f 	bl	b4470 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b6552:	4b01      	ldr	r3, [pc, #4]	; (b6558 <_post_loop+0x10>)
   b6554:	6018      	str	r0, [r3, #0]
}
   b6556:	bd08      	pop	{r3, pc}
   b6558:	2003e740 	.word	0x2003e740

000b655c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b655c:	4805      	ldr	r0, [pc, #20]	; (b6574 <_Z33system_initialize_user_backup_ramv+0x18>)
   b655e:	4a06      	ldr	r2, [pc, #24]	; (b6578 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b6560:	4906      	ldr	r1, [pc, #24]	; (b657c <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b6562:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b6564:	1a12      	subs	r2, r2, r0
   b6566:	f000 fd91 	bl	b708c <memcpy>
    __backup_sram_signature = signature;
   b656a:	4b05      	ldr	r3, [pc, #20]	; (b6580 <_Z33system_initialize_user_backup_ramv+0x24>)
   b656c:	4a05      	ldr	r2, [pc, #20]	; (b6584 <_Z33system_initialize_user_backup_ramv+0x28>)
   b656e:	601a      	str	r2, [r3, #0]
}
   b6570:	bd08      	pop	{r3, pc}
   b6572:	bf00      	nop
   b6574:	2003f400 	.word	0x2003f400
   b6578:	2003f404 	.word	0x2003f404
   b657c:	000b9864 	.word	0x000b9864
   b6580:	2003f400 	.word	0x2003f400
   b6584:	9a271c1e 	.word	0x9a271c1e

000b6588 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b6588:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b658a:	2300      	movs	r3, #0
   b658c:	9300      	str	r3, [sp, #0]
   b658e:	461a      	mov	r2, r3
   b6590:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b6594:	f7fe f856 	bl	b4644 <system_ctrl_set_result>
}
   b6598:	b003      	add	sp, #12
   b659a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b65a0 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b65a0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b65a2:	8843      	ldrh	r3, [r0, #2]
   b65a4:	2b0a      	cmp	r3, #10
   b65a6:	d008      	beq.n	b65ba <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b65a8:	2b50      	cmp	r3, #80	; 0x50
   b65aa:	d10b      	bne.n	b65c4 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b65ac:	4b09      	ldr	r3, [pc, #36]	; (b65d4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b65ae:	681b      	ldr	r3, [r3, #0]
   b65b0:	b14b      	cbz	r3, b65c6 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b65b2:	b003      	add	sp, #12
   b65b4:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b65b8:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b65ba:	f7ff ffe5 	bl	b6588 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b65be:	b003      	add	sp, #12
   b65c0:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b65c4:	2300      	movs	r3, #0
   b65c6:	9300      	str	r3, [sp, #0]
   b65c8:	461a      	mov	r2, r3
   b65ca:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b65ce:	f7fe f839 	bl	b4644 <system_ctrl_set_result>
}
   b65d2:	e7f4      	b.n	b65be <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b65d4:	2003e73c 	.word	0x2003e73c

000b65d8 <module_user_init_hook>:
{
   b65d8:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b65da:	4812      	ldr	r0, [pc, #72]	; (b6624 <module_user_init_hook+0x4c>)
   b65dc:	2100      	movs	r1, #0
   b65de:	f7fe f8e3 	bl	b47a8 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b65e2:	4b11      	ldr	r3, [pc, #68]	; (b6628 <module_user_init_hook+0x50>)
   b65e4:	681a      	ldr	r2, [r3, #0]
   b65e6:	4b11      	ldr	r3, [pc, #68]	; (b662c <module_user_init_hook+0x54>)
   b65e8:	429a      	cmp	r2, r3
   b65ea:	4b11      	ldr	r3, [pc, #68]	; (b6630 <module_user_init_hook+0x58>)
   b65ec:	bf0c      	ite	eq
   b65ee:	2201      	moveq	r2, #1
   b65f0:	2200      	movne	r2, #0
   b65f2:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b65f4:	d001      	beq.n	b65fa <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b65f6:	f7ff ffb1 	bl	b655c <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b65fa:	f7fd ff29 	bl	b4450 <HAL_RNG_GetRandomNumber>
   b65fe:	4604      	mov	r4, r0
    srand(seed);
   b6600:	f000 fd74 	bl	b70ec <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b6604:	4b0b      	ldr	r3, [pc, #44]	; (b6634 <module_user_init_hook+0x5c>)
   b6606:	b113      	cbz	r3, b660e <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b6608:	4620      	mov	r0, r4
   b660a:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b660e:	2100      	movs	r1, #0
   b6610:	4808      	ldr	r0, [pc, #32]	; (b6634 <module_user_init_hook+0x5c>)
   b6612:	f7fe f821 	bl	b4658 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b6616:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b661a:	4807      	ldr	r0, [pc, #28]	; (b6638 <module_user_init_hook+0x60>)
   b661c:	2100      	movs	r1, #0
   b661e:	f7fe b807 	b.w	b4630 <system_ctrl_set_app_request_handler>
   b6622:	bf00      	nop
   b6624:	000b6505 	.word	0x000b6505
   b6628:	2003f400 	.word	0x2003f400
   b662c:	9a271c1e 	.word	0x9a271c1e
   b6630:	2003e738 	.word	0x2003e738
   b6634:	00000000 	.word	0x00000000
   b6638:	000b65a1 	.word	0x000b65a1

000b663c <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b663c:	4770      	bx	lr
	...

000b6640 <_Z20acquireSerial1Bufferv>:
{
   b6640:	b538      	push	{r3, r4, r5, lr}
   b6642:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b6644:	2514      	movs	r5, #20
   b6646:	462a      	mov	r2, r5
   b6648:	2100      	movs	r1, #0
   b664a:	f000 fd47 	bl	b70dc <memset>
   b664e:	8025      	strh	r5, [r4, #0]
   b6650:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6652:	4907      	ldr	r1, [pc, #28]	; (b6670 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b6654:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6656:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b6658:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b665a:	f000 f831 	bl	b66c0 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b665e:	4904      	ldr	r1, [pc, #16]	; (b6670 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b6660:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6662:	4628      	mov	r0, r5
   b6664:	f000 f82c 	bl	b66c0 <_ZnajRKSt9nothrow_t>
    };
   b6668:	60e0      	str	r0, [r4, #12]
}
   b666a:	4620      	mov	r0, r4
   b666c:	bd38      	pop	{r3, r4, r5, pc}
   b666e:	bf00      	nop
   b6670:	000b9470 	.word	0x000b9470

000b6674 <_Z22__fetch_global_Serial1v>:
{
   b6674:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b6676:	4d0e      	ldr	r5, [pc, #56]	; (b66b0 <_Z22__fetch_global_Serial1v+0x3c>)
   b6678:	7829      	ldrb	r1, [r5, #0]
   b667a:	f3bf 8f5b 	dmb	ish
   b667e:	f011 0401 	ands.w	r4, r1, #1
{
   b6682:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b6684:	d111      	bne.n	b66aa <_Z22__fetch_global_Serial1v+0x36>
   b6686:	4628      	mov	r0, r5
   b6688:	f7fd fd18 	bl	b40bc <__cxa_guard_acquire>
   b668c:	b168      	cbz	r0, b66aa <_Z22__fetch_global_Serial1v+0x36>
   b668e:	a801      	add	r0, sp, #4
   b6690:	f7ff ffd6 	bl	b6640 <_Z20acquireSerial1Bufferv>
   b6694:	aa01      	add	r2, sp, #4
   b6696:	4621      	mov	r1, r4
   b6698:	4806      	ldr	r0, [pc, #24]	; (b66b4 <_Z22__fetch_global_Serial1v+0x40>)
   b669a:	f7ff fe4b 	bl	b6334 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b669e:	4628      	mov	r0, r5
   b66a0:	f7fd fd11 	bl	b40c6 <__cxa_guard_release>
   b66a4:	4804      	ldr	r0, [pc, #16]	; (b66b8 <_Z22__fetch_global_Serial1v+0x44>)
   b66a6:	f000 fcdf 	bl	b7068 <atexit>
    return serial1;
}
   b66aa:	4802      	ldr	r0, [pc, #8]	; (b66b4 <_Z22__fetch_global_Serial1v+0x40>)
   b66ac:	b007      	add	sp, #28
   b66ae:	bd30      	pop	{r4, r5, pc}
   b66b0:	2003e744 	.word	0x2003e744
   b66b4:	2003e748 	.word	0x2003e748
   b66b8:	000b663d 	.word	0x000b663d

000b66bc <_ZnwjRKSt9nothrow_t>:
   b66bc:	f7fd bceb 	b.w	b4096 <_Znwj>

000b66c0 <_ZnajRKSt9nothrow_t>:
   b66c0:	f7fd bceb 	b.w	b409a <_Znaj>

000b66c4 <__aeabi_drsub>:
   b66c4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b66c8:	e002      	b.n	b66d0 <__adddf3>
   b66ca:	bf00      	nop

000b66cc <__aeabi_dsub>:
   b66cc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b66d0 <__adddf3>:
   b66d0:	b530      	push	{r4, r5, lr}
   b66d2:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b66d6:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b66da:	ea94 0f05 	teq	r4, r5
   b66de:	bf08      	it	eq
   b66e0:	ea90 0f02 	teqeq	r0, r2
   b66e4:	bf1f      	itttt	ne
   b66e6:	ea54 0c00 	orrsne.w	ip, r4, r0
   b66ea:	ea55 0c02 	orrsne.w	ip, r5, r2
   b66ee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b66f2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b66f6:	f000 80e2 	beq.w	b68be <__adddf3+0x1ee>
   b66fa:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b66fe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b6702:	bfb8      	it	lt
   b6704:	426d      	neglt	r5, r5
   b6706:	dd0c      	ble.n	b6722 <__adddf3+0x52>
   b6708:	442c      	add	r4, r5
   b670a:	ea80 0202 	eor.w	r2, r0, r2
   b670e:	ea81 0303 	eor.w	r3, r1, r3
   b6712:	ea82 0000 	eor.w	r0, r2, r0
   b6716:	ea83 0101 	eor.w	r1, r3, r1
   b671a:	ea80 0202 	eor.w	r2, r0, r2
   b671e:	ea81 0303 	eor.w	r3, r1, r3
   b6722:	2d36      	cmp	r5, #54	; 0x36
   b6724:	bf88      	it	hi
   b6726:	bd30      	pophi	{r4, r5, pc}
   b6728:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b672c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b6730:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b6734:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b6738:	d002      	beq.n	b6740 <__adddf3+0x70>
   b673a:	4240      	negs	r0, r0
   b673c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b6740:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b6744:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b6748:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b674c:	d002      	beq.n	b6754 <__adddf3+0x84>
   b674e:	4252      	negs	r2, r2
   b6750:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b6754:	ea94 0f05 	teq	r4, r5
   b6758:	f000 80a7 	beq.w	b68aa <__adddf3+0x1da>
   b675c:	f1a4 0401 	sub.w	r4, r4, #1
   b6760:	f1d5 0e20 	rsbs	lr, r5, #32
   b6764:	db0d      	blt.n	b6782 <__adddf3+0xb2>
   b6766:	fa02 fc0e 	lsl.w	ip, r2, lr
   b676a:	fa22 f205 	lsr.w	r2, r2, r5
   b676e:	1880      	adds	r0, r0, r2
   b6770:	f141 0100 	adc.w	r1, r1, #0
   b6774:	fa03 f20e 	lsl.w	r2, r3, lr
   b6778:	1880      	adds	r0, r0, r2
   b677a:	fa43 f305 	asr.w	r3, r3, r5
   b677e:	4159      	adcs	r1, r3
   b6780:	e00e      	b.n	b67a0 <__adddf3+0xd0>
   b6782:	f1a5 0520 	sub.w	r5, r5, #32
   b6786:	f10e 0e20 	add.w	lr, lr, #32
   b678a:	2a01      	cmp	r2, #1
   b678c:	fa03 fc0e 	lsl.w	ip, r3, lr
   b6790:	bf28      	it	cs
   b6792:	f04c 0c02 	orrcs.w	ip, ip, #2
   b6796:	fa43 f305 	asr.w	r3, r3, r5
   b679a:	18c0      	adds	r0, r0, r3
   b679c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b67a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b67a4:	d507      	bpl.n	b67b6 <__adddf3+0xe6>
   b67a6:	f04f 0e00 	mov.w	lr, #0
   b67aa:	f1dc 0c00 	rsbs	ip, ip, #0
   b67ae:	eb7e 0000 	sbcs.w	r0, lr, r0
   b67b2:	eb6e 0101 	sbc.w	r1, lr, r1
   b67b6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b67ba:	d31b      	bcc.n	b67f4 <__adddf3+0x124>
   b67bc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b67c0:	d30c      	bcc.n	b67dc <__adddf3+0x10c>
   b67c2:	0849      	lsrs	r1, r1, #1
   b67c4:	ea5f 0030 	movs.w	r0, r0, rrx
   b67c8:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b67cc:	f104 0401 	add.w	r4, r4, #1
   b67d0:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b67d4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b67d8:	f080 809a 	bcs.w	b6910 <__adddf3+0x240>
   b67dc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b67e0:	bf08      	it	eq
   b67e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b67e6:	f150 0000 	adcs.w	r0, r0, #0
   b67ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b67ee:	ea41 0105 	orr.w	r1, r1, r5
   b67f2:	bd30      	pop	{r4, r5, pc}
   b67f4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b67f8:	4140      	adcs	r0, r0
   b67fa:	eb41 0101 	adc.w	r1, r1, r1
   b67fe:	3c01      	subs	r4, #1
   b6800:	bf28      	it	cs
   b6802:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b6806:	d2e9      	bcs.n	b67dc <__adddf3+0x10c>
   b6808:	f091 0f00 	teq	r1, #0
   b680c:	bf04      	itt	eq
   b680e:	4601      	moveq	r1, r0
   b6810:	2000      	moveq	r0, #0
   b6812:	fab1 f381 	clz	r3, r1
   b6816:	bf08      	it	eq
   b6818:	3320      	addeq	r3, #32
   b681a:	f1a3 030b 	sub.w	r3, r3, #11
   b681e:	f1b3 0220 	subs.w	r2, r3, #32
   b6822:	da0c      	bge.n	b683e <__adddf3+0x16e>
   b6824:	320c      	adds	r2, #12
   b6826:	dd08      	ble.n	b683a <__adddf3+0x16a>
   b6828:	f102 0c14 	add.w	ip, r2, #20
   b682c:	f1c2 020c 	rsb	r2, r2, #12
   b6830:	fa01 f00c 	lsl.w	r0, r1, ip
   b6834:	fa21 f102 	lsr.w	r1, r1, r2
   b6838:	e00c      	b.n	b6854 <__adddf3+0x184>
   b683a:	f102 0214 	add.w	r2, r2, #20
   b683e:	bfd8      	it	le
   b6840:	f1c2 0c20 	rsble	ip, r2, #32
   b6844:	fa01 f102 	lsl.w	r1, r1, r2
   b6848:	fa20 fc0c 	lsr.w	ip, r0, ip
   b684c:	bfdc      	itt	le
   b684e:	ea41 010c 	orrle.w	r1, r1, ip
   b6852:	4090      	lslle	r0, r2
   b6854:	1ae4      	subs	r4, r4, r3
   b6856:	bfa2      	ittt	ge
   b6858:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b685c:	4329      	orrge	r1, r5
   b685e:	bd30      	popge	{r4, r5, pc}
   b6860:	ea6f 0404 	mvn.w	r4, r4
   b6864:	3c1f      	subs	r4, #31
   b6866:	da1c      	bge.n	b68a2 <__adddf3+0x1d2>
   b6868:	340c      	adds	r4, #12
   b686a:	dc0e      	bgt.n	b688a <__adddf3+0x1ba>
   b686c:	f104 0414 	add.w	r4, r4, #20
   b6870:	f1c4 0220 	rsb	r2, r4, #32
   b6874:	fa20 f004 	lsr.w	r0, r0, r4
   b6878:	fa01 f302 	lsl.w	r3, r1, r2
   b687c:	ea40 0003 	orr.w	r0, r0, r3
   b6880:	fa21 f304 	lsr.w	r3, r1, r4
   b6884:	ea45 0103 	orr.w	r1, r5, r3
   b6888:	bd30      	pop	{r4, r5, pc}
   b688a:	f1c4 040c 	rsb	r4, r4, #12
   b688e:	f1c4 0220 	rsb	r2, r4, #32
   b6892:	fa20 f002 	lsr.w	r0, r0, r2
   b6896:	fa01 f304 	lsl.w	r3, r1, r4
   b689a:	ea40 0003 	orr.w	r0, r0, r3
   b689e:	4629      	mov	r1, r5
   b68a0:	bd30      	pop	{r4, r5, pc}
   b68a2:	fa21 f004 	lsr.w	r0, r1, r4
   b68a6:	4629      	mov	r1, r5
   b68a8:	bd30      	pop	{r4, r5, pc}
   b68aa:	f094 0f00 	teq	r4, #0
   b68ae:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b68b2:	bf06      	itte	eq
   b68b4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b68b8:	3401      	addeq	r4, #1
   b68ba:	3d01      	subne	r5, #1
   b68bc:	e74e      	b.n	b675c <__adddf3+0x8c>
   b68be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b68c2:	bf18      	it	ne
   b68c4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b68c8:	d029      	beq.n	b691e <__adddf3+0x24e>
   b68ca:	ea94 0f05 	teq	r4, r5
   b68ce:	bf08      	it	eq
   b68d0:	ea90 0f02 	teqeq	r0, r2
   b68d4:	d005      	beq.n	b68e2 <__adddf3+0x212>
   b68d6:	ea54 0c00 	orrs.w	ip, r4, r0
   b68da:	bf04      	itt	eq
   b68dc:	4619      	moveq	r1, r3
   b68de:	4610      	moveq	r0, r2
   b68e0:	bd30      	pop	{r4, r5, pc}
   b68e2:	ea91 0f03 	teq	r1, r3
   b68e6:	bf1e      	ittt	ne
   b68e8:	2100      	movne	r1, #0
   b68ea:	2000      	movne	r0, #0
   b68ec:	bd30      	popne	{r4, r5, pc}
   b68ee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b68f2:	d105      	bne.n	b6900 <__adddf3+0x230>
   b68f4:	0040      	lsls	r0, r0, #1
   b68f6:	4149      	adcs	r1, r1
   b68f8:	bf28      	it	cs
   b68fa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b68fe:	bd30      	pop	{r4, r5, pc}
   b6900:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b6904:	bf3c      	itt	cc
   b6906:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b690a:	bd30      	popcc	{r4, r5, pc}
   b690c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b6910:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b6914:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b6918:	f04f 0000 	mov.w	r0, #0
   b691c:	bd30      	pop	{r4, r5, pc}
   b691e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b6922:	bf1a      	itte	ne
   b6924:	4619      	movne	r1, r3
   b6926:	4610      	movne	r0, r2
   b6928:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b692c:	bf1c      	itt	ne
   b692e:	460b      	movne	r3, r1
   b6930:	4602      	movne	r2, r0
   b6932:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b6936:	bf06      	itte	eq
   b6938:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b693c:	ea91 0f03 	teqeq	r1, r3
   b6940:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b6944:	bd30      	pop	{r4, r5, pc}
   b6946:	bf00      	nop

000b6948 <__aeabi_ui2d>:
   b6948:	f090 0f00 	teq	r0, #0
   b694c:	bf04      	itt	eq
   b694e:	2100      	moveq	r1, #0
   b6950:	4770      	bxeq	lr
   b6952:	b530      	push	{r4, r5, lr}
   b6954:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b6958:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b695c:	f04f 0500 	mov.w	r5, #0
   b6960:	f04f 0100 	mov.w	r1, #0
   b6964:	e750      	b.n	b6808 <__adddf3+0x138>
   b6966:	bf00      	nop

000b6968 <__aeabi_i2d>:
   b6968:	f090 0f00 	teq	r0, #0
   b696c:	bf04      	itt	eq
   b696e:	2100      	moveq	r1, #0
   b6970:	4770      	bxeq	lr
   b6972:	b530      	push	{r4, r5, lr}
   b6974:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b6978:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b697c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b6980:	bf48      	it	mi
   b6982:	4240      	negmi	r0, r0
   b6984:	f04f 0100 	mov.w	r1, #0
   b6988:	e73e      	b.n	b6808 <__adddf3+0x138>
   b698a:	bf00      	nop

000b698c <__aeabi_f2d>:
   b698c:	0042      	lsls	r2, r0, #1
   b698e:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b6992:	ea4f 0131 	mov.w	r1, r1, rrx
   b6996:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b699a:	bf1f      	itttt	ne
   b699c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b69a0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b69a4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b69a8:	4770      	bxne	lr
   b69aa:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b69ae:	bf08      	it	eq
   b69b0:	4770      	bxeq	lr
   b69b2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b69b6:	bf04      	itt	eq
   b69b8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b69bc:	4770      	bxeq	lr
   b69be:	b530      	push	{r4, r5, lr}
   b69c0:	f44f 7460 	mov.w	r4, #896	; 0x380
   b69c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b69c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b69cc:	e71c      	b.n	b6808 <__adddf3+0x138>
   b69ce:	bf00      	nop

000b69d0 <__aeabi_ul2d>:
   b69d0:	ea50 0201 	orrs.w	r2, r0, r1
   b69d4:	bf08      	it	eq
   b69d6:	4770      	bxeq	lr
   b69d8:	b530      	push	{r4, r5, lr}
   b69da:	f04f 0500 	mov.w	r5, #0
   b69de:	e00a      	b.n	b69f6 <__aeabi_l2d+0x16>

000b69e0 <__aeabi_l2d>:
   b69e0:	ea50 0201 	orrs.w	r2, r0, r1
   b69e4:	bf08      	it	eq
   b69e6:	4770      	bxeq	lr
   b69e8:	b530      	push	{r4, r5, lr}
   b69ea:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b69ee:	d502      	bpl.n	b69f6 <__aeabi_l2d+0x16>
   b69f0:	4240      	negs	r0, r0
   b69f2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b69f6:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b69fa:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b69fe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b6a02:	f43f aed8 	beq.w	b67b6 <__adddf3+0xe6>
   b6a06:	f04f 0203 	mov.w	r2, #3
   b6a0a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b6a0e:	bf18      	it	ne
   b6a10:	3203      	addne	r2, #3
   b6a12:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b6a16:	bf18      	it	ne
   b6a18:	3203      	addne	r2, #3
   b6a1a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b6a1e:	f1c2 0320 	rsb	r3, r2, #32
   b6a22:	fa00 fc03 	lsl.w	ip, r0, r3
   b6a26:	fa20 f002 	lsr.w	r0, r0, r2
   b6a2a:	fa01 fe03 	lsl.w	lr, r1, r3
   b6a2e:	ea40 000e 	orr.w	r0, r0, lr
   b6a32:	fa21 f102 	lsr.w	r1, r1, r2
   b6a36:	4414      	add	r4, r2
   b6a38:	e6bd      	b.n	b67b6 <__adddf3+0xe6>
   b6a3a:	bf00      	nop

000b6a3c <__aeabi_dmul>:
   b6a3c:	b570      	push	{r4, r5, r6, lr}
   b6a3e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b6a42:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b6a46:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b6a4a:	bf1d      	ittte	ne
   b6a4c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b6a50:	ea94 0f0c 	teqne	r4, ip
   b6a54:	ea95 0f0c 	teqne	r5, ip
   b6a58:	f000 f8de 	bleq	b6c18 <__aeabi_dmul+0x1dc>
   b6a5c:	442c      	add	r4, r5
   b6a5e:	ea81 0603 	eor.w	r6, r1, r3
   b6a62:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b6a66:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b6a6a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b6a6e:	bf18      	it	ne
   b6a70:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b6a74:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b6a78:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b6a7c:	d038      	beq.n	b6af0 <__aeabi_dmul+0xb4>
   b6a7e:	fba0 ce02 	umull	ip, lr, r0, r2
   b6a82:	f04f 0500 	mov.w	r5, #0
   b6a86:	fbe1 e502 	umlal	lr, r5, r1, r2
   b6a8a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b6a8e:	fbe0 e503 	umlal	lr, r5, r0, r3
   b6a92:	f04f 0600 	mov.w	r6, #0
   b6a96:	fbe1 5603 	umlal	r5, r6, r1, r3
   b6a9a:	f09c 0f00 	teq	ip, #0
   b6a9e:	bf18      	it	ne
   b6aa0:	f04e 0e01 	orrne.w	lr, lr, #1
   b6aa4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b6aa8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b6aac:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b6ab0:	d204      	bcs.n	b6abc <__aeabi_dmul+0x80>
   b6ab2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b6ab6:	416d      	adcs	r5, r5
   b6ab8:	eb46 0606 	adc.w	r6, r6, r6
   b6abc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b6ac0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b6ac4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b6ac8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b6acc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b6ad0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b6ad4:	bf88      	it	hi
   b6ad6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b6ada:	d81e      	bhi.n	b6b1a <__aeabi_dmul+0xde>
   b6adc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b6ae0:	bf08      	it	eq
   b6ae2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b6ae6:	f150 0000 	adcs.w	r0, r0, #0
   b6aea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b6aee:	bd70      	pop	{r4, r5, r6, pc}
   b6af0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b6af4:	ea46 0101 	orr.w	r1, r6, r1
   b6af8:	ea40 0002 	orr.w	r0, r0, r2
   b6afc:	ea81 0103 	eor.w	r1, r1, r3
   b6b00:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b6b04:	bfc2      	ittt	gt
   b6b06:	ebd4 050c 	rsbsgt	r5, r4, ip
   b6b0a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b6b0e:	bd70      	popgt	{r4, r5, r6, pc}
   b6b10:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b6b14:	f04f 0e00 	mov.w	lr, #0
   b6b18:	3c01      	subs	r4, #1
   b6b1a:	f300 80ab 	bgt.w	b6c74 <__aeabi_dmul+0x238>
   b6b1e:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b6b22:	bfde      	ittt	le
   b6b24:	2000      	movle	r0, #0
   b6b26:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b6b2a:	bd70      	pople	{r4, r5, r6, pc}
   b6b2c:	f1c4 0400 	rsb	r4, r4, #0
   b6b30:	3c20      	subs	r4, #32
   b6b32:	da35      	bge.n	b6ba0 <__aeabi_dmul+0x164>
   b6b34:	340c      	adds	r4, #12
   b6b36:	dc1b      	bgt.n	b6b70 <__aeabi_dmul+0x134>
   b6b38:	f104 0414 	add.w	r4, r4, #20
   b6b3c:	f1c4 0520 	rsb	r5, r4, #32
   b6b40:	fa00 f305 	lsl.w	r3, r0, r5
   b6b44:	fa20 f004 	lsr.w	r0, r0, r4
   b6b48:	fa01 f205 	lsl.w	r2, r1, r5
   b6b4c:	ea40 0002 	orr.w	r0, r0, r2
   b6b50:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b6b54:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b6b58:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b6b5c:	fa21 f604 	lsr.w	r6, r1, r4
   b6b60:	eb42 0106 	adc.w	r1, r2, r6
   b6b64:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b6b68:	bf08      	it	eq
   b6b6a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b6b6e:	bd70      	pop	{r4, r5, r6, pc}
   b6b70:	f1c4 040c 	rsb	r4, r4, #12
   b6b74:	f1c4 0520 	rsb	r5, r4, #32
   b6b78:	fa00 f304 	lsl.w	r3, r0, r4
   b6b7c:	fa20 f005 	lsr.w	r0, r0, r5
   b6b80:	fa01 f204 	lsl.w	r2, r1, r4
   b6b84:	ea40 0002 	orr.w	r0, r0, r2
   b6b88:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b6b8c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b6b90:	f141 0100 	adc.w	r1, r1, #0
   b6b94:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b6b98:	bf08      	it	eq
   b6b9a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b6b9e:	bd70      	pop	{r4, r5, r6, pc}
   b6ba0:	f1c4 0520 	rsb	r5, r4, #32
   b6ba4:	fa00 f205 	lsl.w	r2, r0, r5
   b6ba8:	ea4e 0e02 	orr.w	lr, lr, r2
   b6bac:	fa20 f304 	lsr.w	r3, r0, r4
   b6bb0:	fa01 f205 	lsl.w	r2, r1, r5
   b6bb4:	ea43 0302 	orr.w	r3, r3, r2
   b6bb8:	fa21 f004 	lsr.w	r0, r1, r4
   b6bbc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b6bc0:	fa21 f204 	lsr.w	r2, r1, r4
   b6bc4:	ea20 0002 	bic.w	r0, r0, r2
   b6bc8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b6bcc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b6bd0:	bf08      	it	eq
   b6bd2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b6bd6:	bd70      	pop	{r4, r5, r6, pc}
   b6bd8:	f094 0f00 	teq	r4, #0
   b6bdc:	d10f      	bne.n	b6bfe <__aeabi_dmul+0x1c2>
   b6bde:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b6be2:	0040      	lsls	r0, r0, #1
   b6be4:	eb41 0101 	adc.w	r1, r1, r1
   b6be8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b6bec:	bf08      	it	eq
   b6bee:	3c01      	subeq	r4, #1
   b6bf0:	d0f7      	beq.n	b6be2 <__aeabi_dmul+0x1a6>
   b6bf2:	ea41 0106 	orr.w	r1, r1, r6
   b6bf6:	f095 0f00 	teq	r5, #0
   b6bfa:	bf18      	it	ne
   b6bfc:	4770      	bxne	lr
   b6bfe:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b6c02:	0052      	lsls	r2, r2, #1
   b6c04:	eb43 0303 	adc.w	r3, r3, r3
   b6c08:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b6c0c:	bf08      	it	eq
   b6c0e:	3d01      	subeq	r5, #1
   b6c10:	d0f7      	beq.n	b6c02 <__aeabi_dmul+0x1c6>
   b6c12:	ea43 0306 	orr.w	r3, r3, r6
   b6c16:	4770      	bx	lr
   b6c18:	ea94 0f0c 	teq	r4, ip
   b6c1c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b6c20:	bf18      	it	ne
   b6c22:	ea95 0f0c 	teqne	r5, ip
   b6c26:	d00c      	beq.n	b6c42 <__aeabi_dmul+0x206>
   b6c28:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b6c2c:	bf18      	it	ne
   b6c2e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b6c32:	d1d1      	bne.n	b6bd8 <__aeabi_dmul+0x19c>
   b6c34:	ea81 0103 	eor.w	r1, r1, r3
   b6c38:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b6c3c:	f04f 0000 	mov.w	r0, #0
   b6c40:	bd70      	pop	{r4, r5, r6, pc}
   b6c42:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b6c46:	bf06      	itte	eq
   b6c48:	4610      	moveq	r0, r2
   b6c4a:	4619      	moveq	r1, r3
   b6c4c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b6c50:	d019      	beq.n	b6c86 <__aeabi_dmul+0x24a>
   b6c52:	ea94 0f0c 	teq	r4, ip
   b6c56:	d102      	bne.n	b6c5e <__aeabi_dmul+0x222>
   b6c58:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b6c5c:	d113      	bne.n	b6c86 <__aeabi_dmul+0x24a>
   b6c5e:	ea95 0f0c 	teq	r5, ip
   b6c62:	d105      	bne.n	b6c70 <__aeabi_dmul+0x234>
   b6c64:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b6c68:	bf1c      	itt	ne
   b6c6a:	4610      	movne	r0, r2
   b6c6c:	4619      	movne	r1, r3
   b6c6e:	d10a      	bne.n	b6c86 <__aeabi_dmul+0x24a>
   b6c70:	ea81 0103 	eor.w	r1, r1, r3
   b6c74:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b6c78:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b6c7c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b6c80:	f04f 0000 	mov.w	r0, #0
   b6c84:	bd70      	pop	{r4, r5, r6, pc}
   b6c86:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b6c8a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b6c8e:	bd70      	pop	{r4, r5, r6, pc}

000b6c90 <__aeabi_ddiv>:
   b6c90:	b570      	push	{r4, r5, r6, lr}
   b6c92:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b6c96:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b6c9a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b6c9e:	bf1d      	ittte	ne
   b6ca0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b6ca4:	ea94 0f0c 	teqne	r4, ip
   b6ca8:	ea95 0f0c 	teqne	r5, ip
   b6cac:	f000 f8a7 	bleq	b6dfe <__aeabi_ddiv+0x16e>
   b6cb0:	eba4 0405 	sub.w	r4, r4, r5
   b6cb4:	ea81 0e03 	eor.w	lr, r1, r3
   b6cb8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b6cbc:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b6cc0:	f000 8088 	beq.w	b6dd4 <__aeabi_ddiv+0x144>
   b6cc4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b6cc8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b6ccc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b6cd0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b6cd4:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b6cd8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b6cdc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b6ce0:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b6ce4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b6ce8:	429d      	cmp	r5, r3
   b6cea:	bf08      	it	eq
   b6cec:	4296      	cmpeq	r6, r2
   b6cee:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b6cf2:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b6cf6:	d202      	bcs.n	b6cfe <__aeabi_ddiv+0x6e>
   b6cf8:	085b      	lsrs	r3, r3, #1
   b6cfa:	ea4f 0232 	mov.w	r2, r2, rrx
   b6cfe:	1ab6      	subs	r6, r6, r2
   b6d00:	eb65 0503 	sbc.w	r5, r5, r3
   b6d04:	085b      	lsrs	r3, r3, #1
   b6d06:	ea4f 0232 	mov.w	r2, r2, rrx
   b6d0a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b6d0e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b6d12:	ebb6 0e02 	subs.w	lr, r6, r2
   b6d16:	eb75 0e03 	sbcs.w	lr, r5, r3
   b6d1a:	bf22      	ittt	cs
   b6d1c:	1ab6      	subcs	r6, r6, r2
   b6d1e:	4675      	movcs	r5, lr
   b6d20:	ea40 000c 	orrcs.w	r0, r0, ip
   b6d24:	085b      	lsrs	r3, r3, #1
   b6d26:	ea4f 0232 	mov.w	r2, r2, rrx
   b6d2a:	ebb6 0e02 	subs.w	lr, r6, r2
   b6d2e:	eb75 0e03 	sbcs.w	lr, r5, r3
   b6d32:	bf22      	ittt	cs
   b6d34:	1ab6      	subcs	r6, r6, r2
   b6d36:	4675      	movcs	r5, lr
   b6d38:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b6d3c:	085b      	lsrs	r3, r3, #1
   b6d3e:	ea4f 0232 	mov.w	r2, r2, rrx
   b6d42:	ebb6 0e02 	subs.w	lr, r6, r2
   b6d46:	eb75 0e03 	sbcs.w	lr, r5, r3
   b6d4a:	bf22      	ittt	cs
   b6d4c:	1ab6      	subcs	r6, r6, r2
   b6d4e:	4675      	movcs	r5, lr
   b6d50:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b6d54:	085b      	lsrs	r3, r3, #1
   b6d56:	ea4f 0232 	mov.w	r2, r2, rrx
   b6d5a:	ebb6 0e02 	subs.w	lr, r6, r2
   b6d5e:	eb75 0e03 	sbcs.w	lr, r5, r3
   b6d62:	bf22      	ittt	cs
   b6d64:	1ab6      	subcs	r6, r6, r2
   b6d66:	4675      	movcs	r5, lr
   b6d68:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b6d6c:	ea55 0e06 	orrs.w	lr, r5, r6
   b6d70:	d018      	beq.n	b6da4 <__aeabi_ddiv+0x114>
   b6d72:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b6d76:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b6d7a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b6d7e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b6d82:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b6d86:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b6d8a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b6d8e:	d1c0      	bne.n	b6d12 <__aeabi_ddiv+0x82>
   b6d90:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b6d94:	d10b      	bne.n	b6dae <__aeabi_ddiv+0x11e>
   b6d96:	ea41 0100 	orr.w	r1, r1, r0
   b6d9a:	f04f 0000 	mov.w	r0, #0
   b6d9e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b6da2:	e7b6      	b.n	b6d12 <__aeabi_ddiv+0x82>
   b6da4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b6da8:	bf04      	itt	eq
   b6daa:	4301      	orreq	r1, r0
   b6dac:	2000      	moveq	r0, #0
   b6dae:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b6db2:	bf88      	it	hi
   b6db4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b6db8:	f63f aeaf 	bhi.w	b6b1a <__aeabi_dmul+0xde>
   b6dbc:	ebb5 0c03 	subs.w	ip, r5, r3
   b6dc0:	bf04      	itt	eq
   b6dc2:	ebb6 0c02 	subseq.w	ip, r6, r2
   b6dc6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b6dca:	f150 0000 	adcs.w	r0, r0, #0
   b6dce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b6dd2:	bd70      	pop	{r4, r5, r6, pc}
   b6dd4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b6dd8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b6ddc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b6de0:	bfc2      	ittt	gt
   b6de2:	ebd4 050c 	rsbsgt	r5, r4, ip
   b6de6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b6dea:	bd70      	popgt	{r4, r5, r6, pc}
   b6dec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b6df0:	f04f 0e00 	mov.w	lr, #0
   b6df4:	3c01      	subs	r4, #1
   b6df6:	e690      	b.n	b6b1a <__aeabi_dmul+0xde>
   b6df8:	ea45 0e06 	orr.w	lr, r5, r6
   b6dfc:	e68d      	b.n	b6b1a <__aeabi_dmul+0xde>
   b6dfe:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b6e02:	ea94 0f0c 	teq	r4, ip
   b6e06:	bf08      	it	eq
   b6e08:	ea95 0f0c 	teqeq	r5, ip
   b6e0c:	f43f af3b 	beq.w	b6c86 <__aeabi_dmul+0x24a>
   b6e10:	ea94 0f0c 	teq	r4, ip
   b6e14:	d10a      	bne.n	b6e2c <__aeabi_ddiv+0x19c>
   b6e16:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b6e1a:	f47f af34 	bne.w	b6c86 <__aeabi_dmul+0x24a>
   b6e1e:	ea95 0f0c 	teq	r5, ip
   b6e22:	f47f af25 	bne.w	b6c70 <__aeabi_dmul+0x234>
   b6e26:	4610      	mov	r0, r2
   b6e28:	4619      	mov	r1, r3
   b6e2a:	e72c      	b.n	b6c86 <__aeabi_dmul+0x24a>
   b6e2c:	ea95 0f0c 	teq	r5, ip
   b6e30:	d106      	bne.n	b6e40 <__aeabi_ddiv+0x1b0>
   b6e32:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b6e36:	f43f aefd 	beq.w	b6c34 <__aeabi_dmul+0x1f8>
   b6e3a:	4610      	mov	r0, r2
   b6e3c:	4619      	mov	r1, r3
   b6e3e:	e722      	b.n	b6c86 <__aeabi_dmul+0x24a>
   b6e40:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b6e44:	bf18      	it	ne
   b6e46:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b6e4a:	f47f aec5 	bne.w	b6bd8 <__aeabi_dmul+0x19c>
   b6e4e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b6e52:	f47f af0d 	bne.w	b6c70 <__aeabi_dmul+0x234>
   b6e56:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b6e5a:	f47f aeeb 	bne.w	b6c34 <__aeabi_dmul+0x1f8>
   b6e5e:	e712      	b.n	b6c86 <__aeabi_dmul+0x24a>

000b6e60 <__gedf2>:
   b6e60:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   b6e64:	e006      	b.n	b6e74 <__cmpdf2+0x4>
   b6e66:	bf00      	nop

000b6e68 <__ledf2>:
   b6e68:	f04f 0c01 	mov.w	ip, #1
   b6e6c:	e002      	b.n	b6e74 <__cmpdf2+0x4>
   b6e6e:	bf00      	nop

000b6e70 <__cmpdf2>:
   b6e70:	f04f 0c01 	mov.w	ip, #1
   b6e74:	f84d cd04 	str.w	ip, [sp, #-4]!
   b6e78:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b6e7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b6e80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b6e84:	bf18      	it	ne
   b6e86:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   b6e8a:	d01b      	beq.n	b6ec4 <__cmpdf2+0x54>
   b6e8c:	b001      	add	sp, #4
   b6e8e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   b6e92:	bf0c      	ite	eq
   b6e94:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   b6e98:	ea91 0f03 	teqne	r1, r3
   b6e9c:	bf02      	ittt	eq
   b6e9e:	ea90 0f02 	teqeq	r0, r2
   b6ea2:	2000      	moveq	r0, #0
   b6ea4:	4770      	bxeq	lr
   b6ea6:	f110 0f00 	cmn.w	r0, #0
   b6eaa:	ea91 0f03 	teq	r1, r3
   b6eae:	bf58      	it	pl
   b6eb0:	4299      	cmppl	r1, r3
   b6eb2:	bf08      	it	eq
   b6eb4:	4290      	cmpeq	r0, r2
   b6eb6:	bf2c      	ite	cs
   b6eb8:	17d8      	asrcs	r0, r3, #31
   b6eba:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   b6ebe:	f040 0001 	orr.w	r0, r0, #1
   b6ec2:	4770      	bx	lr
   b6ec4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b6ec8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b6ecc:	d102      	bne.n	b6ed4 <__cmpdf2+0x64>
   b6ece:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b6ed2:	d107      	bne.n	b6ee4 <__cmpdf2+0x74>
   b6ed4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b6ed8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b6edc:	d1d6      	bne.n	b6e8c <__cmpdf2+0x1c>
   b6ede:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b6ee2:	d0d3      	beq.n	b6e8c <__cmpdf2+0x1c>
   b6ee4:	f85d 0b04 	ldr.w	r0, [sp], #4
   b6ee8:	4770      	bx	lr
   b6eea:	bf00      	nop

000b6eec <__aeabi_cdrcmple>:
   b6eec:	4684      	mov	ip, r0
   b6eee:	4610      	mov	r0, r2
   b6ef0:	4662      	mov	r2, ip
   b6ef2:	468c      	mov	ip, r1
   b6ef4:	4619      	mov	r1, r3
   b6ef6:	4663      	mov	r3, ip
   b6ef8:	e000      	b.n	b6efc <__aeabi_cdcmpeq>
   b6efa:	bf00      	nop

000b6efc <__aeabi_cdcmpeq>:
   b6efc:	b501      	push	{r0, lr}
   b6efe:	f7ff ffb7 	bl	b6e70 <__cmpdf2>
   b6f02:	2800      	cmp	r0, #0
   b6f04:	bf48      	it	mi
   b6f06:	f110 0f00 	cmnmi.w	r0, #0
   b6f0a:	bd01      	pop	{r0, pc}

000b6f0c <__aeabi_dcmpeq>:
   b6f0c:	f84d ed08 	str.w	lr, [sp, #-8]!
   b6f10:	f7ff fff4 	bl	b6efc <__aeabi_cdcmpeq>
   b6f14:	bf0c      	ite	eq
   b6f16:	2001      	moveq	r0, #1
   b6f18:	2000      	movne	r0, #0
   b6f1a:	f85d fb08 	ldr.w	pc, [sp], #8
   b6f1e:	bf00      	nop

000b6f20 <__aeabi_dcmplt>:
   b6f20:	f84d ed08 	str.w	lr, [sp, #-8]!
   b6f24:	f7ff ffea 	bl	b6efc <__aeabi_cdcmpeq>
   b6f28:	bf34      	ite	cc
   b6f2a:	2001      	movcc	r0, #1
   b6f2c:	2000      	movcs	r0, #0
   b6f2e:	f85d fb08 	ldr.w	pc, [sp], #8
   b6f32:	bf00      	nop

000b6f34 <__aeabi_dcmple>:
   b6f34:	f84d ed08 	str.w	lr, [sp, #-8]!
   b6f38:	f7ff ffe0 	bl	b6efc <__aeabi_cdcmpeq>
   b6f3c:	bf94      	ite	ls
   b6f3e:	2001      	movls	r0, #1
   b6f40:	2000      	movhi	r0, #0
   b6f42:	f85d fb08 	ldr.w	pc, [sp], #8
   b6f46:	bf00      	nop

000b6f48 <__aeabi_dcmpge>:
   b6f48:	f84d ed08 	str.w	lr, [sp, #-8]!
   b6f4c:	f7ff ffce 	bl	b6eec <__aeabi_cdrcmple>
   b6f50:	bf94      	ite	ls
   b6f52:	2001      	movls	r0, #1
   b6f54:	2000      	movhi	r0, #0
   b6f56:	f85d fb08 	ldr.w	pc, [sp], #8
   b6f5a:	bf00      	nop

000b6f5c <__aeabi_dcmpgt>:
   b6f5c:	f84d ed08 	str.w	lr, [sp, #-8]!
   b6f60:	f7ff ffc4 	bl	b6eec <__aeabi_cdrcmple>
   b6f64:	bf34      	ite	cc
   b6f66:	2001      	movcc	r0, #1
   b6f68:	2000      	movcs	r0, #0
   b6f6a:	f85d fb08 	ldr.w	pc, [sp], #8
   b6f6e:	bf00      	nop

000b6f70 <__aeabi_dcmpun>:
   b6f70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b6f74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b6f78:	d102      	bne.n	b6f80 <__aeabi_dcmpun+0x10>
   b6f7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b6f7e:	d10a      	bne.n	b6f96 <__aeabi_dcmpun+0x26>
   b6f80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b6f84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b6f88:	d102      	bne.n	b6f90 <__aeabi_dcmpun+0x20>
   b6f8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b6f8e:	d102      	bne.n	b6f96 <__aeabi_dcmpun+0x26>
   b6f90:	f04f 0000 	mov.w	r0, #0
   b6f94:	4770      	bx	lr
   b6f96:	f04f 0001 	mov.w	r0, #1
   b6f9a:	4770      	bx	lr

000b6f9c <__aeabi_d2iz>:
   b6f9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b6fa0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b6fa4:	d215      	bcs.n	b6fd2 <__aeabi_d2iz+0x36>
   b6fa6:	d511      	bpl.n	b6fcc <__aeabi_d2iz+0x30>
   b6fa8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b6fac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b6fb0:	d912      	bls.n	b6fd8 <__aeabi_d2iz+0x3c>
   b6fb2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b6fb6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b6fba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b6fbe:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b6fc2:	fa23 f002 	lsr.w	r0, r3, r2
   b6fc6:	bf18      	it	ne
   b6fc8:	4240      	negne	r0, r0
   b6fca:	4770      	bx	lr
   b6fcc:	f04f 0000 	mov.w	r0, #0
   b6fd0:	4770      	bx	lr
   b6fd2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b6fd6:	d105      	bne.n	b6fe4 <__aeabi_d2iz+0x48>
   b6fd8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   b6fdc:	bf08      	it	eq
   b6fde:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   b6fe2:	4770      	bx	lr
   b6fe4:	f04f 0000 	mov.w	r0, #0
   b6fe8:	4770      	bx	lr
   b6fea:	bf00      	nop

000b6fec <__aeabi_d2uiz>:
   b6fec:	004a      	lsls	r2, r1, #1
   b6fee:	d211      	bcs.n	b7014 <__aeabi_d2uiz+0x28>
   b6ff0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b6ff4:	d211      	bcs.n	b701a <__aeabi_d2uiz+0x2e>
   b6ff6:	d50d      	bpl.n	b7014 <__aeabi_d2uiz+0x28>
   b6ff8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b6ffc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b7000:	d40e      	bmi.n	b7020 <__aeabi_d2uiz+0x34>
   b7002:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b7006:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b700a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b700e:	fa23 f002 	lsr.w	r0, r3, r2
   b7012:	4770      	bx	lr
   b7014:	f04f 0000 	mov.w	r0, #0
   b7018:	4770      	bx	lr
   b701a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b701e:	d102      	bne.n	b7026 <__aeabi_d2uiz+0x3a>
   b7020:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b7024:	4770      	bx	lr
   b7026:	f04f 0000 	mov.w	r0, #0
   b702a:	4770      	bx	lr

000b702c <__aeabi_d2ulz>:
   b702c:	b5d0      	push	{r4, r6, r7, lr}
   b702e:	4b0c      	ldr	r3, [pc, #48]	; (b7060 <__aeabi_d2ulz+0x34>)
   b7030:	2200      	movs	r2, #0
   b7032:	4606      	mov	r6, r0
   b7034:	460f      	mov	r7, r1
   b7036:	f7ff fd01 	bl	b6a3c <__aeabi_dmul>
   b703a:	f7ff ffd7 	bl	b6fec <__aeabi_d2uiz>
   b703e:	4604      	mov	r4, r0
   b7040:	f7ff fc82 	bl	b6948 <__aeabi_ui2d>
   b7044:	4b07      	ldr	r3, [pc, #28]	; (b7064 <__aeabi_d2ulz+0x38>)
   b7046:	2200      	movs	r2, #0
   b7048:	f7ff fcf8 	bl	b6a3c <__aeabi_dmul>
   b704c:	4602      	mov	r2, r0
   b704e:	460b      	mov	r3, r1
   b7050:	4630      	mov	r0, r6
   b7052:	4639      	mov	r1, r7
   b7054:	f7ff fb3a 	bl	b66cc <__aeabi_dsub>
   b7058:	f7ff ffc8 	bl	b6fec <__aeabi_d2uiz>
   b705c:	4621      	mov	r1, r4
   b705e:	bdd0      	pop	{r4, r6, r7, pc}
   b7060:	3df00000 	.word	0x3df00000
   b7064:	41f00000 	.word	0x41f00000

000b7068 <atexit>:
   b7068:	2300      	movs	r3, #0
   b706a:	4601      	mov	r1, r0
   b706c:	461a      	mov	r2, r3
   b706e:	4618      	mov	r0, r3
   b7070:	f000 bf80 	b.w	b7f74 <__register_exitproc>

000b7074 <atof>:
   b7074:	2100      	movs	r1, #0
   b7076:	f000 bee5 	b.w	b7e44 <strtod>
	...

000b707c <isprint>:
   b707c:	4b02      	ldr	r3, [pc, #8]	; (b7088 <isprint+0xc>)
   b707e:	4418      	add	r0, r3
   b7080:	7840      	ldrb	r0, [r0, #1]
   b7082:	f000 0097 	and.w	r0, r0, #151	; 0x97
   b7086:	4770      	bx	lr
   b7088:	000b9538 	.word	0x000b9538

000b708c <memcpy>:
   b708c:	440a      	add	r2, r1
   b708e:	4291      	cmp	r1, r2
   b7090:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b7094:	d100      	bne.n	b7098 <memcpy+0xc>
   b7096:	4770      	bx	lr
   b7098:	b510      	push	{r4, lr}
   b709a:	f811 4b01 	ldrb.w	r4, [r1], #1
   b709e:	f803 4f01 	strb.w	r4, [r3, #1]!
   b70a2:	4291      	cmp	r1, r2
   b70a4:	d1f9      	bne.n	b709a <memcpy+0xe>
   b70a6:	bd10      	pop	{r4, pc}

000b70a8 <memmove>:
   b70a8:	4288      	cmp	r0, r1
   b70aa:	b510      	push	{r4, lr}
   b70ac:	eb01 0402 	add.w	r4, r1, r2
   b70b0:	d902      	bls.n	b70b8 <memmove+0x10>
   b70b2:	4284      	cmp	r4, r0
   b70b4:	4623      	mov	r3, r4
   b70b6:	d807      	bhi.n	b70c8 <memmove+0x20>
   b70b8:	1e43      	subs	r3, r0, #1
   b70ba:	42a1      	cmp	r1, r4
   b70bc:	d008      	beq.n	b70d0 <memmove+0x28>
   b70be:	f811 2b01 	ldrb.w	r2, [r1], #1
   b70c2:	f803 2f01 	strb.w	r2, [r3, #1]!
   b70c6:	e7f8      	b.n	b70ba <memmove+0x12>
   b70c8:	4402      	add	r2, r0
   b70ca:	4601      	mov	r1, r0
   b70cc:	428a      	cmp	r2, r1
   b70ce:	d100      	bne.n	b70d2 <memmove+0x2a>
   b70d0:	bd10      	pop	{r4, pc}
   b70d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   b70d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
   b70da:	e7f7      	b.n	b70cc <memmove+0x24>

000b70dc <memset>:
   b70dc:	4402      	add	r2, r0
   b70de:	4603      	mov	r3, r0
   b70e0:	4293      	cmp	r3, r2
   b70e2:	d100      	bne.n	b70e6 <memset+0xa>
   b70e4:	4770      	bx	lr
   b70e6:	f803 1b01 	strb.w	r1, [r3], #1
   b70ea:	e7f9      	b.n	b70e0 <memset+0x4>

000b70ec <srand>:
   b70ec:	b538      	push	{r3, r4, r5, lr}
   b70ee:	4b10      	ldr	r3, [pc, #64]	; (b7130 <srand+0x44>)
   b70f0:	681d      	ldr	r5, [r3, #0]
   b70f2:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b70f4:	4604      	mov	r4, r0
   b70f6:	b9b3      	cbnz	r3, b7126 <srand+0x3a>
   b70f8:	2018      	movs	r0, #24
   b70fa:	f7fd fb15 	bl	b4728 <malloc>
   b70fe:	4602      	mov	r2, r0
   b7100:	63a8      	str	r0, [r5, #56]	; 0x38
   b7102:	b920      	cbnz	r0, b710e <srand+0x22>
   b7104:	4b0b      	ldr	r3, [pc, #44]	; (b7134 <srand+0x48>)
   b7106:	480c      	ldr	r0, [pc, #48]	; (b7138 <srand+0x4c>)
   b7108:	2142      	movs	r1, #66	; 0x42
   b710a:	f7fd fb45 	bl	b4798 <__assert_func>
   b710e:	490b      	ldr	r1, [pc, #44]	; (b713c <srand+0x50>)
   b7110:	4b0b      	ldr	r3, [pc, #44]	; (b7140 <srand+0x54>)
   b7112:	e9c0 1300 	strd	r1, r3, [r0]
   b7116:	4b0b      	ldr	r3, [pc, #44]	; (b7144 <srand+0x58>)
   b7118:	6083      	str	r3, [r0, #8]
   b711a:	230b      	movs	r3, #11
   b711c:	8183      	strh	r3, [r0, #12]
   b711e:	2100      	movs	r1, #0
   b7120:	2001      	movs	r0, #1
   b7122:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b7126:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b7128:	2200      	movs	r2, #0
   b712a:	611c      	str	r4, [r3, #16]
   b712c:	615a      	str	r2, [r3, #20]
   b712e:	bd38      	pop	{r3, r4, r5, pc}
   b7130:	2003e478 	.word	0x2003e478
   b7134:	000b9471 	.word	0x000b9471
   b7138:	000b9488 	.word	0x000b9488
   b713c:	abcd330e 	.word	0xabcd330e
   b7140:	e66d1234 	.word	0xe66d1234
   b7144:	0005deec 	.word	0x0005deec

000b7148 <strchr>:
   b7148:	b2c9      	uxtb	r1, r1
   b714a:	4603      	mov	r3, r0
   b714c:	f810 2b01 	ldrb.w	r2, [r0], #1
   b7150:	b11a      	cbz	r2, b715a <strchr+0x12>
   b7152:	428a      	cmp	r2, r1
   b7154:	d1f9      	bne.n	b714a <strchr+0x2>
   b7156:	4618      	mov	r0, r3
   b7158:	4770      	bx	lr
   b715a:	2900      	cmp	r1, #0
   b715c:	bf18      	it	ne
   b715e:	2300      	movne	r3, #0
   b7160:	e7f9      	b.n	b7156 <strchr+0xe>

000b7162 <strchrnul>:
   b7162:	b510      	push	{r4, lr}
   b7164:	4604      	mov	r4, r0
   b7166:	f7ff ffef 	bl	b7148 <strchr>
   b716a:	b918      	cbnz	r0, b7174 <strchrnul+0x12>
   b716c:	4620      	mov	r0, r4
   b716e:	f000 f814 	bl	b719a <strlen>
   b7172:	4420      	add	r0, r4
   b7174:	bd10      	pop	{r4, pc}

000b7176 <strcmp>:
   b7176:	f810 2b01 	ldrb.w	r2, [r0], #1
   b717a:	f811 3b01 	ldrb.w	r3, [r1], #1
   b717e:	2a01      	cmp	r2, #1
   b7180:	bf28      	it	cs
   b7182:	429a      	cmpcs	r2, r3
   b7184:	d0f7      	beq.n	b7176 <strcmp>
   b7186:	1ad0      	subs	r0, r2, r3
   b7188:	4770      	bx	lr

000b718a <strcpy>:
   b718a:	4603      	mov	r3, r0
   b718c:	f811 2b01 	ldrb.w	r2, [r1], #1
   b7190:	f803 2b01 	strb.w	r2, [r3], #1
   b7194:	2a00      	cmp	r2, #0
   b7196:	d1f9      	bne.n	b718c <strcpy+0x2>
   b7198:	4770      	bx	lr

000b719a <strlen>:
   b719a:	4603      	mov	r3, r0
   b719c:	f813 2b01 	ldrb.w	r2, [r3], #1
   b71a0:	2a00      	cmp	r2, #0
   b71a2:	d1fb      	bne.n	b719c <strlen+0x2>
   b71a4:	1a18      	subs	r0, r3, r0
   b71a6:	3801      	subs	r0, #1
   b71a8:	4770      	bx	lr

000b71aa <strncmp>:
   b71aa:	b510      	push	{r4, lr}
   b71ac:	b17a      	cbz	r2, b71ce <strncmp+0x24>
   b71ae:	4603      	mov	r3, r0
   b71b0:	3901      	subs	r1, #1
   b71b2:	1884      	adds	r4, r0, r2
   b71b4:	f813 0b01 	ldrb.w	r0, [r3], #1
   b71b8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   b71bc:	4290      	cmp	r0, r2
   b71be:	d101      	bne.n	b71c4 <strncmp+0x1a>
   b71c0:	42a3      	cmp	r3, r4
   b71c2:	d101      	bne.n	b71c8 <strncmp+0x1e>
   b71c4:	1a80      	subs	r0, r0, r2
   b71c6:	bd10      	pop	{r4, pc}
   b71c8:	2800      	cmp	r0, #0
   b71ca:	d1f3      	bne.n	b71b4 <strncmp+0xa>
   b71cc:	e7fa      	b.n	b71c4 <strncmp+0x1a>
   b71ce:	4610      	mov	r0, r2
   b71d0:	e7f9      	b.n	b71c6 <strncmp+0x1c>

000b71d2 <strrchr>:
   b71d2:	b538      	push	{r3, r4, r5, lr}
   b71d4:	4603      	mov	r3, r0
   b71d6:	460c      	mov	r4, r1
   b71d8:	b969      	cbnz	r1, b71f6 <strrchr+0x24>
   b71da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b71de:	f7ff bfb3 	b.w	b7148 <strchr>
   b71e2:	1c43      	adds	r3, r0, #1
   b71e4:	4605      	mov	r5, r0
   b71e6:	4621      	mov	r1, r4
   b71e8:	4618      	mov	r0, r3
   b71ea:	f7ff ffad 	bl	b7148 <strchr>
   b71ee:	2800      	cmp	r0, #0
   b71f0:	d1f7      	bne.n	b71e2 <strrchr+0x10>
   b71f2:	4628      	mov	r0, r5
   b71f4:	bd38      	pop	{r3, r4, r5, pc}
   b71f6:	2500      	movs	r5, #0
   b71f8:	e7f5      	b.n	b71e6 <strrchr+0x14>

000b71fa <sulp>:
   b71fa:	b570      	push	{r4, r5, r6, lr}
   b71fc:	4604      	mov	r4, r0
   b71fe:	460d      	mov	r5, r1
   b7200:	ec45 4b10 	vmov	d0, r4, r5
   b7204:	4616      	mov	r6, r2
   b7206:	f001 fe0f 	bl	b8e28 <__ulp>
   b720a:	ec51 0b10 	vmov	r0, r1, d0
   b720e:	b17e      	cbz	r6, b7230 <sulp+0x36>
   b7210:	f3c5 530a 	ubfx	r3, r5, #20, #11
   b7214:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   b7218:	2b00      	cmp	r3, #0
   b721a:	dd09      	ble.n	b7230 <sulp+0x36>
   b721c:	051b      	lsls	r3, r3, #20
   b721e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   b7222:	2400      	movs	r4, #0
   b7224:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   b7228:	4622      	mov	r2, r4
   b722a:	462b      	mov	r3, r5
   b722c:	f7ff fc06 	bl	b6a3c <__aeabi_dmul>
   b7230:	bd70      	pop	{r4, r5, r6, pc}
   b7232:	0000      	movs	r0, r0
   b7234:	0000      	movs	r0, r0
	...

000b7238 <_strtod_l>:
   b7238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b723c:	ed2d 8b02 	vpush	{d8}
   b7240:	b09d      	sub	sp, #116	; 0x74
   b7242:	461f      	mov	r7, r3
   b7244:	2300      	movs	r3, #0
   b7246:	9318      	str	r3, [sp, #96]	; 0x60
   b7248:	4ba2      	ldr	r3, [pc, #648]	; (b74d4 <_strtod_l+0x29c>)
   b724a:	9213      	str	r2, [sp, #76]	; 0x4c
   b724c:	681b      	ldr	r3, [r3, #0]
   b724e:	9305      	str	r3, [sp, #20]
   b7250:	4604      	mov	r4, r0
   b7252:	4618      	mov	r0, r3
   b7254:	4688      	mov	r8, r1
   b7256:	f7ff ffa0 	bl	b719a <strlen>
   b725a:	f04f 0a00 	mov.w	sl, #0
   b725e:	4605      	mov	r5, r0
   b7260:	f04f 0b00 	mov.w	fp, #0
   b7264:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   b7268:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b726a:	781a      	ldrb	r2, [r3, #0]
   b726c:	2a2b      	cmp	r2, #43	; 0x2b
   b726e:	d04e      	beq.n	b730e <_strtod_l+0xd6>
   b7270:	d83b      	bhi.n	b72ea <_strtod_l+0xb2>
   b7272:	2a0d      	cmp	r2, #13
   b7274:	d834      	bhi.n	b72e0 <_strtod_l+0xa8>
   b7276:	2a08      	cmp	r2, #8
   b7278:	d834      	bhi.n	b72e4 <_strtod_l+0xac>
   b727a:	2a00      	cmp	r2, #0
   b727c:	d03e      	beq.n	b72fc <_strtod_l+0xc4>
   b727e:	2300      	movs	r3, #0
   b7280:	930a      	str	r3, [sp, #40]	; 0x28
   b7282:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   b7284:	7833      	ldrb	r3, [r6, #0]
   b7286:	2b30      	cmp	r3, #48	; 0x30
   b7288:	f040 80b0 	bne.w	b73ec <_strtod_l+0x1b4>
   b728c:	7873      	ldrb	r3, [r6, #1]
   b728e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   b7292:	2b58      	cmp	r3, #88	; 0x58
   b7294:	d168      	bne.n	b7368 <_strtod_l+0x130>
   b7296:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b7298:	9301      	str	r3, [sp, #4]
   b729a:	ab18      	add	r3, sp, #96	; 0x60
   b729c:	9702      	str	r7, [sp, #8]
   b729e:	9300      	str	r3, [sp, #0]
   b72a0:	4a8d      	ldr	r2, [pc, #564]	; (b74d8 <_strtod_l+0x2a0>)
   b72a2:	ab19      	add	r3, sp, #100	; 0x64
   b72a4:	a917      	add	r1, sp, #92	; 0x5c
   b72a6:	4620      	mov	r0, r4
   b72a8:	f000 ff2e 	bl	b8108 <__gethex>
   b72ac:	f010 0707 	ands.w	r7, r0, #7
   b72b0:	4605      	mov	r5, r0
   b72b2:	d005      	beq.n	b72c0 <_strtod_l+0x88>
   b72b4:	2f06      	cmp	r7, #6
   b72b6:	d12c      	bne.n	b7312 <_strtod_l+0xda>
   b72b8:	3601      	adds	r6, #1
   b72ba:	2300      	movs	r3, #0
   b72bc:	9617      	str	r6, [sp, #92]	; 0x5c
   b72be:	930a      	str	r3, [sp, #40]	; 0x28
   b72c0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b72c2:	2b00      	cmp	r3, #0
   b72c4:	f040 8590 	bne.w	b7de8 <_strtod_l+0xbb0>
   b72c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b72ca:	b1eb      	cbz	r3, b7308 <_strtod_l+0xd0>
   b72cc:	4652      	mov	r2, sl
   b72ce:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   b72d2:	ec43 2b10 	vmov	d0, r2, r3
   b72d6:	b01d      	add	sp, #116	; 0x74
   b72d8:	ecbd 8b02 	vpop	{d8}
   b72dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b72e0:	2a20      	cmp	r2, #32
   b72e2:	d1cc      	bne.n	b727e <_strtod_l+0x46>
   b72e4:	3301      	adds	r3, #1
   b72e6:	9317      	str	r3, [sp, #92]	; 0x5c
   b72e8:	e7be      	b.n	b7268 <_strtod_l+0x30>
   b72ea:	2a2d      	cmp	r2, #45	; 0x2d
   b72ec:	d1c7      	bne.n	b727e <_strtod_l+0x46>
   b72ee:	2201      	movs	r2, #1
   b72f0:	920a      	str	r2, [sp, #40]	; 0x28
   b72f2:	1c5a      	adds	r2, r3, #1
   b72f4:	9217      	str	r2, [sp, #92]	; 0x5c
   b72f6:	785b      	ldrb	r3, [r3, #1]
   b72f8:	2b00      	cmp	r3, #0
   b72fa:	d1c2      	bne.n	b7282 <_strtod_l+0x4a>
   b72fc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b72fe:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   b7302:	2b00      	cmp	r3, #0
   b7304:	f040 856e 	bne.w	b7de4 <_strtod_l+0xbac>
   b7308:	4652      	mov	r2, sl
   b730a:	465b      	mov	r3, fp
   b730c:	e7e1      	b.n	b72d2 <_strtod_l+0x9a>
   b730e:	2200      	movs	r2, #0
   b7310:	e7ee      	b.n	b72f0 <_strtod_l+0xb8>
   b7312:	9a18      	ldr	r2, [sp, #96]	; 0x60
   b7314:	b13a      	cbz	r2, b7326 <_strtod_l+0xee>
   b7316:	2135      	movs	r1, #53	; 0x35
   b7318:	a81a      	add	r0, sp, #104	; 0x68
   b731a:	f001 fe90 	bl	b903e <__copybits>
   b731e:	9918      	ldr	r1, [sp, #96]	; 0x60
   b7320:	4620      	mov	r0, r4
   b7322:	f001 fa4f 	bl	b87c4 <_Bfree>
   b7326:	3f01      	subs	r7, #1
   b7328:	2f04      	cmp	r7, #4
   b732a:	d806      	bhi.n	b733a <_strtod_l+0x102>
   b732c:	e8df f007 	tbb	[pc, r7]
   b7330:	1714030a 	.word	0x1714030a
   b7334:	0a          	.byte	0x0a
   b7335:	00          	.byte	0x00
   b7336:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
   b733a:	0728      	lsls	r0, r5, #28
   b733c:	d5c0      	bpl.n	b72c0 <_strtod_l+0x88>
   b733e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   b7342:	e7bd      	b.n	b72c0 <_strtod_l+0x88>
   b7344:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
   b7348:	9a19      	ldr	r2, [sp, #100]	; 0x64
   b734a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   b734e:	f202 4233 	addw	r2, r2, #1075	; 0x433
   b7352:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   b7356:	e7f0      	b.n	b733a <_strtod_l+0x102>
   b7358:	f8df b180 	ldr.w	fp, [pc, #384]	; b74dc <_strtod_l+0x2a4>
   b735c:	e7ed      	b.n	b733a <_strtod_l+0x102>
   b735e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   b7362:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   b7366:	e7e8      	b.n	b733a <_strtod_l+0x102>
   b7368:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b736a:	1c5a      	adds	r2, r3, #1
   b736c:	9217      	str	r2, [sp, #92]	; 0x5c
   b736e:	785b      	ldrb	r3, [r3, #1]
   b7370:	2b30      	cmp	r3, #48	; 0x30
   b7372:	d0f9      	beq.n	b7368 <_strtod_l+0x130>
   b7374:	2b00      	cmp	r3, #0
   b7376:	d0a3      	beq.n	b72c0 <_strtod_l+0x88>
   b7378:	2301      	movs	r3, #1
   b737a:	f04f 0900 	mov.w	r9, #0
   b737e:	9304      	str	r3, [sp, #16]
   b7380:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b7382:	9308      	str	r3, [sp, #32]
   b7384:	f8cd 901c 	str.w	r9, [sp, #28]
   b7388:	464f      	mov	r7, r9
   b738a:	220a      	movs	r2, #10
   b738c:	9817      	ldr	r0, [sp, #92]	; 0x5c
   b738e:	7806      	ldrb	r6, [r0, #0]
   b7390:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   b7394:	b2d9      	uxtb	r1, r3
   b7396:	2909      	cmp	r1, #9
   b7398:	d92a      	bls.n	b73f0 <_strtod_l+0x1b8>
   b739a:	9905      	ldr	r1, [sp, #20]
   b739c:	462a      	mov	r2, r5
   b739e:	f7ff ff04 	bl	b71aa <strncmp>
   b73a2:	b398      	cbz	r0, b740c <_strtod_l+0x1d4>
   b73a4:	2000      	movs	r0, #0
   b73a6:	4632      	mov	r2, r6
   b73a8:	463d      	mov	r5, r7
   b73aa:	9005      	str	r0, [sp, #20]
   b73ac:	4603      	mov	r3, r0
   b73ae:	2a65      	cmp	r2, #101	; 0x65
   b73b0:	d001      	beq.n	b73b6 <_strtod_l+0x17e>
   b73b2:	2a45      	cmp	r2, #69	; 0x45
   b73b4:	d118      	bne.n	b73e8 <_strtod_l+0x1b0>
   b73b6:	b91d      	cbnz	r5, b73c0 <_strtod_l+0x188>
   b73b8:	9a04      	ldr	r2, [sp, #16]
   b73ba:	4302      	orrs	r2, r0
   b73bc:	d09e      	beq.n	b72fc <_strtod_l+0xc4>
   b73be:	2500      	movs	r5, #0
   b73c0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
   b73c4:	f108 0201 	add.w	r2, r8, #1
   b73c8:	9217      	str	r2, [sp, #92]	; 0x5c
   b73ca:	f898 2001 	ldrb.w	r2, [r8, #1]
   b73ce:	2a2b      	cmp	r2, #43	; 0x2b
   b73d0:	d075      	beq.n	b74be <_strtod_l+0x286>
   b73d2:	2a2d      	cmp	r2, #45	; 0x2d
   b73d4:	d07b      	beq.n	b74ce <_strtod_l+0x296>
   b73d6:	f04f 0c00 	mov.w	ip, #0
   b73da:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   b73de:	2909      	cmp	r1, #9
   b73e0:	f240 8082 	bls.w	b74e8 <_strtod_l+0x2b0>
   b73e4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   b73e8:	2600      	movs	r6, #0
   b73ea:	e09d      	b.n	b7528 <_strtod_l+0x2f0>
   b73ec:	2300      	movs	r3, #0
   b73ee:	e7c4      	b.n	b737a <_strtod_l+0x142>
   b73f0:	2f08      	cmp	r7, #8
   b73f2:	bfd8      	it	le
   b73f4:	9907      	ldrle	r1, [sp, #28]
   b73f6:	f100 0001 	add.w	r0, r0, #1
   b73fa:	bfda      	itte	le
   b73fc:	fb02 3301 	mlale	r3, r2, r1, r3
   b7400:	9307      	strle	r3, [sp, #28]
   b7402:	fb02 3909 	mlagt	r9, r2, r9, r3
   b7406:	3701      	adds	r7, #1
   b7408:	9017      	str	r0, [sp, #92]	; 0x5c
   b740a:	e7bf      	b.n	b738c <_strtod_l+0x154>
   b740c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b740e:	195a      	adds	r2, r3, r5
   b7410:	9217      	str	r2, [sp, #92]	; 0x5c
   b7412:	5d5a      	ldrb	r2, [r3, r5]
   b7414:	2f00      	cmp	r7, #0
   b7416:	d037      	beq.n	b7488 <_strtod_l+0x250>
   b7418:	9005      	str	r0, [sp, #20]
   b741a:	463d      	mov	r5, r7
   b741c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   b7420:	2b09      	cmp	r3, #9
   b7422:	d912      	bls.n	b744a <_strtod_l+0x212>
   b7424:	2301      	movs	r3, #1
   b7426:	e7c2      	b.n	b73ae <_strtod_l+0x176>
   b7428:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b742a:	1c5a      	adds	r2, r3, #1
   b742c:	9217      	str	r2, [sp, #92]	; 0x5c
   b742e:	785a      	ldrb	r2, [r3, #1]
   b7430:	3001      	adds	r0, #1
   b7432:	2a30      	cmp	r2, #48	; 0x30
   b7434:	d0f8      	beq.n	b7428 <_strtod_l+0x1f0>
   b7436:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
   b743a:	2b08      	cmp	r3, #8
   b743c:	f200 84d9 	bhi.w	b7df2 <_strtod_l+0xbba>
   b7440:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b7442:	9005      	str	r0, [sp, #20]
   b7444:	2000      	movs	r0, #0
   b7446:	9308      	str	r3, [sp, #32]
   b7448:	4605      	mov	r5, r0
   b744a:	3a30      	subs	r2, #48	; 0x30
   b744c:	f100 0301 	add.w	r3, r0, #1
   b7450:	d014      	beq.n	b747c <_strtod_l+0x244>
   b7452:	9905      	ldr	r1, [sp, #20]
   b7454:	4419      	add	r1, r3
   b7456:	9105      	str	r1, [sp, #20]
   b7458:	462b      	mov	r3, r5
   b745a:	eb00 0e05 	add.w	lr, r0, r5
   b745e:	210a      	movs	r1, #10
   b7460:	4573      	cmp	r3, lr
   b7462:	d113      	bne.n	b748c <_strtod_l+0x254>
   b7464:	182b      	adds	r3, r5, r0
   b7466:	2b08      	cmp	r3, #8
   b7468:	f105 0501 	add.w	r5, r5, #1
   b746c:	4405      	add	r5, r0
   b746e:	dc1c      	bgt.n	b74aa <_strtod_l+0x272>
   b7470:	9907      	ldr	r1, [sp, #28]
   b7472:	230a      	movs	r3, #10
   b7474:	fb03 2301 	mla	r3, r3, r1, r2
   b7478:	9307      	str	r3, [sp, #28]
   b747a:	2300      	movs	r3, #0
   b747c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b747e:	1c51      	adds	r1, r2, #1
   b7480:	9117      	str	r1, [sp, #92]	; 0x5c
   b7482:	7852      	ldrb	r2, [r2, #1]
   b7484:	4618      	mov	r0, r3
   b7486:	e7c9      	b.n	b741c <_strtod_l+0x1e4>
   b7488:	4638      	mov	r0, r7
   b748a:	e7d2      	b.n	b7432 <_strtod_l+0x1fa>
   b748c:	2b08      	cmp	r3, #8
   b748e:	dc04      	bgt.n	b749a <_strtod_l+0x262>
   b7490:	9e07      	ldr	r6, [sp, #28]
   b7492:	434e      	muls	r6, r1
   b7494:	9607      	str	r6, [sp, #28]
   b7496:	3301      	adds	r3, #1
   b7498:	e7e2      	b.n	b7460 <_strtod_l+0x228>
   b749a:	f103 0c01 	add.w	ip, r3, #1
   b749e:	f1bc 0f10 	cmp.w	ip, #16
   b74a2:	bfd8      	it	le
   b74a4:	fb01 f909 	mulle.w	r9, r1, r9
   b74a8:	e7f5      	b.n	b7496 <_strtod_l+0x25e>
   b74aa:	2d10      	cmp	r5, #16
   b74ac:	bfdc      	itt	le
   b74ae:	230a      	movle	r3, #10
   b74b0:	fb03 2909 	mlale	r9, r3, r9, r2
   b74b4:	e7e1      	b.n	b747a <_strtod_l+0x242>
   b74b6:	2300      	movs	r3, #0
   b74b8:	9305      	str	r3, [sp, #20]
   b74ba:	2301      	movs	r3, #1
   b74bc:	e77c      	b.n	b73b8 <_strtod_l+0x180>
   b74be:	f04f 0c00 	mov.w	ip, #0
   b74c2:	f108 0202 	add.w	r2, r8, #2
   b74c6:	9217      	str	r2, [sp, #92]	; 0x5c
   b74c8:	f898 2002 	ldrb.w	r2, [r8, #2]
   b74cc:	e785      	b.n	b73da <_strtod_l+0x1a2>
   b74ce:	f04f 0c01 	mov.w	ip, #1
   b74d2:	e7f6      	b.n	b74c2 <_strtod_l+0x28a>
   b74d4:	000b96ac 	.word	0x000b96ac
   b74d8:	000b94e8 	.word	0x000b94e8
   b74dc:	7ff00000 	.word	0x7ff00000
   b74e0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b74e2:	1c51      	adds	r1, r2, #1
   b74e4:	9117      	str	r1, [sp, #92]	; 0x5c
   b74e6:	7852      	ldrb	r2, [r2, #1]
   b74e8:	2a30      	cmp	r2, #48	; 0x30
   b74ea:	d0f9      	beq.n	b74e0 <_strtod_l+0x2a8>
   b74ec:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
   b74f0:	2908      	cmp	r1, #8
   b74f2:	f63f af79 	bhi.w	b73e8 <_strtod_l+0x1b0>
   b74f6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
   b74fa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b74fc:	9206      	str	r2, [sp, #24]
   b74fe:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b7500:	1c51      	adds	r1, r2, #1
   b7502:	9117      	str	r1, [sp, #92]	; 0x5c
   b7504:	7852      	ldrb	r2, [r2, #1]
   b7506:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
   b750a:	2e09      	cmp	r6, #9
   b750c:	d937      	bls.n	b757e <_strtod_l+0x346>
   b750e:	9e06      	ldr	r6, [sp, #24]
   b7510:	1b89      	subs	r1, r1, r6
   b7512:	2908      	cmp	r1, #8
   b7514:	f644 661f 	movw	r6, #19999	; 0x4e1f
   b7518:	dc02      	bgt.n	b7520 <_strtod_l+0x2e8>
   b751a:	4576      	cmp	r6, lr
   b751c:	bfa8      	it	ge
   b751e:	4676      	movge	r6, lr
   b7520:	f1bc 0f00 	cmp.w	ip, #0
   b7524:	d000      	beq.n	b7528 <_strtod_l+0x2f0>
   b7526:	4276      	negs	r6, r6
   b7528:	2d00      	cmp	r5, #0
   b752a:	d14d      	bne.n	b75c8 <_strtod_l+0x390>
   b752c:	9904      	ldr	r1, [sp, #16]
   b752e:	4301      	orrs	r1, r0
   b7530:	f47f aec6 	bne.w	b72c0 <_strtod_l+0x88>
   b7534:	2b00      	cmp	r3, #0
   b7536:	f47f aee1 	bne.w	b72fc <_strtod_l+0xc4>
   b753a:	2a69      	cmp	r2, #105	; 0x69
   b753c:	d027      	beq.n	b758e <_strtod_l+0x356>
   b753e:	dc24      	bgt.n	b758a <_strtod_l+0x352>
   b7540:	2a49      	cmp	r2, #73	; 0x49
   b7542:	d024      	beq.n	b758e <_strtod_l+0x356>
   b7544:	2a4e      	cmp	r2, #78	; 0x4e
   b7546:	f47f aed9 	bne.w	b72fc <_strtod_l+0xc4>
   b754a:	499f      	ldr	r1, [pc, #636]	; (b77c8 <_strtod_l+0x590>)
   b754c:	a817      	add	r0, sp, #92	; 0x5c
   b754e:	f001 f833 	bl	b85b8 <__match>
   b7552:	2800      	cmp	r0, #0
   b7554:	f43f aed2 	beq.w	b72fc <_strtod_l+0xc4>
   b7558:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b755a:	781b      	ldrb	r3, [r3, #0]
   b755c:	2b28      	cmp	r3, #40	; 0x28
   b755e:	d12d      	bne.n	b75bc <_strtod_l+0x384>
   b7560:	499a      	ldr	r1, [pc, #616]	; (b77cc <_strtod_l+0x594>)
   b7562:	aa1a      	add	r2, sp, #104	; 0x68
   b7564:	a817      	add	r0, sp, #92	; 0x5c
   b7566:	f001 f83b 	bl	b85e0 <__hexnan>
   b756a:	2805      	cmp	r0, #5
   b756c:	d126      	bne.n	b75bc <_strtod_l+0x384>
   b756e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   b7570:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   b7574:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   b7578:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   b757c:	e6a0      	b.n	b72c0 <_strtod_l+0x88>
   b757e:	210a      	movs	r1, #10
   b7580:	fb01 2e0e 	mla	lr, r1, lr, r2
   b7584:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   b7588:	e7b9      	b.n	b74fe <_strtod_l+0x2c6>
   b758a:	2a6e      	cmp	r2, #110	; 0x6e
   b758c:	e7db      	b.n	b7546 <_strtod_l+0x30e>
   b758e:	4990      	ldr	r1, [pc, #576]	; (b77d0 <_strtod_l+0x598>)
   b7590:	a817      	add	r0, sp, #92	; 0x5c
   b7592:	f001 f811 	bl	b85b8 <__match>
   b7596:	2800      	cmp	r0, #0
   b7598:	f43f aeb0 	beq.w	b72fc <_strtod_l+0xc4>
   b759c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b759e:	498d      	ldr	r1, [pc, #564]	; (b77d4 <_strtod_l+0x59c>)
   b75a0:	3b01      	subs	r3, #1
   b75a2:	a817      	add	r0, sp, #92	; 0x5c
   b75a4:	9317      	str	r3, [sp, #92]	; 0x5c
   b75a6:	f001 f807 	bl	b85b8 <__match>
   b75aa:	b910      	cbnz	r0, b75b2 <_strtod_l+0x37a>
   b75ac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b75ae:	3301      	adds	r3, #1
   b75b0:	9317      	str	r3, [sp, #92]	; 0x5c
   b75b2:	f8df b230 	ldr.w	fp, [pc, #560]	; b77e4 <_strtod_l+0x5ac>
   b75b6:	f04f 0a00 	mov.w	sl, #0
   b75ba:	e681      	b.n	b72c0 <_strtod_l+0x88>
   b75bc:	4886      	ldr	r0, [pc, #536]	; (b77d8 <_strtod_l+0x5a0>)
   b75be:	f001 fd93 	bl	b90e8 <nan>
   b75c2:	ec5b ab10 	vmov	sl, fp, d0
   b75c6:	e67b      	b.n	b72c0 <_strtod_l+0x88>
   b75c8:	9b05      	ldr	r3, [sp, #20]
   b75ca:	9807      	ldr	r0, [sp, #28]
   b75cc:	1af3      	subs	r3, r6, r3
   b75ce:	2f00      	cmp	r7, #0
   b75d0:	bf08      	it	eq
   b75d2:	462f      	moveq	r7, r5
   b75d4:	2d10      	cmp	r5, #16
   b75d6:	9306      	str	r3, [sp, #24]
   b75d8:	46a8      	mov	r8, r5
   b75da:	bfa8      	it	ge
   b75dc:	f04f 0810 	movge.w	r8, #16
   b75e0:	f7ff f9b2 	bl	b6948 <__aeabi_ui2d>
   b75e4:	2d09      	cmp	r5, #9
   b75e6:	4682      	mov	sl, r0
   b75e8:	468b      	mov	fp, r1
   b75ea:	dd13      	ble.n	b7614 <_strtod_l+0x3dc>
   b75ec:	4b7b      	ldr	r3, [pc, #492]	; (b77dc <_strtod_l+0x5a4>)
   b75ee:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   b75f2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   b75f6:	f7ff fa21 	bl	b6a3c <__aeabi_dmul>
   b75fa:	4682      	mov	sl, r0
   b75fc:	4648      	mov	r0, r9
   b75fe:	468b      	mov	fp, r1
   b7600:	f7ff f9a2 	bl	b6948 <__aeabi_ui2d>
   b7604:	4602      	mov	r2, r0
   b7606:	460b      	mov	r3, r1
   b7608:	4650      	mov	r0, sl
   b760a:	4659      	mov	r1, fp
   b760c:	f7ff f860 	bl	b66d0 <__adddf3>
   b7610:	4682      	mov	sl, r0
   b7612:	468b      	mov	fp, r1
   b7614:	2d0f      	cmp	r5, #15
   b7616:	dc38      	bgt.n	b768a <_strtod_l+0x452>
   b7618:	9b06      	ldr	r3, [sp, #24]
   b761a:	2b00      	cmp	r3, #0
   b761c:	f43f ae50 	beq.w	b72c0 <_strtod_l+0x88>
   b7620:	dd24      	ble.n	b766c <_strtod_l+0x434>
   b7622:	2b16      	cmp	r3, #22
   b7624:	dc0b      	bgt.n	b763e <_strtod_l+0x406>
   b7626:	496d      	ldr	r1, [pc, #436]	; (b77dc <_strtod_l+0x5a4>)
   b7628:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   b762c:	e9d1 0100 	ldrd	r0, r1, [r1]
   b7630:	4652      	mov	r2, sl
   b7632:	465b      	mov	r3, fp
   b7634:	f7ff fa02 	bl	b6a3c <__aeabi_dmul>
   b7638:	4682      	mov	sl, r0
   b763a:	468b      	mov	fp, r1
   b763c:	e640      	b.n	b72c0 <_strtod_l+0x88>
   b763e:	9a06      	ldr	r2, [sp, #24]
   b7640:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   b7644:	4293      	cmp	r3, r2
   b7646:	db20      	blt.n	b768a <_strtod_l+0x452>
   b7648:	4c64      	ldr	r4, [pc, #400]	; (b77dc <_strtod_l+0x5a4>)
   b764a:	f1c5 050f 	rsb	r5, r5, #15
   b764e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   b7652:	4652      	mov	r2, sl
   b7654:	465b      	mov	r3, fp
   b7656:	e9d1 0100 	ldrd	r0, r1, [r1]
   b765a:	f7ff f9ef 	bl	b6a3c <__aeabi_dmul>
   b765e:	9b06      	ldr	r3, [sp, #24]
   b7660:	1b5d      	subs	r5, r3, r5
   b7662:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   b7666:	e9d4 2300 	ldrd	r2, r3, [r4]
   b766a:	e7e3      	b.n	b7634 <_strtod_l+0x3fc>
   b766c:	9b06      	ldr	r3, [sp, #24]
   b766e:	3316      	adds	r3, #22
   b7670:	db0b      	blt.n	b768a <_strtod_l+0x452>
   b7672:	9b05      	ldr	r3, [sp, #20]
   b7674:	1b9e      	subs	r6, r3, r6
   b7676:	4b59      	ldr	r3, [pc, #356]	; (b77dc <_strtod_l+0x5a4>)
   b7678:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   b767c:	e9d6 2300 	ldrd	r2, r3, [r6]
   b7680:	4650      	mov	r0, sl
   b7682:	4659      	mov	r1, fp
   b7684:	f7ff fb04 	bl	b6c90 <__aeabi_ddiv>
   b7688:	e7d6      	b.n	b7638 <_strtod_l+0x400>
   b768a:	9b06      	ldr	r3, [sp, #24]
   b768c:	eba5 0808 	sub.w	r8, r5, r8
   b7690:	4498      	add	r8, r3
   b7692:	f1b8 0f00 	cmp.w	r8, #0
   b7696:	dd74      	ble.n	b7782 <_strtod_l+0x54a>
   b7698:	f018 030f 	ands.w	r3, r8, #15
   b769c:	d00a      	beq.n	b76b4 <_strtod_l+0x47c>
   b769e:	494f      	ldr	r1, [pc, #316]	; (b77dc <_strtod_l+0x5a4>)
   b76a0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   b76a4:	4652      	mov	r2, sl
   b76a6:	465b      	mov	r3, fp
   b76a8:	e9d1 0100 	ldrd	r0, r1, [r1]
   b76ac:	f7ff f9c6 	bl	b6a3c <__aeabi_dmul>
   b76b0:	4682      	mov	sl, r0
   b76b2:	468b      	mov	fp, r1
   b76b4:	f038 080f 	bics.w	r8, r8, #15
   b76b8:	d04f      	beq.n	b775a <_strtod_l+0x522>
   b76ba:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   b76be:	dd22      	ble.n	b7706 <_strtod_l+0x4ce>
   b76c0:	2500      	movs	r5, #0
   b76c2:	462e      	mov	r6, r5
   b76c4:	9507      	str	r5, [sp, #28]
   b76c6:	9505      	str	r5, [sp, #20]
   b76c8:	2322      	movs	r3, #34	; 0x22
   b76ca:	f8df b118 	ldr.w	fp, [pc, #280]	; b77e4 <_strtod_l+0x5ac>
   b76ce:	6023      	str	r3, [r4, #0]
   b76d0:	f04f 0a00 	mov.w	sl, #0
   b76d4:	9b07      	ldr	r3, [sp, #28]
   b76d6:	2b00      	cmp	r3, #0
   b76d8:	f43f adf2 	beq.w	b72c0 <_strtod_l+0x88>
   b76dc:	9918      	ldr	r1, [sp, #96]	; 0x60
   b76de:	4620      	mov	r0, r4
   b76e0:	f001 f870 	bl	b87c4 <_Bfree>
   b76e4:	9905      	ldr	r1, [sp, #20]
   b76e6:	4620      	mov	r0, r4
   b76e8:	f001 f86c 	bl	b87c4 <_Bfree>
   b76ec:	4631      	mov	r1, r6
   b76ee:	4620      	mov	r0, r4
   b76f0:	f001 f868 	bl	b87c4 <_Bfree>
   b76f4:	9907      	ldr	r1, [sp, #28]
   b76f6:	4620      	mov	r0, r4
   b76f8:	f001 f864 	bl	b87c4 <_Bfree>
   b76fc:	4629      	mov	r1, r5
   b76fe:	4620      	mov	r0, r4
   b7700:	f001 f860 	bl	b87c4 <_Bfree>
   b7704:	e5dc      	b.n	b72c0 <_strtod_l+0x88>
   b7706:	4b36      	ldr	r3, [pc, #216]	; (b77e0 <_strtod_l+0x5a8>)
   b7708:	9304      	str	r3, [sp, #16]
   b770a:	2300      	movs	r3, #0
   b770c:	ea4f 1828 	mov.w	r8, r8, asr #4
   b7710:	4650      	mov	r0, sl
   b7712:	4659      	mov	r1, fp
   b7714:	4699      	mov	r9, r3
   b7716:	f1b8 0f01 	cmp.w	r8, #1
   b771a:	dc21      	bgt.n	b7760 <_strtod_l+0x528>
   b771c:	b10b      	cbz	r3, b7722 <_strtod_l+0x4ea>
   b771e:	4682      	mov	sl, r0
   b7720:	468b      	mov	fp, r1
   b7722:	4b2f      	ldr	r3, [pc, #188]	; (b77e0 <_strtod_l+0x5a8>)
   b7724:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   b7728:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   b772c:	4652      	mov	r2, sl
   b772e:	465b      	mov	r3, fp
   b7730:	e9d9 0100 	ldrd	r0, r1, [r9]
   b7734:	f7ff f982 	bl	b6a3c <__aeabi_dmul>
   b7738:	4b2a      	ldr	r3, [pc, #168]	; (b77e4 <_strtod_l+0x5ac>)
   b773a:	460a      	mov	r2, r1
   b773c:	400b      	ands	r3, r1
   b773e:	492a      	ldr	r1, [pc, #168]	; (b77e8 <_strtod_l+0x5b0>)
   b7740:	428b      	cmp	r3, r1
   b7742:	4682      	mov	sl, r0
   b7744:	d8bc      	bhi.n	b76c0 <_strtod_l+0x488>
   b7746:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   b774a:	428b      	cmp	r3, r1
   b774c:	bf86      	itte	hi
   b774e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; b77ec <_strtod_l+0x5b4>
   b7752:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
   b7756:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   b775a:	2300      	movs	r3, #0
   b775c:	9304      	str	r3, [sp, #16]
   b775e:	e084      	b.n	b786a <_strtod_l+0x632>
   b7760:	f018 0f01 	tst.w	r8, #1
   b7764:	d005      	beq.n	b7772 <_strtod_l+0x53a>
   b7766:	9b04      	ldr	r3, [sp, #16]
   b7768:	e9d3 2300 	ldrd	r2, r3, [r3]
   b776c:	f7ff f966 	bl	b6a3c <__aeabi_dmul>
   b7770:	2301      	movs	r3, #1
   b7772:	9a04      	ldr	r2, [sp, #16]
   b7774:	3208      	adds	r2, #8
   b7776:	f109 0901 	add.w	r9, r9, #1
   b777a:	ea4f 0868 	mov.w	r8, r8, asr #1
   b777e:	9204      	str	r2, [sp, #16]
   b7780:	e7c9      	b.n	b7716 <_strtod_l+0x4de>
   b7782:	d0ea      	beq.n	b775a <_strtod_l+0x522>
   b7784:	f1c8 0800 	rsb	r8, r8, #0
   b7788:	f018 020f 	ands.w	r2, r8, #15
   b778c:	d00a      	beq.n	b77a4 <_strtod_l+0x56c>
   b778e:	4b13      	ldr	r3, [pc, #76]	; (b77dc <_strtod_l+0x5a4>)
   b7790:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   b7794:	4650      	mov	r0, sl
   b7796:	4659      	mov	r1, fp
   b7798:	e9d3 2300 	ldrd	r2, r3, [r3]
   b779c:	f7ff fa78 	bl	b6c90 <__aeabi_ddiv>
   b77a0:	4682      	mov	sl, r0
   b77a2:	468b      	mov	fp, r1
   b77a4:	ea5f 1828 	movs.w	r8, r8, asr #4
   b77a8:	d0d7      	beq.n	b775a <_strtod_l+0x522>
   b77aa:	f1b8 0f1f 	cmp.w	r8, #31
   b77ae:	dd1f      	ble.n	b77f0 <_strtod_l+0x5b8>
   b77b0:	2500      	movs	r5, #0
   b77b2:	462e      	mov	r6, r5
   b77b4:	9507      	str	r5, [sp, #28]
   b77b6:	9505      	str	r5, [sp, #20]
   b77b8:	2322      	movs	r3, #34	; 0x22
   b77ba:	f04f 0a00 	mov.w	sl, #0
   b77be:	f04f 0b00 	mov.w	fp, #0
   b77c2:	6023      	str	r3, [r4, #0]
   b77c4:	e786      	b.n	b76d4 <_strtod_l+0x49c>
   b77c6:	bf00      	nop
   b77c8:	000b93a9 	.word	0x000b93a9
   b77cc:	000b94fc 	.word	0x000b94fc
   b77d0:	000b93ad 	.word	0x000b93ad
   b77d4:	000b94e1 	.word	0x000b94e1
   b77d8:	000b92de 	.word	0x000b92de
   b77dc:	000b9748 	.word	0x000b9748
   b77e0:	000b9720 	.word	0x000b9720
   b77e4:	7ff00000 	.word	0x7ff00000
   b77e8:	7ca00000 	.word	0x7ca00000
   b77ec:	7fefffff 	.word	0x7fefffff
   b77f0:	f018 0310 	ands.w	r3, r8, #16
   b77f4:	bf18      	it	ne
   b77f6:	236a      	movne	r3, #106	; 0x6a
   b77f8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; b7ba8 <_strtod_l+0x970>
   b77fc:	9304      	str	r3, [sp, #16]
   b77fe:	4650      	mov	r0, sl
   b7800:	4659      	mov	r1, fp
   b7802:	2300      	movs	r3, #0
   b7804:	f018 0f01 	tst.w	r8, #1
   b7808:	d004      	beq.n	b7814 <_strtod_l+0x5dc>
   b780a:	e9d9 2300 	ldrd	r2, r3, [r9]
   b780e:	f7ff f915 	bl	b6a3c <__aeabi_dmul>
   b7812:	2301      	movs	r3, #1
   b7814:	ea5f 0868 	movs.w	r8, r8, asr #1
   b7818:	f109 0908 	add.w	r9, r9, #8
   b781c:	d1f2      	bne.n	b7804 <_strtod_l+0x5cc>
   b781e:	b10b      	cbz	r3, b7824 <_strtod_l+0x5ec>
   b7820:	4682      	mov	sl, r0
   b7822:	468b      	mov	fp, r1
   b7824:	9b04      	ldr	r3, [sp, #16]
   b7826:	b1c3      	cbz	r3, b785a <_strtod_l+0x622>
   b7828:	f3cb 520a 	ubfx	r2, fp, #20, #11
   b782c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   b7830:	2b00      	cmp	r3, #0
   b7832:	4659      	mov	r1, fp
   b7834:	dd11      	ble.n	b785a <_strtod_l+0x622>
   b7836:	2b1f      	cmp	r3, #31
   b7838:	f340 8124 	ble.w	b7a84 <_strtod_l+0x84c>
   b783c:	2b34      	cmp	r3, #52	; 0x34
   b783e:	bfde      	ittt	le
   b7840:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
   b7844:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
   b7848:	fa03 f202 	lslle.w	r2, r3, r2
   b784c:	f04f 0a00 	mov.w	sl, #0
   b7850:	bfcc      	ite	gt
   b7852:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   b7856:	ea02 0b01 	andle.w	fp, r2, r1
   b785a:	2200      	movs	r2, #0
   b785c:	2300      	movs	r3, #0
   b785e:	4650      	mov	r0, sl
   b7860:	4659      	mov	r1, fp
   b7862:	f7ff fb53 	bl	b6f0c <__aeabi_dcmpeq>
   b7866:	2800      	cmp	r0, #0
   b7868:	d1a2      	bne.n	b77b0 <_strtod_l+0x578>
   b786a:	9b07      	ldr	r3, [sp, #28]
   b786c:	9300      	str	r3, [sp, #0]
   b786e:	9908      	ldr	r1, [sp, #32]
   b7870:	462b      	mov	r3, r5
   b7872:	463a      	mov	r2, r7
   b7874:	4620      	mov	r0, r4
   b7876:	f001 f80d 	bl	b8894 <__s2b>
   b787a:	9007      	str	r0, [sp, #28]
   b787c:	2800      	cmp	r0, #0
   b787e:	f43f af1f 	beq.w	b76c0 <_strtod_l+0x488>
   b7882:	9b05      	ldr	r3, [sp, #20]
   b7884:	1b9e      	subs	r6, r3, r6
   b7886:	9b06      	ldr	r3, [sp, #24]
   b7888:	2b00      	cmp	r3, #0
   b788a:	bfb4      	ite	lt
   b788c:	4633      	movlt	r3, r6
   b788e:	2300      	movge	r3, #0
   b7890:	930c      	str	r3, [sp, #48]	; 0x30
   b7892:	9b06      	ldr	r3, [sp, #24]
   b7894:	2500      	movs	r5, #0
   b7896:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   b789a:	9312      	str	r3, [sp, #72]	; 0x48
   b789c:	462e      	mov	r6, r5
   b789e:	9b07      	ldr	r3, [sp, #28]
   b78a0:	4620      	mov	r0, r4
   b78a2:	6859      	ldr	r1, [r3, #4]
   b78a4:	f000 ff4e 	bl	b8744 <_Balloc>
   b78a8:	9005      	str	r0, [sp, #20]
   b78aa:	2800      	cmp	r0, #0
   b78ac:	f43f af0c 	beq.w	b76c8 <_strtod_l+0x490>
   b78b0:	9b07      	ldr	r3, [sp, #28]
   b78b2:	691a      	ldr	r2, [r3, #16]
   b78b4:	3202      	adds	r2, #2
   b78b6:	f103 010c 	add.w	r1, r3, #12
   b78ba:	0092      	lsls	r2, r2, #2
   b78bc:	300c      	adds	r0, #12
   b78be:	f7ff fbe5 	bl	b708c <memcpy>
   b78c2:	ec4b ab10 	vmov	d0, sl, fp
   b78c6:	aa1a      	add	r2, sp, #104	; 0x68
   b78c8:	a919      	add	r1, sp, #100	; 0x64
   b78ca:	4620      	mov	r0, r4
   b78cc:	f001 fb28 	bl	b8f20 <__d2b>
   b78d0:	ec4b ab18 	vmov	d8, sl, fp
   b78d4:	9018      	str	r0, [sp, #96]	; 0x60
   b78d6:	2800      	cmp	r0, #0
   b78d8:	f43f aef6 	beq.w	b76c8 <_strtod_l+0x490>
   b78dc:	2101      	movs	r1, #1
   b78de:	4620      	mov	r0, r4
   b78e0:	f001 f872 	bl	b89c8 <__i2b>
   b78e4:	4606      	mov	r6, r0
   b78e6:	2800      	cmp	r0, #0
   b78e8:	f43f aeee 	beq.w	b76c8 <_strtod_l+0x490>
   b78ec:	9b19      	ldr	r3, [sp, #100]	; 0x64
   b78ee:	9904      	ldr	r1, [sp, #16]
   b78f0:	2b00      	cmp	r3, #0
   b78f2:	bfab      	itete	ge
   b78f4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
   b78f6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   b78f8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
   b78fa:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
   b78fe:	bfac      	ite	ge
   b7900:	eb03 0902 	addge.w	r9, r3, r2
   b7904:	1ad7      	sublt	r7, r2, r3
   b7906:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   b7908:	eba3 0801 	sub.w	r8, r3, r1
   b790c:	4490      	add	r8, r2
   b790e:	4ba1      	ldr	r3, [pc, #644]	; (b7b94 <_strtod_l+0x95c>)
   b7910:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b7914:	4598      	cmp	r8, r3
   b7916:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   b791a:	f280 80c7 	bge.w	b7aac <_strtod_l+0x874>
   b791e:	eba3 0308 	sub.w	r3, r3, r8
   b7922:	2b1f      	cmp	r3, #31
   b7924:	eba2 0203 	sub.w	r2, r2, r3
   b7928:	f04f 0101 	mov.w	r1, #1
   b792c:	f300 80b1 	bgt.w	b7a92 <_strtod_l+0x85a>
   b7930:	fa01 f303 	lsl.w	r3, r1, r3
   b7934:	930d      	str	r3, [sp, #52]	; 0x34
   b7936:	2300      	movs	r3, #0
   b7938:	9308      	str	r3, [sp, #32]
   b793a:	eb09 0802 	add.w	r8, r9, r2
   b793e:	9b04      	ldr	r3, [sp, #16]
   b7940:	45c1      	cmp	r9, r8
   b7942:	4417      	add	r7, r2
   b7944:	441f      	add	r7, r3
   b7946:	464b      	mov	r3, r9
   b7948:	bfa8      	it	ge
   b794a:	4643      	movge	r3, r8
   b794c:	42bb      	cmp	r3, r7
   b794e:	bfa8      	it	ge
   b7950:	463b      	movge	r3, r7
   b7952:	2b00      	cmp	r3, #0
   b7954:	bfc2      	ittt	gt
   b7956:	eba8 0803 	subgt.w	r8, r8, r3
   b795a:	1aff      	subgt	r7, r7, r3
   b795c:	eba9 0903 	subgt.w	r9, r9, r3
   b7960:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b7962:	2b00      	cmp	r3, #0
   b7964:	dd17      	ble.n	b7996 <_strtod_l+0x75e>
   b7966:	4631      	mov	r1, r6
   b7968:	461a      	mov	r2, r3
   b796a:	4620      	mov	r0, r4
   b796c:	f001 f8ec 	bl	b8b48 <__pow5mult>
   b7970:	4606      	mov	r6, r0
   b7972:	2800      	cmp	r0, #0
   b7974:	f43f aea8 	beq.w	b76c8 <_strtod_l+0x490>
   b7978:	4601      	mov	r1, r0
   b797a:	9a18      	ldr	r2, [sp, #96]	; 0x60
   b797c:	4620      	mov	r0, r4
   b797e:	f001 f839 	bl	b89f4 <__multiply>
   b7982:	900b      	str	r0, [sp, #44]	; 0x2c
   b7984:	2800      	cmp	r0, #0
   b7986:	f43f ae9f 	beq.w	b76c8 <_strtod_l+0x490>
   b798a:	9918      	ldr	r1, [sp, #96]	; 0x60
   b798c:	4620      	mov	r0, r4
   b798e:	f000 ff19 	bl	b87c4 <_Bfree>
   b7992:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b7994:	9318      	str	r3, [sp, #96]	; 0x60
   b7996:	f1b8 0f00 	cmp.w	r8, #0
   b799a:	f300 808c 	bgt.w	b7ab6 <_strtod_l+0x87e>
   b799e:	9b06      	ldr	r3, [sp, #24]
   b79a0:	2b00      	cmp	r3, #0
   b79a2:	dd08      	ble.n	b79b6 <_strtod_l+0x77e>
   b79a4:	9a12      	ldr	r2, [sp, #72]	; 0x48
   b79a6:	9905      	ldr	r1, [sp, #20]
   b79a8:	4620      	mov	r0, r4
   b79aa:	f001 f8cd 	bl	b8b48 <__pow5mult>
   b79ae:	9005      	str	r0, [sp, #20]
   b79b0:	2800      	cmp	r0, #0
   b79b2:	f43f ae89 	beq.w	b76c8 <_strtod_l+0x490>
   b79b6:	2f00      	cmp	r7, #0
   b79b8:	dd08      	ble.n	b79cc <_strtod_l+0x794>
   b79ba:	9905      	ldr	r1, [sp, #20]
   b79bc:	463a      	mov	r2, r7
   b79be:	4620      	mov	r0, r4
   b79c0:	f001 f91c 	bl	b8bfc <__lshift>
   b79c4:	9005      	str	r0, [sp, #20]
   b79c6:	2800      	cmp	r0, #0
   b79c8:	f43f ae7e 	beq.w	b76c8 <_strtod_l+0x490>
   b79cc:	f1b9 0f00 	cmp.w	r9, #0
   b79d0:	dd08      	ble.n	b79e4 <_strtod_l+0x7ac>
   b79d2:	4631      	mov	r1, r6
   b79d4:	464a      	mov	r2, r9
   b79d6:	4620      	mov	r0, r4
   b79d8:	f001 f910 	bl	b8bfc <__lshift>
   b79dc:	4606      	mov	r6, r0
   b79de:	2800      	cmp	r0, #0
   b79e0:	f43f ae72 	beq.w	b76c8 <_strtod_l+0x490>
   b79e4:	9a05      	ldr	r2, [sp, #20]
   b79e6:	9918      	ldr	r1, [sp, #96]	; 0x60
   b79e8:	4620      	mov	r0, r4
   b79ea:	f001 f993 	bl	b8d14 <__mdiff>
   b79ee:	4605      	mov	r5, r0
   b79f0:	2800      	cmp	r0, #0
   b79f2:	f43f ae69 	beq.w	b76c8 <_strtod_l+0x490>
   b79f6:	68c3      	ldr	r3, [r0, #12]
   b79f8:	930b      	str	r3, [sp, #44]	; 0x2c
   b79fa:	2300      	movs	r3, #0
   b79fc:	60c3      	str	r3, [r0, #12]
   b79fe:	4631      	mov	r1, r6
   b7a00:	f001 f96c 	bl	b8cdc <__mcmp>
   b7a04:	2800      	cmp	r0, #0
   b7a06:	da60      	bge.n	b7aca <_strtod_l+0x892>
   b7a08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b7a0a:	ea53 030a 	orrs.w	r3, r3, sl
   b7a0e:	f040 8082 	bne.w	b7b16 <_strtod_l+0x8de>
   b7a12:	f3cb 0313 	ubfx	r3, fp, #0, #20
   b7a16:	2b00      	cmp	r3, #0
   b7a18:	d17d      	bne.n	b7b16 <_strtod_l+0x8de>
   b7a1a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   b7a1e:	0d1b      	lsrs	r3, r3, #20
   b7a20:	051b      	lsls	r3, r3, #20
   b7a22:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   b7a26:	d976      	bls.n	b7b16 <_strtod_l+0x8de>
   b7a28:	696b      	ldr	r3, [r5, #20]
   b7a2a:	b913      	cbnz	r3, b7a32 <_strtod_l+0x7fa>
   b7a2c:	692b      	ldr	r3, [r5, #16]
   b7a2e:	2b01      	cmp	r3, #1
   b7a30:	dd71      	ble.n	b7b16 <_strtod_l+0x8de>
   b7a32:	4629      	mov	r1, r5
   b7a34:	2201      	movs	r2, #1
   b7a36:	4620      	mov	r0, r4
   b7a38:	f001 f8e0 	bl	b8bfc <__lshift>
   b7a3c:	4631      	mov	r1, r6
   b7a3e:	4605      	mov	r5, r0
   b7a40:	f001 f94c 	bl	b8cdc <__mcmp>
   b7a44:	2800      	cmp	r0, #0
   b7a46:	dd66      	ble.n	b7b16 <_strtod_l+0x8de>
   b7a48:	9904      	ldr	r1, [sp, #16]
   b7a4a:	4a53      	ldr	r2, [pc, #332]	; (b7b98 <_strtod_l+0x960>)
   b7a4c:	465b      	mov	r3, fp
   b7a4e:	2900      	cmp	r1, #0
   b7a50:	f000 8081 	beq.w	b7b56 <_strtod_l+0x91e>
   b7a54:	ea02 010b 	and.w	r1, r2, fp
   b7a58:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   b7a5c:	dc7b      	bgt.n	b7b56 <_strtod_l+0x91e>
   b7a5e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   b7a62:	f77f aea9 	ble.w	b77b8 <_strtod_l+0x580>
   b7a66:	4b4d      	ldr	r3, [pc, #308]	; (b7b9c <_strtod_l+0x964>)
   b7a68:	4650      	mov	r0, sl
   b7a6a:	4659      	mov	r1, fp
   b7a6c:	2200      	movs	r2, #0
   b7a6e:	f7fe ffe5 	bl	b6a3c <__aeabi_dmul>
   b7a72:	460b      	mov	r3, r1
   b7a74:	4303      	orrs	r3, r0
   b7a76:	bf08      	it	eq
   b7a78:	2322      	moveq	r3, #34	; 0x22
   b7a7a:	4682      	mov	sl, r0
   b7a7c:	468b      	mov	fp, r1
   b7a7e:	bf08      	it	eq
   b7a80:	6023      	streq	r3, [r4, #0]
   b7a82:	e62b      	b.n	b76dc <_strtod_l+0x4a4>
   b7a84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b7a88:	fa02 f303 	lsl.w	r3, r2, r3
   b7a8c:	ea03 0a0a 	and.w	sl, r3, sl
   b7a90:	e6e3      	b.n	b785a <_strtod_l+0x622>
   b7a92:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   b7a96:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   b7a9a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   b7a9e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   b7aa2:	fa01 f308 	lsl.w	r3, r1, r8
   b7aa6:	9308      	str	r3, [sp, #32]
   b7aa8:	910d      	str	r1, [sp, #52]	; 0x34
   b7aaa:	e746      	b.n	b793a <_strtod_l+0x702>
   b7aac:	2300      	movs	r3, #0
   b7aae:	9308      	str	r3, [sp, #32]
   b7ab0:	2301      	movs	r3, #1
   b7ab2:	930d      	str	r3, [sp, #52]	; 0x34
   b7ab4:	e741      	b.n	b793a <_strtod_l+0x702>
   b7ab6:	9918      	ldr	r1, [sp, #96]	; 0x60
   b7ab8:	4642      	mov	r2, r8
   b7aba:	4620      	mov	r0, r4
   b7abc:	f001 f89e 	bl	b8bfc <__lshift>
   b7ac0:	9018      	str	r0, [sp, #96]	; 0x60
   b7ac2:	2800      	cmp	r0, #0
   b7ac4:	f47f af6b 	bne.w	b799e <_strtod_l+0x766>
   b7ac8:	e5fe      	b.n	b76c8 <_strtod_l+0x490>
   b7aca:	465f      	mov	r7, fp
   b7acc:	d16e      	bne.n	b7bac <_strtod_l+0x974>
   b7ace:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b7ad0:	f3cb 0313 	ubfx	r3, fp, #0, #20
   b7ad4:	b342      	cbz	r2, b7b28 <_strtod_l+0x8f0>
   b7ad6:	4a32      	ldr	r2, [pc, #200]	; (b7ba0 <_strtod_l+0x968>)
   b7ad8:	4293      	cmp	r3, r2
   b7ada:	d128      	bne.n	b7b2e <_strtod_l+0x8f6>
   b7adc:	9b04      	ldr	r3, [sp, #16]
   b7ade:	4651      	mov	r1, sl
   b7ae0:	b1eb      	cbz	r3, b7b1e <_strtod_l+0x8e6>
   b7ae2:	4b2d      	ldr	r3, [pc, #180]	; (b7b98 <_strtod_l+0x960>)
   b7ae4:	403b      	ands	r3, r7
   b7ae6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   b7aea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b7aee:	d819      	bhi.n	b7b24 <_strtod_l+0x8ec>
   b7af0:	0d1b      	lsrs	r3, r3, #20
   b7af2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   b7af6:	fa02 f303 	lsl.w	r3, r2, r3
   b7afa:	4299      	cmp	r1, r3
   b7afc:	d117      	bne.n	b7b2e <_strtod_l+0x8f6>
   b7afe:	4b29      	ldr	r3, [pc, #164]	; (b7ba4 <_strtod_l+0x96c>)
   b7b00:	429f      	cmp	r7, r3
   b7b02:	d102      	bne.n	b7b0a <_strtod_l+0x8d2>
   b7b04:	3101      	adds	r1, #1
   b7b06:	f43f addf 	beq.w	b76c8 <_strtod_l+0x490>
   b7b0a:	4b23      	ldr	r3, [pc, #140]	; (b7b98 <_strtod_l+0x960>)
   b7b0c:	403b      	ands	r3, r7
   b7b0e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   b7b12:	f04f 0a00 	mov.w	sl, #0
   b7b16:	9b04      	ldr	r3, [sp, #16]
   b7b18:	2b00      	cmp	r3, #0
   b7b1a:	d1a4      	bne.n	b7a66 <_strtod_l+0x82e>
   b7b1c:	e5de      	b.n	b76dc <_strtod_l+0x4a4>
   b7b1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b7b22:	e7ea      	b.n	b7afa <_strtod_l+0x8c2>
   b7b24:	4613      	mov	r3, r2
   b7b26:	e7e8      	b.n	b7afa <_strtod_l+0x8c2>
   b7b28:	ea53 030a 	orrs.w	r3, r3, sl
   b7b2c:	d08c      	beq.n	b7a48 <_strtod_l+0x810>
   b7b2e:	9b08      	ldr	r3, [sp, #32]
   b7b30:	b1db      	cbz	r3, b7b6a <_strtod_l+0x932>
   b7b32:	423b      	tst	r3, r7
   b7b34:	d0ef      	beq.n	b7b16 <_strtod_l+0x8de>
   b7b36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b7b38:	9a04      	ldr	r2, [sp, #16]
   b7b3a:	4650      	mov	r0, sl
   b7b3c:	4659      	mov	r1, fp
   b7b3e:	b1c3      	cbz	r3, b7b72 <_strtod_l+0x93a>
   b7b40:	f7ff fb5b 	bl	b71fa <sulp>
   b7b44:	4602      	mov	r2, r0
   b7b46:	460b      	mov	r3, r1
   b7b48:	ec51 0b18 	vmov	r0, r1, d8
   b7b4c:	f7fe fdc0 	bl	b66d0 <__adddf3>
   b7b50:	4682      	mov	sl, r0
   b7b52:	468b      	mov	fp, r1
   b7b54:	e7df      	b.n	b7b16 <_strtod_l+0x8de>
   b7b56:	4013      	ands	r3, r2
   b7b58:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   b7b5c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   b7b60:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   b7b64:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   b7b68:	e7d5      	b.n	b7b16 <_strtod_l+0x8de>
   b7b6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   b7b6c:	ea13 0f0a 	tst.w	r3, sl
   b7b70:	e7e0      	b.n	b7b34 <_strtod_l+0x8fc>
   b7b72:	f7ff fb42 	bl	b71fa <sulp>
   b7b76:	4602      	mov	r2, r0
   b7b78:	460b      	mov	r3, r1
   b7b7a:	ec51 0b18 	vmov	r0, r1, d8
   b7b7e:	f7fe fda5 	bl	b66cc <__aeabi_dsub>
   b7b82:	2200      	movs	r2, #0
   b7b84:	2300      	movs	r3, #0
   b7b86:	4682      	mov	sl, r0
   b7b88:	468b      	mov	fp, r1
   b7b8a:	f7ff f9bf 	bl	b6f0c <__aeabi_dcmpeq>
   b7b8e:	2800      	cmp	r0, #0
   b7b90:	d0c1      	beq.n	b7b16 <_strtod_l+0x8de>
   b7b92:	e611      	b.n	b77b8 <_strtod_l+0x580>
   b7b94:	fffffc02 	.word	0xfffffc02
   b7b98:	7ff00000 	.word	0x7ff00000
   b7b9c:	39500000 	.word	0x39500000
   b7ba0:	000fffff 	.word	0x000fffff
   b7ba4:	7fefffff 	.word	0x7fefffff
   b7ba8:	000b9510 	.word	0x000b9510
   b7bac:	4631      	mov	r1, r6
   b7bae:	4628      	mov	r0, r5
   b7bb0:	f001 fa12 	bl	b8fd8 <__ratio>
   b7bb4:	ec59 8b10 	vmov	r8, r9, d0
   b7bb8:	ee10 0a10 	vmov	r0, s0
   b7bbc:	2200      	movs	r2, #0
   b7bbe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   b7bc2:	4649      	mov	r1, r9
   b7bc4:	f7ff f9b6 	bl	b6f34 <__aeabi_dcmple>
   b7bc8:	2800      	cmp	r0, #0
   b7bca:	d07a      	beq.n	b7cc2 <_strtod_l+0xa8a>
   b7bcc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b7bce:	2b00      	cmp	r3, #0
   b7bd0:	d04a      	beq.n	b7c68 <_strtod_l+0xa30>
   b7bd2:	4b95      	ldr	r3, [pc, #596]	; (b7e28 <_strtod_l+0xbf0>)
   b7bd4:	2200      	movs	r2, #0
   b7bd6:	e9cd 2308 	strd	r2, r3, [sp, #32]
   b7bda:	f8df 924c 	ldr.w	r9, [pc, #588]	; b7e28 <_strtod_l+0xbf0>
   b7bde:	f04f 0800 	mov.w	r8, #0
   b7be2:	4b92      	ldr	r3, [pc, #584]	; (b7e2c <_strtod_l+0xbf4>)
   b7be4:	403b      	ands	r3, r7
   b7be6:	930d      	str	r3, [sp, #52]	; 0x34
   b7be8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   b7bea:	4b91      	ldr	r3, [pc, #580]	; (b7e30 <_strtod_l+0xbf8>)
   b7bec:	429a      	cmp	r2, r3
   b7bee:	f040 80b0 	bne.w	b7d52 <_strtod_l+0xb1a>
   b7bf2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   b7bf6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   b7bfa:	ec4b ab10 	vmov	d0, sl, fp
   b7bfe:	e9cd 0108 	strd	r0, r1, [sp, #32]
   b7c02:	f001 f911 	bl	b8e28 <__ulp>
   b7c06:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   b7c0a:	ec53 2b10 	vmov	r2, r3, d0
   b7c0e:	f7fe ff15 	bl	b6a3c <__aeabi_dmul>
   b7c12:	4652      	mov	r2, sl
   b7c14:	465b      	mov	r3, fp
   b7c16:	f7fe fd5b 	bl	b66d0 <__adddf3>
   b7c1a:	460b      	mov	r3, r1
   b7c1c:	4983      	ldr	r1, [pc, #524]	; (b7e2c <_strtod_l+0xbf4>)
   b7c1e:	4a85      	ldr	r2, [pc, #532]	; (b7e34 <_strtod_l+0xbfc>)
   b7c20:	4019      	ands	r1, r3
   b7c22:	4291      	cmp	r1, r2
   b7c24:	4682      	mov	sl, r0
   b7c26:	d960      	bls.n	b7cea <_strtod_l+0xab2>
   b7c28:	ee18 3a90 	vmov	r3, s17
   b7c2c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   b7c30:	4293      	cmp	r3, r2
   b7c32:	d104      	bne.n	b7c3e <_strtod_l+0xa06>
   b7c34:	ee18 3a10 	vmov	r3, s16
   b7c38:	3301      	adds	r3, #1
   b7c3a:	f43f ad45 	beq.w	b76c8 <_strtod_l+0x490>
   b7c3e:	f8df b200 	ldr.w	fp, [pc, #512]	; b7e40 <_strtod_l+0xc08>
   b7c42:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   b7c46:	9918      	ldr	r1, [sp, #96]	; 0x60
   b7c48:	4620      	mov	r0, r4
   b7c4a:	f000 fdbb 	bl	b87c4 <_Bfree>
   b7c4e:	9905      	ldr	r1, [sp, #20]
   b7c50:	4620      	mov	r0, r4
   b7c52:	f000 fdb7 	bl	b87c4 <_Bfree>
   b7c56:	4631      	mov	r1, r6
   b7c58:	4620      	mov	r0, r4
   b7c5a:	f000 fdb3 	bl	b87c4 <_Bfree>
   b7c5e:	4629      	mov	r1, r5
   b7c60:	4620      	mov	r0, r4
   b7c62:	f000 fdaf 	bl	b87c4 <_Bfree>
   b7c66:	e61a      	b.n	b789e <_strtod_l+0x666>
   b7c68:	f1ba 0f00 	cmp.w	sl, #0
   b7c6c:	d11b      	bne.n	b7ca6 <_strtod_l+0xa6e>
   b7c6e:	f3cb 0313 	ubfx	r3, fp, #0, #20
   b7c72:	b9f3      	cbnz	r3, b7cb2 <_strtod_l+0xa7a>
   b7c74:	4b6c      	ldr	r3, [pc, #432]	; (b7e28 <_strtod_l+0xbf0>)
   b7c76:	2200      	movs	r2, #0
   b7c78:	4640      	mov	r0, r8
   b7c7a:	4649      	mov	r1, r9
   b7c7c:	f7ff f950 	bl	b6f20 <__aeabi_dcmplt>
   b7c80:	b9d0      	cbnz	r0, b7cb8 <_strtod_l+0xa80>
   b7c82:	4640      	mov	r0, r8
   b7c84:	4649      	mov	r1, r9
   b7c86:	4b6c      	ldr	r3, [pc, #432]	; (b7e38 <_strtod_l+0xc00>)
   b7c88:	2200      	movs	r2, #0
   b7c8a:	f7fe fed7 	bl	b6a3c <__aeabi_dmul>
   b7c8e:	4680      	mov	r8, r0
   b7c90:	4689      	mov	r9, r1
   b7c92:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   b7c96:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   b7c9a:	9315      	str	r3, [sp, #84]	; 0x54
   b7c9c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   b7ca0:	e9cd 2308 	strd	r2, r3, [sp, #32]
   b7ca4:	e79d      	b.n	b7be2 <_strtod_l+0x9aa>
   b7ca6:	f1ba 0f01 	cmp.w	sl, #1
   b7caa:	d102      	bne.n	b7cb2 <_strtod_l+0xa7a>
   b7cac:	2f00      	cmp	r7, #0
   b7cae:	f43f ad83 	beq.w	b77b8 <_strtod_l+0x580>
   b7cb2:	4b62      	ldr	r3, [pc, #392]	; (b7e3c <_strtod_l+0xc04>)
   b7cb4:	2200      	movs	r2, #0
   b7cb6:	e78e      	b.n	b7bd6 <_strtod_l+0x99e>
   b7cb8:	f8df 917c 	ldr.w	r9, [pc, #380]	; b7e38 <_strtod_l+0xc00>
   b7cbc:	f04f 0800 	mov.w	r8, #0
   b7cc0:	e7e7      	b.n	b7c92 <_strtod_l+0xa5a>
   b7cc2:	4b5d      	ldr	r3, [pc, #372]	; (b7e38 <_strtod_l+0xc00>)
   b7cc4:	4640      	mov	r0, r8
   b7cc6:	4649      	mov	r1, r9
   b7cc8:	2200      	movs	r2, #0
   b7cca:	f7fe feb7 	bl	b6a3c <__aeabi_dmul>
   b7cce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b7cd0:	4680      	mov	r8, r0
   b7cd2:	4689      	mov	r9, r1
   b7cd4:	b933      	cbnz	r3, b7ce4 <_strtod_l+0xaac>
   b7cd6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   b7cda:	900e      	str	r0, [sp, #56]	; 0x38
   b7cdc:	930f      	str	r3, [sp, #60]	; 0x3c
   b7cde:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   b7ce2:	e7dd      	b.n	b7ca0 <_strtod_l+0xa68>
   b7ce4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
   b7ce8:	e7f9      	b.n	b7cde <_strtod_l+0xaa6>
   b7cea:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   b7cee:	9b04      	ldr	r3, [sp, #16]
   b7cf0:	2b00      	cmp	r3, #0
   b7cf2:	d1a8      	bne.n	b7c46 <_strtod_l+0xa0e>
   b7cf4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   b7cf8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   b7cfa:	0d1b      	lsrs	r3, r3, #20
   b7cfc:	051b      	lsls	r3, r3, #20
   b7cfe:	429a      	cmp	r2, r3
   b7d00:	d1a1      	bne.n	b7c46 <_strtod_l+0xa0e>
   b7d02:	4640      	mov	r0, r8
   b7d04:	4649      	mov	r1, r9
   b7d06:	f001 fa05 	bl	b9114 <__aeabi_d2lz>
   b7d0a:	f7fe fe69 	bl	b69e0 <__aeabi_l2d>
   b7d0e:	4602      	mov	r2, r0
   b7d10:	460b      	mov	r3, r1
   b7d12:	4640      	mov	r0, r8
   b7d14:	4649      	mov	r1, r9
   b7d16:	f7fe fcd9 	bl	b66cc <__aeabi_dsub>
   b7d1a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b7d1c:	f3cb 0313 	ubfx	r3, fp, #0, #20
   b7d20:	ea43 030a 	orr.w	r3, r3, sl
   b7d24:	4313      	orrs	r3, r2
   b7d26:	4680      	mov	r8, r0
   b7d28:	4689      	mov	r9, r1
   b7d2a:	d055      	beq.n	b7dd8 <_strtod_l+0xba0>
   b7d2c:	a336      	add	r3, pc, #216	; (adr r3, b7e08 <_strtod_l+0xbd0>)
   b7d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7d32:	f7ff f8f5 	bl	b6f20 <__aeabi_dcmplt>
   b7d36:	2800      	cmp	r0, #0
   b7d38:	f47f acd0 	bne.w	b76dc <_strtod_l+0x4a4>
   b7d3c:	a334      	add	r3, pc, #208	; (adr r3, b7e10 <_strtod_l+0xbd8>)
   b7d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7d42:	4640      	mov	r0, r8
   b7d44:	4649      	mov	r1, r9
   b7d46:	f7ff f909 	bl	b6f5c <__aeabi_dcmpgt>
   b7d4a:	2800      	cmp	r0, #0
   b7d4c:	f43f af7b 	beq.w	b7c46 <_strtod_l+0xa0e>
   b7d50:	e4c4      	b.n	b76dc <_strtod_l+0x4a4>
   b7d52:	9b04      	ldr	r3, [sp, #16]
   b7d54:	b333      	cbz	r3, b7da4 <_strtod_l+0xb6c>
   b7d56:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   b7d58:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   b7d5c:	d822      	bhi.n	b7da4 <_strtod_l+0xb6c>
   b7d5e:	a32e      	add	r3, pc, #184	; (adr r3, b7e18 <_strtod_l+0xbe0>)
   b7d60:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7d64:	4640      	mov	r0, r8
   b7d66:	4649      	mov	r1, r9
   b7d68:	f7ff f8e4 	bl	b6f34 <__aeabi_dcmple>
   b7d6c:	b1a0      	cbz	r0, b7d98 <_strtod_l+0xb60>
   b7d6e:	4649      	mov	r1, r9
   b7d70:	4640      	mov	r0, r8
   b7d72:	f7ff f93b 	bl	b6fec <__aeabi_d2uiz>
   b7d76:	2801      	cmp	r0, #1
   b7d78:	bf38      	it	cc
   b7d7a:	2001      	movcc	r0, #1
   b7d7c:	f7fe fde4 	bl	b6948 <__aeabi_ui2d>
   b7d80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b7d82:	4680      	mov	r8, r0
   b7d84:	4689      	mov	r9, r1
   b7d86:	bb23      	cbnz	r3, b7dd2 <_strtod_l+0xb9a>
   b7d88:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   b7d8c:	9010      	str	r0, [sp, #64]	; 0x40
   b7d8e:	9311      	str	r3, [sp, #68]	; 0x44
   b7d90:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   b7d94:	e9cd 2308 	strd	r2, r3, [sp, #32]
   b7d98:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b7d9a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   b7d9c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   b7da0:	1a9b      	subs	r3, r3, r2
   b7da2:	9309      	str	r3, [sp, #36]	; 0x24
   b7da4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   b7da8:	eeb0 0a48 	vmov.f32	s0, s16
   b7dac:	eef0 0a68 	vmov.f32	s1, s17
   b7db0:	e9cd 0108 	strd	r0, r1, [sp, #32]
   b7db4:	f001 f838 	bl	b8e28 <__ulp>
   b7db8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   b7dbc:	ec53 2b10 	vmov	r2, r3, d0
   b7dc0:	f7fe fe3c 	bl	b6a3c <__aeabi_dmul>
   b7dc4:	ec53 2b18 	vmov	r2, r3, d8
   b7dc8:	f7fe fc82 	bl	b66d0 <__adddf3>
   b7dcc:	4682      	mov	sl, r0
   b7dce:	468b      	mov	fp, r1
   b7dd0:	e78d      	b.n	b7cee <_strtod_l+0xab6>
   b7dd2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
   b7dd6:	e7db      	b.n	b7d90 <_strtod_l+0xb58>
   b7dd8:	a311      	add	r3, pc, #68	; (adr r3, b7e20 <_strtod_l+0xbe8>)
   b7dda:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7dde:	f7ff f89f 	bl	b6f20 <__aeabi_dcmplt>
   b7de2:	e7b2      	b.n	b7d4a <_strtod_l+0xb12>
   b7de4:	2300      	movs	r3, #0
   b7de6:	930a      	str	r3, [sp, #40]	; 0x28
   b7de8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   b7dea:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b7dec:	6013      	str	r3, [r2, #0]
   b7dee:	f7ff ba6b 	b.w	b72c8 <_strtod_l+0x90>
   b7df2:	2a65      	cmp	r2, #101	; 0x65
   b7df4:	f43f ab5f 	beq.w	b74b6 <_strtod_l+0x27e>
   b7df8:	2a45      	cmp	r2, #69	; 0x45
   b7dfa:	f43f ab5c 	beq.w	b74b6 <_strtod_l+0x27e>
   b7dfe:	2301      	movs	r3, #1
   b7e00:	f7ff bb94 	b.w	b752c <_strtod_l+0x2f4>
   b7e04:	f3af 8000 	nop.w
   b7e08:	94a03595 	.word	0x94a03595
   b7e0c:	3fdfffff 	.word	0x3fdfffff
   b7e10:	35afe535 	.word	0x35afe535
   b7e14:	3fe00000 	.word	0x3fe00000
   b7e18:	ffc00000 	.word	0xffc00000
   b7e1c:	41dfffff 	.word	0x41dfffff
   b7e20:	94a03595 	.word	0x94a03595
   b7e24:	3fcfffff 	.word	0x3fcfffff
   b7e28:	3ff00000 	.word	0x3ff00000
   b7e2c:	7ff00000 	.word	0x7ff00000
   b7e30:	7fe00000 	.word	0x7fe00000
   b7e34:	7c9fffff 	.word	0x7c9fffff
   b7e38:	3fe00000 	.word	0x3fe00000
   b7e3c:	bff00000 	.word	0xbff00000
   b7e40:	7fefffff 	.word	0x7fefffff

000b7e44 <strtod>:
   b7e44:	460a      	mov	r2, r1
   b7e46:	4601      	mov	r1, r0
   b7e48:	4802      	ldr	r0, [pc, #8]	; (b7e54 <strtod+0x10>)
   b7e4a:	4b03      	ldr	r3, [pc, #12]	; (b7e58 <strtod+0x14>)
   b7e4c:	6800      	ldr	r0, [r0, #0]
   b7e4e:	f7ff b9f3 	b.w	b7238 <_strtod_l>
   b7e52:	bf00      	nop
   b7e54:	2003e478 	.word	0x2003e478
   b7e58:	2003e4e4 	.word	0x2003e4e4

000b7e5c <_strtol_l.constprop.0>:
   b7e5c:	2b01      	cmp	r3, #1
   b7e5e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b7e62:	d001      	beq.n	b7e68 <_strtol_l.constprop.0+0xc>
   b7e64:	2b24      	cmp	r3, #36	; 0x24
   b7e66:	d906      	bls.n	b7e76 <_strtol_l.constprop.0+0x1a>
   b7e68:	f7fc fc8e 	bl	b4788 <__errno>
   b7e6c:	2316      	movs	r3, #22
   b7e6e:	6003      	str	r3, [r0, #0]
   b7e70:	2000      	movs	r0, #0
   b7e72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b7e76:	f8df c0e4 	ldr.w	ip, [pc, #228]	; b7f5c <_strtol_l.constprop.0+0x100>
   b7e7a:	460d      	mov	r5, r1
   b7e7c:	462e      	mov	r6, r5
   b7e7e:	f815 4b01 	ldrb.w	r4, [r5], #1
   b7e82:	f814 700c 	ldrb.w	r7, [r4, ip]
   b7e86:	f017 0708 	ands.w	r7, r7, #8
   b7e8a:	d1f7      	bne.n	b7e7c <_strtol_l.constprop.0+0x20>
   b7e8c:	2c2d      	cmp	r4, #45	; 0x2d
   b7e8e:	d132      	bne.n	b7ef6 <_strtol_l.constprop.0+0x9a>
   b7e90:	782c      	ldrb	r4, [r5, #0]
   b7e92:	2701      	movs	r7, #1
   b7e94:	1cb5      	adds	r5, r6, #2
   b7e96:	2b00      	cmp	r3, #0
   b7e98:	d05b      	beq.n	b7f52 <_strtol_l.constprop.0+0xf6>
   b7e9a:	2b10      	cmp	r3, #16
   b7e9c:	d109      	bne.n	b7eb2 <_strtol_l.constprop.0+0x56>
   b7e9e:	2c30      	cmp	r4, #48	; 0x30
   b7ea0:	d107      	bne.n	b7eb2 <_strtol_l.constprop.0+0x56>
   b7ea2:	782c      	ldrb	r4, [r5, #0]
   b7ea4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   b7ea8:	2c58      	cmp	r4, #88	; 0x58
   b7eaa:	d14d      	bne.n	b7f48 <_strtol_l.constprop.0+0xec>
   b7eac:	786c      	ldrb	r4, [r5, #1]
   b7eae:	2310      	movs	r3, #16
   b7eb0:	3502      	adds	r5, #2
   b7eb2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   b7eb6:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b7eba:	f04f 0c00 	mov.w	ip, #0
   b7ebe:	fbb8 f9f3 	udiv	r9, r8, r3
   b7ec2:	4666      	mov	r6, ip
   b7ec4:	fb03 8a19 	mls	sl, r3, r9, r8
   b7ec8:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   b7ecc:	f1be 0f09 	cmp.w	lr, #9
   b7ed0:	d816      	bhi.n	b7f00 <_strtol_l.constprop.0+0xa4>
   b7ed2:	4674      	mov	r4, lr
   b7ed4:	42a3      	cmp	r3, r4
   b7ed6:	dd24      	ble.n	b7f22 <_strtol_l.constprop.0+0xc6>
   b7ed8:	f1bc 0f00 	cmp.w	ip, #0
   b7edc:	db1e      	blt.n	b7f1c <_strtol_l.constprop.0+0xc0>
   b7ede:	45b1      	cmp	r9, r6
   b7ee0:	d31c      	bcc.n	b7f1c <_strtol_l.constprop.0+0xc0>
   b7ee2:	d101      	bne.n	b7ee8 <_strtol_l.constprop.0+0x8c>
   b7ee4:	45a2      	cmp	sl, r4
   b7ee6:	db19      	blt.n	b7f1c <_strtol_l.constprop.0+0xc0>
   b7ee8:	fb06 4603 	mla	r6, r6, r3, r4
   b7eec:	f04f 0c01 	mov.w	ip, #1
   b7ef0:	f815 4b01 	ldrb.w	r4, [r5], #1
   b7ef4:	e7e8      	b.n	b7ec8 <_strtol_l.constprop.0+0x6c>
   b7ef6:	2c2b      	cmp	r4, #43	; 0x2b
   b7ef8:	bf04      	itt	eq
   b7efa:	782c      	ldrbeq	r4, [r5, #0]
   b7efc:	1cb5      	addeq	r5, r6, #2
   b7efe:	e7ca      	b.n	b7e96 <_strtol_l.constprop.0+0x3a>
   b7f00:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   b7f04:	f1be 0f19 	cmp.w	lr, #25
   b7f08:	d801      	bhi.n	b7f0e <_strtol_l.constprop.0+0xb2>
   b7f0a:	3c37      	subs	r4, #55	; 0x37
   b7f0c:	e7e2      	b.n	b7ed4 <_strtol_l.constprop.0+0x78>
   b7f0e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   b7f12:	f1be 0f19 	cmp.w	lr, #25
   b7f16:	d804      	bhi.n	b7f22 <_strtol_l.constprop.0+0xc6>
   b7f18:	3c57      	subs	r4, #87	; 0x57
   b7f1a:	e7db      	b.n	b7ed4 <_strtol_l.constprop.0+0x78>
   b7f1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   b7f20:	e7e6      	b.n	b7ef0 <_strtol_l.constprop.0+0x94>
   b7f22:	f1bc 0f00 	cmp.w	ip, #0
   b7f26:	da05      	bge.n	b7f34 <_strtol_l.constprop.0+0xd8>
   b7f28:	2322      	movs	r3, #34	; 0x22
   b7f2a:	6003      	str	r3, [r0, #0]
   b7f2c:	4646      	mov	r6, r8
   b7f2e:	b942      	cbnz	r2, b7f42 <_strtol_l.constprop.0+0xe6>
   b7f30:	4630      	mov	r0, r6
   b7f32:	e79e      	b.n	b7e72 <_strtol_l.constprop.0+0x16>
   b7f34:	b107      	cbz	r7, b7f38 <_strtol_l.constprop.0+0xdc>
   b7f36:	4276      	negs	r6, r6
   b7f38:	2a00      	cmp	r2, #0
   b7f3a:	d0f9      	beq.n	b7f30 <_strtol_l.constprop.0+0xd4>
   b7f3c:	f1bc 0f00 	cmp.w	ip, #0
   b7f40:	d000      	beq.n	b7f44 <_strtol_l.constprop.0+0xe8>
   b7f42:	1e69      	subs	r1, r5, #1
   b7f44:	6011      	str	r1, [r2, #0]
   b7f46:	e7f3      	b.n	b7f30 <_strtol_l.constprop.0+0xd4>
   b7f48:	2430      	movs	r4, #48	; 0x30
   b7f4a:	2b00      	cmp	r3, #0
   b7f4c:	d1b1      	bne.n	b7eb2 <_strtol_l.constprop.0+0x56>
   b7f4e:	2308      	movs	r3, #8
   b7f50:	e7af      	b.n	b7eb2 <_strtol_l.constprop.0+0x56>
   b7f52:	2c30      	cmp	r4, #48	; 0x30
   b7f54:	d0a5      	beq.n	b7ea2 <_strtol_l.constprop.0+0x46>
   b7f56:	230a      	movs	r3, #10
   b7f58:	e7ab      	b.n	b7eb2 <_strtol_l.constprop.0+0x56>
   b7f5a:	bf00      	nop
   b7f5c:	000b9539 	.word	0x000b9539

000b7f60 <strtol>:
   b7f60:	4613      	mov	r3, r2
   b7f62:	460a      	mov	r2, r1
   b7f64:	4601      	mov	r1, r0
   b7f66:	4802      	ldr	r0, [pc, #8]	; (b7f70 <strtol+0x10>)
   b7f68:	6800      	ldr	r0, [r0, #0]
   b7f6a:	f7ff bf77 	b.w	b7e5c <_strtol_l.constprop.0>
   b7f6e:	bf00      	nop
   b7f70:	2003e478 	.word	0x2003e478

000b7f74 <__register_exitproc>:
   b7f74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b7f78:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b8034 <__register_exitproc+0xc0>
   b7f7c:	4606      	mov	r6, r0
   b7f7e:	f8d8 0000 	ldr.w	r0, [r8]
   b7f82:	461f      	mov	r7, r3
   b7f84:	460d      	mov	r5, r1
   b7f86:	4691      	mov	r9, r2
   b7f88:	f000 fbc6 	bl	b8718 <__retarget_lock_acquire_recursive>
   b7f8c:	4b25      	ldr	r3, [pc, #148]	; (b8024 <__register_exitproc+0xb0>)
   b7f8e:	681c      	ldr	r4, [r3, #0]
   b7f90:	b934      	cbnz	r4, b7fa0 <__register_exitproc+0x2c>
   b7f92:	4c25      	ldr	r4, [pc, #148]	; (b8028 <__register_exitproc+0xb4>)
   b7f94:	601c      	str	r4, [r3, #0]
   b7f96:	4b25      	ldr	r3, [pc, #148]	; (b802c <__register_exitproc+0xb8>)
   b7f98:	b113      	cbz	r3, b7fa0 <__register_exitproc+0x2c>
   b7f9a:	681b      	ldr	r3, [r3, #0]
   b7f9c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b7fa0:	6863      	ldr	r3, [r4, #4]
   b7fa2:	2b1f      	cmp	r3, #31
   b7fa4:	dd07      	ble.n	b7fb6 <__register_exitproc+0x42>
   b7fa6:	f8d8 0000 	ldr.w	r0, [r8]
   b7faa:	f000 fbb7 	bl	b871c <__retarget_lock_release_recursive>
   b7fae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b7fb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b7fb6:	b34e      	cbz	r6, b800c <__register_exitproc+0x98>
   b7fb8:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b7fbc:	b988      	cbnz	r0, b7fe2 <__register_exitproc+0x6e>
   b7fbe:	4b1c      	ldr	r3, [pc, #112]	; (b8030 <__register_exitproc+0xbc>)
   b7fc0:	b923      	cbnz	r3, b7fcc <__register_exitproc+0x58>
   b7fc2:	f8d8 0000 	ldr.w	r0, [r8]
   b7fc6:	f000 fba8 	bl	b871a <__retarget_lock_release>
   b7fca:	e7f0      	b.n	b7fae <__register_exitproc+0x3a>
   b7fcc:	f44f 7084 	mov.w	r0, #264	; 0x108
   b7fd0:	f7fc fbaa 	bl	b4728 <malloc>
   b7fd4:	2800      	cmp	r0, #0
   b7fd6:	d0f4      	beq.n	b7fc2 <__register_exitproc+0x4e>
   b7fd8:	2300      	movs	r3, #0
   b7fda:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b7fde:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b7fe2:	6863      	ldr	r3, [r4, #4]
   b7fe4:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b7fe8:	2201      	movs	r2, #1
   b7fea:	409a      	lsls	r2, r3
   b7fec:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b7ff0:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b7ff4:	4313      	orrs	r3, r2
   b7ff6:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b7ffa:	2e02      	cmp	r6, #2
   b7ffc:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b8000:	bf02      	ittt	eq
   b8002:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b8006:	4313      	orreq	r3, r2
   b8008:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b800c:	6863      	ldr	r3, [r4, #4]
   b800e:	f8d8 0000 	ldr.w	r0, [r8]
   b8012:	1c5a      	adds	r2, r3, #1
   b8014:	3302      	adds	r3, #2
   b8016:	6062      	str	r2, [r4, #4]
   b8018:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b801c:	f000 fb7e 	bl	b871c <__retarget_lock_release_recursive>
   b8020:	2000      	movs	r0, #0
   b8022:	e7c6      	b.n	b7fb2 <__register_exitproc+0x3e>
   b8024:	2003e7e8 	.word	0x2003e7e8
   b8028:	2003e75c 	.word	0x2003e75c
   b802c:	00000000 	.word	0x00000000
   b8030:	000b4729 	.word	0x000b4729
   b8034:	2003e4dc 	.word	0x2003e4dc

000b8038 <rshift>:
   b8038:	6903      	ldr	r3, [r0, #16]
   b803a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   b803e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b8042:	ea4f 1261 	mov.w	r2, r1, asr #5
   b8046:	f100 0414 	add.w	r4, r0, #20
   b804a:	dd45      	ble.n	b80d8 <rshift+0xa0>
   b804c:	f011 011f 	ands.w	r1, r1, #31
   b8050:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   b8054:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   b8058:	d10c      	bne.n	b8074 <rshift+0x3c>
   b805a:	f100 0710 	add.w	r7, r0, #16
   b805e:	4629      	mov	r1, r5
   b8060:	42b1      	cmp	r1, r6
   b8062:	d334      	bcc.n	b80ce <rshift+0x96>
   b8064:	1a9b      	subs	r3, r3, r2
   b8066:	009b      	lsls	r3, r3, #2
   b8068:	1eea      	subs	r2, r5, #3
   b806a:	4296      	cmp	r6, r2
   b806c:	bf38      	it	cc
   b806e:	2300      	movcc	r3, #0
   b8070:	4423      	add	r3, r4
   b8072:	e015      	b.n	b80a0 <rshift+0x68>
   b8074:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   b8078:	f1c1 0820 	rsb	r8, r1, #32
   b807c:	40cf      	lsrs	r7, r1
   b807e:	f105 0e04 	add.w	lr, r5, #4
   b8082:	46a1      	mov	r9, r4
   b8084:	4576      	cmp	r6, lr
   b8086:	46f4      	mov	ip, lr
   b8088:	d815      	bhi.n	b80b6 <rshift+0x7e>
   b808a:	1a9a      	subs	r2, r3, r2
   b808c:	0092      	lsls	r2, r2, #2
   b808e:	3a04      	subs	r2, #4
   b8090:	3501      	adds	r5, #1
   b8092:	42ae      	cmp	r6, r5
   b8094:	bf38      	it	cc
   b8096:	2200      	movcc	r2, #0
   b8098:	18a3      	adds	r3, r4, r2
   b809a:	50a7      	str	r7, [r4, r2]
   b809c:	b107      	cbz	r7, b80a0 <rshift+0x68>
   b809e:	3304      	adds	r3, #4
   b80a0:	1b1a      	subs	r2, r3, r4
   b80a2:	42a3      	cmp	r3, r4
   b80a4:	ea4f 02a2 	mov.w	r2, r2, asr #2
   b80a8:	bf08      	it	eq
   b80aa:	2300      	moveq	r3, #0
   b80ac:	6102      	str	r2, [r0, #16]
   b80ae:	bf08      	it	eq
   b80b0:	6143      	streq	r3, [r0, #20]
   b80b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b80b6:	f8dc c000 	ldr.w	ip, [ip]
   b80ba:	fa0c fc08 	lsl.w	ip, ip, r8
   b80be:	ea4c 0707 	orr.w	r7, ip, r7
   b80c2:	f849 7b04 	str.w	r7, [r9], #4
   b80c6:	f85e 7b04 	ldr.w	r7, [lr], #4
   b80ca:	40cf      	lsrs	r7, r1
   b80cc:	e7da      	b.n	b8084 <rshift+0x4c>
   b80ce:	f851 cb04 	ldr.w	ip, [r1], #4
   b80d2:	f847 cf04 	str.w	ip, [r7, #4]!
   b80d6:	e7c3      	b.n	b8060 <rshift+0x28>
   b80d8:	4623      	mov	r3, r4
   b80da:	e7e1      	b.n	b80a0 <rshift+0x68>

000b80dc <__hexdig_fun>:
   b80dc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b80e0:	2b09      	cmp	r3, #9
   b80e2:	d802      	bhi.n	b80ea <__hexdig_fun+0xe>
   b80e4:	3820      	subs	r0, #32
   b80e6:	b2c0      	uxtb	r0, r0
   b80e8:	4770      	bx	lr
   b80ea:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   b80ee:	2b05      	cmp	r3, #5
   b80f0:	d801      	bhi.n	b80f6 <__hexdig_fun+0x1a>
   b80f2:	3847      	subs	r0, #71	; 0x47
   b80f4:	e7f7      	b.n	b80e6 <__hexdig_fun+0xa>
   b80f6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   b80fa:	2b05      	cmp	r3, #5
   b80fc:	d801      	bhi.n	b8102 <__hexdig_fun+0x26>
   b80fe:	3827      	subs	r0, #39	; 0x27
   b8100:	e7f1      	b.n	b80e6 <__hexdig_fun+0xa>
   b8102:	2000      	movs	r0, #0
   b8104:	4770      	bx	lr
	...

000b8108 <__gethex>:
   b8108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b810c:	ed2d 8b02 	vpush	{d8}
   b8110:	b089      	sub	sp, #36	; 0x24
   b8112:	ee08 0a10 	vmov	s16, r0
   b8116:	9304      	str	r3, [sp, #16]
   b8118:	4bb4      	ldr	r3, [pc, #720]	; (b83ec <__gethex+0x2e4>)
   b811a:	681b      	ldr	r3, [r3, #0]
   b811c:	9301      	str	r3, [sp, #4]
   b811e:	4618      	mov	r0, r3
   b8120:	468b      	mov	fp, r1
   b8122:	4690      	mov	r8, r2
   b8124:	f7ff f839 	bl	b719a <strlen>
   b8128:	9b01      	ldr	r3, [sp, #4]
   b812a:	f8db 2000 	ldr.w	r2, [fp]
   b812e:	4403      	add	r3, r0
   b8130:	4682      	mov	sl, r0
   b8132:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   b8136:	9305      	str	r3, [sp, #20]
   b8138:	1c93      	adds	r3, r2, #2
   b813a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   b813e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   b8142:	32fe      	adds	r2, #254	; 0xfe
   b8144:	18d1      	adds	r1, r2, r3
   b8146:	461f      	mov	r7, r3
   b8148:	f813 0b01 	ldrb.w	r0, [r3], #1
   b814c:	9100      	str	r1, [sp, #0]
   b814e:	2830      	cmp	r0, #48	; 0x30
   b8150:	d0f8      	beq.n	b8144 <__gethex+0x3c>
   b8152:	f7ff ffc3 	bl	b80dc <__hexdig_fun>
   b8156:	4604      	mov	r4, r0
   b8158:	2800      	cmp	r0, #0
   b815a:	d13a      	bne.n	b81d2 <__gethex+0xca>
   b815c:	9901      	ldr	r1, [sp, #4]
   b815e:	4652      	mov	r2, sl
   b8160:	4638      	mov	r0, r7
   b8162:	f7ff f822 	bl	b71aa <strncmp>
   b8166:	4605      	mov	r5, r0
   b8168:	2800      	cmp	r0, #0
   b816a:	d168      	bne.n	b823e <__gethex+0x136>
   b816c:	f817 000a 	ldrb.w	r0, [r7, sl]
   b8170:	eb07 060a 	add.w	r6, r7, sl
   b8174:	f7ff ffb2 	bl	b80dc <__hexdig_fun>
   b8178:	2800      	cmp	r0, #0
   b817a:	d062      	beq.n	b8242 <__gethex+0x13a>
   b817c:	4633      	mov	r3, r6
   b817e:	7818      	ldrb	r0, [r3, #0]
   b8180:	2830      	cmp	r0, #48	; 0x30
   b8182:	461f      	mov	r7, r3
   b8184:	f103 0301 	add.w	r3, r3, #1
   b8188:	d0f9      	beq.n	b817e <__gethex+0x76>
   b818a:	f7ff ffa7 	bl	b80dc <__hexdig_fun>
   b818e:	2301      	movs	r3, #1
   b8190:	fab0 f480 	clz	r4, r0
   b8194:	0964      	lsrs	r4, r4, #5
   b8196:	4635      	mov	r5, r6
   b8198:	9300      	str	r3, [sp, #0]
   b819a:	463a      	mov	r2, r7
   b819c:	4616      	mov	r6, r2
   b819e:	3201      	adds	r2, #1
   b81a0:	7830      	ldrb	r0, [r6, #0]
   b81a2:	f7ff ff9b 	bl	b80dc <__hexdig_fun>
   b81a6:	2800      	cmp	r0, #0
   b81a8:	d1f8      	bne.n	b819c <__gethex+0x94>
   b81aa:	9901      	ldr	r1, [sp, #4]
   b81ac:	4652      	mov	r2, sl
   b81ae:	4630      	mov	r0, r6
   b81b0:	f7fe fffb 	bl	b71aa <strncmp>
   b81b4:	b980      	cbnz	r0, b81d8 <__gethex+0xd0>
   b81b6:	b94d      	cbnz	r5, b81cc <__gethex+0xc4>
   b81b8:	eb06 050a 	add.w	r5, r6, sl
   b81bc:	462a      	mov	r2, r5
   b81be:	4616      	mov	r6, r2
   b81c0:	3201      	adds	r2, #1
   b81c2:	7830      	ldrb	r0, [r6, #0]
   b81c4:	f7ff ff8a 	bl	b80dc <__hexdig_fun>
   b81c8:	2800      	cmp	r0, #0
   b81ca:	d1f8      	bne.n	b81be <__gethex+0xb6>
   b81cc:	1bad      	subs	r5, r5, r6
   b81ce:	00ad      	lsls	r5, r5, #2
   b81d0:	e004      	b.n	b81dc <__gethex+0xd4>
   b81d2:	2400      	movs	r4, #0
   b81d4:	4625      	mov	r5, r4
   b81d6:	e7e0      	b.n	b819a <__gethex+0x92>
   b81d8:	2d00      	cmp	r5, #0
   b81da:	d1f7      	bne.n	b81cc <__gethex+0xc4>
   b81dc:	7833      	ldrb	r3, [r6, #0]
   b81de:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   b81e2:	2b50      	cmp	r3, #80	; 0x50
   b81e4:	d13b      	bne.n	b825e <__gethex+0x156>
   b81e6:	7873      	ldrb	r3, [r6, #1]
   b81e8:	2b2b      	cmp	r3, #43	; 0x2b
   b81ea:	d02c      	beq.n	b8246 <__gethex+0x13e>
   b81ec:	2b2d      	cmp	r3, #45	; 0x2d
   b81ee:	d02e      	beq.n	b824e <__gethex+0x146>
   b81f0:	1c71      	adds	r1, r6, #1
   b81f2:	f04f 0900 	mov.w	r9, #0
   b81f6:	7808      	ldrb	r0, [r1, #0]
   b81f8:	f7ff ff70 	bl	b80dc <__hexdig_fun>
   b81fc:	1e43      	subs	r3, r0, #1
   b81fe:	b2db      	uxtb	r3, r3
   b8200:	2b18      	cmp	r3, #24
   b8202:	d82c      	bhi.n	b825e <__gethex+0x156>
   b8204:	f1a0 0210 	sub.w	r2, r0, #16
   b8208:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   b820c:	f7ff ff66 	bl	b80dc <__hexdig_fun>
   b8210:	1e43      	subs	r3, r0, #1
   b8212:	b2db      	uxtb	r3, r3
   b8214:	2b18      	cmp	r3, #24
   b8216:	d91d      	bls.n	b8254 <__gethex+0x14c>
   b8218:	f1b9 0f00 	cmp.w	r9, #0
   b821c:	d000      	beq.n	b8220 <__gethex+0x118>
   b821e:	4252      	negs	r2, r2
   b8220:	4415      	add	r5, r2
   b8222:	f8cb 1000 	str.w	r1, [fp]
   b8226:	b1e4      	cbz	r4, b8262 <__gethex+0x15a>
   b8228:	9b00      	ldr	r3, [sp, #0]
   b822a:	2b00      	cmp	r3, #0
   b822c:	bf14      	ite	ne
   b822e:	2700      	movne	r7, #0
   b8230:	2706      	moveq	r7, #6
   b8232:	4638      	mov	r0, r7
   b8234:	b009      	add	sp, #36	; 0x24
   b8236:	ecbd 8b02 	vpop	{d8}
   b823a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b823e:	463e      	mov	r6, r7
   b8240:	4625      	mov	r5, r4
   b8242:	2401      	movs	r4, #1
   b8244:	e7ca      	b.n	b81dc <__gethex+0xd4>
   b8246:	f04f 0900 	mov.w	r9, #0
   b824a:	1cb1      	adds	r1, r6, #2
   b824c:	e7d3      	b.n	b81f6 <__gethex+0xee>
   b824e:	f04f 0901 	mov.w	r9, #1
   b8252:	e7fa      	b.n	b824a <__gethex+0x142>
   b8254:	230a      	movs	r3, #10
   b8256:	fb03 0202 	mla	r2, r3, r2, r0
   b825a:	3a10      	subs	r2, #16
   b825c:	e7d4      	b.n	b8208 <__gethex+0x100>
   b825e:	4631      	mov	r1, r6
   b8260:	e7df      	b.n	b8222 <__gethex+0x11a>
   b8262:	1bf3      	subs	r3, r6, r7
   b8264:	3b01      	subs	r3, #1
   b8266:	4621      	mov	r1, r4
   b8268:	2b07      	cmp	r3, #7
   b826a:	dc0b      	bgt.n	b8284 <__gethex+0x17c>
   b826c:	ee18 0a10 	vmov	r0, s16
   b8270:	f000 fa68 	bl	b8744 <_Balloc>
   b8274:	4604      	mov	r4, r0
   b8276:	b940      	cbnz	r0, b828a <__gethex+0x182>
   b8278:	4b5d      	ldr	r3, [pc, #372]	; (b83f0 <__gethex+0x2e8>)
   b827a:	4602      	mov	r2, r0
   b827c:	21de      	movs	r1, #222	; 0xde
   b827e:	485d      	ldr	r0, [pc, #372]	; (b83f4 <__gethex+0x2ec>)
   b8280:	f7fc fa8a 	bl	b4798 <__assert_func>
   b8284:	3101      	adds	r1, #1
   b8286:	105b      	asrs	r3, r3, #1
   b8288:	e7ee      	b.n	b8268 <__gethex+0x160>
   b828a:	f100 0914 	add.w	r9, r0, #20
   b828e:	f04f 0b00 	mov.w	fp, #0
   b8292:	f1ca 0301 	rsb	r3, sl, #1
   b8296:	f8cd 9008 	str.w	r9, [sp, #8]
   b829a:	f8cd b000 	str.w	fp, [sp]
   b829e:	9306      	str	r3, [sp, #24]
   b82a0:	42b7      	cmp	r7, r6
   b82a2:	d340      	bcc.n	b8326 <__gethex+0x21e>
   b82a4:	9802      	ldr	r0, [sp, #8]
   b82a6:	9b00      	ldr	r3, [sp, #0]
   b82a8:	f840 3b04 	str.w	r3, [r0], #4
   b82ac:	eba0 0009 	sub.w	r0, r0, r9
   b82b0:	1080      	asrs	r0, r0, #2
   b82b2:	0146      	lsls	r6, r0, #5
   b82b4:	6120      	str	r0, [r4, #16]
   b82b6:	4618      	mov	r0, r3
   b82b8:	f000 fb36 	bl	b8928 <__hi0bits>
   b82bc:	1a30      	subs	r0, r6, r0
   b82be:	f8d8 6000 	ldr.w	r6, [r8]
   b82c2:	42b0      	cmp	r0, r6
   b82c4:	dd63      	ble.n	b838e <__gethex+0x286>
   b82c6:	1b87      	subs	r7, r0, r6
   b82c8:	4639      	mov	r1, r7
   b82ca:	4620      	mov	r0, r4
   b82cc:	f000 feda 	bl	b9084 <__any_on>
   b82d0:	4682      	mov	sl, r0
   b82d2:	b1a8      	cbz	r0, b8300 <__gethex+0x1f8>
   b82d4:	1e7b      	subs	r3, r7, #1
   b82d6:	1159      	asrs	r1, r3, #5
   b82d8:	f003 021f 	and.w	r2, r3, #31
   b82dc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   b82e0:	f04f 0a01 	mov.w	sl, #1
   b82e4:	fa0a f202 	lsl.w	r2, sl, r2
   b82e8:	420a      	tst	r2, r1
   b82ea:	d009      	beq.n	b8300 <__gethex+0x1f8>
   b82ec:	4553      	cmp	r3, sl
   b82ee:	dd05      	ble.n	b82fc <__gethex+0x1f4>
   b82f0:	1eb9      	subs	r1, r7, #2
   b82f2:	4620      	mov	r0, r4
   b82f4:	f000 fec6 	bl	b9084 <__any_on>
   b82f8:	2800      	cmp	r0, #0
   b82fa:	d145      	bne.n	b8388 <__gethex+0x280>
   b82fc:	f04f 0a02 	mov.w	sl, #2
   b8300:	4639      	mov	r1, r7
   b8302:	4620      	mov	r0, r4
   b8304:	f7ff fe98 	bl	b8038 <rshift>
   b8308:	443d      	add	r5, r7
   b830a:	f8d8 3008 	ldr.w	r3, [r8, #8]
   b830e:	42ab      	cmp	r3, r5
   b8310:	da4c      	bge.n	b83ac <__gethex+0x2a4>
   b8312:	ee18 0a10 	vmov	r0, s16
   b8316:	4621      	mov	r1, r4
   b8318:	f000 fa54 	bl	b87c4 <_Bfree>
   b831c:	9a14      	ldr	r2, [sp, #80]	; 0x50
   b831e:	2300      	movs	r3, #0
   b8320:	6013      	str	r3, [r2, #0]
   b8322:	27a3      	movs	r7, #163	; 0xa3
   b8324:	e785      	b.n	b8232 <__gethex+0x12a>
   b8326:	1e73      	subs	r3, r6, #1
   b8328:	9a05      	ldr	r2, [sp, #20]
   b832a:	9303      	str	r3, [sp, #12]
   b832c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   b8330:	4293      	cmp	r3, r2
   b8332:	d019      	beq.n	b8368 <__gethex+0x260>
   b8334:	f1bb 0f20 	cmp.w	fp, #32
   b8338:	d107      	bne.n	b834a <__gethex+0x242>
   b833a:	9b02      	ldr	r3, [sp, #8]
   b833c:	9a00      	ldr	r2, [sp, #0]
   b833e:	f843 2b04 	str.w	r2, [r3], #4
   b8342:	9302      	str	r3, [sp, #8]
   b8344:	2300      	movs	r3, #0
   b8346:	9300      	str	r3, [sp, #0]
   b8348:	469b      	mov	fp, r3
   b834a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   b834e:	f7ff fec5 	bl	b80dc <__hexdig_fun>
   b8352:	9b00      	ldr	r3, [sp, #0]
   b8354:	f000 000f 	and.w	r0, r0, #15
   b8358:	fa00 f00b 	lsl.w	r0, r0, fp
   b835c:	4303      	orrs	r3, r0
   b835e:	9300      	str	r3, [sp, #0]
   b8360:	f10b 0b04 	add.w	fp, fp, #4
   b8364:	9b03      	ldr	r3, [sp, #12]
   b8366:	e00d      	b.n	b8384 <__gethex+0x27c>
   b8368:	9b03      	ldr	r3, [sp, #12]
   b836a:	9a06      	ldr	r2, [sp, #24]
   b836c:	4413      	add	r3, r2
   b836e:	42bb      	cmp	r3, r7
   b8370:	d3e0      	bcc.n	b8334 <__gethex+0x22c>
   b8372:	4618      	mov	r0, r3
   b8374:	9901      	ldr	r1, [sp, #4]
   b8376:	9307      	str	r3, [sp, #28]
   b8378:	4652      	mov	r2, sl
   b837a:	f7fe ff16 	bl	b71aa <strncmp>
   b837e:	9b07      	ldr	r3, [sp, #28]
   b8380:	2800      	cmp	r0, #0
   b8382:	d1d7      	bne.n	b8334 <__gethex+0x22c>
   b8384:	461e      	mov	r6, r3
   b8386:	e78b      	b.n	b82a0 <__gethex+0x198>
   b8388:	f04f 0a03 	mov.w	sl, #3
   b838c:	e7b8      	b.n	b8300 <__gethex+0x1f8>
   b838e:	da0a      	bge.n	b83a6 <__gethex+0x29e>
   b8390:	1a37      	subs	r7, r6, r0
   b8392:	4621      	mov	r1, r4
   b8394:	ee18 0a10 	vmov	r0, s16
   b8398:	463a      	mov	r2, r7
   b839a:	f000 fc2f 	bl	b8bfc <__lshift>
   b839e:	1bed      	subs	r5, r5, r7
   b83a0:	4604      	mov	r4, r0
   b83a2:	f100 0914 	add.w	r9, r0, #20
   b83a6:	f04f 0a00 	mov.w	sl, #0
   b83aa:	e7ae      	b.n	b830a <__gethex+0x202>
   b83ac:	f8d8 0004 	ldr.w	r0, [r8, #4]
   b83b0:	42a8      	cmp	r0, r5
   b83b2:	dd72      	ble.n	b849a <__gethex+0x392>
   b83b4:	1b45      	subs	r5, r0, r5
   b83b6:	42ae      	cmp	r6, r5
   b83b8:	dc36      	bgt.n	b8428 <__gethex+0x320>
   b83ba:	f8d8 300c 	ldr.w	r3, [r8, #12]
   b83be:	2b02      	cmp	r3, #2
   b83c0:	d02a      	beq.n	b8418 <__gethex+0x310>
   b83c2:	2b03      	cmp	r3, #3
   b83c4:	d02c      	beq.n	b8420 <__gethex+0x318>
   b83c6:	2b01      	cmp	r3, #1
   b83c8:	d11c      	bne.n	b8404 <__gethex+0x2fc>
   b83ca:	42ae      	cmp	r6, r5
   b83cc:	d11a      	bne.n	b8404 <__gethex+0x2fc>
   b83ce:	2e01      	cmp	r6, #1
   b83d0:	d112      	bne.n	b83f8 <__gethex+0x2f0>
   b83d2:	9a04      	ldr	r2, [sp, #16]
   b83d4:	f8d8 3004 	ldr.w	r3, [r8, #4]
   b83d8:	6013      	str	r3, [r2, #0]
   b83da:	2301      	movs	r3, #1
   b83dc:	6123      	str	r3, [r4, #16]
   b83de:	f8c9 3000 	str.w	r3, [r9]
   b83e2:	9b14      	ldr	r3, [sp, #80]	; 0x50
   b83e4:	2762      	movs	r7, #98	; 0x62
   b83e6:	601c      	str	r4, [r3, #0]
   b83e8:	e723      	b.n	b8232 <__gethex+0x12a>
   b83ea:	bf00      	nop
   b83ec:	000b96ac 	.word	0x000b96ac
   b83f0:	000b9639 	.word	0x000b9639
   b83f4:	000b964a 	.word	0x000b964a
   b83f8:	1e71      	subs	r1, r6, #1
   b83fa:	4620      	mov	r0, r4
   b83fc:	f000 fe42 	bl	b9084 <__any_on>
   b8400:	2800      	cmp	r0, #0
   b8402:	d1e6      	bne.n	b83d2 <__gethex+0x2ca>
   b8404:	ee18 0a10 	vmov	r0, s16
   b8408:	4621      	mov	r1, r4
   b840a:	f000 f9db 	bl	b87c4 <_Bfree>
   b840e:	9a14      	ldr	r2, [sp, #80]	; 0x50
   b8410:	2300      	movs	r3, #0
   b8412:	6013      	str	r3, [r2, #0]
   b8414:	2750      	movs	r7, #80	; 0x50
   b8416:	e70c      	b.n	b8232 <__gethex+0x12a>
   b8418:	9b15      	ldr	r3, [sp, #84]	; 0x54
   b841a:	2b00      	cmp	r3, #0
   b841c:	d1f2      	bne.n	b8404 <__gethex+0x2fc>
   b841e:	e7d8      	b.n	b83d2 <__gethex+0x2ca>
   b8420:	9b15      	ldr	r3, [sp, #84]	; 0x54
   b8422:	2b00      	cmp	r3, #0
   b8424:	d1d5      	bne.n	b83d2 <__gethex+0x2ca>
   b8426:	e7ed      	b.n	b8404 <__gethex+0x2fc>
   b8428:	1e6f      	subs	r7, r5, #1
   b842a:	f1ba 0f00 	cmp.w	sl, #0
   b842e:	d131      	bne.n	b8494 <__gethex+0x38c>
   b8430:	b127      	cbz	r7, b843c <__gethex+0x334>
   b8432:	4639      	mov	r1, r7
   b8434:	4620      	mov	r0, r4
   b8436:	f000 fe25 	bl	b9084 <__any_on>
   b843a:	4682      	mov	sl, r0
   b843c:	117b      	asrs	r3, r7, #5
   b843e:	2101      	movs	r1, #1
   b8440:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   b8444:	f007 071f 	and.w	r7, r7, #31
   b8448:	fa01 f707 	lsl.w	r7, r1, r7
   b844c:	421f      	tst	r7, r3
   b844e:	4629      	mov	r1, r5
   b8450:	4620      	mov	r0, r4
   b8452:	bf18      	it	ne
   b8454:	f04a 0a02 	orrne.w	sl, sl, #2
   b8458:	1b76      	subs	r6, r6, r5
   b845a:	f7ff fded 	bl	b8038 <rshift>
   b845e:	f8d8 5004 	ldr.w	r5, [r8, #4]
   b8462:	2702      	movs	r7, #2
   b8464:	f1ba 0f00 	cmp.w	sl, #0
   b8468:	d048      	beq.n	b84fc <__gethex+0x3f4>
   b846a:	f8d8 300c 	ldr.w	r3, [r8, #12]
   b846e:	2b02      	cmp	r3, #2
   b8470:	d015      	beq.n	b849e <__gethex+0x396>
   b8472:	2b03      	cmp	r3, #3
   b8474:	d017      	beq.n	b84a6 <__gethex+0x39e>
   b8476:	2b01      	cmp	r3, #1
   b8478:	d109      	bne.n	b848e <__gethex+0x386>
   b847a:	f01a 0f02 	tst.w	sl, #2
   b847e:	d006      	beq.n	b848e <__gethex+0x386>
   b8480:	f8d9 0000 	ldr.w	r0, [r9]
   b8484:	ea4a 0a00 	orr.w	sl, sl, r0
   b8488:	f01a 0f01 	tst.w	sl, #1
   b848c:	d10e      	bne.n	b84ac <__gethex+0x3a4>
   b848e:	f047 0710 	orr.w	r7, r7, #16
   b8492:	e033      	b.n	b84fc <__gethex+0x3f4>
   b8494:	f04f 0a01 	mov.w	sl, #1
   b8498:	e7d0      	b.n	b843c <__gethex+0x334>
   b849a:	2701      	movs	r7, #1
   b849c:	e7e2      	b.n	b8464 <__gethex+0x35c>
   b849e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   b84a0:	f1c3 0301 	rsb	r3, r3, #1
   b84a4:	9315      	str	r3, [sp, #84]	; 0x54
   b84a6:	9b15      	ldr	r3, [sp, #84]	; 0x54
   b84a8:	2b00      	cmp	r3, #0
   b84aa:	d0f0      	beq.n	b848e <__gethex+0x386>
   b84ac:	f8d4 b010 	ldr.w	fp, [r4, #16]
   b84b0:	f104 0314 	add.w	r3, r4, #20
   b84b4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
   b84b8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
   b84bc:	f04f 0c00 	mov.w	ip, #0
   b84c0:	4618      	mov	r0, r3
   b84c2:	f853 2b04 	ldr.w	r2, [r3], #4
   b84c6:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   b84ca:	d01c      	beq.n	b8506 <__gethex+0x3fe>
   b84cc:	3201      	adds	r2, #1
   b84ce:	6002      	str	r2, [r0, #0]
   b84d0:	2f02      	cmp	r7, #2
   b84d2:	f104 0314 	add.w	r3, r4, #20
   b84d6:	d13f      	bne.n	b8558 <__gethex+0x450>
   b84d8:	f8d8 2000 	ldr.w	r2, [r8]
   b84dc:	3a01      	subs	r2, #1
   b84de:	42b2      	cmp	r2, r6
   b84e0:	d10a      	bne.n	b84f8 <__gethex+0x3f0>
   b84e2:	1171      	asrs	r1, r6, #5
   b84e4:	2201      	movs	r2, #1
   b84e6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   b84ea:	f006 061f 	and.w	r6, r6, #31
   b84ee:	fa02 f606 	lsl.w	r6, r2, r6
   b84f2:	421e      	tst	r6, r3
   b84f4:	bf18      	it	ne
   b84f6:	4617      	movne	r7, r2
   b84f8:	f047 0720 	orr.w	r7, r7, #32
   b84fc:	9b14      	ldr	r3, [sp, #80]	; 0x50
   b84fe:	601c      	str	r4, [r3, #0]
   b8500:	9b04      	ldr	r3, [sp, #16]
   b8502:	601d      	str	r5, [r3, #0]
   b8504:	e695      	b.n	b8232 <__gethex+0x12a>
   b8506:	4299      	cmp	r1, r3
   b8508:	f843 cc04 	str.w	ip, [r3, #-4]
   b850c:	d8d8      	bhi.n	b84c0 <__gethex+0x3b8>
   b850e:	68a3      	ldr	r3, [r4, #8]
   b8510:	459b      	cmp	fp, r3
   b8512:	db19      	blt.n	b8548 <__gethex+0x440>
   b8514:	6861      	ldr	r1, [r4, #4]
   b8516:	ee18 0a10 	vmov	r0, s16
   b851a:	3101      	adds	r1, #1
   b851c:	f000 f912 	bl	b8744 <_Balloc>
   b8520:	4681      	mov	r9, r0
   b8522:	b918      	cbnz	r0, b852c <__gethex+0x424>
   b8524:	4b1a      	ldr	r3, [pc, #104]	; (b8590 <__gethex+0x488>)
   b8526:	4602      	mov	r2, r0
   b8528:	2184      	movs	r1, #132	; 0x84
   b852a:	e6a8      	b.n	b827e <__gethex+0x176>
   b852c:	6922      	ldr	r2, [r4, #16]
   b852e:	3202      	adds	r2, #2
   b8530:	f104 010c 	add.w	r1, r4, #12
   b8534:	0092      	lsls	r2, r2, #2
   b8536:	300c      	adds	r0, #12
   b8538:	f7fe fda8 	bl	b708c <memcpy>
   b853c:	4621      	mov	r1, r4
   b853e:	ee18 0a10 	vmov	r0, s16
   b8542:	f000 f93f 	bl	b87c4 <_Bfree>
   b8546:	464c      	mov	r4, r9
   b8548:	6923      	ldr	r3, [r4, #16]
   b854a:	1c5a      	adds	r2, r3, #1
   b854c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   b8550:	6122      	str	r2, [r4, #16]
   b8552:	2201      	movs	r2, #1
   b8554:	615a      	str	r2, [r3, #20]
   b8556:	e7bb      	b.n	b84d0 <__gethex+0x3c8>
   b8558:	6922      	ldr	r2, [r4, #16]
   b855a:	455a      	cmp	r2, fp
   b855c:	dd0b      	ble.n	b8576 <__gethex+0x46e>
   b855e:	2101      	movs	r1, #1
   b8560:	4620      	mov	r0, r4
   b8562:	f7ff fd69 	bl	b8038 <rshift>
   b8566:	f8d8 3008 	ldr.w	r3, [r8, #8]
   b856a:	3501      	adds	r5, #1
   b856c:	42ab      	cmp	r3, r5
   b856e:	f6ff aed0 	blt.w	b8312 <__gethex+0x20a>
   b8572:	2701      	movs	r7, #1
   b8574:	e7c0      	b.n	b84f8 <__gethex+0x3f0>
   b8576:	f016 061f 	ands.w	r6, r6, #31
   b857a:	d0fa      	beq.n	b8572 <__gethex+0x46a>
   b857c:	4453      	add	r3, sl
   b857e:	f1c6 0620 	rsb	r6, r6, #32
   b8582:	f853 0c04 	ldr.w	r0, [r3, #-4]
   b8586:	f000 f9cf 	bl	b8928 <__hi0bits>
   b858a:	42b0      	cmp	r0, r6
   b858c:	dbe7      	blt.n	b855e <__gethex+0x456>
   b858e:	e7f0      	b.n	b8572 <__gethex+0x46a>
   b8590:	000b9639 	.word	0x000b9639

000b8594 <L_shift>:
   b8594:	f1c2 0208 	rsb	r2, r2, #8
   b8598:	0092      	lsls	r2, r2, #2
   b859a:	b570      	push	{r4, r5, r6, lr}
   b859c:	f1c2 0620 	rsb	r6, r2, #32
   b85a0:	6843      	ldr	r3, [r0, #4]
   b85a2:	6804      	ldr	r4, [r0, #0]
   b85a4:	fa03 f506 	lsl.w	r5, r3, r6
   b85a8:	432c      	orrs	r4, r5
   b85aa:	40d3      	lsrs	r3, r2
   b85ac:	6004      	str	r4, [r0, #0]
   b85ae:	f840 3f04 	str.w	r3, [r0, #4]!
   b85b2:	4288      	cmp	r0, r1
   b85b4:	d3f4      	bcc.n	b85a0 <L_shift+0xc>
   b85b6:	bd70      	pop	{r4, r5, r6, pc}

000b85b8 <__match>:
   b85b8:	b530      	push	{r4, r5, lr}
   b85ba:	6803      	ldr	r3, [r0, #0]
   b85bc:	3301      	adds	r3, #1
   b85be:	f811 4b01 	ldrb.w	r4, [r1], #1
   b85c2:	b914      	cbnz	r4, b85ca <__match+0x12>
   b85c4:	6003      	str	r3, [r0, #0]
   b85c6:	2001      	movs	r0, #1
   b85c8:	bd30      	pop	{r4, r5, pc}
   b85ca:	f813 2b01 	ldrb.w	r2, [r3], #1
   b85ce:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   b85d2:	2d19      	cmp	r5, #25
   b85d4:	bf98      	it	ls
   b85d6:	3220      	addls	r2, #32
   b85d8:	42a2      	cmp	r2, r4
   b85da:	d0f0      	beq.n	b85be <__match+0x6>
   b85dc:	2000      	movs	r0, #0
   b85de:	e7f3      	b.n	b85c8 <__match+0x10>

000b85e0 <__hexnan>:
   b85e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b85e4:	680b      	ldr	r3, [r1, #0]
   b85e6:	115e      	asrs	r6, r3, #5
   b85e8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   b85ec:	f013 031f 	ands.w	r3, r3, #31
   b85f0:	b087      	sub	sp, #28
   b85f2:	bf18      	it	ne
   b85f4:	3604      	addne	r6, #4
   b85f6:	2500      	movs	r5, #0
   b85f8:	1f37      	subs	r7, r6, #4
   b85fa:	4690      	mov	r8, r2
   b85fc:	6802      	ldr	r2, [r0, #0]
   b85fe:	9301      	str	r3, [sp, #4]
   b8600:	4682      	mov	sl, r0
   b8602:	f846 5c04 	str.w	r5, [r6, #-4]
   b8606:	46b9      	mov	r9, r7
   b8608:	463c      	mov	r4, r7
   b860a:	9502      	str	r5, [sp, #8]
   b860c:	46ab      	mov	fp, r5
   b860e:	7851      	ldrb	r1, [r2, #1]
   b8610:	1c53      	adds	r3, r2, #1
   b8612:	9303      	str	r3, [sp, #12]
   b8614:	b341      	cbz	r1, b8668 <__hexnan+0x88>
   b8616:	4608      	mov	r0, r1
   b8618:	9205      	str	r2, [sp, #20]
   b861a:	9104      	str	r1, [sp, #16]
   b861c:	f7ff fd5e 	bl	b80dc <__hexdig_fun>
   b8620:	2800      	cmp	r0, #0
   b8622:	d14f      	bne.n	b86c4 <__hexnan+0xe4>
   b8624:	9904      	ldr	r1, [sp, #16]
   b8626:	9a05      	ldr	r2, [sp, #20]
   b8628:	2920      	cmp	r1, #32
   b862a:	d818      	bhi.n	b865e <__hexnan+0x7e>
   b862c:	9b02      	ldr	r3, [sp, #8]
   b862e:	459b      	cmp	fp, r3
   b8630:	dd13      	ble.n	b865a <__hexnan+0x7a>
   b8632:	454c      	cmp	r4, r9
   b8634:	d206      	bcs.n	b8644 <__hexnan+0x64>
   b8636:	2d07      	cmp	r5, #7
   b8638:	dc04      	bgt.n	b8644 <__hexnan+0x64>
   b863a:	462a      	mov	r2, r5
   b863c:	4649      	mov	r1, r9
   b863e:	4620      	mov	r0, r4
   b8640:	f7ff ffa8 	bl	b8594 <L_shift>
   b8644:	4544      	cmp	r4, r8
   b8646:	d950      	bls.n	b86ea <__hexnan+0x10a>
   b8648:	2300      	movs	r3, #0
   b864a:	f1a4 0904 	sub.w	r9, r4, #4
   b864e:	f844 3c04 	str.w	r3, [r4, #-4]
   b8652:	f8cd b008 	str.w	fp, [sp, #8]
   b8656:	464c      	mov	r4, r9
   b8658:	461d      	mov	r5, r3
   b865a:	9a03      	ldr	r2, [sp, #12]
   b865c:	e7d7      	b.n	b860e <__hexnan+0x2e>
   b865e:	2929      	cmp	r1, #41	; 0x29
   b8660:	d156      	bne.n	b8710 <__hexnan+0x130>
   b8662:	3202      	adds	r2, #2
   b8664:	f8ca 2000 	str.w	r2, [sl]
   b8668:	f1bb 0f00 	cmp.w	fp, #0
   b866c:	d050      	beq.n	b8710 <__hexnan+0x130>
   b866e:	454c      	cmp	r4, r9
   b8670:	d206      	bcs.n	b8680 <__hexnan+0xa0>
   b8672:	2d07      	cmp	r5, #7
   b8674:	dc04      	bgt.n	b8680 <__hexnan+0xa0>
   b8676:	462a      	mov	r2, r5
   b8678:	4649      	mov	r1, r9
   b867a:	4620      	mov	r0, r4
   b867c:	f7ff ff8a 	bl	b8594 <L_shift>
   b8680:	4544      	cmp	r4, r8
   b8682:	d934      	bls.n	b86ee <__hexnan+0x10e>
   b8684:	f1a8 0204 	sub.w	r2, r8, #4
   b8688:	4623      	mov	r3, r4
   b868a:	f853 1b04 	ldr.w	r1, [r3], #4
   b868e:	f842 1f04 	str.w	r1, [r2, #4]!
   b8692:	429f      	cmp	r7, r3
   b8694:	d2f9      	bcs.n	b868a <__hexnan+0xaa>
   b8696:	1b3b      	subs	r3, r7, r4
   b8698:	f023 0303 	bic.w	r3, r3, #3
   b869c:	3304      	adds	r3, #4
   b869e:	3401      	adds	r4, #1
   b86a0:	3e03      	subs	r6, #3
   b86a2:	42b4      	cmp	r4, r6
   b86a4:	bf88      	it	hi
   b86a6:	2304      	movhi	r3, #4
   b86a8:	4443      	add	r3, r8
   b86aa:	2200      	movs	r2, #0
   b86ac:	f843 2b04 	str.w	r2, [r3], #4
   b86b0:	429f      	cmp	r7, r3
   b86b2:	d2fb      	bcs.n	b86ac <__hexnan+0xcc>
   b86b4:	683b      	ldr	r3, [r7, #0]
   b86b6:	b91b      	cbnz	r3, b86c0 <__hexnan+0xe0>
   b86b8:	4547      	cmp	r7, r8
   b86ba:	d127      	bne.n	b870c <__hexnan+0x12c>
   b86bc:	2301      	movs	r3, #1
   b86be:	603b      	str	r3, [r7, #0]
   b86c0:	2005      	movs	r0, #5
   b86c2:	e026      	b.n	b8712 <__hexnan+0x132>
   b86c4:	3501      	adds	r5, #1
   b86c6:	2d08      	cmp	r5, #8
   b86c8:	f10b 0b01 	add.w	fp, fp, #1
   b86cc:	dd06      	ble.n	b86dc <__hexnan+0xfc>
   b86ce:	4544      	cmp	r4, r8
   b86d0:	d9c3      	bls.n	b865a <__hexnan+0x7a>
   b86d2:	2300      	movs	r3, #0
   b86d4:	f844 3c04 	str.w	r3, [r4, #-4]
   b86d8:	2501      	movs	r5, #1
   b86da:	3c04      	subs	r4, #4
   b86dc:	6822      	ldr	r2, [r4, #0]
   b86de:	f000 000f 	and.w	r0, r0, #15
   b86e2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   b86e6:	6022      	str	r2, [r4, #0]
   b86e8:	e7b7      	b.n	b865a <__hexnan+0x7a>
   b86ea:	2508      	movs	r5, #8
   b86ec:	e7b5      	b.n	b865a <__hexnan+0x7a>
   b86ee:	9b01      	ldr	r3, [sp, #4]
   b86f0:	2b00      	cmp	r3, #0
   b86f2:	d0df      	beq.n	b86b4 <__hexnan+0xd4>
   b86f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b86f8:	f1c3 0320 	rsb	r3, r3, #32
   b86fc:	fa22 f303 	lsr.w	r3, r2, r3
   b8700:	f856 2c04 	ldr.w	r2, [r6, #-4]
   b8704:	401a      	ands	r2, r3
   b8706:	f846 2c04 	str.w	r2, [r6, #-4]
   b870a:	e7d3      	b.n	b86b4 <__hexnan+0xd4>
   b870c:	3f04      	subs	r7, #4
   b870e:	e7d1      	b.n	b86b4 <__hexnan+0xd4>
   b8710:	2004      	movs	r0, #4
   b8712:	b007      	add	sp, #28
   b8714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b8718 <__retarget_lock_acquire_recursive>:
   b8718:	4770      	bx	lr

000b871a <__retarget_lock_release>:
   b871a:	4770      	bx	lr

000b871c <__retarget_lock_release_recursive>:
   b871c:	4770      	bx	lr

000b871e <__ascii_mbtowc>:
   b871e:	b082      	sub	sp, #8
   b8720:	b901      	cbnz	r1, b8724 <__ascii_mbtowc+0x6>
   b8722:	a901      	add	r1, sp, #4
   b8724:	b142      	cbz	r2, b8738 <__ascii_mbtowc+0x1a>
   b8726:	b14b      	cbz	r3, b873c <__ascii_mbtowc+0x1e>
   b8728:	7813      	ldrb	r3, [r2, #0]
   b872a:	600b      	str	r3, [r1, #0]
   b872c:	7812      	ldrb	r2, [r2, #0]
   b872e:	1e10      	subs	r0, r2, #0
   b8730:	bf18      	it	ne
   b8732:	2001      	movne	r0, #1
   b8734:	b002      	add	sp, #8
   b8736:	4770      	bx	lr
   b8738:	4610      	mov	r0, r2
   b873a:	e7fb      	b.n	b8734 <__ascii_mbtowc+0x16>
   b873c:	f06f 0001 	mvn.w	r0, #1
   b8740:	e7f8      	b.n	b8734 <__ascii_mbtowc+0x16>
	...

000b8744 <_Balloc>:
   b8744:	b570      	push	{r4, r5, r6, lr}
   b8746:	6a46      	ldr	r6, [r0, #36]	; 0x24
   b8748:	4604      	mov	r4, r0
   b874a:	460d      	mov	r5, r1
   b874c:	b976      	cbnz	r6, b876c <_Balloc+0x28>
   b874e:	2010      	movs	r0, #16
   b8750:	f7fb ffea 	bl	b4728 <malloc>
   b8754:	4602      	mov	r2, r0
   b8756:	6260      	str	r0, [r4, #36]	; 0x24
   b8758:	b920      	cbnz	r0, b8764 <_Balloc+0x20>
   b875a:	4b18      	ldr	r3, [pc, #96]	; (b87bc <_Balloc+0x78>)
   b875c:	4818      	ldr	r0, [pc, #96]	; (b87c0 <_Balloc+0x7c>)
   b875e:	2166      	movs	r1, #102	; 0x66
   b8760:	f7fc f81a 	bl	b4798 <__assert_func>
   b8764:	e9c0 6601 	strd	r6, r6, [r0, #4]
   b8768:	6006      	str	r6, [r0, #0]
   b876a:	60c6      	str	r6, [r0, #12]
   b876c:	6a66      	ldr	r6, [r4, #36]	; 0x24
   b876e:	68f3      	ldr	r3, [r6, #12]
   b8770:	b183      	cbz	r3, b8794 <_Balloc+0x50>
   b8772:	6a63      	ldr	r3, [r4, #36]	; 0x24
   b8774:	68db      	ldr	r3, [r3, #12]
   b8776:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   b877a:	b9b8      	cbnz	r0, b87ac <_Balloc+0x68>
   b877c:	2101      	movs	r1, #1
   b877e:	fa01 f605 	lsl.w	r6, r1, r5
   b8782:	1d72      	adds	r2, r6, #5
   b8784:	0092      	lsls	r2, r2, #2
   b8786:	4620      	mov	r0, r4
   b8788:	f000 fc9d 	bl	b90c6 <_calloc_r>
   b878c:	b160      	cbz	r0, b87a8 <_Balloc+0x64>
   b878e:	e9c0 5601 	strd	r5, r6, [r0, #4]
   b8792:	e00e      	b.n	b87b2 <_Balloc+0x6e>
   b8794:	2221      	movs	r2, #33	; 0x21
   b8796:	2104      	movs	r1, #4
   b8798:	4620      	mov	r0, r4
   b879a:	f000 fc94 	bl	b90c6 <_calloc_r>
   b879e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   b87a0:	60f0      	str	r0, [r6, #12]
   b87a2:	68db      	ldr	r3, [r3, #12]
   b87a4:	2b00      	cmp	r3, #0
   b87a6:	d1e4      	bne.n	b8772 <_Balloc+0x2e>
   b87a8:	2000      	movs	r0, #0
   b87aa:	bd70      	pop	{r4, r5, r6, pc}
   b87ac:	6802      	ldr	r2, [r0, #0]
   b87ae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   b87b2:	2300      	movs	r3, #0
   b87b4:	e9c0 3303 	strd	r3, r3, [r0, #12]
   b87b8:	e7f7      	b.n	b87aa <_Balloc+0x66>
   b87ba:	bf00      	nop
   b87bc:	000b9471 	.word	0x000b9471
   b87c0:	000b96c0 	.word	0x000b96c0

000b87c4 <_Bfree>:
   b87c4:	b570      	push	{r4, r5, r6, lr}
   b87c6:	6a46      	ldr	r6, [r0, #36]	; 0x24
   b87c8:	4605      	mov	r5, r0
   b87ca:	460c      	mov	r4, r1
   b87cc:	b976      	cbnz	r6, b87ec <_Bfree+0x28>
   b87ce:	2010      	movs	r0, #16
   b87d0:	f7fb ffaa 	bl	b4728 <malloc>
   b87d4:	4602      	mov	r2, r0
   b87d6:	6268      	str	r0, [r5, #36]	; 0x24
   b87d8:	b920      	cbnz	r0, b87e4 <_Bfree+0x20>
   b87da:	4b09      	ldr	r3, [pc, #36]	; (b8800 <_Bfree+0x3c>)
   b87dc:	4809      	ldr	r0, [pc, #36]	; (b8804 <_Bfree+0x40>)
   b87de:	218a      	movs	r1, #138	; 0x8a
   b87e0:	f7fb ffda 	bl	b4798 <__assert_func>
   b87e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
   b87e8:	6006      	str	r6, [r0, #0]
   b87ea:	60c6      	str	r6, [r0, #12]
   b87ec:	b13c      	cbz	r4, b87fe <_Bfree+0x3a>
   b87ee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   b87f0:	6862      	ldr	r2, [r4, #4]
   b87f2:	68db      	ldr	r3, [r3, #12]
   b87f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   b87f8:	6021      	str	r1, [r4, #0]
   b87fa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   b87fe:	bd70      	pop	{r4, r5, r6, pc}
   b8800:	000b9471 	.word	0x000b9471
   b8804:	000b96c0 	.word	0x000b96c0

000b8808 <__multadd>:
   b8808:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b880c:	690d      	ldr	r5, [r1, #16]
   b880e:	4607      	mov	r7, r0
   b8810:	460c      	mov	r4, r1
   b8812:	461e      	mov	r6, r3
   b8814:	f101 0c14 	add.w	ip, r1, #20
   b8818:	2000      	movs	r0, #0
   b881a:	f8dc 3000 	ldr.w	r3, [ip]
   b881e:	b299      	uxth	r1, r3
   b8820:	fb02 6101 	mla	r1, r2, r1, r6
   b8824:	0c1e      	lsrs	r6, r3, #16
   b8826:	0c0b      	lsrs	r3, r1, #16
   b8828:	fb02 3306 	mla	r3, r2, r6, r3
   b882c:	b289      	uxth	r1, r1
   b882e:	3001      	adds	r0, #1
   b8830:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   b8834:	4285      	cmp	r5, r0
   b8836:	f84c 1b04 	str.w	r1, [ip], #4
   b883a:	ea4f 4613 	mov.w	r6, r3, lsr #16
   b883e:	dcec      	bgt.n	b881a <__multadd+0x12>
   b8840:	b30e      	cbz	r6, b8886 <__multadd+0x7e>
   b8842:	68a3      	ldr	r3, [r4, #8]
   b8844:	42ab      	cmp	r3, r5
   b8846:	dc19      	bgt.n	b887c <__multadd+0x74>
   b8848:	6861      	ldr	r1, [r4, #4]
   b884a:	4638      	mov	r0, r7
   b884c:	3101      	adds	r1, #1
   b884e:	f7ff ff79 	bl	b8744 <_Balloc>
   b8852:	4680      	mov	r8, r0
   b8854:	b928      	cbnz	r0, b8862 <__multadd+0x5a>
   b8856:	4602      	mov	r2, r0
   b8858:	4b0c      	ldr	r3, [pc, #48]	; (b888c <__multadd+0x84>)
   b885a:	480d      	ldr	r0, [pc, #52]	; (b8890 <__multadd+0x88>)
   b885c:	21b5      	movs	r1, #181	; 0xb5
   b885e:	f7fb ff9b 	bl	b4798 <__assert_func>
   b8862:	6922      	ldr	r2, [r4, #16]
   b8864:	3202      	adds	r2, #2
   b8866:	f104 010c 	add.w	r1, r4, #12
   b886a:	0092      	lsls	r2, r2, #2
   b886c:	300c      	adds	r0, #12
   b886e:	f7fe fc0d 	bl	b708c <memcpy>
   b8872:	4621      	mov	r1, r4
   b8874:	4638      	mov	r0, r7
   b8876:	f7ff ffa5 	bl	b87c4 <_Bfree>
   b887a:	4644      	mov	r4, r8
   b887c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   b8880:	3501      	adds	r5, #1
   b8882:	615e      	str	r6, [r3, #20]
   b8884:	6125      	str	r5, [r4, #16]
   b8886:	4620      	mov	r0, r4
   b8888:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b888c:	000b9639 	.word	0x000b9639
   b8890:	000b96c0 	.word	0x000b96c0

000b8894 <__s2b>:
   b8894:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b8898:	460c      	mov	r4, r1
   b889a:	4615      	mov	r5, r2
   b889c:	461f      	mov	r7, r3
   b889e:	2209      	movs	r2, #9
   b88a0:	3308      	adds	r3, #8
   b88a2:	4606      	mov	r6, r0
   b88a4:	fb93 f3f2 	sdiv	r3, r3, r2
   b88a8:	2100      	movs	r1, #0
   b88aa:	2201      	movs	r2, #1
   b88ac:	429a      	cmp	r2, r3
   b88ae:	db09      	blt.n	b88c4 <__s2b+0x30>
   b88b0:	4630      	mov	r0, r6
   b88b2:	f7ff ff47 	bl	b8744 <_Balloc>
   b88b6:	b940      	cbnz	r0, b88ca <__s2b+0x36>
   b88b8:	4602      	mov	r2, r0
   b88ba:	4b19      	ldr	r3, [pc, #100]	; (b8920 <__s2b+0x8c>)
   b88bc:	4819      	ldr	r0, [pc, #100]	; (b8924 <__s2b+0x90>)
   b88be:	21ce      	movs	r1, #206	; 0xce
   b88c0:	f7fb ff6a 	bl	b4798 <__assert_func>
   b88c4:	0052      	lsls	r2, r2, #1
   b88c6:	3101      	adds	r1, #1
   b88c8:	e7f0      	b.n	b88ac <__s2b+0x18>
   b88ca:	9b08      	ldr	r3, [sp, #32]
   b88cc:	6143      	str	r3, [r0, #20]
   b88ce:	2d09      	cmp	r5, #9
   b88d0:	f04f 0301 	mov.w	r3, #1
   b88d4:	6103      	str	r3, [r0, #16]
   b88d6:	dd16      	ble.n	b8906 <__s2b+0x72>
   b88d8:	f104 0909 	add.w	r9, r4, #9
   b88dc:	46c8      	mov	r8, r9
   b88de:	442c      	add	r4, r5
   b88e0:	f818 3b01 	ldrb.w	r3, [r8], #1
   b88e4:	4601      	mov	r1, r0
   b88e6:	3b30      	subs	r3, #48	; 0x30
   b88e8:	220a      	movs	r2, #10
   b88ea:	4630      	mov	r0, r6
   b88ec:	f7ff ff8c 	bl	b8808 <__multadd>
   b88f0:	45a0      	cmp	r8, r4
   b88f2:	d1f5      	bne.n	b88e0 <__s2b+0x4c>
   b88f4:	f1a5 0408 	sub.w	r4, r5, #8
   b88f8:	444c      	add	r4, r9
   b88fa:	1b2d      	subs	r5, r5, r4
   b88fc:	1963      	adds	r3, r4, r5
   b88fe:	42bb      	cmp	r3, r7
   b8900:	db04      	blt.n	b890c <__s2b+0x78>
   b8902:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b8906:	340a      	adds	r4, #10
   b8908:	2509      	movs	r5, #9
   b890a:	e7f6      	b.n	b88fa <__s2b+0x66>
   b890c:	f814 3b01 	ldrb.w	r3, [r4], #1
   b8910:	4601      	mov	r1, r0
   b8912:	3b30      	subs	r3, #48	; 0x30
   b8914:	220a      	movs	r2, #10
   b8916:	4630      	mov	r0, r6
   b8918:	f7ff ff76 	bl	b8808 <__multadd>
   b891c:	e7ee      	b.n	b88fc <__s2b+0x68>
   b891e:	bf00      	nop
   b8920:	000b9639 	.word	0x000b9639
   b8924:	000b96c0 	.word	0x000b96c0

000b8928 <__hi0bits>:
   b8928:	0c03      	lsrs	r3, r0, #16
   b892a:	041b      	lsls	r3, r3, #16
   b892c:	b9d3      	cbnz	r3, b8964 <__hi0bits+0x3c>
   b892e:	0400      	lsls	r0, r0, #16
   b8930:	2310      	movs	r3, #16
   b8932:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   b8936:	bf04      	itt	eq
   b8938:	0200      	lsleq	r0, r0, #8
   b893a:	3308      	addeq	r3, #8
   b893c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   b8940:	bf04      	itt	eq
   b8942:	0100      	lsleq	r0, r0, #4
   b8944:	3304      	addeq	r3, #4
   b8946:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   b894a:	bf04      	itt	eq
   b894c:	0080      	lsleq	r0, r0, #2
   b894e:	3302      	addeq	r3, #2
   b8950:	2800      	cmp	r0, #0
   b8952:	db05      	blt.n	b8960 <__hi0bits+0x38>
   b8954:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   b8958:	f103 0301 	add.w	r3, r3, #1
   b895c:	bf08      	it	eq
   b895e:	2320      	moveq	r3, #32
   b8960:	4618      	mov	r0, r3
   b8962:	4770      	bx	lr
   b8964:	2300      	movs	r3, #0
   b8966:	e7e4      	b.n	b8932 <__hi0bits+0xa>

000b8968 <__lo0bits>:
   b8968:	6803      	ldr	r3, [r0, #0]
   b896a:	f013 0207 	ands.w	r2, r3, #7
   b896e:	4601      	mov	r1, r0
   b8970:	d00b      	beq.n	b898a <__lo0bits+0x22>
   b8972:	07da      	lsls	r2, r3, #31
   b8974:	d423      	bmi.n	b89be <__lo0bits+0x56>
   b8976:	0798      	lsls	r0, r3, #30
   b8978:	bf49      	itett	mi
   b897a:	085b      	lsrmi	r3, r3, #1
   b897c:	089b      	lsrpl	r3, r3, #2
   b897e:	2001      	movmi	r0, #1
   b8980:	600b      	strmi	r3, [r1, #0]
   b8982:	bf5c      	itt	pl
   b8984:	600b      	strpl	r3, [r1, #0]
   b8986:	2002      	movpl	r0, #2
   b8988:	4770      	bx	lr
   b898a:	b298      	uxth	r0, r3
   b898c:	b9a8      	cbnz	r0, b89ba <__lo0bits+0x52>
   b898e:	0c1b      	lsrs	r3, r3, #16
   b8990:	2010      	movs	r0, #16
   b8992:	b2da      	uxtb	r2, r3
   b8994:	b90a      	cbnz	r2, b899a <__lo0bits+0x32>
   b8996:	3008      	adds	r0, #8
   b8998:	0a1b      	lsrs	r3, r3, #8
   b899a:	071a      	lsls	r2, r3, #28
   b899c:	bf04      	itt	eq
   b899e:	091b      	lsreq	r3, r3, #4
   b89a0:	3004      	addeq	r0, #4
   b89a2:	079a      	lsls	r2, r3, #30
   b89a4:	bf04      	itt	eq
   b89a6:	089b      	lsreq	r3, r3, #2
   b89a8:	3002      	addeq	r0, #2
   b89aa:	07da      	lsls	r2, r3, #31
   b89ac:	d403      	bmi.n	b89b6 <__lo0bits+0x4e>
   b89ae:	085b      	lsrs	r3, r3, #1
   b89b0:	f100 0001 	add.w	r0, r0, #1
   b89b4:	d005      	beq.n	b89c2 <__lo0bits+0x5a>
   b89b6:	600b      	str	r3, [r1, #0]
   b89b8:	4770      	bx	lr
   b89ba:	4610      	mov	r0, r2
   b89bc:	e7e9      	b.n	b8992 <__lo0bits+0x2a>
   b89be:	2000      	movs	r0, #0
   b89c0:	4770      	bx	lr
   b89c2:	2020      	movs	r0, #32
   b89c4:	4770      	bx	lr
	...

000b89c8 <__i2b>:
   b89c8:	b510      	push	{r4, lr}
   b89ca:	460c      	mov	r4, r1
   b89cc:	2101      	movs	r1, #1
   b89ce:	f7ff feb9 	bl	b8744 <_Balloc>
   b89d2:	4602      	mov	r2, r0
   b89d4:	b928      	cbnz	r0, b89e2 <__i2b+0x1a>
   b89d6:	4b05      	ldr	r3, [pc, #20]	; (b89ec <__i2b+0x24>)
   b89d8:	4805      	ldr	r0, [pc, #20]	; (b89f0 <__i2b+0x28>)
   b89da:	f44f 71a0 	mov.w	r1, #320	; 0x140
   b89de:	f7fb fedb 	bl	b4798 <__assert_func>
   b89e2:	2301      	movs	r3, #1
   b89e4:	6144      	str	r4, [r0, #20]
   b89e6:	6103      	str	r3, [r0, #16]
   b89e8:	bd10      	pop	{r4, pc}
   b89ea:	bf00      	nop
   b89ec:	000b9639 	.word	0x000b9639
   b89f0:	000b96c0 	.word	0x000b96c0

000b89f4 <__multiply>:
   b89f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b89f8:	4691      	mov	r9, r2
   b89fa:	690a      	ldr	r2, [r1, #16]
   b89fc:	f8d9 3010 	ldr.w	r3, [r9, #16]
   b8a00:	429a      	cmp	r2, r3
   b8a02:	bfb8      	it	lt
   b8a04:	460b      	movlt	r3, r1
   b8a06:	460c      	mov	r4, r1
   b8a08:	bfbc      	itt	lt
   b8a0a:	464c      	movlt	r4, r9
   b8a0c:	4699      	movlt	r9, r3
   b8a0e:	6927      	ldr	r7, [r4, #16]
   b8a10:	f8d9 a010 	ldr.w	sl, [r9, #16]
   b8a14:	68a3      	ldr	r3, [r4, #8]
   b8a16:	6861      	ldr	r1, [r4, #4]
   b8a18:	eb07 060a 	add.w	r6, r7, sl
   b8a1c:	42b3      	cmp	r3, r6
   b8a1e:	b085      	sub	sp, #20
   b8a20:	bfb8      	it	lt
   b8a22:	3101      	addlt	r1, #1
   b8a24:	f7ff fe8e 	bl	b8744 <_Balloc>
   b8a28:	b930      	cbnz	r0, b8a38 <__multiply+0x44>
   b8a2a:	4602      	mov	r2, r0
   b8a2c:	4b44      	ldr	r3, [pc, #272]	; (b8b40 <__multiply+0x14c>)
   b8a2e:	4845      	ldr	r0, [pc, #276]	; (b8b44 <__multiply+0x150>)
   b8a30:	f240 115d 	movw	r1, #349	; 0x15d
   b8a34:	f7fb feb0 	bl	b4798 <__assert_func>
   b8a38:	f100 0514 	add.w	r5, r0, #20
   b8a3c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   b8a40:	462b      	mov	r3, r5
   b8a42:	2200      	movs	r2, #0
   b8a44:	4543      	cmp	r3, r8
   b8a46:	d321      	bcc.n	b8a8c <__multiply+0x98>
   b8a48:	f104 0314 	add.w	r3, r4, #20
   b8a4c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   b8a50:	f109 0314 	add.w	r3, r9, #20
   b8a54:	eb03 028a 	add.w	r2, r3, sl, lsl #2
   b8a58:	9202      	str	r2, [sp, #8]
   b8a5a:	1b3a      	subs	r2, r7, r4
   b8a5c:	3a15      	subs	r2, #21
   b8a5e:	f022 0203 	bic.w	r2, r2, #3
   b8a62:	3204      	adds	r2, #4
   b8a64:	f104 0115 	add.w	r1, r4, #21
   b8a68:	428f      	cmp	r7, r1
   b8a6a:	bf38      	it	cc
   b8a6c:	2204      	movcc	r2, #4
   b8a6e:	9201      	str	r2, [sp, #4]
   b8a70:	9a02      	ldr	r2, [sp, #8]
   b8a72:	9303      	str	r3, [sp, #12]
   b8a74:	429a      	cmp	r2, r3
   b8a76:	d80c      	bhi.n	b8a92 <__multiply+0x9e>
   b8a78:	2e00      	cmp	r6, #0
   b8a7a:	dd03      	ble.n	b8a84 <__multiply+0x90>
   b8a7c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   b8a80:	2b00      	cmp	r3, #0
   b8a82:	d05a      	beq.n	b8b3a <__multiply+0x146>
   b8a84:	6106      	str	r6, [r0, #16]
   b8a86:	b005      	add	sp, #20
   b8a88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b8a8c:	f843 2b04 	str.w	r2, [r3], #4
   b8a90:	e7d8      	b.n	b8a44 <__multiply+0x50>
   b8a92:	f8b3 a000 	ldrh.w	sl, [r3]
   b8a96:	f1ba 0f00 	cmp.w	sl, #0
   b8a9a:	d024      	beq.n	b8ae6 <__multiply+0xf2>
   b8a9c:	f104 0e14 	add.w	lr, r4, #20
   b8aa0:	46a9      	mov	r9, r5
   b8aa2:	f04f 0c00 	mov.w	ip, #0
   b8aa6:	f85e 2b04 	ldr.w	r2, [lr], #4
   b8aaa:	f8d9 1000 	ldr.w	r1, [r9]
   b8aae:	fa1f fb82 	uxth.w	fp, r2
   b8ab2:	b289      	uxth	r1, r1
   b8ab4:	fb0a 110b 	mla	r1, sl, fp, r1
   b8ab8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   b8abc:	f8d9 2000 	ldr.w	r2, [r9]
   b8ac0:	4461      	add	r1, ip
   b8ac2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   b8ac6:	fb0a c20b 	mla	r2, sl, fp, ip
   b8aca:	eb02 4211 	add.w	r2, r2, r1, lsr #16
   b8ace:	b289      	uxth	r1, r1
   b8ad0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   b8ad4:	4577      	cmp	r7, lr
   b8ad6:	f849 1b04 	str.w	r1, [r9], #4
   b8ada:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   b8ade:	d8e2      	bhi.n	b8aa6 <__multiply+0xb2>
   b8ae0:	9a01      	ldr	r2, [sp, #4]
   b8ae2:	f845 c002 	str.w	ip, [r5, r2]
   b8ae6:	9a03      	ldr	r2, [sp, #12]
   b8ae8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
   b8aec:	3304      	adds	r3, #4
   b8aee:	f1b9 0f00 	cmp.w	r9, #0
   b8af2:	d020      	beq.n	b8b36 <__multiply+0x142>
   b8af4:	6829      	ldr	r1, [r5, #0]
   b8af6:	f104 0c14 	add.w	ip, r4, #20
   b8afa:	46ae      	mov	lr, r5
   b8afc:	f04f 0a00 	mov.w	sl, #0
   b8b00:	f8bc b000 	ldrh.w	fp, [ip]
   b8b04:	f8be 2002 	ldrh.w	r2, [lr, #2]
   b8b08:	fb09 220b 	mla	r2, r9, fp, r2
   b8b0c:	4492      	add	sl, r2
   b8b0e:	b289      	uxth	r1, r1
   b8b10:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   b8b14:	f84e 1b04 	str.w	r1, [lr], #4
   b8b18:	f85c 2b04 	ldr.w	r2, [ip], #4
   b8b1c:	f8be 1000 	ldrh.w	r1, [lr]
   b8b20:	0c12      	lsrs	r2, r2, #16
   b8b22:	fb09 1102 	mla	r1, r9, r2, r1
   b8b26:	eb01 411a 	add.w	r1, r1, sl, lsr #16
   b8b2a:	4567      	cmp	r7, ip
   b8b2c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
   b8b30:	d8e6      	bhi.n	b8b00 <__multiply+0x10c>
   b8b32:	9a01      	ldr	r2, [sp, #4]
   b8b34:	50a9      	str	r1, [r5, r2]
   b8b36:	3504      	adds	r5, #4
   b8b38:	e79a      	b.n	b8a70 <__multiply+0x7c>
   b8b3a:	3e01      	subs	r6, #1
   b8b3c:	e79c      	b.n	b8a78 <__multiply+0x84>
   b8b3e:	bf00      	nop
   b8b40:	000b9639 	.word	0x000b9639
   b8b44:	000b96c0 	.word	0x000b96c0

000b8b48 <__pow5mult>:
   b8b48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b8b4c:	4615      	mov	r5, r2
   b8b4e:	f012 0203 	ands.w	r2, r2, #3
   b8b52:	4606      	mov	r6, r0
   b8b54:	460f      	mov	r7, r1
   b8b56:	d007      	beq.n	b8b68 <__pow5mult+0x20>
   b8b58:	4c25      	ldr	r4, [pc, #148]	; (b8bf0 <__pow5mult+0xa8>)
   b8b5a:	3a01      	subs	r2, #1
   b8b5c:	2300      	movs	r3, #0
   b8b5e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   b8b62:	f7ff fe51 	bl	b8808 <__multadd>
   b8b66:	4607      	mov	r7, r0
   b8b68:	10ad      	asrs	r5, r5, #2
   b8b6a:	d03d      	beq.n	b8be8 <__pow5mult+0xa0>
   b8b6c:	6a74      	ldr	r4, [r6, #36]	; 0x24
   b8b6e:	b97c      	cbnz	r4, b8b90 <__pow5mult+0x48>
   b8b70:	2010      	movs	r0, #16
   b8b72:	f7fb fdd9 	bl	b4728 <malloc>
   b8b76:	4602      	mov	r2, r0
   b8b78:	6270      	str	r0, [r6, #36]	; 0x24
   b8b7a:	b928      	cbnz	r0, b8b88 <__pow5mult+0x40>
   b8b7c:	4b1d      	ldr	r3, [pc, #116]	; (b8bf4 <__pow5mult+0xac>)
   b8b7e:	481e      	ldr	r0, [pc, #120]	; (b8bf8 <__pow5mult+0xb0>)
   b8b80:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   b8b84:	f7fb fe08 	bl	b4798 <__assert_func>
   b8b88:	e9c0 4401 	strd	r4, r4, [r0, #4]
   b8b8c:	6004      	str	r4, [r0, #0]
   b8b8e:	60c4      	str	r4, [r0, #12]
   b8b90:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   b8b94:	f8d8 4008 	ldr.w	r4, [r8, #8]
   b8b98:	b94c      	cbnz	r4, b8bae <__pow5mult+0x66>
   b8b9a:	f240 2171 	movw	r1, #625	; 0x271
   b8b9e:	4630      	mov	r0, r6
   b8ba0:	f7ff ff12 	bl	b89c8 <__i2b>
   b8ba4:	2300      	movs	r3, #0
   b8ba6:	f8c8 0008 	str.w	r0, [r8, #8]
   b8baa:	4604      	mov	r4, r0
   b8bac:	6003      	str	r3, [r0, #0]
   b8bae:	f04f 0900 	mov.w	r9, #0
   b8bb2:	07eb      	lsls	r3, r5, #31
   b8bb4:	d50a      	bpl.n	b8bcc <__pow5mult+0x84>
   b8bb6:	4639      	mov	r1, r7
   b8bb8:	4622      	mov	r2, r4
   b8bba:	4630      	mov	r0, r6
   b8bbc:	f7ff ff1a 	bl	b89f4 <__multiply>
   b8bc0:	4639      	mov	r1, r7
   b8bc2:	4680      	mov	r8, r0
   b8bc4:	4630      	mov	r0, r6
   b8bc6:	f7ff fdfd 	bl	b87c4 <_Bfree>
   b8bca:	4647      	mov	r7, r8
   b8bcc:	106d      	asrs	r5, r5, #1
   b8bce:	d00b      	beq.n	b8be8 <__pow5mult+0xa0>
   b8bd0:	6820      	ldr	r0, [r4, #0]
   b8bd2:	b938      	cbnz	r0, b8be4 <__pow5mult+0x9c>
   b8bd4:	4622      	mov	r2, r4
   b8bd6:	4621      	mov	r1, r4
   b8bd8:	4630      	mov	r0, r6
   b8bda:	f7ff ff0b 	bl	b89f4 <__multiply>
   b8bde:	6020      	str	r0, [r4, #0]
   b8be0:	f8c0 9000 	str.w	r9, [r0]
   b8be4:	4604      	mov	r4, r0
   b8be6:	e7e4      	b.n	b8bb2 <__pow5mult+0x6a>
   b8be8:	4638      	mov	r0, r7
   b8bea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b8bee:	bf00      	nop
   b8bf0:	000b9810 	.word	0x000b9810
   b8bf4:	000b9471 	.word	0x000b9471
   b8bf8:	000b96c0 	.word	0x000b96c0

000b8bfc <__lshift>:
   b8bfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b8c00:	460c      	mov	r4, r1
   b8c02:	6849      	ldr	r1, [r1, #4]
   b8c04:	6923      	ldr	r3, [r4, #16]
   b8c06:	eb03 1862 	add.w	r8, r3, r2, asr #5
   b8c0a:	68a3      	ldr	r3, [r4, #8]
   b8c0c:	4607      	mov	r7, r0
   b8c0e:	4691      	mov	r9, r2
   b8c10:	ea4f 1a62 	mov.w	sl, r2, asr #5
   b8c14:	f108 0601 	add.w	r6, r8, #1
   b8c18:	42b3      	cmp	r3, r6
   b8c1a:	db0b      	blt.n	b8c34 <__lshift+0x38>
   b8c1c:	4638      	mov	r0, r7
   b8c1e:	f7ff fd91 	bl	b8744 <_Balloc>
   b8c22:	4605      	mov	r5, r0
   b8c24:	b948      	cbnz	r0, b8c3a <__lshift+0x3e>
   b8c26:	4602      	mov	r2, r0
   b8c28:	4b2a      	ldr	r3, [pc, #168]	; (b8cd4 <__lshift+0xd8>)
   b8c2a:	482b      	ldr	r0, [pc, #172]	; (b8cd8 <__lshift+0xdc>)
   b8c2c:	f240 11d9 	movw	r1, #473	; 0x1d9
   b8c30:	f7fb fdb2 	bl	b4798 <__assert_func>
   b8c34:	3101      	adds	r1, #1
   b8c36:	005b      	lsls	r3, r3, #1
   b8c38:	e7ee      	b.n	b8c18 <__lshift+0x1c>
   b8c3a:	2300      	movs	r3, #0
   b8c3c:	f100 0114 	add.w	r1, r0, #20
   b8c40:	f100 0210 	add.w	r2, r0, #16
   b8c44:	4618      	mov	r0, r3
   b8c46:	4553      	cmp	r3, sl
   b8c48:	db37      	blt.n	b8cba <__lshift+0xbe>
   b8c4a:	6920      	ldr	r0, [r4, #16]
   b8c4c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   b8c50:	f104 0314 	add.w	r3, r4, #20
   b8c54:	f019 091f 	ands.w	r9, r9, #31
   b8c58:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   b8c5c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   b8c60:	d02f      	beq.n	b8cc2 <__lshift+0xc6>
   b8c62:	f1c9 0e20 	rsb	lr, r9, #32
   b8c66:	468a      	mov	sl, r1
   b8c68:	f04f 0c00 	mov.w	ip, #0
   b8c6c:	681a      	ldr	r2, [r3, #0]
   b8c6e:	fa02 f209 	lsl.w	r2, r2, r9
   b8c72:	ea42 020c 	orr.w	r2, r2, ip
   b8c76:	f84a 2b04 	str.w	r2, [sl], #4
   b8c7a:	f853 2b04 	ldr.w	r2, [r3], #4
   b8c7e:	4298      	cmp	r0, r3
   b8c80:	fa22 fc0e 	lsr.w	ip, r2, lr
   b8c84:	d8f2      	bhi.n	b8c6c <__lshift+0x70>
   b8c86:	1b03      	subs	r3, r0, r4
   b8c88:	3b15      	subs	r3, #21
   b8c8a:	f023 0303 	bic.w	r3, r3, #3
   b8c8e:	3304      	adds	r3, #4
   b8c90:	f104 0215 	add.w	r2, r4, #21
   b8c94:	4290      	cmp	r0, r2
   b8c96:	bf38      	it	cc
   b8c98:	2304      	movcc	r3, #4
   b8c9a:	f841 c003 	str.w	ip, [r1, r3]
   b8c9e:	f1bc 0f00 	cmp.w	ip, #0
   b8ca2:	d001      	beq.n	b8ca8 <__lshift+0xac>
   b8ca4:	f108 0602 	add.w	r6, r8, #2
   b8ca8:	3e01      	subs	r6, #1
   b8caa:	4638      	mov	r0, r7
   b8cac:	612e      	str	r6, [r5, #16]
   b8cae:	4621      	mov	r1, r4
   b8cb0:	f7ff fd88 	bl	b87c4 <_Bfree>
   b8cb4:	4628      	mov	r0, r5
   b8cb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b8cba:	f842 0f04 	str.w	r0, [r2, #4]!
   b8cbe:	3301      	adds	r3, #1
   b8cc0:	e7c1      	b.n	b8c46 <__lshift+0x4a>
   b8cc2:	3904      	subs	r1, #4
   b8cc4:	f853 2b04 	ldr.w	r2, [r3], #4
   b8cc8:	f841 2f04 	str.w	r2, [r1, #4]!
   b8ccc:	4298      	cmp	r0, r3
   b8cce:	d8f9      	bhi.n	b8cc4 <__lshift+0xc8>
   b8cd0:	e7ea      	b.n	b8ca8 <__lshift+0xac>
   b8cd2:	bf00      	nop
   b8cd4:	000b9639 	.word	0x000b9639
   b8cd8:	000b96c0 	.word	0x000b96c0

000b8cdc <__mcmp>:
   b8cdc:	b530      	push	{r4, r5, lr}
   b8cde:	6902      	ldr	r2, [r0, #16]
   b8ce0:	690c      	ldr	r4, [r1, #16]
   b8ce2:	1b12      	subs	r2, r2, r4
   b8ce4:	d10e      	bne.n	b8d04 <__mcmp+0x28>
   b8ce6:	f100 0314 	add.w	r3, r0, #20
   b8cea:	3114      	adds	r1, #20
   b8cec:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   b8cf0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   b8cf4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   b8cf8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   b8cfc:	42a5      	cmp	r5, r4
   b8cfe:	d003      	beq.n	b8d08 <__mcmp+0x2c>
   b8d00:	d305      	bcc.n	b8d0e <__mcmp+0x32>
   b8d02:	2201      	movs	r2, #1
   b8d04:	4610      	mov	r0, r2
   b8d06:	bd30      	pop	{r4, r5, pc}
   b8d08:	4283      	cmp	r3, r0
   b8d0a:	d3f3      	bcc.n	b8cf4 <__mcmp+0x18>
   b8d0c:	e7fa      	b.n	b8d04 <__mcmp+0x28>
   b8d0e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b8d12:	e7f7      	b.n	b8d04 <__mcmp+0x28>

000b8d14 <__mdiff>:
   b8d14:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8d18:	460c      	mov	r4, r1
   b8d1a:	4606      	mov	r6, r0
   b8d1c:	4611      	mov	r1, r2
   b8d1e:	4620      	mov	r0, r4
   b8d20:	4690      	mov	r8, r2
   b8d22:	f7ff ffdb 	bl	b8cdc <__mcmp>
   b8d26:	1e05      	subs	r5, r0, #0
   b8d28:	d110      	bne.n	b8d4c <__mdiff+0x38>
   b8d2a:	4629      	mov	r1, r5
   b8d2c:	4630      	mov	r0, r6
   b8d2e:	f7ff fd09 	bl	b8744 <_Balloc>
   b8d32:	b930      	cbnz	r0, b8d42 <__mdiff+0x2e>
   b8d34:	4b3a      	ldr	r3, [pc, #232]	; (b8e20 <__mdiff+0x10c>)
   b8d36:	4602      	mov	r2, r0
   b8d38:	f240 2132 	movw	r1, #562	; 0x232
   b8d3c:	4839      	ldr	r0, [pc, #228]	; (b8e24 <__mdiff+0x110>)
   b8d3e:	f7fb fd2b 	bl	b4798 <__assert_func>
   b8d42:	2301      	movs	r3, #1
   b8d44:	e9c0 3504 	strd	r3, r5, [r0, #16]
   b8d48:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b8d4c:	bfa4      	itt	ge
   b8d4e:	4643      	movge	r3, r8
   b8d50:	46a0      	movge	r8, r4
   b8d52:	4630      	mov	r0, r6
   b8d54:	f8d8 1004 	ldr.w	r1, [r8, #4]
   b8d58:	bfa6      	itte	ge
   b8d5a:	461c      	movge	r4, r3
   b8d5c:	2500      	movge	r5, #0
   b8d5e:	2501      	movlt	r5, #1
   b8d60:	f7ff fcf0 	bl	b8744 <_Balloc>
   b8d64:	b920      	cbnz	r0, b8d70 <__mdiff+0x5c>
   b8d66:	4b2e      	ldr	r3, [pc, #184]	; (b8e20 <__mdiff+0x10c>)
   b8d68:	4602      	mov	r2, r0
   b8d6a:	f44f 7110 	mov.w	r1, #576	; 0x240
   b8d6e:	e7e5      	b.n	b8d3c <__mdiff+0x28>
   b8d70:	f8d8 7010 	ldr.w	r7, [r8, #16]
   b8d74:	6926      	ldr	r6, [r4, #16]
   b8d76:	60c5      	str	r5, [r0, #12]
   b8d78:	f104 0914 	add.w	r9, r4, #20
   b8d7c:	f108 0514 	add.w	r5, r8, #20
   b8d80:	f100 0e14 	add.w	lr, r0, #20
   b8d84:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
   b8d88:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   b8d8c:	f108 0210 	add.w	r2, r8, #16
   b8d90:	46f2      	mov	sl, lr
   b8d92:	2100      	movs	r1, #0
   b8d94:	f859 3b04 	ldr.w	r3, [r9], #4
   b8d98:	f852 bf04 	ldr.w	fp, [r2, #4]!
   b8d9c:	fa1f f883 	uxth.w	r8, r3
   b8da0:	fa11 f18b 	uxtah	r1, r1, fp
   b8da4:	0c1b      	lsrs	r3, r3, #16
   b8da6:	eba1 0808 	sub.w	r8, r1, r8
   b8daa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   b8dae:	eb03 4328 	add.w	r3, r3, r8, asr #16
   b8db2:	fa1f f888 	uxth.w	r8, r8
   b8db6:	1419      	asrs	r1, r3, #16
   b8db8:	454e      	cmp	r6, r9
   b8dba:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   b8dbe:	f84a 3b04 	str.w	r3, [sl], #4
   b8dc2:	d8e7      	bhi.n	b8d94 <__mdiff+0x80>
   b8dc4:	1b33      	subs	r3, r6, r4
   b8dc6:	3b15      	subs	r3, #21
   b8dc8:	f023 0303 	bic.w	r3, r3, #3
   b8dcc:	3304      	adds	r3, #4
   b8dce:	3415      	adds	r4, #21
   b8dd0:	42a6      	cmp	r6, r4
   b8dd2:	bf38      	it	cc
   b8dd4:	2304      	movcc	r3, #4
   b8dd6:	441d      	add	r5, r3
   b8dd8:	4473      	add	r3, lr
   b8dda:	469e      	mov	lr, r3
   b8ddc:	462e      	mov	r6, r5
   b8dde:	4566      	cmp	r6, ip
   b8de0:	d30e      	bcc.n	b8e00 <__mdiff+0xec>
   b8de2:	f10c 0203 	add.w	r2, ip, #3
   b8de6:	1b52      	subs	r2, r2, r5
   b8de8:	f022 0203 	bic.w	r2, r2, #3
   b8dec:	3d03      	subs	r5, #3
   b8dee:	45ac      	cmp	ip, r5
   b8df0:	bf38      	it	cc
   b8df2:	2200      	movcc	r2, #0
   b8df4:	441a      	add	r2, r3
   b8df6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   b8dfa:	b17b      	cbz	r3, b8e1c <__mdiff+0x108>
   b8dfc:	6107      	str	r7, [r0, #16]
   b8dfe:	e7a3      	b.n	b8d48 <__mdiff+0x34>
   b8e00:	f856 8b04 	ldr.w	r8, [r6], #4
   b8e04:	fa11 f288 	uxtah	r2, r1, r8
   b8e08:	1414      	asrs	r4, r2, #16
   b8e0a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
   b8e0e:	b292      	uxth	r2, r2
   b8e10:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   b8e14:	f84e 2b04 	str.w	r2, [lr], #4
   b8e18:	1421      	asrs	r1, r4, #16
   b8e1a:	e7e0      	b.n	b8dde <__mdiff+0xca>
   b8e1c:	3f01      	subs	r7, #1
   b8e1e:	e7ea      	b.n	b8df6 <__mdiff+0xe2>
   b8e20:	000b9639 	.word	0x000b9639
   b8e24:	000b96c0 	.word	0x000b96c0

000b8e28 <__ulp>:
   b8e28:	b082      	sub	sp, #8
   b8e2a:	ed8d 0b00 	vstr	d0, [sp]
   b8e2e:	9b01      	ldr	r3, [sp, #4]
   b8e30:	4912      	ldr	r1, [pc, #72]	; (b8e7c <__ulp+0x54>)
   b8e32:	4019      	ands	r1, r3
   b8e34:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   b8e38:	2900      	cmp	r1, #0
   b8e3a:	dd05      	ble.n	b8e48 <__ulp+0x20>
   b8e3c:	2200      	movs	r2, #0
   b8e3e:	460b      	mov	r3, r1
   b8e40:	ec43 2b10 	vmov	d0, r2, r3
   b8e44:	b002      	add	sp, #8
   b8e46:	4770      	bx	lr
   b8e48:	4249      	negs	r1, r1
   b8e4a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   b8e4e:	ea4f 5021 	mov.w	r0, r1, asr #20
   b8e52:	f04f 0200 	mov.w	r2, #0
   b8e56:	f04f 0300 	mov.w	r3, #0
   b8e5a:	da04      	bge.n	b8e66 <__ulp+0x3e>
   b8e5c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   b8e60:	fa41 f300 	asr.w	r3, r1, r0
   b8e64:	e7ec      	b.n	b8e40 <__ulp+0x18>
   b8e66:	f1a0 0114 	sub.w	r1, r0, #20
   b8e6a:	291e      	cmp	r1, #30
   b8e6c:	bfda      	itte	le
   b8e6e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   b8e72:	fa20 f101 	lsrle.w	r1, r0, r1
   b8e76:	2101      	movgt	r1, #1
   b8e78:	460a      	mov	r2, r1
   b8e7a:	e7e1      	b.n	b8e40 <__ulp+0x18>
   b8e7c:	7ff00000 	.word	0x7ff00000

000b8e80 <__b2d>:
   b8e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8e82:	6905      	ldr	r5, [r0, #16]
   b8e84:	f100 0714 	add.w	r7, r0, #20
   b8e88:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   b8e8c:	1f2e      	subs	r6, r5, #4
   b8e8e:	f855 4c04 	ldr.w	r4, [r5, #-4]
   b8e92:	4620      	mov	r0, r4
   b8e94:	f7ff fd48 	bl	b8928 <__hi0bits>
   b8e98:	f1c0 0320 	rsb	r3, r0, #32
   b8e9c:	280a      	cmp	r0, #10
   b8e9e:	f8df c07c 	ldr.w	ip, [pc, #124]	; b8f1c <__b2d+0x9c>
   b8ea2:	600b      	str	r3, [r1, #0]
   b8ea4:	dc14      	bgt.n	b8ed0 <__b2d+0x50>
   b8ea6:	f1c0 0e0b 	rsb	lr, r0, #11
   b8eaa:	fa24 f10e 	lsr.w	r1, r4, lr
   b8eae:	42b7      	cmp	r7, r6
   b8eb0:	ea41 030c 	orr.w	r3, r1, ip
   b8eb4:	bf34      	ite	cc
   b8eb6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   b8eba:	2100      	movcs	r1, #0
   b8ebc:	3015      	adds	r0, #21
   b8ebe:	fa04 f000 	lsl.w	r0, r4, r0
   b8ec2:	fa21 f10e 	lsr.w	r1, r1, lr
   b8ec6:	ea40 0201 	orr.w	r2, r0, r1
   b8eca:	ec43 2b10 	vmov	d0, r2, r3
   b8ece:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b8ed0:	42b7      	cmp	r7, r6
   b8ed2:	bf3a      	itte	cc
   b8ed4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   b8ed8:	f1a5 0608 	subcc.w	r6, r5, #8
   b8edc:	2100      	movcs	r1, #0
   b8ede:	380b      	subs	r0, #11
   b8ee0:	d017      	beq.n	b8f12 <__b2d+0x92>
   b8ee2:	f1c0 0c20 	rsb	ip, r0, #32
   b8ee6:	fa04 f500 	lsl.w	r5, r4, r0
   b8eea:	42be      	cmp	r6, r7
   b8eec:	fa21 f40c 	lsr.w	r4, r1, ip
   b8ef0:	ea45 0504 	orr.w	r5, r5, r4
   b8ef4:	bf8c      	ite	hi
   b8ef6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   b8efa:	2400      	movls	r4, #0
   b8efc:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   b8f00:	fa01 f000 	lsl.w	r0, r1, r0
   b8f04:	fa24 f40c 	lsr.w	r4, r4, ip
   b8f08:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   b8f0c:	ea40 0204 	orr.w	r2, r0, r4
   b8f10:	e7db      	b.n	b8eca <__b2d+0x4a>
   b8f12:	ea44 030c 	orr.w	r3, r4, ip
   b8f16:	460a      	mov	r2, r1
   b8f18:	e7d7      	b.n	b8eca <__b2d+0x4a>
   b8f1a:	bf00      	nop
   b8f1c:	3ff00000 	.word	0x3ff00000

000b8f20 <__d2b>:
   b8f20:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b8f24:	4689      	mov	r9, r1
   b8f26:	2101      	movs	r1, #1
   b8f28:	ec57 6b10 	vmov	r6, r7, d0
   b8f2c:	4690      	mov	r8, r2
   b8f2e:	f7ff fc09 	bl	b8744 <_Balloc>
   b8f32:	4604      	mov	r4, r0
   b8f34:	b930      	cbnz	r0, b8f44 <__d2b+0x24>
   b8f36:	4602      	mov	r2, r0
   b8f38:	4b25      	ldr	r3, [pc, #148]	; (b8fd0 <__d2b+0xb0>)
   b8f3a:	4826      	ldr	r0, [pc, #152]	; (b8fd4 <__d2b+0xb4>)
   b8f3c:	f240 310a 	movw	r1, #778	; 0x30a
   b8f40:	f7fb fc2a 	bl	b4798 <__assert_func>
   b8f44:	f3c7 550a 	ubfx	r5, r7, #20, #11
   b8f48:	f3c7 0313 	ubfx	r3, r7, #0, #20
   b8f4c:	bb35      	cbnz	r5, b8f9c <__d2b+0x7c>
   b8f4e:	2e00      	cmp	r6, #0
   b8f50:	9301      	str	r3, [sp, #4]
   b8f52:	d028      	beq.n	b8fa6 <__d2b+0x86>
   b8f54:	4668      	mov	r0, sp
   b8f56:	9600      	str	r6, [sp, #0]
   b8f58:	f7ff fd06 	bl	b8968 <__lo0bits>
   b8f5c:	9900      	ldr	r1, [sp, #0]
   b8f5e:	b300      	cbz	r0, b8fa2 <__d2b+0x82>
   b8f60:	9a01      	ldr	r2, [sp, #4]
   b8f62:	f1c0 0320 	rsb	r3, r0, #32
   b8f66:	fa02 f303 	lsl.w	r3, r2, r3
   b8f6a:	430b      	orrs	r3, r1
   b8f6c:	40c2      	lsrs	r2, r0
   b8f6e:	6163      	str	r3, [r4, #20]
   b8f70:	9201      	str	r2, [sp, #4]
   b8f72:	9b01      	ldr	r3, [sp, #4]
   b8f74:	61a3      	str	r3, [r4, #24]
   b8f76:	2b00      	cmp	r3, #0
   b8f78:	bf14      	ite	ne
   b8f7a:	2202      	movne	r2, #2
   b8f7c:	2201      	moveq	r2, #1
   b8f7e:	6122      	str	r2, [r4, #16]
   b8f80:	b1d5      	cbz	r5, b8fb8 <__d2b+0x98>
   b8f82:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   b8f86:	4405      	add	r5, r0
   b8f88:	f8c9 5000 	str.w	r5, [r9]
   b8f8c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   b8f90:	f8c8 0000 	str.w	r0, [r8]
   b8f94:	4620      	mov	r0, r4
   b8f96:	b003      	add	sp, #12
   b8f98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b8f9c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b8fa0:	e7d5      	b.n	b8f4e <__d2b+0x2e>
   b8fa2:	6161      	str	r1, [r4, #20]
   b8fa4:	e7e5      	b.n	b8f72 <__d2b+0x52>
   b8fa6:	a801      	add	r0, sp, #4
   b8fa8:	f7ff fcde 	bl	b8968 <__lo0bits>
   b8fac:	9b01      	ldr	r3, [sp, #4]
   b8fae:	6163      	str	r3, [r4, #20]
   b8fb0:	2201      	movs	r2, #1
   b8fb2:	6122      	str	r2, [r4, #16]
   b8fb4:	3020      	adds	r0, #32
   b8fb6:	e7e3      	b.n	b8f80 <__d2b+0x60>
   b8fb8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   b8fbc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   b8fc0:	f8c9 0000 	str.w	r0, [r9]
   b8fc4:	6918      	ldr	r0, [r3, #16]
   b8fc6:	f7ff fcaf 	bl	b8928 <__hi0bits>
   b8fca:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   b8fce:	e7df      	b.n	b8f90 <__d2b+0x70>
   b8fd0:	000b9639 	.word	0x000b9639
   b8fd4:	000b96c0 	.word	0x000b96c0

000b8fd8 <__ratio>:
   b8fd8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8fdc:	4688      	mov	r8, r1
   b8fde:	4669      	mov	r1, sp
   b8fe0:	4681      	mov	r9, r0
   b8fe2:	f7ff ff4d 	bl	b8e80 <__b2d>
   b8fe6:	a901      	add	r1, sp, #4
   b8fe8:	4640      	mov	r0, r8
   b8fea:	ec55 4b10 	vmov	r4, r5, d0
   b8fee:	f7ff ff47 	bl	b8e80 <__b2d>
   b8ff2:	f8d9 3010 	ldr.w	r3, [r9, #16]
   b8ff6:	f8d8 2010 	ldr.w	r2, [r8, #16]
   b8ffa:	eba3 0c02 	sub.w	ip, r3, r2
   b8ffe:	e9dd 3200 	ldrd	r3, r2, [sp]
   b9002:	1a9b      	subs	r3, r3, r2
   b9004:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   b9008:	ec51 0b10 	vmov	r0, r1, d0
   b900c:	2b00      	cmp	r3, #0
   b900e:	bfd6      	itet	le
   b9010:	460a      	movle	r2, r1
   b9012:	462a      	movgt	r2, r5
   b9014:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   b9018:	468b      	mov	fp, r1
   b901a:	462f      	mov	r7, r5
   b901c:	bfd4      	ite	le
   b901e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   b9022:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   b9026:	4620      	mov	r0, r4
   b9028:	ee10 2a10 	vmov	r2, s0
   b902c:	465b      	mov	r3, fp
   b902e:	4639      	mov	r1, r7
   b9030:	f7fd fe2e 	bl	b6c90 <__aeabi_ddiv>
   b9034:	ec41 0b10 	vmov	d0, r0, r1
   b9038:	b003      	add	sp, #12
   b903a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b903e <__copybits>:
   b903e:	3901      	subs	r1, #1
   b9040:	b570      	push	{r4, r5, r6, lr}
   b9042:	1149      	asrs	r1, r1, #5
   b9044:	6914      	ldr	r4, [r2, #16]
   b9046:	3101      	adds	r1, #1
   b9048:	f102 0314 	add.w	r3, r2, #20
   b904c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   b9050:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   b9054:	1f05      	subs	r5, r0, #4
   b9056:	42a3      	cmp	r3, r4
   b9058:	d30c      	bcc.n	b9074 <__copybits+0x36>
   b905a:	1aa3      	subs	r3, r4, r2
   b905c:	3b11      	subs	r3, #17
   b905e:	f023 0303 	bic.w	r3, r3, #3
   b9062:	3211      	adds	r2, #17
   b9064:	42a2      	cmp	r2, r4
   b9066:	bf88      	it	hi
   b9068:	2300      	movhi	r3, #0
   b906a:	4418      	add	r0, r3
   b906c:	2300      	movs	r3, #0
   b906e:	4288      	cmp	r0, r1
   b9070:	d305      	bcc.n	b907e <__copybits+0x40>
   b9072:	bd70      	pop	{r4, r5, r6, pc}
   b9074:	f853 6b04 	ldr.w	r6, [r3], #4
   b9078:	f845 6f04 	str.w	r6, [r5, #4]!
   b907c:	e7eb      	b.n	b9056 <__copybits+0x18>
   b907e:	f840 3b04 	str.w	r3, [r0], #4
   b9082:	e7f4      	b.n	b906e <__copybits+0x30>

000b9084 <__any_on>:
   b9084:	f100 0214 	add.w	r2, r0, #20
   b9088:	6900      	ldr	r0, [r0, #16]
   b908a:	114b      	asrs	r3, r1, #5
   b908c:	4298      	cmp	r0, r3
   b908e:	b510      	push	{r4, lr}
   b9090:	db11      	blt.n	b90b6 <__any_on+0x32>
   b9092:	dd0a      	ble.n	b90aa <__any_on+0x26>
   b9094:	f011 011f 	ands.w	r1, r1, #31
   b9098:	d007      	beq.n	b90aa <__any_on+0x26>
   b909a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   b909e:	fa24 f001 	lsr.w	r0, r4, r1
   b90a2:	fa00 f101 	lsl.w	r1, r0, r1
   b90a6:	428c      	cmp	r4, r1
   b90a8:	d10b      	bne.n	b90c2 <__any_on+0x3e>
   b90aa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   b90ae:	4293      	cmp	r3, r2
   b90b0:	d803      	bhi.n	b90ba <__any_on+0x36>
   b90b2:	2000      	movs	r0, #0
   b90b4:	bd10      	pop	{r4, pc}
   b90b6:	4603      	mov	r3, r0
   b90b8:	e7f7      	b.n	b90aa <__any_on+0x26>
   b90ba:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   b90be:	2900      	cmp	r1, #0
   b90c0:	d0f5      	beq.n	b90ae <__any_on+0x2a>
   b90c2:	2001      	movs	r0, #1
   b90c4:	e7f6      	b.n	b90b4 <__any_on+0x30>

000b90c6 <_calloc_r>:
   b90c6:	b513      	push	{r0, r1, r4, lr}
   b90c8:	434a      	muls	r2, r1
   b90ca:	4611      	mov	r1, r2
   b90cc:	9201      	str	r2, [sp, #4]
   b90ce:	f7fb fb53 	bl	b4778 <_malloc_r>
   b90d2:	4604      	mov	r4, r0
   b90d4:	b118      	cbz	r0, b90de <_calloc_r+0x18>
   b90d6:	9a01      	ldr	r2, [sp, #4]
   b90d8:	2100      	movs	r1, #0
   b90da:	f7fd ffff 	bl	b70dc <memset>
   b90de:	4620      	mov	r0, r4
   b90e0:	b002      	add	sp, #8
   b90e2:	bd10      	pop	{r4, pc}
   b90e4:	0000      	movs	r0, r0
	...

000b90e8 <nan>:
   b90e8:	ed9f 0b01 	vldr	d0, [pc, #4]	; b90f0 <nan+0x8>
   b90ec:	4770      	bx	lr
   b90ee:	bf00      	nop
   b90f0:	00000000 	.word	0x00000000
   b90f4:	7ff80000 	.word	0x7ff80000

000b90f8 <__ascii_wctomb>:
   b90f8:	b149      	cbz	r1, b910e <__ascii_wctomb+0x16>
   b90fa:	2aff      	cmp	r2, #255	; 0xff
   b90fc:	bf85      	ittet	hi
   b90fe:	238a      	movhi	r3, #138	; 0x8a
   b9100:	6003      	strhi	r3, [r0, #0]
   b9102:	700a      	strbls	r2, [r1, #0]
   b9104:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
   b9108:	bf98      	it	ls
   b910a:	2001      	movls	r0, #1
   b910c:	4770      	bx	lr
   b910e:	4608      	mov	r0, r1
   b9110:	4770      	bx	lr
	...

000b9114 <__aeabi_d2lz>:
   b9114:	b538      	push	{r3, r4, r5, lr}
   b9116:	2200      	movs	r2, #0
   b9118:	2300      	movs	r3, #0
   b911a:	4604      	mov	r4, r0
   b911c:	460d      	mov	r5, r1
   b911e:	f7fd feff 	bl	b6f20 <__aeabi_dcmplt>
   b9122:	b928      	cbnz	r0, b9130 <__aeabi_d2lz+0x1c>
   b9124:	4620      	mov	r0, r4
   b9126:	4629      	mov	r1, r5
   b9128:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b912c:	f7fd bf7e 	b.w	b702c <__aeabi_d2ulz>
   b9130:	4620      	mov	r0, r4
   b9132:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   b9136:	f7fd ff79 	bl	b702c <__aeabi_d2ulz>
   b913a:	4240      	negs	r0, r0
   b913c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b9140:	bd38      	pop	{r3, r4, r5, pc}
   b9142:	bf00      	nop

000b9144 <dynalib_user>:
   b9144:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   b9154:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   b9164:	7620 7269 7574 6c61 4100 6363 2500 732a      virtual.Acc.%*s
   b9174:	2520 2073 5b25 2c5e 205d 202c 2a25 2073      %s %[^,] , %*s 
   b9184:	7325 2520 732a 2520 732a 2520 2073 2a25     %s %*s %*s %s %*
   b9194:	2073 2a25 2073 7325 4100 6363 6d75 6c75     s %*s %s.Accumul
   b91a4:	7461 6465 5220 6961 006e 6d41 756f 746e     ated Rain.Amount
   b91b4:	6f20 2066 6172 6e69 6620 726f 7420 6968      of rain for thi
   b91c4:	2073 7665 6e65 0074 6f54 6174 206c 6d61     s event.Total am
   b91d4:	756f 746e 6f20 2066 6172 6e69 4300 7275     ount of rain.Cur
   b91e4:	6572 746e 7220 6961 206e 6e69 6574 736e     rent rain intens
   b91f4:	7469 0079                                   ity.

000b91f8 <_ZTVN5spark10LogHandlerE>:
	...
   b9208:	40a5 000b 40cd 000b                         .@...@..

000b9210 <_ZTVN5spark16SerialLogHandlerE>:
	...
   b9218:	40d9 000b 410d 000b 5919 000b 40cf 000b     .@...A...Y...@..

000b9228 <_ZTVN5spark13EthernetClassE>:
	...
   b9230:	488b 000b 4881 000b 4877 000b 486d 000b     .H...H..wH..mH..
   b9240:	4861 000b 4855 000b 5c71 000b 5c79 000b     aH..UH..q\..y\..
   b9250:	4849 000b 4841 000b 4837 000b 482d 000b     IH..AH..7H..-H..
   b9260:	5ca9 000b                                   .\..

000b9264 <_ZTV9IPAddress>:
	...
   b926c:	48b9 000b 48a9 000b 48ab 000b 6425 2500     .H...H...H..%d.%
   b927c:	0075 2575 3430 0078 6162 6475 5300 7265     u.u%04x.baud.Ser
   b928c:	6169 006c 6553 6972 6c61 0031 534a 4e4f     ial.Serial1.JSON
   b929c:	7453 6572 6d61 6f4c 4867 6e61 6c64 7265     StreamLogHandler
   b92ac:	6100 7070 2500 3130 7530 0020 205d 2c00     .app.%010u .] .,
   b92bc:	0020 2928 203a 2000 005b 6f63 6564 3d20      .(): . [.code =
   b92cc:	0020 6925 6400 7465 6961 736c 3d20 0020      .%i.details = .
   b92dc:	0a0d 6d00 6c00 006e 6e66 6300 646f 0065     ...m.ln.fn.code.
   b92ec:	6564 6174 6c69 0000                         detail..

000b92f4 <_ZTVN5spark16JSONStreamWriterE>:
	...
   b92fc:	4d65 000b 4d8b 000b 4d49 000b 49c7 000b     eM...M..IM...I..

000b930c <_ZTVN5spark16StreamLogHandlerE>:
	...
   b9314:	51c1 000b 51d9 000b 5919 000b 40cf 000b     .Q...Q...Y...@..

000b9324 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   b932c:	51ed 000b 5201 000b 5abd 000b 4d51 000b     .Q...R...Z..QM..

000b933c <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   b9344:	4d63 000b 4d99 000b 587d 000b 4d53 000b     cM...M..}X..SM..

000b9354 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   b935c:	4d61 000b 4da7 000b 5129 000b 4dc9 000b     aM...M..)Q...M..

000b936c <_ZTVN5spark12NetworkClassE>:
	...
   b9374:	5c31 000b 5c3b 000b 5c45 000b 5c4f 000b     1\..;\..E\..O\..
   b9384:	5c59 000b 5c65 000b 5c71 000b 5c79 000b     Y\..e\..q\..y\..
   b9394:	5c81 000b 5c8d 000b 5c95 000b 5c9f 000b     .\...\...\...\..
   b93a4:	5ca9 000b 616e 006e 6e69 0066 766f 0066     .\..nan.inf.ovf.
   b93b4:	002e 5925 252d 2d6d 6425 2554 3a48 4d25     ..%Y-%m-%dT%H:%M
   b93c4:	253a 2553 007a 7361 7463 6d69 0065 0000     :%S%z.asctime...

000b93d4 <_ZTV11USARTSerial>:
	...
   b93dc:	62b9 000b 6325 000b 62fd 000b 5d95 000b     .b..%c...b...]..
   b93ec:	62cd 000b 62e9 000b 62db 000b 62f7 000b     .b...b...b...b..
   b93fc:	62bb 000b 62bf 000b                         .b...b..

000b9404 <_ZTV9USBSerial>:
	...
   b940c:	637d 000b 63e5 000b 63bb 000b 5d95 000b     }c...c...c...]..
   b941c:	63ad 000b 637f 000b 638f 000b 63df 000b     .c...c...c...c..
   b942c:	639f 000b 6377 000b                         .c..wc..

000b9434 <_ZTVN5spark9WiFiClassE>:
	...
   b943c:	64e7 000b 64dd 000b 64d3 000b 6489 000b     .d...d...d...d..
   b944c:	64c7 000b 64bb 000b 5c71 000b 5c79 000b     .d...d..q\..y\..
   b945c:	64af 000b 64a7 000b 649d 000b 6493 000b     .d...d...d...d..
   b946c:	5ca9 000b                                   .\..

000b9470 <_ZSt7nothrow>:
   b9470:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
   b9480:	6363 6565 6564 0064 742f 706d 6a2f 6e65     cceeded./tmp/jen
   b9490:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   b94a0:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   b94b0:	315f 3036 3136 3038 3336 2f39 7273 2f63     _1606180639/src/
   b94c0:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   b94d0:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
   b94e0:	6900 696e 7974 0000                         .inity..

000b94e8 <fpi.1>:
   b94e8:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   b94f8:	0000 0000                                   ....

000b94fc <fpinan.0>:
   b94fc:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
   b950c:	0000 0000                                   ....

000b9510 <tinytens>:
   b9510:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   b9520:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   b9530:	6f43 64ac 0628 1168                         Co.d(.h.

000b9538 <_ctype_>:
   b9538:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   b9548:	2020 2020 2020 2020 2020 2020 2020 2020                     
   b9558:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   b9568:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   b9578:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   b9588:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   b9598:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   b95a8:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   b95b8:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
   b9638:	4200 6c61 6f6c 2063 7573 6363 6565 6564     .Balloc succeede
   b9648:	0064 742f 706d 6a2f 6e65 696b 736e 472d     d./tmp/jenkins-G
   b9658:	4343 312d 2d30 6970 6570 696c 656e 342d     CC-10-pipeline-4
   b9668:	5f38 3032 3032 3131 3432 315f 3036 3136     8_20201124_16061
   b9678:	3038 3336 2f39 7273 2f63 656e 6c77 6269     80639/src/newlib
   b9688:	6e2f 7765 696c 2f62 696c 6362 732f 6474     /newlib/libc/std
   b9698:	696c 2f62 6467 6f74 2d61 6567 6874 7865     lib/gdtoa-gethex
   b96a8:	632e 0000                                   .c..

000b96ac <_C_numeric_locale>:
   b96ac:	93b4 000b 92de 000b e4e0 2003 0043 4f50     ........... C.PO
   b96bc:	4953 0058 742f 706d 6a2f 6e65 696b 736e     SIX./tmp/jenkins
   b96cc:	472d 4343 312d 2d30 6970 6570 696c 656e     -GCC-10-pipeline
   b96dc:	342d 5f38 3032 3032 3131 3432 315f 3036     -48_20201124_160
   b96ec:	3136 3038 3336 2f39 7273 2f63 656e 6c77     6180639/src/newl
   b96fc:	6269 6e2f 7765 696c 2f62 696c 6362 732f     ib/newlib/libc/s
   b970c:	6474 696c 2f62 706d 6572 2e63 0063 0000     tdlib/mprec.c...
   b971c:	0000 0000                                   ....

000b9720 <__mprec_bigtens>:
   b9720:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   b9730:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   b9740:	bf3c 7f73 4fdd 7515                         <.s..O.u

000b9748 <__mprec_tens>:
   b9748:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   b9758:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   b9768:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   b9778:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   b9788:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   b9798:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   b97a8:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   b97b8:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   b97c8:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   b97d8:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   b97e8:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   b97f8:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   b9808:	9db4 79d9 7843 44ea                         ...yCx.D

000b9810 <p05.0>:
   b9810:	0005 0000 0019 0000 007d 0000               ........}...

000b981c <link_const_variable_data_end>:
   b981c:	000b434d 	.word	0x000b434d
   b9820:	000b481d 	.word	0x000b481d
   b9824:	000b4895 	.word	0x000b4895
   b9828:	000b5909 	.word	0x000b5909
   b982c:	000b5d81 	.word	0x000b5d81
   b9830:	000b6051 	.word	0x000b6051
   b9834:	000b6281 	.word	0x000b6281
   b9838:	000b62a5 	.word	0x000b62a5
   b983c:	000b64f1 	.word	0x000b64f1
