
/Users/gashongore/Desktop/Farmsense/RainSensor_RG15_Serial/target/3.3.1/argon/RainSensor_RG15_Serial.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00005850  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b9870  000b9870  00009870  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000b9894  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001e4  2003e494  000b9898  0001e494  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000178  2003e678  2003e678  0002e678  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000b9a7c  000b9a7c  00029a7c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000b9aa4  000b9aa4  00029aa4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   000f163d  00000000  00000000  00029aa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000f505  00000000  00000000  0011b0e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    000354a7  00000000  00000000  0012a5ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002830  00000000  00000000  0015fa91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00009890  00000000  00000000  001622c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00032185  00000000  00000000  0016bb51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003382a  00000000  00000000  0019dcd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0012cfbe  00000000  00000000  001d1500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00007a6c  00000000  00000000  002fe4c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f003 f84f 	bl	b70d4 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f003 f871 	bl	b7124 <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003e494 	.word	0x2003e494
   b404c:	000b9898 	.word	0x000b9898
   b4050:	2003e678 	.word	0x2003e678
   b4054:	2003e678 	.word	0x2003e678
   b4058:	2003e7ed 	.word	0x2003e7ed

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f002 fadd 	bl	b6620 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000b984c 	.word	0x000b984c
   b4080:	000b9870 	.word	0x000b9870

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f000 b84c 	b.w	b4120 <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f000 f8fd 	bl	b4288 <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f002 ba7d 	b.w	b6590 <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f000 bb61 	b.w	b475c <malloc>

000b409a <_Znaj>:
   b409a:	f000 bb5f 	b.w	b475c <malloc>

000b409e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409e:	f000 bb65 	b.w	b476c <free>
	...

000b40a4 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40a6:	4a03      	ldr	r2, [pc, #12]	; (b40b4 <__cxa_pure_virtual+0x10>)
   b40a8:	4903      	ldr	r1, [pc, #12]	; (b40b8 <__cxa_pure_virtual+0x14>)
   b40aa:	200c      	movs	r0, #12
   b40ac:	f000 faaa 	bl	b4604 <panic_>
  while (1);
   b40b0:	e7fe      	b.n	b40b0 <__cxa_pure_virtual+0xc>
   b40b2:	bf00      	nop
   b40b4:	000b4495 	.word	0x000b4495
   b40b8:	000b91a0 	.word	0x000b91a0

000b40bc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40bc:	7800      	ldrb	r0, [r0, #0]
   b40be:	fab0 f080 	clz	r0, r0
   b40c2:	0940      	lsrs	r0, r0, #5
   b40c4:	4770      	bx	lr

000b40c6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40c6:	2301      	movs	r3, #1
   b40c8:	7003      	strb	r3, [r0, #0]
   b40ca:	4770      	bx	lr

000b40cc <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
   b40cc:	4770      	bx	lr

000b40ce <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
   b40ce:	6a00      	ldr	r0, [r0, #32]
   b40d0:	6803      	ldr	r3, [r0, #0]
   b40d2:	68db      	ldr	r3, [r3, #12]
   b40d4:	4718      	bx	r3
	...

000b40d8 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   b40d8:	4b0a      	ldr	r3, [pc, #40]	; (b4104 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   b40da:	b510      	push	{r4, lr}
   b40dc:	4604      	mov	r4, r0
   b40de:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   b40e0:	f000 ffa8 	bl	b5034 <_ZN5spark10LogManager8instanceEv>
   b40e4:	4621      	mov	r1, r4
   b40e6:	f001 f9e0 	bl	b54aa <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   b40ea:	f002 f9cb 	bl	b6484 <_Z16_fetch_usbserialv>
   b40ee:	f002 f9bd 	bl	b646c <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   b40f2:	4620      	mov	r0, r4
   b40f4:	4b04      	ldr	r3, [pc, #16]	; (b4108 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   b40f6:	f840 3b04 	str.w	r3, [r0], #4
   b40fa:	f001 f871 	bl	b51e0 <_ZN5spark6detail9LogFilterD1Ev>
    }
   b40fe:	4620      	mov	r0, r4
   b4100:	bd10      	pop	{r4, pc}
   b4102:	bf00      	nop
   b4104:	000b9240 	.word	0x000b9240
   b4108:	000b9228 	.word	0x000b9228

000b410c <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   b410c:	b510      	push	{r4, lr}
   b410e:	4604      	mov	r4, r0
    }
   b4110:	f7ff ffe2 	bl	b40d8 <_ZN5spark16SerialLogHandlerD1Ev>
   b4114:	4620      	mov	r0, r4
   b4116:	2124      	movs	r1, #36	; 0x24
   b4118:	f7ff ffc1 	bl	b409e <_ZdlPvj>
   b411c:	4620      	mov	r0, r4
   b411e:	bd10      	pop	{r4, pc}

000b4120 <setup>:
double rInt_f=0;

SerialLogHandler logHandler;

void setup()
{
   b4120:	b508      	push	{r3, lr}
Serial1.begin(9600,SERIAL_8N1);
   b4122:	f002 facb 	bl	b66bc <_Z22__fetch_global_Serial1v>
   b4126:	2200      	movs	r2, #0
   b4128:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b412c:	f002 f93a 	bl	b63a4 <_ZN11USARTSerial5beginEmm>
  
Serial1.write('c');
   b4130:	f002 fac4 	bl	b66bc <_Z22__fetch_global_Serial1v>
  bool breakRx(void);

  inline size_t write(unsigned long n) { return write((uint16_t)n); }
  inline size_t write(long n) { return write((uint16_t)n); }
  inline size_t write(unsigned int n) { return write((uint16_t)n); }
  inline size_t write(int n) { return write((uint16_t)n); }
   b4134:	2163      	movs	r1, #99	; 0x63
   b4136:	f002 f93f 	bl	b63b8 <_ZN11USARTSerial5writeEt>
Serial1.write('\n');
   b413a:	f002 fabf 	bl	b66bc <_Z22__fetch_global_Serial1v>
   b413e:	210a      	movs	r1, #10
   b4140:	f002 f93a 	bl	b63b8 <_ZN11USARTSerial5writeEt>

Serial.begin(9600);
   b4144:	f002 f99e 	bl	b6484 <_Z16_fetch_usbserialv>

}
   b4148:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
Serial.begin(9600);
   b414c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b4150:	f002 b988 	b.w	b6464 <_ZN9USBSerial5beginEl>

000b4154 <_Z14readRainSensorv>:
     readRainSensor();

     delay(3000);
  
}
void readRainSensor(){
   b4154:	b5f0      	push	{r4, r5, r6, r7, lr}
   b4156:	b095      	sub	sp, #84	; 0x54
  String response;
   b4158:	4943      	ldr	r1, [pc, #268]	; (b4268 <_Z14readRainSensorv+0x114>)
   b415a:	a80c      	add	r0, sp, #48	; 0x30
   b415c:	f002 f813 	bl	b6186 <_ZN6StringC1EPK19__FlashStringHelper>
   b4160:	ac10      	add	r4, sp, #64	; 0x40
  while (response.length() == 0) {
   b4162:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   b4164:	b98b      	cbnz	r3, b418a <_Z14readRainSensorv+0x36>
    response = Serial1.readStringUntil('\n');
   b4166:	f002 faa9 	bl	b66bc <_Z22__fetch_global_Serial1v>
   b416a:	220a      	movs	r2, #10
   b416c:	4601      	mov	r1, r0
   b416e:	4620      	mov	r0, r4
   b4170:	f001 ffa6 	bl	b60c0 <_ZN6Stream15readStringUntilEc>
   b4174:	4621      	mov	r1, r4
   b4176:	a80c      	add	r0, sp, #48	; 0x30
   b4178:	f002 f85b 	bl	b6232 <_ZN6StringaSEOS_>
   b417c:	4620      	mov	r0, r4
   b417e:	f001 ffb7 	bl	b60f0 <_ZN6StringD1Ev>
    // Optionally, add a small delay here to avoid continuous reading
    delay(100);
   b4182:	2064      	movs	r0, #100	; 0x64
   b4184:	f000 fb32 	bl	b47ec <delay>
  while (response.length() == 0) {
   b4188:	e7eb      	b.n	b4162 <_Z14readRainSensorv+0xe>
  }
  if(response.startsWith("Acc")) {
   b418a:	4938      	ldr	r1, [pc, #224]	; (b426c <_Z14readRainSensorv+0x118>)
   b418c:	4620      	mov	r0, r4
   b418e:	f001 fffa 	bl	b6186 <_ZN6StringC1EPK19__FlashStringHelper>
   b4192:	4621      	mov	r1, r4
   b4194:	a80c      	add	r0, sp, #48	; 0x30
   b4196:	f002 f88e 	bl	b62b6 <_ZNK6String10startsWithERKS_>
   b419a:	4605      	mov	r5, r0
   b419c:	4620      	mov	r0, r4
   b419e:	f001 ffa7 	bl	b60f0 <_ZN6StringD1Ev>
   b41a2:	2d00      	cmp	r5, #0
   b41a4:	d05a      	beq.n	b425c <_Z14readRainSensorv+0x108>
    char acc[7], eventAcc[7], totalAcc[7], rInt[7], unit[4];
    sscanf(response.c_str(), "%*s %6s %[^,] , %*s %6s %*s %*s %6s %*s %*s %6s", acc, unit, eventAcc, totalAcc, rInt);
   b41a6:	ae0a      	add	r6, sp, #40	; 0x28
   b41a8:	af08      	add	r7, sp, #32
   b41aa:	ab05      	add	r3, sp, #20
   b41ac:	aa06      	add	r2, sp, #24
   b41ae:	4930      	ldr	r1, [pc, #192]	; (b4270 <_Z14readRainSensorv+0x11c>)
   b41b0:	980c      	ldr	r0, [sp, #48]	; 0x30
   b41b2:	9402      	str	r4, [sp, #8]
   b41b4:	9601      	str	r6, [sp, #4]
   b41b6:	9700      	str	r7, [sp, #0]
   b41b8:	f000 fae8 	bl	b478c <sscanf>
    
    Serial.print("Accumulation: ");
   b41bc:	f002 f962 	bl	b6484 <_Z16_fetch_usbserialv>
   b41c0:	492c      	ldr	r1, [pc, #176]	; (b4274 <_Z14readRainSensorv+0x120>)
   b41c2:	f001 fe29 	bl	b5e18 <_ZN5Print5printEPKc>
    Serial.print(atof (acc),3);  
   b41c6:	f002 f95d 	bl	b6484 <_Z16_fetch_usbserialv>
   b41ca:	4605      	mov	r5, r0
   b41cc:	a806      	add	r0, sp, #24
   b41ce:	f002 ff75 	bl	b70bc <atof>
   b41d2:	2103      	movs	r1, #3
   b41d4:	4628      	mov	r0, r5
   b41d6:	f001 ff23 	bl	b6020 <_ZN5Print5printEdi>
    Serial.println(unit);
   b41da:	f002 f953 	bl	b6484 <_Z16_fetch_usbserialv>
   b41de:	a905      	add	r1, sp, #20
   b41e0:	f001 fe2d 	bl	b5e3e <_ZN5Print7printlnEPKc>
    Serial.print("Event Accumulation: ");
   b41e4:	f002 f94e 	bl	b6484 <_Z16_fetch_usbserialv>
   b41e8:	4923      	ldr	r1, [pc, #140]	; (b4278 <_Z14readRainSensorv+0x124>)
   b41ea:	f001 fe15 	bl	b5e18 <_ZN5Print5printEPKc>
    Serial.print(atof (eventAcc),3);  
   b41ee:	f002 f949 	bl	b6484 <_Z16_fetch_usbserialv>
   b41f2:	4605      	mov	r5, r0
   b41f4:	4638      	mov	r0, r7
   b41f6:	f002 ff61 	bl	b70bc <atof>
   b41fa:	2103      	movs	r1, #3
   b41fc:	4628      	mov	r0, r5
   b41fe:	f001 ff0f 	bl	b6020 <_ZN5Print5printEdi>
    Serial.println(unit);
   b4202:	f002 f93f 	bl	b6484 <_Z16_fetch_usbserialv>
   b4206:	a905      	add	r1, sp, #20
   b4208:	f001 fe19 	bl	b5e3e <_ZN5Print7printlnEPKc>
    Serial.print("Total Accumulation: ");
   b420c:	f002 f93a 	bl	b6484 <_Z16_fetch_usbserialv>
   b4210:	491a      	ldr	r1, [pc, #104]	; (b427c <_Z14readRainSensorv+0x128>)
   b4212:	f001 fe01 	bl	b5e18 <_ZN5Print5printEPKc>
    Serial.print(atof (totalAcc),3);  
   b4216:	f002 f935 	bl	b6484 <_Z16_fetch_usbserialv>
   b421a:	4605      	mov	r5, r0
   b421c:	4630      	mov	r0, r6
   b421e:	f002 ff4d 	bl	b70bc <atof>
   b4222:	2103      	movs	r1, #3
   b4224:	4628      	mov	r0, r5
   b4226:	f001 fefb 	bl	b6020 <_ZN5Print5printEdi>
    Serial.println(unit);
   b422a:	f002 f92b 	bl	b6484 <_Z16_fetch_usbserialv>
   b422e:	a905      	add	r1, sp, #20
   b4230:	f001 fe05 	bl	b5e3e <_ZN5Print7printlnEPKc>
    Serial.print("IPH: ");
   b4234:	f002 f926 	bl	b6484 <_Z16_fetch_usbserialv>
   b4238:	4911      	ldr	r1, [pc, #68]	; (b4280 <_Z14readRainSensorv+0x12c>)
   b423a:	f001 fded 	bl	b5e18 <_ZN5Print5printEPKc>
    Serial.print(atof (rInt), 3);
   b423e:	f002 f921 	bl	b6484 <_Z16_fetch_usbserialv>
   b4242:	4605      	mov	r5, r0
   b4244:	4620      	mov	r0, r4
   b4246:	f002 ff39 	bl	b70bc <atof>
   b424a:	2103      	movs	r1, #3
   b424c:	4628      	mov	r0, r5
   b424e:	f001 fee7 	bl	b6020 <_ZN5Print5printEdi>
    Serial.println(" IPH\n");
   b4252:	f002 f917 	bl	b6484 <_Z16_fetch_usbserialv>
   b4256:	490b      	ldr	r1, [pc, #44]	; (b4284 <_Z14readRainSensorv+0x130>)
   b4258:	f001 fdf1 	bl	b5e3e <_ZN5Print7printlnEPKc>
  String response;
   b425c:	a80c      	add	r0, sp, #48	; 0x30
   b425e:	f001 ff47 	bl	b60f0 <_ZN6StringD1Ev>
    // Particle.publish("Event Accumulation", String(atof(eventAcc), 3), PRIVATE);
    // Particle.publish("Total Accumulation", String(atof(totalAcc), 3), PRIVATE);
    // Particle.publish("IPH", String(atof(rInt), 3), PRIVATE);
    // Particle.publish("IPH",String(atof (rInt), 3),PRIVATE);
  }
}
   b4262:	b015      	add	sp, #84	; 0x54
   b4264:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b4266:	bf00      	nop
   b4268:	000b9306 	.word	0x000b9306
   b426c:	000b91b5 	.word	0x000b91b5
   b4270:	000b91b9 	.word	0x000b91b9
   b4274:	000b9204 	.word	0x000b9204
   b4278:	000b91e9 	.word	0x000b91e9
   b427c:	000b91fe 	.word	0x000b91fe
   b4280:	000b9213 	.word	0x000b9213
   b4284:	000b9219 	.word	0x000b9219

000b4288 <loop>:
void loop(){
   b4288:	b508      	push	{r3, lr}
     readRainSensor();
   b428a:	f7ff ff63 	bl	b4154 <_Z14readRainSensorv>
}
   b428e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
     delay(3000);
   b4292:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b4296:	f000 baa9 	b.w	b47ec <delay>

000b429a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   b429a:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b429c:	e9d0 5300 	ldrd	r5, r3, [r0]
   b42a0:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b42a2:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b42a4:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b42a8:	42ae      	cmp	r6, r5
   b42aa:	d004      	beq.n	b42b6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   b42ac:	4628      	mov	r0, r5
   b42ae:	f001 ff1f 	bl	b60f0 <_ZN6StringD1Ev>
   b42b2:	3514      	adds	r5, #20
   b42b4:	e7f8      	b.n	b42a8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b42b6:	6820      	ldr	r0, [r4, #0]
   b42b8:	f000 fa58 	bl	b476c <free>
    AllocatorT::free(data_);
}
   b42bc:	4620      	mov	r0, r4
   b42be:	bd70      	pop	{r4, r5, r6, pc}

000b42c0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b42c0:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b42c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b42c4:	4604      	mov	r4, r0
   b42c6:	460d      	mov	r5, r1
   b42c8:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b42ca:	d916      	bls.n	b42fa <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   b42cc:	4290      	cmp	r0, r2
   b42ce:	d215      	bcs.n	b42fc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
   b42d0:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b42d4:	1a75      	subs	r5, r6, r1
   b42d6:	f1a1 0714 	sub.w	r7, r1, #20
   b42da:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b42dc:	42b7      	cmp	r7, r6
   b42de:	d01c      	beq.n	b431a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   b42e0:	b12c      	cbz	r4, b42ee <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   b42e2:	4631      	mov	r1, r6
   b42e4:	4620      	mov	r0, r4
   b42e6:	f001 ff7f 	bl	b61e8 <_ZN6StringC1EOS_>
   b42ea:	7c33      	ldrb	r3, [r6, #16]
   b42ec:	7423      	strb	r3, [r4, #16]
   b42ee:	4630      	mov	r0, r6
   b42f0:	f001 fefe 	bl	b60f0 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b42f4:	3e14      	subs	r6, #20
   b42f6:	3c14      	subs	r4, #20
   b42f8:	e7f0      	b.n	b42dc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b42fa:	d00e      	beq.n	b431a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   b42fc:	42b5      	cmp	r5, r6
   b42fe:	d00c      	beq.n	b431a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   b4300:	b12c      	cbz	r4, b430e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   b4302:	4629      	mov	r1, r5
   b4304:	4620      	mov	r0, r4
   b4306:	f001 ff6f 	bl	b61e8 <_ZN6StringC1EOS_>
   b430a:	7c2b      	ldrb	r3, [r5, #16]
   b430c:	7423      	strb	r3, [r4, #16]
   b430e:	4628      	mov	r0, r5
   b4310:	f001 feee 	bl	b60f0 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b4314:	3514      	adds	r5, #20
   b4316:	3414      	adds	r4, #20
   b4318:	e7f0      	b.n	b42fc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
   b431a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b431c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b431c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   b4320:	2300      	movs	r3, #0
   b4322:	e9c0 3300 	strd	r3, r3, [r0]
   b4326:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b4328:	684f      	ldr	r7, [r1, #4]
   b432a:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b432c:	4604      	mov	r4, r0
   b432e:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b4330:	dd23      	ble.n	b437a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   b4332:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
   b4336:	fb08 f007 	mul.w	r0, r8, r7
   b433a:	f000 fa0f 	bl	b475c <malloc>
            if (!d) {
   b433e:	4605      	mov	r5, r0
   b4340:	b1d8      	cbz	r0, b437a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            move(d, data_, data_ + size_);
   b4342:	e9d4 1200 	ldrd	r1, r2, [r4]
   b4346:	fb08 1202 	mla	r2, r8, r2, r1
   b434a:	f7ff ffb9 	bl	b42c0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b434e:	6820      	ldr	r0, [r4, #0]
   b4350:	f000 fa0c 	bl	b476c <free>
        data_ = d;
   b4354:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b4356:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b4358:	e9d6 7300 	ldrd	r7, r3, [r6]
   b435c:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
   b4360:	45b8      	cmp	r8, r7
   b4362:	d008      	beq.n	b4376 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5a>
   b4364:	4639      	mov	r1, r7
   b4366:	4628      	mov	r0, r5
   b4368:	f001 ff58 	bl	b621c <_ZN6StringC1ERKS_>
   b436c:	7c3b      	ldrb	r3, [r7, #16]
   b436e:	742b      	strb	r3, [r5, #16]
   b4370:	3714      	adds	r7, #20
   b4372:	3514      	adds	r5, #20
   b4374:	e7f4      	b.n	b4360 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
   b4376:	6873      	ldr	r3, [r6, #4]
   b4378:	6063      	str	r3, [r4, #4]
}
   b437a:	4620      	mov	r0, r4
   b437c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b4380 <_GLOBAL__sub_I_SystemMode>:
}
   b4380:	b570      	push	{r4, r5, r6, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b4382:	4b26      	ldr	r3, [pc, #152]	; (b441c <_GLOBAL__sub_I_SystemMode+0x9c>)
    SleepResult() {}
   b4384:	4a26      	ldr	r2, [pc, #152]	; (b4420 <_GLOBAL__sub_I_SystemMode+0xa0>)
   b4386:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b4388:	2400      	movs	r4, #0
   b438a:	b08c      	sub	sp, #48	; 0x30
   b438c:	e9c3 4400 	strd	r4, r4, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b4390:	2002      	movs	r0, #2
   b4392:	f000 f94f 	bl	b4634 <set_system_mode>
SYSTEM_THREAD(ENABLED);                                                                     // Means my code will not be held up by Particle processes.
   b4396:	4621      	mov	r1, r4
   b4398:	2001      	movs	r0, #1
   b439a:	f000 f95b 	bl	b4654 <system_thread_set_state>
        }
        return HAL_Feature_Get(feature);
    }

    inline int enableFeature(HAL_Feature feature) {
        return HAL_Feature_Set(feature, true);
   b439e:	2101      	movs	r1, #1
   b43a0:	2004      	movs	r0, #4
   b43a2:	f000 f867 	bl	b4474 <HAL_Feature_Set>
        capacity_(0) {
   b43a6:	e9cd 4400 	strd	r4, r4, [sp]
   b43aa:	9402      	str	r4, [sp, #8]
            StreamLogHandler(Serial, level, filters) {
   b43ac:	f002 f86a 	bl	b6484 <_Z16_fetch_usbserialv>
        filter_(level, filters) {
   b43b0:	4c1c      	ldr	r4, [pc, #112]	; (b4424 <_GLOBAL__sub_I_SystemMode+0xa4>)
   b43b2:	4605      	mov	r5, r0
   b43b4:	4669      	mov	r1, sp
   b43b6:	a803      	add	r0, sp, #12
   b43b8:	f7ff ffb0 	bl	b431c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b43bc:	4626      	mov	r6, r4
        stream_(&stream) {
   b43be:	a903      	add	r1, sp, #12
   b43c0:	a806      	add	r0, sp, #24
   b43c2:	f7ff ffab 	bl	b431c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b43c6:	4b18      	ldr	r3, [pc, #96]	; (b4428 <_GLOBAL__sub_I_SystemMode+0xa8>)
   b43c8:	f846 3b04 	str.w	r3, [r6], #4
   b43cc:	a906      	add	r1, sp, #24
   b43ce:	a809      	add	r0, sp, #36	; 0x24
   b43d0:	f7ff ffa4 	bl	b431c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b43d4:	aa09      	add	r2, sp, #36	; 0x24
   b43d6:	211e      	movs	r1, #30
   b43d8:	4630      	mov	r0, r6
   b43da:	f001 f949 	bl	b5670 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b43de:	a809      	add	r0, sp, #36	; 0x24
   b43e0:	f7ff ff5b 	bl	b429a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b43e4:	a806      	add	r0, sp, #24
   b43e6:	f7ff ff58 	bl	b429a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b43ea:	4b10      	ldr	r3, [pc, #64]	; (b442c <_GLOBAL__sub_I_SystemMode+0xac>)
   b43ec:	6023      	str	r3, [r4, #0]
   b43ee:	6225      	str	r5, [r4, #32]
   b43f0:	a803      	add	r0, sp, #12
   b43f2:	f7ff ff52 	bl	b429a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b43f6:	4b0e      	ldr	r3, [pc, #56]	; (b4430 <_GLOBAL__sub_I_SystemMode+0xb0>)
   b43f8:	6023      	str	r3, [r4, #0]
        Serial.begin();
   b43fa:	f002 f843 	bl	b6484 <_Z16_fetch_usbserialv>
   b43fe:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b4402:	f002 f82f 	bl	b6464 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   b4406:	f000 fe15 	bl	b5034 <_ZN5spark10LogManager8instanceEv>
   b440a:	4621      	mov	r1, r4
   b440c:	f001 f806 	bl	b541c <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler;
   b4410:	4668      	mov	r0, sp
   b4412:	f7ff ff42 	bl	b429a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
   b4416:	b00c      	add	sp, #48	; 0x30
   b4418:	bd70      	pop	{r4, r5, r6, pc}
   b441a:	bf00      	nop
   b441c:	2003e678 	.word	0x2003e678
   b4420:	ffff0000 	.word	0xffff0000
   b4424:	2003e684 	.word	0x2003e684
   b4428:	000b9228 	.word	0x000b9228
   b442c:	000b9340 	.word	0x000b9340
   b4430:	000b9240 	.word	0x000b9240

000b4434 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b4434:	b508      	push	{r3, lr}
   b4436:	4b02      	ldr	r3, [pc, #8]	; (b4440 <os_mutex_recursive_create+0xc>)
   b4438:	681b      	ldr	r3, [r3, #0]
   b443a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b443c:	9301      	str	r3, [sp, #4]
   b443e:	bd08      	pop	{r3, pc}
   b4440:	00030248 	.word	0x00030248

000b4444 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   b4444:	b508      	push	{r3, lr}
   b4446:	4b02      	ldr	r3, [pc, #8]	; (b4450 <os_mutex_recursive_destroy+0xc>)
   b4448:	681b      	ldr	r3, [r3, #0]
   b444a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b444c:	9301      	str	r3, [sp, #4]
   b444e:	bd08      	pop	{r3, pc}
   b4450:	00030248 	.word	0x00030248

000b4454 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b4454:	b508      	push	{r3, lr}
   b4456:	4b02      	ldr	r3, [pc, #8]	; (b4460 <os_mutex_recursive_lock+0xc>)
   b4458:	681b      	ldr	r3, [r3, #0]
   b445a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b445c:	9301      	str	r3, [sp, #4]
   b445e:	bd08      	pop	{r3, pc}
   b4460:	00030248 	.word	0x00030248

000b4464 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b4464:	b508      	push	{r3, lr}
   b4466:	4b02      	ldr	r3, [pc, #8]	; (b4470 <os_mutex_recursive_unlock+0xc>)
   b4468:	681b      	ldr	r3, [r3, #0]
   b446a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b446c:	9301      	str	r3, [sp, #4]
   b446e:	bd08      	pop	{r3, pc}
   b4470:	00030248 	.word	0x00030248

000b4474 <HAL_Feature_Set>:
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
   b4474:	b508      	push	{r3, lr}
   b4476:	4b02      	ldr	r3, [pc, #8]	; (b4480 <HAL_Feature_Set+0xc>)
   b4478:	681b      	ldr	r3, [r3, #0]
   b447a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   b447c:	9301      	str	r3, [sp, #4]
   b447e:	bd08      	pop	{r3, pc}
   b4480:	00030234 	.word	0x00030234

000b4484 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b4484:	b508      	push	{r3, lr}
   b4486:	4b02      	ldr	r3, [pc, #8]	; (b4490 <HAL_RNG_GetRandomNumber+0xc>)
   b4488:	681b      	ldr	r3, [r3, #0]
   b448a:	685b      	ldr	r3, [r3, #4]
   b448c:	9301      	str	r3, [sp, #4]
   b448e:	bd08      	pop	{r3, pc}
   b4490:	00030218 	.word	0x00030218

000b4494 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b4494:	b508      	push	{r3, lr}
   b4496:	4b02      	ldr	r3, [pc, #8]	; (b44a0 <HAL_Delay_Microseconds+0xc>)
   b4498:	681b      	ldr	r3, [r3, #0]
   b449a:	68db      	ldr	r3, [r3, #12]
   b449c:	9301      	str	r3, [sp, #4]
   b449e:	bd08      	pop	{r3, pc}
   b44a0:	00030218 	.word	0x00030218

000b44a4 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b44a4:	b508      	push	{r3, lr}
   b44a6:	4b02      	ldr	r3, [pc, #8]	; (b44b0 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b44a8:	681b      	ldr	r3, [r3, #0]
   b44aa:	695b      	ldr	r3, [r3, #20]
   b44ac:	9301      	str	r3, [sp, #4]
   b44ae:	bd08      	pop	{r3, pc}
   b44b0:	00030218 	.word	0x00030218

000b44b4 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b44b4:	b508      	push	{r3, lr}
   b44b6:	4b02      	ldr	r3, [pc, #8]	; (b44c0 <inet_inet_ntop+0xc>)
   b44b8:	681b      	ldr	r3, [r3, #0]
   b44ba:	695b      	ldr	r3, [r3, #20]
   b44bc:	9301      	str	r3, [sp, #4]
   b44be:	bd08      	pop	{r3, pc}
   b44c0:	00030264 	.word	0x00030264

000b44c4 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b44c4:	b508      	push	{r3, lr}
   b44c6:	4b02      	ldr	r3, [pc, #8]	; (b44d0 <netdb_freeaddrinfo+0xc>)
   b44c8:	681b      	ldr	r3, [r3, #0]
   b44ca:	689b      	ldr	r3, [r3, #8]
   b44cc:	9301      	str	r3, [sp, #4]
   b44ce:	bd08      	pop	{r3, pc}
   b44d0:	00030268 	.word	0x00030268

000b44d4 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b44d4:	b508      	push	{r3, lr}
   b44d6:	4b02      	ldr	r3, [pc, #8]	; (b44e0 <netdb_getaddrinfo+0xc>)
   b44d8:	681b      	ldr	r3, [r3, #0]
   b44da:	68db      	ldr	r3, [r3, #12]
   b44dc:	9301      	str	r3, [sp, #4]
   b44de:	bd08      	pop	{r3, pc}
   b44e0:	00030268 	.word	0x00030268

000b44e4 <hal_usart_end>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   b44e4:	b508      	push	{r3, lr}
   b44e6:	4b02      	ldr	r3, [pc, #8]	; (b44f0 <hal_usart_end+0xc>)
   b44e8:	681b      	ldr	r3, [r3, #0]
   b44ea:	689b      	ldr	r3, [r3, #8]
   b44ec:	9301      	str	r3, [sp, #4]
   b44ee:	bd08      	pop	{r3, pc}
   b44f0:	0003023c 	.word	0x0003023c

000b44f4 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b44f4:	b508      	push	{r3, lr}
   b44f6:	4b02      	ldr	r3, [pc, #8]	; (b4500 <hal_usart_write+0xc>)
   b44f8:	681b      	ldr	r3, [r3, #0]
   b44fa:	68db      	ldr	r3, [r3, #12]
   b44fc:	9301      	str	r3, [sp, #4]
   b44fe:	bd08      	pop	{r3, pc}
   b4500:	0003023c 	.word	0x0003023c

000b4504 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b4504:	b508      	push	{r3, lr}
   b4506:	4b02      	ldr	r3, [pc, #8]	; (b4510 <hal_usart_available+0xc>)
   b4508:	681b      	ldr	r3, [r3, #0]
   b450a:	691b      	ldr	r3, [r3, #16]
   b450c:	9301      	str	r3, [sp, #4]
   b450e:	bd08      	pop	{r3, pc}
   b4510:	0003023c 	.word	0x0003023c

000b4514 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b4514:	b508      	push	{r3, lr}
   b4516:	4b02      	ldr	r3, [pc, #8]	; (b4520 <hal_usart_read+0xc>)
   b4518:	681b      	ldr	r3, [r3, #0]
   b451a:	695b      	ldr	r3, [r3, #20]
   b451c:	9301      	str	r3, [sp, #4]
   b451e:	bd08      	pop	{r3, pc}
   b4520:	0003023c 	.word	0x0003023c

000b4524 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b4524:	b508      	push	{r3, lr}
   b4526:	4b02      	ldr	r3, [pc, #8]	; (b4530 <hal_usart_peek+0xc>)
   b4528:	681b      	ldr	r3, [r3, #0]
   b452a:	699b      	ldr	r3, [r3, #24]
   b452c:	9301      	str	r3, [sp, #4]
   b452e:	bd08      	pop	{r3, pc}
   b4530:	0003023c 	.word	0x0003023c

000b4534 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b4534:	b508      	push	{r3, lr}
   b4536:	4b02      	ldr	r3, [pc, #8]	; (b4540 <hal_usart_flush+0xc>)
   b4538:	681b      	ldr	r3, [r3, #0]
   b453a:	69db      	ldr	r3, [r3, #28]
   b453c:	9301      	str	r3, [sp, #4]
   b453e:	bd08      	pop	{r3, pc}
   b4540:	0003023c 	.word	0x0003023c

000b4544 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b4544:	b508      	push	{r3, lr}
   b4546:	4b02      	ldr	r3, [pc, #8]	; (b4550 <hal_usart_available_data_for_write+0xc>)
   b4548:	681b      	ldr	r3, [r3, #0]
   b454a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b454c:	9301      	str	r3, [sp, #4]
   b454e:	bd08      	pop	{r3, pc}
   b4550:	0003023c 	.word	0x0003023c

000b4554 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   b4554:	b508      	push	{r3, lr}
   b4556:	4b02      	ldr	r3, [pc, #8]	; (b4560 <hal_usart_begin_config+0xc>)
   b4558:	681b      	ldr	r3, [r3, #0]
   b455a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b455c:	9301      	str	r3, [sp, #4]
   b455e:	bd08      	pop	{r3, pc}
   b4560:	0003023c 	.word	0x0003023c

000b4564 <hal_usart_write_nine_bits>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
   b4564:	b508      	push	{r3, lr}
   b4566:	4b02      	ldr	r3, [pc, #8]	; (b4570 <hal_usart_write_nine_bits+0xc>)
   b4568:	681b      	ldr	r3, [r3, #0]
   b456a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b456c:	9301      	str	r3, [sp, #4]
   b456e:	bd08      	pop	{r3, pc}
   b4570:	0003023c 	.word	0x0003023c

000b4574 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b4574:	b508      	push	{r3, lr}
   b4576:	4b02      	ldr	r3, [pc, #8]	; (b4580 <hal_usart_init_ex+0xc>)
   b4578:	681b      	ldr	r3, [r3, #0]
   b457a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b457c:	9301      	str	r3, [sp, #4]
   b457e:	bd08      	pop	{r3, pc}
   b4580:	0003023c 	.word	0x0003023c

000b4584 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b4584:	b508      	push	{r3, lr}
   b4586:	4b02      	ldr	r3, [pc, #8]	; (b4590 <HAL_USB_USART_Init+0xc>)
   b4588:	681b      	ldr	r3, [r3, #0]
   b458a:	681b      	ldr	r3, [r3, #0]
   b458c:	9301      	str	r3, [sp, #4]
   b458e:	bd08      	pop	{r3, pc}
   b4590:	0003024c 	.word	0x0003024c

000b4594 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b4594:	b508      	push	{r3, lr}
   b4596:	4b02      	ldr	r3, [pc, #8]	; (b45a0 <HAL_USB_USART_Begin+0xc>)
   b4598:	681b      	ldr	r3, [r3, #0]
   b459a:	685b      	ldr	r3, [r3, #4]
   b459c:	9301      	str	r3, [sp, #4]
   b459e:	bd08      	pop	{r3, pc}
   b45a0:	0003024c 	.word	0x0003024c

000b45a4 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   b45a4:	b508      	push	{r3, lr}
   b45a6:	4b02      	ldr	r3, [pc, #8]	; (b45b0 <HAL_USB_USART_End+0xc>)
   b45a8:	681b      	ldr	r3, [r3, #0]
   b45aa:	689b      	ldr	r3, [r3, #8]
   b45ac:	9301      	str	r3, [sp, #4]
   b45ae:	bd08      	pop	{r3, pc}
   b45b0:	0003024c 	.word	0x0003024c

000b45b4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b45b4:	b508      	push	{r3, lr}
   b45b6:	4b02      	ldr	r3, [pc, #8]	; (b45c0 <HAL_USB_USART_Available_Data+0xc>)
   b45b8:	681b      	ldr	r3, [r3, #0]
   b45ba:	691b      	ldr	r3, [r3, #16]
   b45bc:	9301      	str	r3, [sp, #4]
   b45be:	bd08      	pop	{r3, pc}
   b45c0:	0003024c 	.word	0x0003024c

000b45c4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b45c4:	b508      	push	{r3, lr}
   b45c6:	4b02      	ldr	r3, [pc, #8]	; (b45d0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b45c8:	681b      	ldr	r3, [r3, #0]
   b45ca:	695b      	ldr	r3, [r3, #20]
   b45cc:	9301      	str	r3, [sp, #4]
   b45ce:	bd08      	pop	{r3, pc}
   b45d0:	0003024c 	.word	0x0003024c

000b45d4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b45d4:	b508      	push	{r3, lr}
   b45d6:	4b02      	ldr	r3, [pc, #8]	; (b45e0 <HAL_USB_USART_Receive_Data+0xc>)
   b45d8:	681b      	ldr	r3, [r3, #0]
   b45da:	699b      	ldr	r3, [r3, #24]
   b45dc:	9301      	str	r3, [sp, #4]
   b45de:	bd08      	pop	{r3, pc}
   b45e0:	0003024c 	.word	0x0003024c

000b45e4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b45e4:	b508      	push	{r3, lr}
   b45e6:	4b02      	ldr	r3, [pc, #8]	; (b45f0 <HAL_USB_USART_Send_Data+0xc>)
   b45e8:	681b      	ldr	r3, [r3, #0]
   b45ea:	69db      	ldr	r3, [r3, #28]
   b45ec:	9301      	str	r3, [sp, #4]
   b45ee:	bd08      	pop	{r3, pc}
   b45f0:	0003024c 	.word	0x0003024c

000b45f4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b45f4:	b508      	push	{r3, lr}
   b45f6:	4b02      	ldr	r3, [pc, #8]	; (b4600 <HAL_USB_USART_Flush_Data+0xc>)
   b45f8:	681b      	ldr	r3, [r3, #0]
   b45fa:	6a1b      	ldr	r3, [r3, #32]
   b45fc:	9301      	str	r3, [sp, #4]
   b45fe:	bd08      	pop	{r3, pc}
   b4600:	0003024c 	.word	0x0003024c

000b4604 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b4604:	b508      	push	{r3, lr}
   b4606:	4b02      	ldr	r3, [pc, #8]	; (b4610 <panic_+0xc>)
   b4608:	681b      	ldr	r3, [r3, #0]
   b460a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b460c:	9301      	str	r3, [sp, #4]
   b460e:	bd08      	pop	{r3, pc}
   b4610:	00030260 	.word	0x00030260

000b4614 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   b4614:	b508      	push	{r3, lr}
   b4616:	4b02      	ldr	r3, [pc, #8]	; (b4620 <log_level_name+0xc>)
   b4618:	681b      	ldr	r3, [r3, #0]
   b461a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   b461c:	9301      	str	r3, [sp, #4]
   b461e:	bd08      	pop	{r3, pc}
   b4620:	00030260 	.word	0x00030260

000b4624 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   b4624:	b508      	push	{r3, lr}
   b4626:	4b02      	ldr	r3, [pc, #8]	; (b4630 <log_set_callbacks+0xc>)
   b4628:	681b      	ldr	r3, [r3, #0]
   b462a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   b462c:	9301      	str	r3, [sp, #4]
   b462e:	bd08      	pop	{r3, pc}
   b4630:	00030260 	.word	0x00030260

000b4634 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b4634:	b508      	push	{r3, lr}
   b4636:	4b02      	ldr	r3, [pc, #8]	; (b4640 <set_system_mode+0xc>)
   b4638:	681b      	ldr	r3, [r3, #0]
   b463a:	685b      	ldr	r3, [r3, #4]
   b463c:	9301      	str	r3, [sp, #4]
   b463e:	bd08      	pop	{r3, pc}
   b4640:	00030220 	.word	0x00030220

000b4644 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b4644:	b508      	push	{r3, lr}
   b4646:	4b02      	ldr	r3, [pc, #8]	; (b4650 <system_delay_ms+0xc>)
   b4648:	681b      	ldr	r3, [r3, #0]
   b464a:	695b      	ldr	r3, [r3, #20]
   b464c:	9301      	str	r3, [sp, #4]
   b464e:	bd08      	pop	{r3, pc}
   b4650:	00030220 	.word	0x00030220

000b4654 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b4654:	b508      	push	{r3, lr}
   b4656:	4b02      	ldr	r3, [pc, #8]	; (b4660 <system_thread_set_state+0xc>)
   b4658:	681b      	ldr	r3, [r3, #0]
   b465a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b465c:	9301      	str	r3, [sp, #4]
   b465e:	bd08      	pop	{r3, pc}
   b4660:	00030220 	.word	0x00030220

000b4664 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b4664:	b508      	push	{r3, lr}
   b4666:	4b03      	ldr	r3, [pc, #12]	; (b4674 <system_ctrl_set_app_request_handler+0x10>)
   b4668:	681b      	ldr	r3, [r3, #0]
   b466a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b466e:	9301      	str	r3, [sp, #4]
   b4670:	bd08      	pop	{r3, pc}
   b4672:	0000      	.short	0x0000
   b4674:	00030220 	.word	0x00030220

000b4678 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b4678:	b508      	push	{r3, lr}
   b467a:	4b03      	ldr	r3, [pc, #12]	; (b4688 <system_ctrl_set_result+0x10>)
   b467c:	681b      	ldr	r3, [r3, #0]
   b467e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b4682:	9301      	str	r3, [sp, #4]
   b4684:	bd08      	pop	{r3, pc}
   b4686:	0000      	.short	0x0000
   b4688:	00030220 	.word	0x00030220

000b468c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b468c:	b508      	push	{r3, lr}
   b468e:	4b02      	ldr	r3, [pc, #8]	; (b4698 <spark_set_random_seed_from_cloud_handler+0xc>)
   b4690:	681b      	ldr	r3, [r3, #0]
   b4692:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b4694:	9301      	str	r3, [sp, #4]
   b4696:	bd08      	pop	{r3, pc}
   b4698:	00030244 	.word	0x00030244

000b469c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b469c:	b508      	push	{r3, lr}
   b469e:	4b02      	ldr	r3, [pc, #8]	; (b46a8 <network_connect+0xc>)
   b46a0:	681b      	ldr	r3, [r3, #0]
   b46a2:	685b      	ldr	r3, [r3, #4]
   b46a4:	9301      	str	r3, [sp, #4]
   b46a6:	bd08      	pop	{r3, pc}
   b46a8:	00030240 	.word	0x00030240

000b46ac <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b46ac:	b508      	push	{r3, lr}
   b46ae:	4b02      	ldr	r3, [pc, #8]	; (b46b8 <network_connecting+0xc>)
   b46b0:	681b      	ldr	r3, [r3, #0]
   b46b2:	689b      	ldr	r3, [r3, #8]
   b46b4:	9301      	str	r3, [sp, #4]
   b46b6:	bd08      	pop	{r3, pc}
   b46b8:	00030240 	.word	0x00030240

000b46bc <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b46bc:	b508      	push	{r3, lr}
   b46be:	4b02      	ldr	r3, [pc, #8]	; (b46c8 <network_disconnect+0xc>)
   b46c0:	681b      	ldr	r3, [r3, #0]
   b46c2:	68db      	ldr	r3, [r3, #12]
   b46c4:	9301      	str	r3, [sp, #4]
   b46c6:	bd08      	pop	{r3, pc}
   b46c8:	00030240 	.word	0x00030240

000b46cc <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b46cc:	b508      	push	{r3, lr}
   b46ce:	4b02      	ldr	r3, [pc, #8]	; (b46d8 <network_ready+0xc>)
   b46d0:	681b      	ldr	r3, [r3, #0]
   b46d2:	691b      	ldr	r3, [r3, #16]
   b46d4:	9301      	str	r3, [sp, #4]
   b46d6:	bd08      	pop	{r3, pc}
   b46d8:	00030240 	.word	0x00030240

000b46dc <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b46dc:	b508      	push	{r3, lr}
   b46de:	4b02      	ldr	r3, [pc, #8]	; (b46e8 <network_on+0xc>)
   b46e0:	681b      	ldr	r3, [r3, #0]
   b46e2:	695b      	ldr	r3, [r3, #20]
   b46e4:	9301      	str	r3, [sp, #4]
   b46e6:	bd08      	pop	{r3, pc}
   b46e8:	00030240 	.word	0x00030240

000b46ec <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b46ec:	b508      	push	{r3, lr}
   b46ee:	4b02      	ldr	r3, [pc, #8]	; (b46f8 <network_off+0xc>)
   b46f0:	681b      	ldr	r3, [r3, #0]
   b46f2:	699b      	ldr	r3, [r3, #24]
   b46f4:	9301      	str	r3, [sp, #4]
   b46f6:	bd08      	pop	{r3, pc}
   b46f8:	00030240 	.word	0x00030240

000b46fc <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b46fc:	b508      	push	{r3, lr}
   b46fe:	4b02      	ldr	r3, [pc, #8]	; (b4708 <network_listen+0xc>)
   b4700:	681b      	ldr	r3, [r3, #0]
   b4702:	69db      	ldr	r3, [r3, #28]
   b4704:	9301      	str	r3, [sp, #4]
   b4706:	bd08      	pop	{r3, pc}
   b4708:	00030240 	.word	0x00030240

000b470c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b470c:	b508      	push	{r3, lr}
   b470e:	4b02      	ldr	r3, [pc, #8]	; (b4718 <network_listening+0xc>)
   b4710:	681b      	ldr	r3, [r3, #0]
   b4712:	6a1b      	ldr	r3, [r3, #32]
   b4714:	9301      	str	r3, [sp, #4]
   b4716:	bd08      	pop	{r3, pc}
   b4718:	00030240 	.word	0x00030240

000b471c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b471c:	b508      	push	{r3, lr}
   b471e:	4b02      	ldr	r3, [pc, #8]	; (b4728 <network_set_listen_timeout+0xc>)
   b4720:	681b      	ldr	r3, [r3, #0]
   b4722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4724:	9301      	str	r3, [sp, #4]
   b4726:	bd08      	pop	{r3, pc}
   b4728:	00030240 	.word	0x00030240

000b472c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b472c:	b508      	push	{r3, lr}
   b472e:	4b02      	ldr	r3, [pc, #8]	; (b4738 <network_get_listen_timeout+0xc>)
   b4730:	681b      	ldr	r3, [r3, #0]
   b4732:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4734:	9301      	str	r3, [sp, #4]
   b4736:	bd08      	pop	{r3, pc}
   b4738:	00030240 	.word	0x00030240

000b473c <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b473c:	b508      	push	{r3, lr}
   b473e:	4b02      	ldr	r3, [pc, #8]	; (b4748 <network_is_on+0xc>)
   b4740:	681b      	ldr	r3, [r3, #0]
   b4742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4744:	9301      	str	r3, [sp, #4]
   b4746:	bd08      	pop	{r3, pc}
   b4748:	00030240 	.word	0x00030240

000b474c <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b474c:	b508      	push	{r3, lr}
   b474e:	4b02      	ldr	r3, [pc, #8]	; (b4758 <network_is_off+0xc>)
   b4750:	681b      	ldr	r3, [r3, #0]
   b4752:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4754:	9301      	str	r3, [sp, #4]
   b4756:	bd08      	pop	{r3, pc}
   b4758:	00030240 	.word	0x00030240

000b475c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b475c:	b508      	push	{r3, lr}
   b475e:	4b02      	ldr	r3, [pc, #8]	; (b4768 <malloc+0xc>)
   b4760:	681b      	ldr	r3, [r3, #0]
   b4762:	681b      	ldr	r3, [r3, #0]
   b4764:	9301      	str	r3, [sp, #4]
   b4766:	bd08      	pop	{r3, pc}
   b4768:	0003021c 	.word	0x0003021c

000b476c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b476c:	b508      	push	{r3, lr}
   b476e:	4b02      	ldr	r3, [pc, #8]	; (b4778 <free+0xc>)
   b4770:	681b      	ldr	r3, [r3, #0]
   b4772:	685b      	ldr	r3, [r3, #4]
   b4774:	9301      	str	r3, [sp, #4]
   b4776:	bd08      	pop	{r3, pc}
   b4778:	0003021c 	.word	0x0003021c

000b477c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b477c:	b508      	push	{r3, lr}
   b477e:	4b02      	ldr	r3, [pc, #8]	; (b4788 <realloc+0xc>)
   b4780:	681b      	ldr	r3, [r3, #0]
   b4782:	689b      	ldr	r3, [r3, #8]
   b4784:	9301      	str	r3, [sp, #4]
   b4786:	bd08      	pop	{r3, pc}
   b4788:	0003021c 	.word	0x0003021c

000b478c <sscanf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
   b478c:	b508      	push	{r3, lr}
   b478e:	4b02      	ldr	r3, [pc, #8]	; (b4798 <sscanf+0xc>)
   b4790:	681b      	ldr	r3, [r3, #0]
   b4792:	695b      	ldr	r3, [r3, #20]
   b4794:	9301      	str	r3, [sp, #4]
   b4796:	bd08      	pop	{r3, pc}
   b4798:	0003021c 	.word	0x0003021c

000b479c <vsnprintf>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b479c:	b508      	push	{r3, lr}
   b479e:	4b02      	ldr	r3, [pc, #8]	; (b47a8 <vsnprintf+0xc>)
   b47a0:	681b      	ldr	r3, [r3, #0]
   b47a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b47a4:	9301      	str	r3, [sp, #4]
   b47a6:	bd08      	pop	{r3, pc}
   b47a8:	0003021c 	.word	0x0003021c

000b47ac <_malloc_r>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b47ac:	b508      	push	{r3, lr}
   b47ae:	4b02      	ldr	r3, [pc, #8]	; (b47b8 <_malloc_r+0xc>)
   b47b0:	681b      	ldr	r3, [r3, #0]
   b47b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b47b4:	9301      	str	r3, [sp, #4]
   b47b6:	bd08      	pop	{r3, pc}
   b47b8:	0003021c 	.word	0x0003021c

000b47bc <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b47bc:	b508      	push	{r3, lr}
   b47be:	4b02      	ldr	r3, [pc, #8]	; (b47c8 <__errno+0xc>)
   b47c0:	681b      	ldr	r3, [r3, #0]
   b47c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b47c4:	9301      	str	r3, [sp, #4]
   b47c6:	bd08      	pop	{r3, pc}
   b47c8:	0003021c 	.word	0x0003021c

000b47cc <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b47cc:	b508      	push	{r3, lr}
   b47ce:	4b02      	ldr	r3, [pc, #8]	; (b47d8 <__assert_func+0xc>)
   b47d0:	681b      	ldr	r3, [r3, #0]
   b47d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b47d4:	9301      	str	r3, [sp, #4]
   b47d6:	bd08      	pop	{r3, pc}
   b47d8:	0003021c 	.word	0x0003021c

000b47dc <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b47dc:	b508      	push	{r3, lr}
   b47de:	4b02      	ldr	r3, [pc, #8]	; (b47e8 <newlib_impure_ptr_callback+0xc>)
   b47e0:	681b      	ldr	r3, [r3, #0]
   b47e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b47e4:	9301      	str	r3, [sp, #4]
   b47e6:	bd08      	pop	{r3, pc}
   b47e8:	0003021c 	.word	0x0003021c

000b47ec <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b47ec:	2100      	movs	r1, #0
   b47ee:	f7ff bf29 	b.w	b4644 <system_delay_ms>

000b47f2 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
   b47f2:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b47f4:	6843      	ldr	r3, [r0, #4]
   b47f6:	3b01      	subs	r3, #1
    {
   b47f8:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b47fa:	6043      	str	r3, [r0, #4]
   b47fc:	b963      	cbnz	r3, b4818 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
        {
          _M_dispose();
   b47fe:	6803      	ldr	r3, [r0, #0]
   b4800:	689b      	ldr	r3, [r3, #8]
   b4802:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b4804:	68a3      	ldr	r3, [r4, #8]
   b4806:	3b01      	subs	r3, #1
   b4808:	60a3      	str	r3, [r4, #8]
   b480a:	b92b      	cbnz	r3, b4818 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b480c:	6823      	ldr	r3, [r4, #0]
   b480e:	4620      	mov	r0, r4
   b4810:	68db      	ldr	r3, [r3, #12]
        }
    }
   b4812:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b4816:	4718      	bx	r3
    }
   b4818:	bd10      	pop	{r4, pc}

000b481a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   b481a:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b481c:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b4820:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b4822:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   b4826:	42ae      	cmp	r6, r5
   b4828:	d004      	beq.n	b4834 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   b482a:	4628      	mov	r0, r5
   b482c:	f001 fc60 	bl	b60f0 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   b4830:	3510      	adds	r5, #16
   b4832:	e7f8      	b.n	b4826 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b4834:	6820      	ldr	r0, [r4, #0]
   b4836:	f7ff ff99 	bl	b476c <free>
    AllocatorT::free(data_);
}
   b483a:	4620      	mov	r0, r4
   b483c:	bd70      	pop	{r4, r5, r6, pc}

000b483e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   b483e:	b510      	push	{r4, lr}
   b4840:	4604      	mov	r4, r0
      {
	if (_M_pi != nullptr)
   b4842:	6800      	ldr	r0, [r0, #0]
   b4844:	b108      	cbz	r0, b484a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
   b4846:	f7ff ffd4 	bl	b47f2 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
   b484a:	4620      	mov	r0, r4
   b484c:	bd10      	pop	{r4, pc}
	...

000b4850 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b4850:	4802      	ldr	r0, [pc, #8]	; (b485c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b4852:	2300      	movs	r3, #0
   b4854:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b4856:	f7ff bded 	b.w	b4434 <os_mutex_recursive_create>
   b485a:	bf00      	nop
   b485c:	2003e6a8 	.word	0x2003e6a8

000b4860 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b4860:	2200      	movs	r2, #0
   b4862:	6840      	ldr	r0, [r0, #4]
   b4864:	4611      	mov	r1, r2
   b4866:	f7ff bf51 	b.w	b470c <network_listening>

000b486a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b486a:	2200      	movs	r2, #0
   b486c:	6840      	ldr	r0, [r0, #4]
   b486e:	4611      	mov	r1, r2
   b4870:	f7ff bf5c 	b.w	b472c <network_get_listen_timeout>

000b4874 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b4874:	6840      	ldr	r0, [r0, #4]
   b4876:	2200      	movs	r2, #0
   b4878:	f7ff bf50 	b.w	b471c <network_set_listen_timeout>

000b487c <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b487c:	6840      	ldr	r0, [r0, #4]
   b487e:	2200      	movs	r2, #0
   b4880:	f081 0101 	eor.w	r1, r1, #1
   b4884:	f7ff bf3a 	b.w	b46fc <network_listen>

000b4888 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b4888:	2300      	movs	r3, #0
   b488a:	6840      	ldr	r0, [r0, #4]
   b488c:	461a      	mov	r2, r3
   b488e:	4619      	mov	r1, r3
   b4890:	f7ff bf2c 	b.w	b46ec <network_off>

000b4894 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b4894:	2300      	movs	r3, #0
   b4896:	6840      	ldr	r0, [r0, #4]
   b4898:	461a      	mov	r2, r3
   b489a:	4619      	mov	r1, r3
   b489c:	f7ff bf1e 	b.w	b46dc <network_on>

000b48a0 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b48a0:	2200      	movs	r2, #0
   b48a2:	6840      	ldr	r0, [r0, #4]
   b48a4:	4611      	mov	r1, r2
   b48a6:	f7ff bf11 	b.w	b46cc <network_ready>

000b48aa <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b48aa:	2200      	movs	r2, #0
   b48ac:	6840      	ldr	r0, [r0, #4]
   b48ae:	4611      	mov	r1, r2
   b48b0:	f7ff befc 	b.w	b46ac <network_connecting>

000b48b4 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b48b4:	6840      	ldr	r0, [r0, #4]
   b48b6:	2200      	movs	r2, #0
   b48b8:	2102      	movs	r1, #2
   b48ba:	f7ff beff 	b.w	b46bc <network_disconnect>

000b48be <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b48be:	2300      	movs	r3, #0
   b48c0:	6840      	ldr	r0, [r0, #4]
   b48c2:	461a      	mov	r2, r3
   b48c4:	f7ff beea 	b.w	b469c <network_connect>

000b48c8 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b48c8:	4b02      	ldr	r3, [pc, #8]	; (b48d4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b48ca:	2203      	movs	r2, #3
   b48cc:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b48ce:	4a02      	ldr	r2, [pc, #8]	; (b48d8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b48d0:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b48d2:	4770      	bx	lr
   b48d4:	2003e6ac 	.word	0x2003e6ac
   b48d8:	000b9258 	.word	0x000b9258

000b48dc <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b48dc:	4770      	bx	lr

000b48de <_ZN9IPAddressD0Ev>:
   b48de:	b510      	push	{r4, lr}
   b48e0:	2118      	movs	r1, #24
   b48e2:	4604      	mov	r4, r0
   b48e4:	f7ff fbdb 	bl	b409e <_ZdlPvj>
   b48e8:	4620      	mov	r0, r4
   b48ea:	bd10      	pop	{r4, pc}

000b48ec <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b48ec:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b48ee:	7d03      	ldrb	r3, [r0, #20]
   b48f0:	2b06      	cmp	r3, #6
{
   b48f2:	b08d      	sub	sp, #52	; 0x34
   b48f4:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b48f6:	f100 0704 	add.w	r7, r0, #4
   b48fa:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b48fe:	d012      	beq.n	b4926 <_ZNK9IPAddress7printToER5Print+0x3a>
   b4900:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b4904:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b4908:	220a      	movs	r2, #10
   b490a:	4630      	mov	r0, r6
   b490c:	f001 faa1 	bl	b5e52 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b4910:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b4912:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b4914:	d019      	beq.n	b494a <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b4916:	2c00      	cmp	r4, #0
   b4918:	d0f4      	beq.n	b4904 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b491a:	212e      	movs	r1, #46	; 0x2e
   b491c:	4630      	mov	r0, r6
   b491e:	f001 fa7f 	bl	b5e20 <_ZN5Print5printEc>
   b4922:	4404      	add	r4, r0
   b4924:	e7ee      	b.n	b4904 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4926:	232f      	movs	r3, #47	; 0x2f
   b4928:	466a      	mov	r2, sp
   b492a:	4639      	mov	r1, r7
   b492c:	200a      	movs	r0, #10
		buf[0] = 0;
   b492e:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4932:	f7ff fdbf 	bl	b44b4 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b4936:	4668      	mov	r0, sp
   b4938:	f002 fc53 	bl	b71e2 <strlen>
   b493c:	6833      	ldr	r3, [r6, #0]
   b493e:	4602      	mov	r2, r0
   b4940:	68db      	ldr	r3, [r3, #12]
   b4942:	4669      	mov	r1, sp
   b4944:	4630      	mov	r0, r6
   b4946:	4798      	blx	r3
   b4948:	4604      	mov	r4, r0
    }
    return n;
}
   b494a:	4620      	mov	r0, r4
   b494c:	b00d      	add	sp, #52	; 0x34
   b494e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b4950 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b4950:	b510      	push	{r4, lr}
   b4952:	4b05      	ldr	r3, [pc, #20]	; (b4968 <_ZN9IPAddressC1Ev+0x18>)
   b4954:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b4956:	2211      	movs	r2, #17
   b4958:	f840 3b04 	str.w	r3, [r0], #4
   b495c:	2100      	movs	r1, #0
   b495e:	f002 fbe1 	bl	b7124 <memset>
}
   b4962:	4620      	mov	r0, r4
   b4964:	bd10      	pop	{r4, pc}
   b4966:	bf00      	nop
   b4968:	000b9294 	.word	0x000b9294

000b496c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b496c:	4603      	mov	r3, r0
   b496e:	4a07      	ldr	r2, [pc, #28]	; (b498c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b4970:	b510      	push	{r4, lr}
   b4972:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b4976:	f101 0210 	add.w	r2, r1, #16
   b497a:	f851 4b04 	ldr.w	r4, [r1], #4
   b497e:	f843 4b04 	str.w	r4, [r3], #4
   b4982:	4291      	cmp	r1, r2
   b4984:	d1f9      	bne.n	b497a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b4986:	780a      	ldrb	r2, [r1, #0]
   b4988:	701a      	strb	r2, [r3, #0]
}
   b498a:	bd10      	pop	{r4, pc}
   b498c:	000b9294 	.word	0x000b9294

000b4990 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b4990:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b4992:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b4996:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b499a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b499e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b49a2:	2304      	movs	r3, #4
   b49a4:	6041      	str	r1, [r0, #4]
   b49a6:	7503      	strb	r3, [r0, #20]
}
   b49a8:	bd10      	pop	{r4, pc}
	...

000b49ac <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b49ac:	b507      	push	{r0, r1, r2, lr}
   b49ae:	4b06      	ldr	r3, [pc, #24]	; (b49c8 <_ZN9IPAddressC1EPKh+0x1c>)
   b49b0:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b49b2:	78cb      	ldrb	r3, [r1, #3]
   b49b4:	9300      	str	r3, [sp, #0]
   b49b6:	788b      	ldrb	r3, [r1, #2]
   b49b8:	784a      	ldrb	r2, [r1, #1]
   b49ba:	7809      	ldrb	r1, [r1, #0]
   b49bc:	f7ff ffe8 	bl	b4990 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b49c0:	b003      	add	sp, #12
   b49c2:	f85d fb04 	ldr.w	pc, [sp], #4
   b49c6:	bf00      	nop
   b49c8:	000b9294 	.word	0x000b9294

000b49cc <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   b49cc:	f100 0310 	add.w	r3, r0, #16
   b49d0:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   b49d2:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   b49d6:	2901      	cmp	r1, #1
   b49d8:	4618      	mov	r0, r3
   b49da:	d108      	bne.n	b49ee <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   b49dc:	f853 1c04 	ldr.w	r1, [r3, #-4]
   b49e0:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   b49e4:	3a01      	subs	r2, #1
   b49e6:	f103 0310 	add.w	r3, r3, #16
   b49ea:	d1f2      	bne.n	b49d2 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   b49ec:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   b49ee:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   b49f0:	bf04      	itt	eq
   b49f2:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   b49f6:	1852      	addeq	r2, r2, r1
   b49f8:	e7f4      	b.n	b49e4 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000b49fa <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   b49fa:	b40e      	push	{r1, r2, r3}
   b49fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   b49fe:	b088      	sub	sp, #32
   b4a00:	af00      	add	r7, sp, #0
   b4a02:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b4a06:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   b4a08:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b4a0c:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   b4a0e:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b4a10:	462b      	mov	r3, r5
   b4a12:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   b4a14:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b4a16:	f7ff fec1 	bl	b479c <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   b4a1a:	280f      	cmp	r0, #15
   b4a1c:	687a      	ldr	r2, [r7, #4]
   b4a1e:	d91a      	bls.n	b4a56 <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   b4a20:	f100 0308 	add.w	r3, r0, #8
   b4a24:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   b4a28:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   b4a2a:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b4a2e:	1c41      	adds	r1, r0, #1
   b4a30:	462b      	mov	r3, r5
   b4a32:	4668      	mov	r0, sp
        va_start(args, fmt);
   b4a34:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b4a36:	f7ff feb1 	bl	b479c <vsnprintf>
        if (n > 0) {
   b4a3a:	1e02      	subs	r2, r0, #0
   b4a3c:	dd04      	ble.n	b4a48 <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   b4a3e:	6823      	ldr	r3, [r4, #0]
   b4a40:	4669      	mov	r1, sp
   b4a42:	689b      	ldr	r3, [r3, #8]
   b4a44:	4620      	mov	r0, r4
   b4a46:	4798      	blx	r3
   b4a48:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   b4a4a:	3720      	adds	r7, #32
   b4a4c:	46bd      	mov	sp, r7
   b4a4e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b4a52:	b003      	add	sp, #12
   b4a54:	4770      	bx	lr
    } else if (n > 0) {
   b4a56:	2800      	cmp	r0, #0
   b4a58:	d0f7      	beq.n	b4a4a <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   b4a5a:	6823      	ldr	r3, [r4, #0]
   b4a5c:	4602      	mov	r2, r0
   b4a5e:	689b      	ldr	r3, [r3, #8]
   b4a60:	f107 0110 	add.w	r1, r7, #16
   b4a64:	4620      	mov	r0, r4
   b4a66:	4798      	blx	r3
}
   b4a68:	e7ef      	b.n	b4a4a <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000b4a6a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>:
	  _M_refcount._M_swap(__r._M_refcount);
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b4a6a:	b538      	push	{r3, r4, r5, lr}
   b4a6c:	680b      	ldr	r3, [r1, #0]
   b4a6e:	6003      	str	r3, [r0, #0]
   b4a70:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   b4a72:	6843      	ldr	r3, [r0, #4]
   b4a74:	429d      	cmp	r5, r3
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b4a76:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   b4a78:	d008      	beq.n	b4a8c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x22>
	    if (__tmp != 0)
   b4a7a:	b115      	cbz	r5, b4a82 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x18>
    { ++_M_use_count; }
   b4a7c:	686b      	ldr	r3, [r5, #4]
   b4a7e:	3301      	adds	r3, #1
   b4a80:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   b4a82:	6860      	ldr	r0, [r4, #4]
   b4a84:	b108      	cbz	r0, b4a8a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x20>
	      _M_pi->_M_release();
   b4a86:	f7ff feb4 	bl	b47f2 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   b4a8a:	6065      	str	r5, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b4a8c:	bd38      	pop	{r3, r4, r5, pc}

000b4a8e <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   b4a8e:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   b4a90:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   b4a92:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   b4a96:	689b      	ldr	r3, [r3, #8]
   b4a98:	2201      	movs	r2, #1
   b4a9a:	f10d 0107 	add.w	r1, sp, #7
   b4a9e:	4798      	blx	r3
}
   b4aa0:	b003      	add	sp, #12
   b4aa2:	f85d fb04 	ldr.w	pc, [sp], #4

000b4aa6 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   b4aa6:	460b      	mov	r3, r1
   b4aa8:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   b4aaa:	2200      	movs	r2, #0
   b4aac:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   b4aae:	e9c0 2200 	strd	r2, r2, [r0]
   b4ab2:	4604      	mov	r4, r0
        t_ = t;
   b4ab4:	6083      	str	r3, [r0, #8]
    if (t) {
   b4ab6:	b90b      	cbnz	r3, b4abc <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   b4ab8:	4620      	mov	r0, r4
   b4aba:	bd10      	pop	{r4, pc}
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count() == 0 && get() == nullptr
       */
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }

      shared_ptr& operator=(const shared_ptr&) noexcept = default;
   b4abc:	f7ff ffd5 	bl	b4a6a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
   b4ac0:	e7fa      	b.n	b4ab8 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000b4ac2 <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   b4ac2:	6883      	ldr	r3, [r0, #8]
   b4ac4:	b1eb      	cbz	r3, b4b02 <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   b4ac6:	781a      	ldrb	r2, [r3, #0]
   b4ac8:	2a03      	cmp	r2, #3
   b4aca:	d81a      	bhi.n	b4b02 <_ZNK5spark9JSONValue4typeEv+0x40>
   b4acc:	e8df f002 	tbb	[pc, r2]
   b4ad0:	1b021704 	.word	0x1b021704
   b4ad4:	2005      	movs	r0, #5
   b4ad6:	4770      	bx	lr
        const char c = d_->json[t_->start];
   b4ad8:	6802      	ldr	r2, [r0, #0]
   b4ada:	685b      	ldr	r3, [r3, #4]
   b4adc:	6852      	ldr	r2, [r2, #4]
   b4ade:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   b4ae0:	282d      	cmp	r0, #45	; 0x2d
   b4ae2:	d012      	beq.n	b4b0a <_ZNK5spark9JSONValue4typeEv+0x48>
   b4ae4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b4ae8:	2b09      	cmp	r3, #9
   b4aea:	d90e      	bls.n	b4b0a <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   b4aec:	2874      	cmp	r0, #116	; 0x74
   b4aee:	d00e      	beq.n	b4b0e <_ZNK5spark9JSONValue4typeEv+0x4c>
   b4af0:	2866      	cmp	r0, #102	; 0x66
   b4af2:	d00c      	beq.n	b4b0e <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   b4af4:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   b4af8:	4258      	negs	r0, r3
   b4afa:	4158      	adcs	r0, r3
   b4afc:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   b4afe:	2006      	movs	r0, #6
   b4b00:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   b4b02:	2000      	movs	r0, #0
   b4b04:	4770      	bx	lr
        return JSON_TYPE_STRING;
   b4b06:	2004      	movs	r0, #4
   b4b08:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   b4b0a:	2003      	movs	r0, #3
   b4b0c:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   b4b0e:	2002      	movs	r0, #2
}
   b4b10:	4770      	bx	lr

000b4b12 <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   b4b12:	b510      	push	{r4, lr}
   b4b14:	4604      	mov	r4, r0
    switch (type()) {
   b4b16:	f7ff ffd4 	bl	b4ac2 <_ZNK5spark9JSONValue4typeEv>
   b4b1a:	2802      	cmp	r0, #2
   b4b1c:	d00e      	beq.n	b4b3c <_ZNK5spark9JSONValue5toIntEv+0x2a>
   b4b1e:	1ec3      	subs	r3, r0, #3
   b4b20:	b2db      	uxtb	r3, r3
   b4b22:	2b01      	cmp	r3, #1
   b4b24:	d814      	bhi.n	b4b50 <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   b4b26:	6822      	ldr	r2, [r4, #0]
   b4b28:	68a3      	ldr	r3, [r4, #8]
   b4b2a:	6850      	ldr	r0, [r2, #4]
   b4b2c:	685b      	ldr	r3, [r3, #4]
}
   b4b2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   b4b32:	220a      	movs	r2, #10
   b4b34:	2100      	movs	r1, #0
   b4b36:	4418      	add	r0, r3
   b4b38:	f003 ba36 	b.w	b7fa8 <strtol>
        const char* const s = d_->json + t_->start;
   b4b3c:	6822      	ldr	r2, [r4, #0]
   b4b3e:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   b4b40:	6852      	ldr	r2, [r2, #4]
   b4b42:	685b      	ldr	r3, [r3, #4]
   b4b44:	5cd0      	ldrb	r0, [r2, r3]
   b4b46:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   b4b4a:	4258      	negs	r0, r3
   b4b4c:	4158      	adcs	r0, r3
}
   b4b4e:	bd10      	pop	{r4, pc}
    switch (type()) {
   b4b50:	2000      	movs	r0, #0
   b4b52:	e7fc      	b.n	b4b4e <_ZNK5spark9JSONValue5toIntEv+0x3c>

000b4b54 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   b4b54:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   b4b56:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   b4b58:	e9c0 3300 	strd	r3, r3, [r0]
   b4b5c:	4604      	mov	r4, r0
        n_(0) {
   b4b5e:	480e      	ldr	r0, [pc, #56]	; (b4b98 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   b4b60:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   b4b64:	b1a9      	cbz	r1, b4b92 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   b4b66:	780b      	ldrb	r3, [r1, #0]
   b4b68:	2b03      	cmp	r3, #3
   b4b6a:	d006      	beq.n	b4b7a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   b4b6c:	b98b      	cbnz	r3, b4b92 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   b4b6e:	6813      	ldr	r3, [r2, #0]
   b4b70:	6858      	ldr	r0, [r3, #4]
   b4b72:	684b      	ldr	r3, [r1, #4]
   b4b74:	5cc3      	ldrb	r3, [r0, r3]
   b4b76:	2b6e      	cmp	r3, #110	; 0x6e
   b4b78:	d007      	beq.n	b4b8a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   b4b7a:	6813      	ldr	r3, [r2, #0]
   b4b7c:	684d      	ldr	r5, [r1, #4]
   b4b7e:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   b4b80:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   b4b82:	4428      	add	r0, r5
            n_ = t->end - t->start;
   b4b84:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   b4b86:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   b4b88:	60e3      	str	r3, [r4, #12]
   b4b8a:	4611      	mov	r1, r2
   b4b8c:	4620      	mov	r0, r4
   b4b8e:	f7ff ff6c 	bl	b4a6a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   b4b92:	4620      	mov	r0, r4
   b4b94:	bd38      	pop	{r3, r4, r5, pc}
   b4b96:	bf00      	nop
   b4b98:	000b9306 	.word	0x000b9306

000b4b9c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   b4b9c:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   b4b9e:	2500      	movs	r5, #0
   b4ba0:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   b4ba2:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   b4ba6:	e9c0 5502 	strd	r5, r5, [r0, #8]
   b4baa:	e9c0 5504 	strd	r5, r5, [r0, #16]
   b4bae:	4604      	mov	r4, r0
   b4bb0:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   b4bb2:	b14b      	cbz	r3, b4bc8 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   b4bb4:	781a      	ldrb	r2, [r3, #0]
   b4bb6:	2a01      	cmp	r2, #1
   b4bb8:	d106      	bne.n	b4bc8 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   b4bba:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   b4bbe:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   b4bc0:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   b4bc2:	6143      	str	r3, [r0, #20]
   b4bc4:	f7ff ff51 	bl	b4a6a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   b4bc8:	4620      	mov	r0, r4
   b4bca:	bd38      	pop	{r3, r4, r5, pc}

000b4bcc <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   b4bcc:	b510      	push	{r4, lr}
    if (!n_) {
   b4bce:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   b4bd0:	4604      	mov	r4, r0
    if (!n_) {
   b4bd2:	b163      	cbz	r3, b4bee <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   b4bd4:	6880      	ldr	r0, [r0, #8]
   b4bd6:	60e0      	str	r0, [r4, #12]
    --n_;
   b4bd8:	3b01      	subs	r3, #1
    ++t_;
   b4bda:	3010      	adds	r0, #16
   b4bdc:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   b4bde:	6120      	str	r0, [r4, #16]
    --n_;
   b4be0:	6163      	str	r3, [r4, #20]
    if (n_) {
   b4be2:	b113      	cbz	r3, b4bea <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   b4be4:	f7ff fef2 	bl	b49cc <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   b4be8:	60a0      	str	r0, [r4, #8]
    return true;
   b4bea:	2001      	movs	r0, #1
   b4bec:	e000      	b.n	b4bf0 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   b4bee:	4618      	mov	r0, r3
}
   b4bf0:	bd10      	pop	{r4, pc}

000b4bf2 <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   b4bf2:	b510      	push	{r4, lr}
    write('}');
   b4bf4:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   b4bf6:	4604      	mov	r4, r0
    write('}');
   b4bf8:	f7ff ff49 	bl	b4a8e <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   b4bfc:	2301      	movs	r3, #1
   b4bfe:	7123      	strb	r3, [r4, #4]
}
   b4c00:	4620      	mov	r0, r4
   b4c02:	bd10      	pop	{r4, pc}

000b4c04 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   b4c04:	b508      	push	{r3, lr}
    switch (state_) {
   b4c06:	7903      	ldrb	r3, [r0, #4]
   b4c08:	2b01      	cmp	r3, #1
   b4c0a:	d002      	beq.n	b4c12 <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   b4c0c:	2b02      	cmp	r3, #2
   b4c0e:	d004      	beq.n	b4c1a <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   b4c10:	bd08      	pop	{r3, pc}
        write(',');
   b4c12:	212c      	movs	r1, #44	; 0x2c
        write(':');
   b4c14:	f7ff ff3b 	bl	b4a8e <_ZN5spark10JSONWriter5writeEc>
}
   b4c18:	e7fa      	b.n	b4c10 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   b4c1a:	213a      	movs	r1, #58	; 0x3a
   b4c1c:	e7fa      	b.n	b4c14 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000b4c1e <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   b4c1e:	b510      	push	{r4, lr}
   b4c20:	4604      	mov	r4, r0
    writeSeparator();
   b4c22:	f7ff ffef 	bl	b4c04 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   b4c26:	4620      	mov	r0, r4
   b4c28:	217b      	movs	r1, #123	; 0x7b
   b4c2a:	f7ff ff30 	bl	b4a8e <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   b4c2e:	2300      	movs	r3, #0
   b4c30:	7123      	strb	r3, [r4, #4]
}
   b4c32:	4620      	mov	r0, r4
   b4c34:	bd10      	pop	{r4, pc}
	...

000b4c38 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   b4c38:	b513      	push	{r0, r1, r4, lr}
   b4c3a:	4604      	mov	r4, r0
   b4c3c:	9101      	str	r1, [sp, #4]
    writeSeparator();
   b4c3e:	f7ff ffe1 	bl	b4c04 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   b4c42:	6823      	ldr	r3, [r4, #0]
   b4c44:	9a01      	ldr	r2, [sp, #4]
   b4c46:	68db      	ldr	r3, [r3, #12]
   b4c48:	4903      	ldr	r1, [pc, #12]	; (b4c58 <_ZN5spark10JSONWriter5valueEi+0x20>)
   b4c4a:	4620      	mov	r0, r4
   b4c4c:	4798      	blx	r3
    state_ = NEXT;
   b4c4e:	2301      	movs	r3, #1
}
   b4c50:	4620      	mov	r0, r4
    state_ = NEXT;
   b4c52:	7123      	strb	r3, [r4, #4]
}
   b4c54:	b002      	add	sp, #8
   b4c56:	bd10      	pop	{r4, pc}
   b4c58:	000b92a0 	.word	0x000b92a0

000b4c5c <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   b4c5c:	b513      	push	{r0, r1, r4, lr}
   b4c5e:	4604      	mov	r4, r0
   b4c60:	9101      	str	r1, [sp, #4]
    writeSeparator();
   b4c62:	f7ff ffcf 	bl	b4c04 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   b4c66:	6823      	ldr	r3, [r4, #0]
   b4c68:	9a01      	ldr	r2, [sp, #4]
   b4c6a:	68db      	ldr	r3, [r3, #12]
   b4c6c:	4903      	ldr	r1, [pc, #12]	; (b4c7c <_ZN5spark10JSONWriter5valueEj+0x20>)
   b4c6e:	4620      	mov	r0, r4
   b4c70:	4798      	blx	r3
    state_ = NEXT;
   b4c72:	2301      	movs	r3, #1
}
   b4c74:	4620      	mov	r0, r4
    state_ = NEXT;
   b4c76:	7123      	strb	r3, [r4, #4]
}
   b4c78:	b002      	add	sp, #8
   b4c7a:	bd10      	pop	{r4, pc}
   b4c7c:	000b92a3 	.word	0x000b92a3

000b4c80 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   b4c80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b4c84:	460d      	mov	r5, r1
    write('"');
   b4c86:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   b4c88:	4690      	mov	r8, r2
   b4c8a:	4604      	mov	r4, r0
    write('"');
   b4c8c:	f7ff feff 	bl	b4a8e <_ZN5spark10JSONWriter5writeEc>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   b4c90:	f8df 90a4 	ldr.w	r9, [pc, #164]	; b4d38 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
   b4c94:	44a8      	add	r8, r5
    const char *s = str;
   b4c96:	462f      	mov	r7, r5
    while (s != end) {
   b4c98:	4547      	cmp	r7, r8
   b4c9a:	46ba      	mov	sl, r7
   b4c9c:	d03d      	beq.n	b4d1a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
   b4c9e:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
   b4ca2:	2e22      	cmp	r6, #34	; 0x22
   b4ca4:	d006      	beq.n	b4cb4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   b4ca6:	2e5c      	cmp	r6, #92	; 0x5c
   b4ca8:	d004      	beq.n	b4cb4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   b4caa:	4630      	mov	r0, r6
   b4cac:	f002 fa0a 	bl	b70c4 <isprint>
   b4cb0:	2800      	cmp	r0, #0
   b4cb2:	d1f1      	bne.n	b4c98 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   b4cb4:	6823      	ldr	r3, [r4, #0]
   b4cb6:	ebaa 0205 	sub.w	r2, sl, r5
   b4cba:	689b      	ldr	r3, [r3, #8]
   b4cbc:	4629      	mov	r1, r5
   b4cbe:	4620      	mov	r0, r4
   b4cc0:	4798      	blx	r3
            write('\\');
   b4cc2:	215c      	movs	r1, #92	; 0x5c
   b4cc4:	4620      	mov	r0, r4
   b4cc6:	f7ff fee2 	bl	b4a8e <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   b4cca:	2e0d      	cmp	r6, #13
   b4ccc:	d80a      	bhi.n	b4ce4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
   b4cce:	2e07      	cmp	r6, #7
   b4cd0:	d91c      	bls.n	b4d0c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   b4cd2:	f1a6 0308 	sub.w	r3, r6, #8
   b4cd6:	2b05      	cmp	r3, #5
   b4cd8:	d818      	bhi.n	b4d0c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   b4cda:	e8df f003 	tbb	[pc, r3]
   b4cde:	0f0d      	.short	0x0f0d
   b4ce0:	15131711 	.word	0x15131711
   b4ce4:	2e22      	cmp	r6, #34	; 0x22
   b4ce6:	d001      	beq.n	b4cec <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
   b4ce8:	2e5c      	cmp	r6, #92	; 0x5c
   b4cea:	d10f      	bne.n	b4d0c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
   b4cec:	4631      	mov	r1, r6
                write('b');
   b4cee:	4620      	mov	r0, r4
   b4cf0:	f7ff fecd 	bl	b4a8e <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   b4cf4:	463d      	mov	r5, r7
    while (s != end) {
   b4cf6:	e7cf      	b.n	b4c98 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   b4cf8:	2162      	movs	r1, #98	; 0x62
   b4cfa:	e7f8      	b.n	b4cee <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
   b4cfc:	2174      	movs	r1, #116	; 0x74
   b4cfe:	e7f6      	b.n	b4cee <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
   b4d00:	216e      	movs	r1, #110	; 0x6e
   b4d02:	e7f4      	b.n	b4cee <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
   b4d04:	2166      	movs	r1, #102	; 0x66
   b4d06:	e7f2      	b.n	b4cee <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
   b4d08:	2172      	movs	r1, #114	; 0x72
   b4d0a:	e7f0      	b.n	b4cee <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
   b4d0c:	6823      	ldr	r3, [r4, #0]
   b4d0e:	4632      	mov	r2, r6
   b4d10:	68db      	ldr	r3, [r3, #12]
   b4d12:	4649      	mov	r1, r9
   b4d14:	4620      	mov	r0, r4
   b4d16:	4798      	blx	r3
                break;
   b4d18:	e7ec      	b.n	b4cf4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
        }
        ++s;
    }
    if (s != str) {
   b4d1a:	42bd      	cmp	r5, r7
   b4d1c:	d005      	beq.n	b4d2a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
   b4d1e:	6823      	ldr	r3, [r4, #0]
   b4d20:	1b7a      	subs	r2, r7, r5
   b4d22:	689b      	ldr	r3, [r3, #8]
   b4d24:	4629      	mov	r1, r5
   b4d26:	4620      	mov	r0, r4
   b4d28:	4798      	blx	r3
    }
    write('"');
   b4d2a:	2122      	movs	r1, #34	; 0x22
   b4d2c:	4620      	mov	r0, r4
   b4d2e:	f7ff feae 	bl	b4a8e <_ZN5spark10JSONWriter5writeEc>
}
   b4d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b4d36:	bf00      	nop
   b4d38:	000b92a6 	.word	0x000b92a6

000b4d3c <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   b4d3c:	b513      	push	{r0, r1, r4, lr}
   b4d3e:	4604      	mov	r4, r0
   b4d40:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   b4d44:	f7ff ff5e 	bl	b4c04 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   b4d48:	4620      	mov	r0, r4
   b4d4a:	e9dd 2100 	ldrd	r2, r1, [sp]
   b4d4e:	f7ff ff97 	bl	b4c80 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   b4d52:	2302      	movs	r3, #2
}
   b4d54:	4620      	mov	r0, r4
    state_ = VALUE;
   b4d56:	7123      	strb	r3, [r4, #4]
}
   b4d58:	b002      	add	sp, #8
   b4d5a:	bd10      	pop	{r4, pc}

000b4d5c <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   b4d5c:	b513      	push	{r0, r1, r4, lr}
   b4d5e:	4604      	mov	r4, r0
   b4d60:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   b4d64:	f7ff ff4e 	bl	b4c04 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   b4d68:	4620      	mov	r0, r4
   b4d6a:	e9dd 2100 	ldrd	r2, r1, [sp]
   b4d6e:	f7ff ff87 	bl	b4c80 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   b4d72:	2301      	movs	r3, #1
}
   b4d74:	4620      	mov	r0, r4
    state_ = NEXT;
   b4d76:	7123      	strb	r3, [r4, #4]
}
   b4d78:	b002      	add	sp, #8
   b4d7a:	bd10      	pop	{r4, pc}

000b4d7c <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   b4d7c:	6880      	ldr	r0, [r0, #8]
   b4d7e:	6803      	ldr	r3, [r0, #0]
   b4d80:	68db      	ldr	r3, [r3, #12]
   b4d82:	4718      	bx	r3

000b4d84 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   b4d84:	4770      	bx	lr

000b4d86 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   b4d86:	4608      	mov	r0, r1
   b4d88:	b111      	cbz	r1, b4d90 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   b4d8a:	680b      	ldr	r3, [r1, #0]
   b4d8c:	685b      	ldr	r3, [r3, #4]
   b4d8e:	4718      	bx	r3
}
   b4d90:	4770      	bx	lr

000b4d92 <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
   b4d92:	4770      	bx	lr

000b4d94 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   b4d94:	4770      	bx	lr

000b4d96 <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   b4d96:	4770      	bx	lr

000b4d98 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   b4d98:	4770      	bx	lr

000b4d9a <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
   b4d9a:	b538      	push	{r3, r4, r5, lr}
   b4d9c:	4604      	mov	r4, r0
   b4d9e:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   b4da0:	6800      	ldr	r0, [r0, #0]
   b4da2:	212e      	movs	r1, #46	; 0x2e
   b4da4:	f002 fa01 	bl	b71aa <strchrnul>
    size = s - category;
   b4da8:	6823      	ldr	r3, [r4, #0]
   b4daa:	1ac3      	subs	r3, r0, r3
   b4dac:	602b      	str	r3, [r5, #0]
    if (size) {
   b4dae:	b123      	cbz	r3, b4dba <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   b4db0:	7803      	ldrb	r3, [r0, #0]
   b4db2:	b103      	cbz	r3, b4db6 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   b4db4:	3001      	adds	r0, #1
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   b4db6:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b4db8:	6020      	str	r0, [r4, #0]
}
   b4dba:	4618      	mov	r0, r3
   b4dbc:	bd38      	pop	{r3, r4, r5, pc}

000b4dbe <_ZN5spark16JSONStreamWriterD0Ev>:
   b4dbe:	b510      	push	{r4, lr}
   b4dc0:	210c      	movs	r1, #12
   b4dc2:	4604      	mov	r4, r0
   b4dc4:	f7ff f96b 	bl	b409e <_ZdlPvj>
   b4dc8:	4620      	mov	r0, r4
   b4dca:	bd10      	pop	{r4, pc}

000b4dcc <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   b4dcc:	b510      	push	{r4, lr}
   b4dce:	2104      	movs	r1, #4
   b4dd0:	4604      	mov	r4, r0
   b4dd2:	f7ff f964 	bl	b409e <_ZdlPvj>
   b4dd6:	4620      	mov	r0, r4
   b4dd8:	bd10      	pop	{r4, pc}

000b4dda <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   b4dda:	b510      	push	{r4, lr}
   b4ddc:	2104      	movs	r1, #4
   b4dde:	4604      	mov	r4, r0
   b4de0:	f7ff f95d 	bl	b409e <_ZdlPvj>
   b4de4:	4620      	mov	r0, r4
   b4de6:	bd10      	pop	{r4, pc}

000b4de8 <_ZN14RecursiveMutex4lockEv.isra.0>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   b4de8:	f7ff bb34 	b.w	b4454 <os_mutex_recursive_lock>

000b4dec <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   b4dec:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   b4dee:	f002 f9e6 	bl	b71be <strcmp>
}
   b4df2:	fab0 f080 	clz	r0, r0
   b4df6:	0940      	lsrs	r0, r0, #5
   b4df8:	bd08      	pop	{r3, pc}

000b4dfa <__tcf_1>:
   b4dfa:	4770      	bx	lr

000b4dfc <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != 3
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   b4dfc:	b510      	push	{r4, lr}
   b4dfe:	460c      	mov	r4, r1
#if PLATFORM_ID != 3
    if (stream == &Serial) {
   b4e00:	f001 fb40 	bl	b6484 <_Z16_fetch_usbserialv>
   b4e04:	4284      	cmp	r4, r0
   b4e06:	d010      	beq.n	b4e2a <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   b4e08:	f001 fc58 	bl	b66bc <_Z22__fetch_global_Serial1v>
   b4e0c:	4284      	cmp	r4, r0
   b4e0e:	d105      	bne.n	b4e1c <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   b4e10:	f001 fc54 	bl	b66bc <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}
   b4e14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   b4e18:	f001 bacb 	b.w	b63b2 <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   b4e1c:	b12c      	cbz	r4, b4e2a <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   b4e1e:	6823      	ldr	r3, [r4, #0]
   b4e20:	4620      	mov	r0, r4
   b4e22:	685b      	ldr	r3, [r3, #4]
}
   b4e24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b4e28:	4718      	bx	r3
   b4e2a:	bd10      	pop	{r4, pc}

000b4e2c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b4e2c:	680b      	ldr	r3, [r1, #0]
   b4e2e:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b4e30:	684b      	ldr	r3, [r1, #4]
   b4e32:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b4e34:	b113      	cbz	r3, b4e3c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
   b4e36:	685a      	ldr	r2, [r3, #4]
   b4e38:	3201      	adds	r2, #1
   b4e3a:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b4e3c:	4770      	bx	lr

000b4e3e <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   b4e3e:	b513      	push	{r0, r1, r4, lr}
   b4e40:	4604      	mov	r4, r0
    return value(val, strlen(val));
   b4e42:	4608      	mov	r0, r1
   b4e44:	9101      	str	r1, [sp, #4]
   b4e46:	f002 f9cc 	bl	b71e2 <strlen>
   b4e4a:	9901      	ldr	r1, [sp, #4]
   b4e4c:	4602      	mov	r2, r0
   b4e4e:	4620      	mov	r0, r4
}
   b4e50:	b002      	add	sp, #8
   b4e52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   b4e56:	f7ff bf81 	b.w	b4d5c <_ZN5spark10JSONWriter5valueEPKcj>

000b4e5a <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   b4e5a:	b513      	push	{r0, r1, r4, lr}
   b4e5c:	4604      	mov	r4, r0
    write(str, strlen(str));
   b4e5e:	4608      	mov	r0, r1
   b4e60:	9101      	str	r1, [sp, #4]
   b4e62:	f002 f9be 	bl	b71e2 <strlen>
   b4e66:	6823      	ldr	r3, [r4, #0]
   b4e68:	9901      	ldr	r1, [sp, #4]
   b4e6a:	68db      	ldr	r3, [r3, #12]
   b4e6c:	4602      	mov	r2, r0
   b4e6e:	4620      	mov	r0, r4
}
   b4e70:	b002      	add	sp, #8
   b4e72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   b4e76:	4718      	bx	r3

000b4e78 <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   b4e78:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   b4e7a:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   b4e7c:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   b4e80:	68db      	ldr	r3, [r3, #12]
   b4e82:	2201      	movs	r2, #1
   b4e84:	f10d 0107 	add.w	r1, sp, #7
   b4e88:	4798      	blx	r3
}
   b4e8a:	b003      	add	sp, #12
   b4e8c:	f85d fb04 	ldr.w	pc, [sp], #4

000b4e90 <_ZN5spark16StreamLogHandler6printfEPKcz>:
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   b4e90:	b40e      	push	{r1, r2, r3}
   b4e92:	b503      	push	{r0, r1, lr}
   b4e94:	ab03      	add	r3, sp, #12
    stream_->vprintf(false, fmt, args);
   b4e96:	2100      	movs	r1, #0
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   b4e98:	f853 2b04 	ldr.w	r2, [r3], #4
    stream_->vprintf(false, fmt, args);
   b4e9c:	6a00      	ldr	r0, [r0, #32]
    va_start(args, fmt);
   b4e9e:	9301      	str	r3, [sp, #4]
    stream_->vprintf(false, fmt, args);
   b4ea0:	f001 f8c1 	bl	b6026 <_ZN5Print7vprintfEbPKcSt9__va_list>
}
   b4ea4:	b002      	add	sp, #8
   b4ea6:	f85d eb04 	ldr.w	lr, [sp], #4
   b4eaa:	b003      	add	sp, #12
   b4eac:	4770      	bx	lr

000b4eae <_ZN5spark6detail9LogFilter4NodeC1EOS2_>:
struct spark::detail::LogFilter::Node {
   b4eae:	680a      	ldr	r2, [r1, #0]
   b4eb0:	6002      	str	r2, [r0, #0]
   b4eb2:	684a      	ldr	r2, [r1, #4]
   b4eb4:	6042      	str	r2, [r0, #4]
        capacity_(0) {
   b4eb6:	2200      	movs	r2, #0
   b4eb8:	e9c0 2202 	strd	r2, r2, [r0, #8]
   b4ebc:	b510      	push	{r4, lr}
   b4ebe:	6102      	str	r2, [r0, #16]
      __a = _GLIBCXX_MOVE(__b);
   b4ec0:	688c      	ldr	r4, [r1, #8]
   b4ec2:	6084      	str	r4, [r0, #8]
   b4ec4:	68cc      	ldr	r4, [r1, #12]
   b4ec6:	60c4      	str	r4, [r0, #12]
   b4ec8:	690c      	ldr	r4, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   b4eca:	608a      	str	r2, [r1, #8]
   b4ecc:	60ca      	str	r2, [r1, #12]
      __a = _GLIBCXX_MOVE(__b);
   b4ece:	6104      	str	r4, [r0, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   b4ed0:	610a      	str	r2, [r1, #16]
   b4ed2:	bd10      	pop	{r4, pc}

000b4ed4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   b4ed4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   b4ed8:	e9d0 8400 	ldrd	r8, r4, [r0]
   b4edc:	f04f 0a14 	mov.w	sl, #20
   b4ee0:	9300      	str	r3, [sp, #0]
   b4ee2:	fb0a f404 	mul.w	r4, sl, r4
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   b4ee6:	4b18      	ldr	r3, [pc, #96]	; (b4f48 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   b4ee8:	10a4      	asrs	r4, r4, #2
   b4eea:	4617      	mov	r7, r2
   b4eec:	435c      	muls	r4, r3
   b4eee:	4645      	mov	r5, r8
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   b4ef0:	2c00      	cmp	r4, #0
   b4ef2:	dd21      	ble.n	b4f38 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
	{
	  _DistanceType __half = __len >> 1;
   b4ef4:	1066      	asrs	r6, r4, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   b4ef6:	fb0a f006 	mul.w	r0, sl, r6
   b4efa:	eb05 0900 	add.w	r9, r5, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   b4efe:	463a      	mov	r2, r7
   b4f00:	f8b9 b004 	ldrh.w	fp, [r9, #4]
   b4f04:	5828      	ldr	r0, [r5, r0]
   b4f06:	9101      	str	r1, [sp, #4]
   b4f08:	455f      	cmp	r7, fp
   b4f0a:	bf28      	it	cs
   b4f0c:	465a      	movcs	r2, fp
   b4f0e:	f002 f970 	bl	b71f2 <strncmp>
                if (cmp == 0) {
   b4f12:	2800      	cmp	r0, #0
   b4f14:	9901      	ldr	r1, [sp, #4]
   b4f16:	f04f 0301 	mov.w	r3, #1
   b4f1a:	d10b      	bne.n	b4f34 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                    if (node.size == value.second) { // Lengths are equal
   b4f1c:	455f      	cmp	r7, fp
   b4f1e:	d103      	bne.n	b4f28 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x54>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   b4f20:	9a00      	ldr	r2, [sp, #0]
   b4f22:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   b4f24:	4634      	mov	r4, r6
   b4f26:	e7e3      	b.n	b4ef0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   b4f28:	d9fc      	bls.n	b4f24 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   b4f2a:	1ba6      	subs	r6, r4, r6
	      ++__first;
   b4f2c:	f109 0514 	add.w	r5, r9, #20
	      __len = __len - __half - 1;
   b4f30:	3e01      	subs	r6, #1
   b4f32:	e7f7      	b.n	b4f24 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	  if (__comp(__middle, __val))
   b4f34:	dbf9      	blt.n	b4f2a <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
   b4f36:	e7f5      	b.n	b4f24 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
      return __last - __first;
   b4f38:	eba5 0508 	sub.w	r5, r5, r8
}
   b4f3c:	4802      	ldr	r0, [pc, #8]	; (b4f48 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   b4f3e:	10ad      	asrs	r5, r5, #2
   b4f40:	4368      	muls	r0, r5
   b4f42:	b003      	add	sp, #12
   b4f44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b4f48:	cccccccd 	.word	0xcccccccd

000b4f4c <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   b4f4c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   b4f4e:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   b4f50:	7e05      	ldrb	r5, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   b4f52:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   b4f54:	b303      	cbz	r3, b4f98 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
   b4f56:	b1f9      	cbz	r1, b4f98 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
   b4f58:	2600      	movs	r6, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   b4f5a:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   b4f5e:	9603      	str	r6, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   b4f60:	a903      	add	r1, sp, #12
   b4f62:	a801      	add	r0, sp, #4
   b4f64:	f7ff ff19 	bl	b4d9a <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   b4f68:	4601      	mov	r1, r0
   b4f6a:	b1a8      	cbz	r0, b4f98 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
   b4f6c:	f10d 030b 	add.w	r3, sp, #11
   b4f70:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   b4f72:	f88d 600b 	strb.w	r6, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   b4f76:	4620      	mov	r0, r4
   b4f78:	f7ff ffac 	bl	b4ed4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   b4f7c:	f89d 300b 	ldrb.w	r3, [sp, #11]
   b4f80:	b153      	cbz	r3, b4f98 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
   b4f82:	6823      	ldr	r3, [r4, #0]
   b4f84:	2414      	movs	r4, #20
   b4f86:	fb04 3400 	mla	r4, r4, r0, r3
            pNodes = &node.nodes;
   b4f8a:	3408      	adds	r4, #8
            if (node.level >= 0) {
   b4f8c:	f934 3c02 	ldrsh.w	r3, [r4, #-2]
   b4f90:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   b4f92:	bfa8      	it	ge
   b4f94:	b2dd      	uxtbge	r5, r3
        while ((name = nextSubcategoryName(category, size))) {
   b4f96:	e7e3      	b.n	b4f60 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   b4f98:	4628      	mov	r0, r5
   b4f9a:	b004      	add	sp, #16
   b4f9c:	bd70      	pop	{r4, r5, r6, pc}
	...

000b4fa0 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   b4fa0:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   b4fa2:	4c09      	ldr	r4, [pc, #36]	; (b4fc8 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   b4fa4:	7823      	ldrb	r3, [r4, #0]
   b4fa6:	f3bf 8f5b 	dmb	ish
   b4faa:	07db      	lsls	r3, r3, #31
   b4fac:	d409      	bmi.n	b4fc2 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   b4fae:	4620      	mov	r0, r4
   b4fb0:	f7ff f884 	bl	b40bc <__cxa_guard_acquire>
   b4fb4:	b128      	cbz	r0, b4fc2 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   b4fb6:	4620      	mov	r0, r4
   b4fb8:	f7ff f885 	bl	b40c6 <__cxa_guard_release>
   b4fbc:	4803      	ldr	r0, [pc, #12]	; (b4fcc <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   b4fbe:	f002 f877 	bl	b70b0 <atexit>
}
   b4fc2:	4803      	ldr	r0, [pc, #12]	; (b4fd0 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   b4fc4:	bd10      	pop	{r4, pc}
   b4fc6:	bf00      	nop
   b4fc8:	2003e6b8 	.word	0x2003e6b8
   b4fcc:	000b4d93 	.word	0x000b4d93
   b4fd0:	2003e494 	.word	0x2003e494

000b4fd4 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   b4fd4:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   b4fd6:	4c09      	ldr	r4, [pc, #36]	; (b4ffc <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   b4fd8:	7823      	ldrb	r3, [r4, #0]
   b4fda:	f3bf 8f5b 	dmb	ish
   b4fde:	07db      	lsls	r3, r3, #31
   b4fe0:	d409      	bmi.n	b4ff6 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   b4fe2:	4620      	mov	r0, r4
   b4fe4:	f7ff f86a 	bl	b40bc <__cxa_guard_acquire>
   b4fe8:	b128      	cbz	r0, b4ff6 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   b4fea:	4620      	mov	r0, r4
   b4fec:	f7ff f86b 	bl	b40c6 <__cxa_guard_release>
   b4ff0:	4803      	ldr	r0, [pc, #12]	; (b5000 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   b4ff2:	f002 f85d 	bl	b70b0 <atexit>
    return &factory;
}
   b4ff6:	4803      	ldr	r0, [pc, #12]	; (b5004 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   b4ff8:	bd10      	pop	{r4, pc}
   b4ffa:	bf00      	nop
   b4ffc:	2003e6bc 	.word	0x2003e6bc
   b5000:	000b4dfb 	.word	0x000b4dfb
   b5004:	2003e498 	.word	0x2003e498

000b5008 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   b5008:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   b500a:	2500      	movs	r5, #0
   b500c:	4604      	mov	r4, r0
   b500e:	e9c0 5500 	strd	r5, r5, [r0]
   b5012:	e9c0 5504 	strd	r5, r5, [r0, #16]
   b5016:	6085      	str	r5, [r0, #8]
   b5018:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   b501a:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   b501e:	f7ff fa09 	bl	b4434 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   b5022:	f7ff ffbd 	bl	b4fa0 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   b5026:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   b5028:	f7ff ffd4 	bl	b4fd4 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   b502c:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   b502e:	6220      	str	r0, [r4, #32]
}
   b5030:	4620      	mov	r0, r4
   b5032:	bd38      	pop	{r3, r4, r5, pc}

000b5034 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   b5034:	b510      	push	{r4, lr}
    static LogManager mgr;
   b5036:	4c0a      	ldr	r4, [pc, #40]	; (b5060 <_ZN5spark10LogManager8instanceEv+0x2c>)
   b5038:	7823      	ldrb	r3, [r4, #0]
   b503a:	f3bf 8f5b 	dmb	ish
   b503e:	07db      	lsls	r3, r3, #31
   b5040:	d40c      	bmi.n	b505c <_ZN5spark10LogManager8instanceEv+0x28>
   b5042:	4620      	mov	r0, r4
   b5044:	f7ff f83a 	bl	b40bc <__cxa_guard_acquire>
   b5048:	b140      	cbz	r0, b505c <_ZN5spark10LogManager8instanceEv+0x28>
   b504a:	4806      	ldr	r0, [pc, #24]	; (b5064 <_ZN5spark10LogManager8instanceEv+0x30>)
   b504c:	f7ff ffdc 	bl	b5008 <_ZN5spark10LogManagerC1Ev>
   b5050:	4620      	mov	r0, r4
   b5052:	f7ff f838 	bl	b40c6 <__cxa_guard_release>
   b5056:	4804      	ldr	r0, [pc, #16]	; (b5068 <_ZN5spark10LogManager8instanceEv+0x34>)
   b5058:	f002 f82a 	bl	b70b0 <atexit>
    return &mgr;
}
   b505c:	4801      	ldr	r0, [pc, #4]	; (b5064 <_ZN5spark10LogManager8instanceEv+0x30>)
   b505e:	bd10      	pop	{r4, pc}
   b5060:	2003e6b4 	.word	0x2003e6b4
   b5064:	2003e6c4 	.word	0x2003e6c4
   b5068:	000b5589 	.word	0x000b5589

000b506c <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   b506c:	4a02      	ldr	r2, [pc, #8]	; (b5078 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   b506e:	4903      	ldr	r1, [pc, #12]	; (b507c <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   b5070:	4803      	ldr	r0, [pc, #12]	; (b5080 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   b5072:	2300      	movs	r3, #0
   b5074:	f7ff bad6 	b.w	b4624 <log_set_callbacks>
   b5078:	000b536d 	.word	0x000b536d
   b507c:	000b52f9 	.word	0x000b52f9
   b5080:	000b5279 	.word	0x000b5279

000b5084 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   b5084:	2300      	movs	r3, #0
   b5086:	461a      	mov	r2, r3
   b5088:	4619      	mov	r1, r3
   b508a:	4618      	mov	r0, r3
   b508c:	f7ff baca 	b.w	b4624 <log_set_callbacks>

000b5090 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b5090:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   b5092:	688d      	ldr	r5, [r1, #8]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b5094:	4604      	mov	r4, r0
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b5096:	4668      	mov	r0, sp
   b5098:	f7ff fec8 	bl	b4e2c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
        JSONObjectIterator(value.t_, value.d_) {
   b509c:	466a      	mov	r2, sp
   b509e:	4629      	mov	r1, r5
   b50a0:	4620      	mov	r0, r4
   b50a2:	f7ff fd7b 	bl	b4b9c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   b50a6:	a801      	add	r0, sp, #4
   b50a8:	f7ff fbc9 	bl	b483e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b50ac:	4620      	mov	r0, r4
   b50ae:	b003      	add	sp, #12
   b50b0:	bd30      	pop	{r4, r5, pc}

000b50b2 <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
   b50b2:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   b50b4:	68cd      	ldr	r5, [r1, #12]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   b50b6:	4604      	mov	r4, r0
   b50b8:	4668      	mov	r0, sp
   b50ba:	f7ff feb7 	bl	b4e2c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONString(k_, d_);
   b50be:	466a      	mov	r2, sp
   b50c0:	4629      	mov	r1, r5
   b50c2:	4620      	mov	r0, r4
   b50c4:	f7ff fd46 	bl	b4b54 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b50c8:	a801      	add	r0, sp, #4
   b50ca:	f7ff fbb8 	bl	b483e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b50ce:	4620      	mov	r0, r4
   b50d0:	b003      	add	sp, #12
   b50d2:	bd30      	pop	{r4, r5, pc}

000b50d4 <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b50d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   b50d6:	690d      	ldr	r5, [r1, #16]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b50d8:	4604      	mov	r4, r0
   b50da:	4668      	mov	r0, sp
   b50dc:	f7ff fea6 	bl	b4e2c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONValue(v_, d_);
   b50e0:	466a      	mov	r2, sp
   b50e2:	4629      	mov	r1, r5
   b50e4:	4620      	mov	r0, r4
   b50e6:	f7ff fcde 	bl	b4aa6 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b50ea:	a801      	add	r0, sp, #4
   b50ec:	f7ff fba7 	bl	b483e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b50f0:	4620      	mov	r0, r4
   b50f2:	b003      	add	sp, #12
   b50f4:	bd30      	pop	{r4, r5, pc}
	...

000b50f8 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   b50f8:	b570      	push	{r4, r5, r6, lr}
   b50fa:	b08a      	sub	sp, #40	; 0x28
   b50fc:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   b50fe:	4601      	mov	r1, r0
   b5100:	a804      	add	r0, sp, #16
   b5102:	f7ff ffc5 	bl	b5090 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   b5106:	4e14      	ldr	r6, [pc, #80]	; (b5158 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   b5108:	a804      	add	r0, sp, #16
   b510a:	f7ff fd5f 	bl	b4bcc <_ZN5spark18JSONObjectIterator4nextEv>
   b510e:	b1e8      	cbz	r0, b514c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   b5110:	a904      	add	r1, sp, #16
   b5112:	4668      	mov	r0, sp
   b5114:	f7ff ffcd 	bl	b50b2 <_ZNK5spark18JSONObjectIterator4nameEv>
   b5118:	9802      	ldr	r0, [sp, #8]
   b511a:	4631      	mov	r1, r6
   b511c:	f7ff fe66 	bl	b4dec <_ZNK5spark10JSONStringeqEPKc.isra.0>
   b5120:	4604      	mov	r4, r0
   b5122:	b110      	cbz	r0, b512a <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   b5124:	1e2c      	subs	r4, r5, #0
   b5126:	bf18      	it	ne
   b5128:	2401      	movne	r4, #1
   b512a:	a801      	add	r0, sp, #4
   b512c:	f7ff fb87 	bl	b483e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5130:	2c00      	cmp	r4, #0
   b5132:	d0e9      	beq.n	b5108 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   b5134:	a904      	add	r1, sp, #16
   b5136:	4668      	mov	r0, sp
   b5138:	f7ff ffcc 	bl	b50d4 <_ZNK5spark18JSONObjectIterator5valueEv>
   b513c:	4668      	mov	r0, sp
   b513e:	f7ff fce8 	bl	b4b12 <_ZNK5spark9JSONValue5toIntEv>
   b5142:	6028      	str	r0, [r5, #0]
   b5144:	a801      	add	r0, sp, #4
   b5146:	f7ff fb7a 	bl	b483e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b514a:	e7dd      	b.n	b5108 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   b514c:	a805      	add	r0, sp, #20
   b514e:	f7ff fb76 	bl	b483e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b5152:	b00a      	add	sp, #40	; 0x28
   b5154:	bd70      	pop	{r4, r5, r6, pc}
   b5156:	bf00      	nop
   b5158:	000b92ac 	.word	0x000b92ac

000b515c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   b515c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b515e:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   b5160:	4620      	mov	r0, r4
   b5162:	4913      	ldr	r1, [pc, #76]	; (b51b0 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   b5164:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   b5166:	f002 f82a 	bl	b71be <strcmp>
   b516a:	b950      	cbnz	r0, b5182 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x26>
        Serial.begin();
   b516c:	f001 f98a 	bl	b6484 <_Z16_fetch_usbserialv>
   b5170:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b5174:	f001 f976 	bl	b6464 <_ZN9USBSerial5beginEl>
}
   b5178:	b003      	add	sp, #12
   b517a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &Serial;
   b517e:	f001 b981 	b.w	b6484 <_Z16_fetch_usbserialv>
    if (strcmp(type, "Serial1") == 0) {
   b5182:	490c      	ldr	r1, [pc, #48]	; (b51b4 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
   b5184:	4620      	mov	r0, r4
   b5186:	f002 f81a 	bl	b71be <strcmp>
   b518a:	b978      	cbnz	r0, b51ac <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>
        int baud = 9600;
   b518c:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   b5190:	a901      	add	r1, sp, #4
   b5192:	4628      	mov	r0, r5
        int baud = 9600;
   b5194:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   b5196:	f7ff ffaf 	bl	b50f8 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   b519a:	f001 fa8f 	bl	b66bc <_Z22__fetch_global_Serial1v>
   b519e:	9901      	ldr	r1, [sp, #4]
   b51a0:	f001 f904 	bl	b63ac <_ZN11USARTSerial5beginEm>
        return &Serial1;
   b51a4:	f001 fa8a 	bl	b66bc <_Z22__fetch_global_Serial1v>
}
   b51a8:	b003      	add	sp, #12
   b51aa:	bd30      	pop	{r4, r5, pc}
    return nullptr;
   b51ac:	2000      	movs	r0, #0
   b51ae:	e7fb      	b.n	b51a8 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
   b51b0:	000b92b1 	.word	0x000b92b1
   b51b4:	000b92b8 	.word	0x000b92b8

000b51b8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b51b8:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b51ba:	e9d0 5300 	ldrd	r5, r3, [r0]
   b51be:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b51c0:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b51c2:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b51c6:	42ae      	cmp	r6, r5
   b51c8:	d005      	beq.n	b51d6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   b51ca:	f105 0008 	add.w	r0, r5, #8
   b51ce:	f7ff fff3 	bl	b51b8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b51d2:	3514      	adds	r5, #20
   b51d4:	e7f7      	b.n	b51c6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b51d6:	6820      	ldr	r0, [r4, #0]
   b51d8:	f7ff fac8 	bl	b476c <free>
}
   b51dc:	4620      	mov	r0, r4
   b51de:	bd70      	pop	{r4, r5, r6, pc}

000b51e0 <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   b51e0:	b510      	push	{r4, lr}
   b51e2:	4604      	mov	r4, r0
   b51e4:	300c      	adds	r0, #12
   b51e6:	f7ff ffe7 	bl	b51b8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b51ea:	4620      	mov	r0, r4
   b51ec:	f7ff fb15 	bl	b481a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   b51f0:	4620      	mov	r0, r4
   b51f2:	bd10      	pop	{r4, pc}

000b51f4 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   b51f4:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   b51f6:	4b04      	ldr	r3, [pc, #16]	; (b5208 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   b51f8:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   b51fa:	f840 3b04 	str.w	r3, [r0], #4
   b51fe:	f7ff ffef 	bl	b51e0 <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   b5202:	4620      	mov	r0, r4
   b5204:	bd10      	pop	{r4, pc}
   b5206:	bf00      	nop
   b5208:	000b9228 	.word	0x000b9228

000b520c <_ZN5spark16StreamLogHandlerD0Ev>:
   b520c:	b510      	push	{r4, lr}
   b520e:	4604      	mov	r4, r0
   b5210:	f7ff fff0 	bl	b51f4 <_ZN5spark16StreamLogHandlerD1Ev>
   b5214:	4620      	mov	r0, r4
   b5216:	2124      	movs	r1, #36	; 0x24
   b5218:	f7fe ff41 	bl	b409e <_ZdlPvj>
   b521c:	4620      	mov	r0, r4
   b521e:	bd10      	pop	{r4, pc}

000b5220 <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   b5220:	b510      	push	{r4, lr}
   b5222:	4b03      	ldr	r3, [pc, #12]	; (b5230 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   b5224:	6003      	str	r3, [r0, #0]
   b5226:	4604      	mov	r4, r0
   b5228:	f7ff ffe4 	bl	b51f4 <_ZN5spark16StreamLogHandlerD1Ev>
   b522c:	4620      	mov	r0, r4
   b522e:	bd10      	pop	{r4, pc}
   b5230:	000b9358 	.word	0x000b9358

000b5234 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   b5234:	b510      	push	{r4, lr}
   b5236:	4604      	mov	r4, r0
   b5238:	f7ff fff2 	bl	b5220 <_ZN5spark20JSONStreamLogHandlerD1Ev>
   b523c:	4620      	mov	r0, r4
   b523e:	2124      	movs	r1, #36	; 0x24
   b5240:	f7fe ff2d 	bl	b409e <_ZdlPvj>
   b5244:	4620      	mov	r0, r4
   b5246:	bd10      	pop	{r4, pc}

000b5248 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
   b5248:	2200      	movs	r2, #0
   b524a:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   b524e:	b510      	push	{r4, lr}
        capacity_(0) {
   b5250:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   b5252:	680c      	ldr	r4, [r1, #0]
   b5254:	6004      	str	r4, [r0, #0]
   b5256:	684c      	ldr	r4, [r1, #4]
   b5258:	6044      	str	r4, [r0, #4]
   b525a:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b525c:	600a      	str	r2, [r1, #0]
   b525e:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b5260:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b5262:	608a      	str	r2, [r1, #8]
}
   b5264:	bd10      	pop	{r4, pc}

000b5266 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   b5266:	b510      	push	{r4, lr}
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b5268:	6803      	ldr	r3, [r0, #0]
   b526a:	4604      	mov	r4, r0
   b526c:	6818      	ldr	r0, [r3, #0]
   b526e:	f7ff f8f9 	bl	b4464 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   b5272:	4620      	mov	r0, r4
   b5274:	bd10      	pop	{r4, pc}
	...

000b5278 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   b5278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b527c:	b087      	sub	sp, #28
   b527e:	4680      	mov	r8, r0
   b5280:	9303      	str	r3, [sp, #12]
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   b5282:	4b1c      	ldr	r3, [pc, #112]	; (b52f4 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   b5284:	685b      	ldr	r3, [r3, #4]
   b5286:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b528a:	4689      	mov	r9, r1
   b528c:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   b528e:	b96b      	cbnz	r3, b52ac <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   b5290:	f7ff fed0 	bl	b5034 <_ZN5spark10LogManager8instanceEv>
   b5294:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   b5296:	f100 0324 	add.w	r3, r0, #36	; 0x24
      { _M_device.lock(); }
   b529a:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b529c:	9305      	str	r3, [sp, #20]
      { _M_device.lock(); }
   b529e:	f7ff fda3 	bl	b4de8 <_ZN14RecursiveMutex4lockEv.isra.0>
        // prevent re-entry
        if (that->isActive()) {
   b52a2:	7b23      	ldrb	r3, [r4, #12]
   b52a4:	b12b      	cbz	r3, b52b2 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   b52a6:	a805      	add	r0, sp, #20
   b52a8:	f7ff ffdd 	bl	b5266 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   b52ac:	b007      	add	sp, #28
   b52ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   b52b2:	2301      	movs	r3, #1
   b52b4:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   b52b6:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   b52ba:	fa5f f989 	uxtb.w	r9, r9
   b52be:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b52c2:	45aa      	cmp	sl, r5
   b52c4:	d012      	beq.n	b52ec <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   b52c6:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   b52ca:	4631      	mov	r1, r6
   b52cc:	1d38      	adds	r0, r7, #4
   b52ce:	f7ff fe3d 	bl	b4f4c <_ZNK5spark6detail9LogFilter5levelEPKc>
   b52d2:	4581      	cmp	r9, r0
   b52d4:	d3f5      	bcc.n	b52c2 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   b52d6:	683b      	ldr	r3, [r7, #0]
   b52d8:	9a03      	ldr	r2, [sp, #12]
   b52da:	9200      	str	r2, [sp, #0]
   b52dc:	f8d3 b008 	ldr.w	fp, [r3, #8]
   b52e0:	464a      	mov	r2, r9
   b52e2:	4633      	mov	r3, r6
   b52e4:	4641      	mov	r1, r8
   b52e6:	4638      	mov	r0, r7
   b52e8:	47d8      	blx	fp
   b52ea:	e7ea      	b.n	b52c2 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   b52ec:	2300      	movs	r3, #0
   b52ee:	7323      	strb	r3, [r4, #12]
   b52f0:	e7d9      	b.n	b52a6 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   b52f2:	bf00      	nop
   b52f4:	e000ed00 	.word	0xe000ed00

000b52f8 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   b52f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b52fc:	469b      	mov	fp, r3
   b52fe:	4b1a      	ldr	r3, [pc, #104]	; (b5368 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   b5300:	685b      	ldr	r3, [r3, #4]
   b5302:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b5306:	4680      	mov	r8, r0
   b5308:	4689      	mov	r9, r1
   b530a:	4616      	mov	r6, r2
    if (HAL_IsISR()) {
   b530c:	b96b      	cbnz	r3, b532a <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   b530e:	f7ff fe91 	bl	b5034 <_ZN5spark10LogManager8instanceEv>
   b5312:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   b5314:	f100 0324 	add.w	r3, r0, #36	; 0x24
   b5318:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b531a:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b531c:	f7ff fd64 	bl	b4de8 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (that->isActive()) {
   b5320:	7b23      	ldrb	r3, [r4, #12]
   b5322:	b12b      	cbz	r3, b5330 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   b5324:	a801      	add	r0, sp, #4
   b5326:	f7ff ff9e 	bl	b5266 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   b532a:	b003      	add	sp, #12
   b532c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   b5330:	2301      	movs	r3, #1
   b5332:	7323      	strb	r3, [r4, #12]
   b5334:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   b5338:	b2f6      	uxtb	r6, r6
   b533a:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b533e:	4555      	cmp	r5, sl
   b5340:	d00e      	beq.n	b5360 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   b5342:	f855 7b04 	ldr.w	r7, [r5], #4
   b5346:	4659      	mov	r1, fp
   b5348:	1d38      	adds	r0, r7, #4
   b534a:	f7ff fdff 	bl	b4f4c <_ZNK5spark6detail9LogFilter5levelEPKc>
   b534e:	4286      	cmp	r6, r0
   b5350:	d3f5      	bcc.n	b533e <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   b5352:	683b      	ldr	r3, [r7, #0]
   b5354:	464a      	mov	r2, r9
   b5356:	68db      	ldr	r3, [r3, #12]
   b5358:	4641      	mov	r1, r8
   b535a:	4638      	mov	r0, r7
   b535c:	4798      	blx	r3
   b535e:	e7ee      	b.n	b533e <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   b5360:	2300      	movs	r3, #0
   b5362:	7323      	strb	r3, [r4, #12]
   b5364:	e7de      	b.n	b5324 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   b5366:	bf00      	nop
   b5368:	e000ed00 	.word	0xe000ed00

000b536c <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   b536c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b5370:	4b16      	ldr	r3, [pc, #88]	; (b53cc <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   b5372:	685b      	ldr	r3, [r3, #4]
   b5374:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b5378:	4605      	mov	r5, r0
   b537a:	460f      	mov	r7, r1
    if (HAL_IsISR()) {
   b537c:	bb1b      	cbnz	r3, b53c6 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   b537e:	f7ff fe59 	bl	b5034 <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   b5382:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   b5386:	4604      	mov	r4, r0
   b5388:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b538a:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b538c:	f7ff fd2c 	bl	b4de8 <_ZN14RecursiveMutex4lockEv.isra.0>
   b5390:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   b5394:	2446      	movs	r4, #70	; 0x46
   b5396:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b539a:	45b0      	cmp	r8, r6
   b539c:	d109      	bne.n	b53b2 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   b539e:	a801      	add	r0, sp, #4
   b53a0:	f7ff ff61 	bl	b5266 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   b53a4:	42a5      	cmp	r5, r4
   b53a6:	bfb4      	ite	lt
   b53a8:	2000      	movlt	r0, #0
   b53aa:	2001      	movge	r0, #1
}
   b53ac:	b002      	add	sp, #8
   b53ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   b53b2:	f856 0b04 	ldr.w	r0, [r6], #4
   b53b6:	4639      	mov	r1, r7
   b53b8:	3004      	adds	r0, #4
   b53ba:	f7ff fdc7 	bl	b4f4c <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   b53be:	4284      	cmp	r4, r0
   b53c0:	bfa8      	it	ge
   b53c2:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   b53c4:	e7e9      	b.n	b539a <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   b53c6:	2000      	movs	r0, #0
   b53c8:	e7f0      	b.n	b53ac <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   b53ca:	bf00      	nop
   b53cc:	e000ed00 	.word	0xe000ed00

000b53d0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b53d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b53d2:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   b53d6:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b53d8:	4604      	mov	r4, r0
   b53da:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b53dc:	db0d      	blt.n	b53fa <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x2a>
   b53de:	1c6f      	adds	r7, r5, #1
        if (n > 0) {
   b53e0:	2f00      	cmp	r7, #0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b53e2:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b53e4:	dd04      	ble.n	b53f0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x20>
    return ::realloc(ptr, size);
   b53e6:	00b9      	lsls	r1, r7, #2
   b53e8:	f7ff f9c8 	bl	b477c <realloc>
            if (!d) {
   b53ec:	b918      	cbnz	r0, b53f6 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x26>
}
   b53ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   b53f0:	f7ff f9bc 	bl	b476c <free>
        T* d = nullptr;
   b53f4:	2000      	movs	r0, #0
        data_ = d;
   b53f6:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b53f8:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b53fa:	6827      	ldr	r7, [r4, #0]
    move(p + 1, p, data_ + size_);
   b53fc:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b53fe:	eb07 0185 	add.w	r1, r7, r5, lsl #2
    move(p + 1, p, data_ + size_);
   b5402:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   b5404:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
   b5408:	1d08      	adds	r0, r1, #4
   b540a:	f001 fe71 	bl	b70f0 <memmove>
    new(p) T(std::move(value));
   b540e:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
    ++size_;
   b5412:	6863      	ldr	r3, [r4, #4]
   b5414:	3301      	adds	r3, #1
   b5416:	6063      	str	r3, [r4, #4]
    return true;
   b5418:	2001      	movs	r0, #1
   b541a:	e7e8      	b.n	b53ee <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x1e>

000b541c <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   b541c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   b541e:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   b5422:	4604      	mov	r4, r0
   b5424:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b5426:	9301      	str	r3, [sp, #4]
   b5428:	460d      	mov	r5, r1
      { _M_device.lock(); }
   b542a:	f7ff fcdd 	bl	b4de8 <_ZN14RecursiveMutex4lockEv.isra.0>
    return find(data_, data_ + size_, value);
   b542e:	e9d4 3200 	ldrd	r3, r2, [r4]
   b5432:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (; p != end; ++p) {
   b5436:	4293      	cmp	r3, r2
   b5438:	4619      	mov	r1, r3
   b543a:	d00b      	beq.n	b5454 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   b543c:	6809      	ldr	r1, [r1, #0]
   b543e:	42a9      	cmp	r1, r5
   b5440:	f103 0304 	add.w	r3, r3, #4
   b5444:	d1f7      	bne.n	b5436 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
            return false;
   b5446:	a801      	add	r0, sp, #4
   b5448:	f7ff ff0d 	bl	b5266 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   b544c:	2500      	movs	r5, #0
}
   b544e:	4628      	mov	r0, r5
   b5450:	b003      	add	sp, #12
   b5452:	bd30      	pop	{r4, r5, pc}
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   b5454:	4629      	mov	r1, r5
   b5456:	4620      	mov	r0, r4
   b5458:	f7ff ffba 	bl	b53d0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>
   b545c:	4605      	mov	r5, r0
   b545e:	2800      	cmp	r0, #0
   b5460:	d0f1      	beq.n	b5446 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   b5462:	6863      	ldr	r3, [r4, #4]
   b5464:	2b01      	cmp	r3, #1
   b5466:	d101      	bne.n	b546c <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   b5468:	f7ff fe00 	bl	b506c <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b546c:	a801      	add	r0, sp, #4
   b546e:	f7ff fefa 	bl	b5266 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   b5472:	e7ec      	b.n	b544e <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000b5474 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b5474:	b570      	push	{r4, r5, r6, lr}
   b5476:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   b5478:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b547c:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   b547e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   b5482:	4282      	cmp	r2, r0
   b5484:	d00f      	beq.n	b54a6 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x32>
    move(p, p + 1, data_ + size_);
   b5486:	4601      	mov	r1, r0
            if (*p == value) {
   b5488:	681d      	ldr	r5, [r3, #0]
   b548a:	f851 6b04 	ldr.w	r6, [r1], #4
   b548e:	42ae      	cmp	r6, r5
   b5490:	d107      	bne.n	b54a2 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
        ::memmove(dest, p, (end - p) * sizeof(T));
   b5492:	1a52      	subs	r2, r2, r1
   b5494:	f001 fe2c 	bl	b70f0 <memmove>
    --size_;
   b5498:	6863      	ldr	r3, [r4, #4]
   b549a:	3b01      	subs	r3, #1
   b549c:	6063      	str	r3, [r4, #4]
    return true;
   b549e:	2001      	movs	r0, #1
}
   b54a0:	bd70      	pop	{r4, r5, r6, pc}
    move(p, p + 1, data_ + size_);
   b54a2:	4608      	mov	r0, r1
   b54a4:	e7ed      	b.n	b5482 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   b54a6:	2000      	movs	r0, #0
   b54a8:	e7fa      	b.n	b54a0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>

000b54aa <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   b54aa:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   b54ac:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   b54b0:	4604      	mov	r4, r0
   b54b2:	6a40      	ldr	r0, [r0, #36]	; 0x24
   b54b4:	9101      	str	r1, [sp, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b54b6:	9303      	str	r3, [sp, #12]
      { _M_device.lock(); }
   b54b8:	f7ff fc96 	bl	b4de8 <_ZN14RecursiveMutex4lockEv.isra.0>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   b54bc:	a901      	add	r1, sp, #4
   b54be:	4620      	mov	r0, r4
   b54c0:	f7ff ffd8 	bl	b5474 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   b54c4:	b118      	cbz	r0, b54ce <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   b54c6:	6863      	ldr	r3, [r4, #4]
   b54c8:	b90b      	cbnz	r3, b54ce <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   b54ca:	f7ff fddb 	bl	b5084 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b54ce:	a803      	add	r0, sp, #12
   b54d0:	f7ff fec9 	bl	b5266 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   b54d4:	b004      	add	sp, #16
   b54d6:	bd10      	pop	{r4, pc}

000b54d8 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   b54d8:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   b54da:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   b54de:	2318      	movs	r3, #24
   b54e0:	4604      	mov	r4, r0
   b54e2:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   b54e6:	42ae      	cmp	r6, r5
   b54e8:	d015      	beq.n	b5516 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   b54ea:	f105 0110 	add.w	r1, r5, #16
   b54ee:	4620      	mov	r0, r4
   b54f0:	f7ff ffc0 	bl	b5474 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   b54f4:	6863      	ldr	r3, [r4, #4]
   b54f6:	b90b      	cbnz	r3, b54fc <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   b54f8:	f7ff fdc4 	bl	b5084 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   b54fc:	69e0      	ldr	r0, [r4, #28]
   b54fe:	6929      	ldr	r1, [r5, #16]
   b5500:	6803      	ldr	r3, [r0, #0]
   b5502:	68db      	ldr	r3, [r3, #12]
   b5504:	4798      	blx	r3
        if (h.stream) {
   b5506:	6969      	ldr	r1, [r5, #20]
   b5508:	b119      	cbz	r1, b5512 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   b550a:	6a20      	ldr	r0, [r4, #32]
   b550c:	6803      	ldr	r3, [r0, #0]
   b550e:	68db      	ldr	r3, [r3, #12]
   b5510:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   b5512:	3518      	adds	r5, #24
   b5514:	e7e7      	b.n	b54e6 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   b5516:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   b551a:	2618      	movs	r6, #24
   b551c:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b5520:	42ae      	cmp	r6, r5
   b5522:	d004      	beq.n	b552e <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   b5524:	4628      	mov	r0, r5
   b5526:	f000 fde3 	bl	b60f0 <_ZN6StringD1Ev>
   b552a:	3518      	adds	r5, #24
   b552c:	e7f8      	b.n	b5520 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   b552e:	2300      	movs	r3, #0
   b5530:	6163      	str	r3, [r4, #20]
}
   b5532:	bd70      	pop	{r4, r5, r6, pc}

000b5534 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   b5534:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b5536:	4604      	mov	r4, r0
    resetSystemCallbacks();
   b5538:	f7ff fda4 	bl	b5084 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b553c:	f104 0324 	add.w	r3, r4, #36	; 0x24
   b5540:	6a60      	ldr	r0, [r4, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b5542:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b5544:	f7ff fc50 	bl	b4de8 <_ZN14RecursiveMutex4lockEv.isra.0>
         destroyFactoryHandlers();
   b5548:	4620      	mov	r0, r4
   b554a:	f7ff ffc5 	bl	b54d8 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   b554e:	a801      	add	r0, sp, #4
   b5550:	f7ff fe89 	bl	b5266 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   b5554:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b5556:	b108      	cbz	r0, b555c <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   b5558:	f7fe ff74 	bl	b4444 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   b555c:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   b5560:	2618      	movs	r6, #24
   b5562:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b5566:	42ae      	cmp	r6, r5
   b5568:	d004      	beq.n	b5574 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   b556a:	4628      	mov	r0, r5
   b556c:	f000 fdc0 	bl	b60f0 <_ZN6StringD1Ev>
   b5570:	3518      	adds	r5, #24
   b5572:	e7f8      	b.n	b5566 <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   b5574:	6920      	ldr	r0, [r4, #16]
   b5576:	f7ff f8f9 	bl	b476c <free>
   b557a:	6820      	ldr	r0, [r4, #0]
   b557c:	f7ff f8f6 	bl	b476c <free>
}
   b5580:	4620      	mov	r0, r4
   b5582:	b002      	add	sp, #8
   b5584:	bd70      	pop	{r4, r5, r6, pc}
	...

000b5588 <__tcf_2>:
    static LogManager mgr;
   b5588:	4801      	ldr	r0, [pc, #4]	; (b5590 <__tcf_2+0x8>)
   b558a:	f7ff bfd3 	b.w	b5534 <_ZN5spark10LogManagerD1Ev>
   b558e:	bf00      	nop
   b5590:	2003e6c4 	.word	0x2003e6c4

000b5594 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   b5594:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b5596:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5598:	4604      	mov	r4, r0
   b559a:	460d      	mov	r5, r1
   b559c:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b559e:	d915      	bls.n	b55cc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x38>
   b55a0:	4290      	cmp	r0, r2
   b55a2:	d214      	bcs.n	b55ce <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
            --end;
   b55a4:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b55a8:	1a75      	subs	r5, r6, r1
   b55aa:	f1a1 0714 	sub.w	r7, r1, #20
   b55ae:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b55b0:	42b7      	cmp	r7, r6
   b55b2:	d01a      	beq.n	b55ea <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*end));
   b55b4:	b11c      	cbz	r4, b55be <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x2a>
   b55b6:	4631      	mov	r1, r6
   b55b8:	4620      	mov	r0, r4
   b55ba:	f7ff fc78 	bl	b4eae <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
struct spark::detail::LogFilter::Node {
   b55be:	f106 0008 	add.w	r0, r6, #8
   b55c2:	f7ff fdf9 	bl	b51b8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   b55c6:	3e14      	subs	r6, #20
   b55c8:	3c14      	subs	r4, #20
   b55ca:	e7f1      	b.n	b55b0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1c>
        } else if (dest != p) {
   b55cc:	d00d      	beq.n	b55ea <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
            for (; p != end; ++p, ++dest) {
   b55ce:	42b5      	cmp	r5, r6
   b55d0:	d00b      	beq.n	b55ea <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*p));
   b55d2:	b11c      	cbz	r4, b55dc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x48>
   b55d4:	4629      	mov	r1, r5
   b55d6:	4620      	mov	r0, r4
   b55d8:	f7ff fc69 	bl	b4eae <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
   b55dc:	f105 0008 	add.w	r0, r5, #8
   b55e0:	f7ff fdea 	bl	b51b8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   b55e4:	3514      	adds	r5, #20
   b55e6:	3414      	adds	r4, #20
   b55e8:	e7f1      	b.n	b55ce <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
    }
   b55ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b55ec <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b55ec:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b55ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b55f0:	4604      	mov	r4, r0
   b55f2:	460d      	mov	r5, r1
   b55f4:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b55f6:	d914      	bls.n	b5622 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   b55f8:	4290      	cmp	r0, r2
   b55fa:	d213      	bcs.n	b5624 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   b55fc:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   b5600:	1a75      	subs	r5, r6, r1
   b5602:	f1a1 0710 	sub.w	r7, r1, #16
   b5606:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b5608:	42b7      	cmp	r7, r6
   b560a:	d018      	beq.n	b563e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   b560c:	b11c      	cbz	r4, b5616 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   b560e:	4631      	mov	r1, r6
   b5610:	4620      	mov	r0, r4
   b5612:	f000 fde9 	bl	b61e8 <_ZN6StringC1EOS_>
                end->~T();
   b5616:	4630      	mov	r0, r6
   b5618:	f000 fd6a 	bl	b60f0 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b561c:	3e10      	subs	r6, #16
   b561e:	3c10      	subs	r4, #16
   b5620:	e7f2      	b.n	b5608 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b5622:	d00c      	beq.n	b563e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   b5624:	42b5      	cmp	r5, r6
   b5626:	d00a      	beq.n	b563e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   b5628:	b11c      	cbz	r4, b5632 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   b562a:	4629      	mov	r1, r5
   b562c:	4620      	mov	r0, r4
   b562e:	f000 fddb 	bl	b61e8 <_ZN6StringC1EOS_>
                p->~T();
   b5632:	4628      	mov	r0, r5
   b5634:	f000 fd5c 	bl	b60f0 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b5638:	3510      	adds	r5, #16
   b563a:	3410      	adds	r4, #16
   b563c:	e7f2      	b.n	b5624 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   b563e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5640 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   b5640:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b5642:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b5644:	4605      	mov	r5, r0
        if (n > 0) {
   b5646:	dd11      	ble.n	b566c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   b5648:	0130      	lsls	r0, r6, #4
   b564a:	f7ff f887 	bl	b475c <malloc>
            if (!d) {
   b564e:	4604      	mov	r4, r0
   b5650:	b158      	cbz	r0, b566a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b5652:	e9d5 1200 	ldrd	r1, r2, [r5]
   b5656:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   b565a:	f7ff ffc7 	bl	b55ec <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b565e:	6828      	ldr	r0, [r5, #0]
   b5660:	f7ff f884 	bl	b476c <free>
        data_ = d;
   b5664:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b5666:	60ae      	str	r6, [r5, #8]
        return true;
   b5668:	2001      	movs	r0, #1
    }
   b566a:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b566c:	2400      	movs	r4, #0
   b566e:	e7f6      	b.n	b565e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000b5670 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   b5670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5674:	4690      	mov	r8, r2
   b5676:	b095      	sub	sp, #84	; 0x54
        capacity_(0) {
   b5678:	2300      	movs	r3, #0
   b567a:	9103      	str	r1, [sp, #12]
    return size_;
   b567c:	f8d8 1004 	ldr.w	r1, [r8, #4]
        capacity_(0) {
   b5680:	930a      	str	r3, [sp, #40]	; 0x28
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   b5682:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   b5684:	4299      	cmp	r1, r3
        capacity_(0) {
   b5686:	e9c0 3300 	strd	r3, r3, [r0]
   b568a:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b568e:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b5692:	e9cd 3308 	strd	r3, r3, [sp, #32]
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   b5696:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   b5698:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   b569a:	dc23      	bgt.n	b56e4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   b569c:	e9d8 5700 	ldrd	r5, r7, [r8]
   b56a0:	2314      	movs	r3, #20
   b56a2:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   b56a6:	42af      	cmp	r7, r5
   b56a8:	d03b      	beq.n	b5722 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   b56aa:	4629      	mov	r1, r5
   b56ac:	a80b      	add	r0, sp, #44	; 0x2c
   b56ae:	f000 fd9b 	bl	b61e8 <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   b56b2:	a90b      	add	r1, sp, #44	; 0x2c
   b56b4:	a80f      	add	r0, sp, #60	; 0x3c
   b56b6:	9e09      	ldr	r6, [sp, #36]	; 0x24
   b56b8:	f000 fd96 	bl	b61e8 <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b56bc:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
   b56c0:	4299      	cmp	r1, r3
   b56c2:	da1b      	bge.n	b56fc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   b56c4:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
   b56c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
    T* const p = data_ + i;
   b56c8:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   b56cc:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   b56d0:	4631      	mov	r1, r6
   b56d2:	f106 0010 	add.w	r0, r6, #16
   b56d6:	f7ff ff89 	bl	b55ec <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   b56da:	b9ee      	cbnz	r6, b5718 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   b56dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b56de:	3301      	adds	r3, #1
   b56e0:	9309      	str	r3, [sp, #36]	; 0x24
    return true;
   b56e2:	e011      	b.n	b5708 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   b56e4:	a808      	add	r0, sp, #32
   b56e6:	f7ff ffab 	bl	b5640 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   b56ea:	2800      	cmp	r0, #0
   b56ec:	d1d6      	bne.n	b569c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
        return;
   b56ee:	a808      	add	r0, sp, #32
   b56f0:	f7ff f893 	bl	b481a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   b56f4:	4620      	mov	r0, r4
   b56f6:	b015      	add	sp, #84	; 0x54
   b56f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b56fc:	3101      	adds	r1, #1
   b56fe:	a808      	add	r0, sp, #32
   b5700:	f7ff ff9e 	bl	b5640 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   b5704:	2800      	cmp	r0, #0
   b5706:	d1dd      	bne.n	b56c4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   b5708:	a80f      	add	r0, sp, #60	; 0x3c
   b570a:	f000 fcf1 	bl	b60f0 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   b570e:	a80b      	add	r0, sp, #44	; 0x2c
   b5710:	f000 fcee 	bl	b60f0 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   b5714:	3514      	adds	r5, #20
   b5716:	e7c6      	b.n	b56a6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   b5718:	a90f      	add	r1, sp, #60	; 0x3c
   b571a:	4630      	mov	r0, r6
   b571c:	f000 fd64 	bl	b61e8 <_ZN6StringC1EOS_>
   b5720:	e7dc      	b.n	b56dc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   b5722:	2600      	movs	r6, #0
   b5724:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
   b5728:	960d      	str	r6, [sp, #52]	; 0x34
    for (int i = 0; i < cats.size(); ++i) {
   b572a:	f04f 0914 	mov.w	r9, #20
    return data_[i];
   b572e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   b5732:	429e      	cmp	r6, r3
   b5734:	da7c      	bge.n	b5830 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c0>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   b5736:	0133      	lsls	r3, r6, #4
   b5738:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
   b573a:	9306      	str	r3, [sp, #24]
        if (!category) {
   b573c:	b90b      	cbnz	r3, b5742 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
    for (int i = 0; i < cats.size(); ++i) {
   b573e:	3601      	adds	r6, #1
   b5740:	e7f5      	b.n	b572e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xbe>
        size_t size = 0; // Name length
   b5742:	2300      	movs	r3, #0
   b5744:	9307      	str	r3, [sp, #28]
   b5746:	fb09 f306 	mul.w	r3, r9, r6
   b574a:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   b574c:	ad0b      	add	r5, sp, #44	; 0x2c
        while ((name = nextSubcategoryName(category, size))) {
   b574e:	a907      	add	r1, sp, #28
   b5750:	a806      	add	r0, sp, #24
   b5752:	f7ff fb22 	bl	b4d9a <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   b5756:	4682      	mov	sl, r0
   b5758:	2800      	cmp	r0, #0
   b575a:	d0f0      	beq.n	b573e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xce>
            bool found = false;
   b575c:	f04f 0300 	mov.w	r3, #0
   b5760:	f88d 3017 	strb.w	r3, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   b5764:	4601      	mov	r1, r0
   b5766:	9a07      	ldr	r2, [sp, #28]
   b5768:	f10d 0317 	add.w	r3, sp, #23
   b576c:	4628      	mov	r0, r5
   b576e:	f7ff fbb1 	bl	b4ed4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b5772:	f89d 7017 	ldrb.w	r7, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   b5776:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b5778:	2f00      	cmp	r7, #0
   b577a:	d14a      	bne.n	b5812 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
   b577c:	f8bd 301c 	ldrh.w	r3, [sp, #28]
            level(-1) {
   b5780:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        capacity_(0) {
   b5784:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
   b5788:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b578c:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   b5790:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   b5794:	9713      	str	r7, [sp, #76]	; 0x4c
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b5796:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   b579a:	4293      	cmp	r3, r2
   b579c:	db17      	blt.n	b57ce <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15e>
   b579e:	f103 0a01 	add.w	sl, r3, #1
        if (n > 0) {
   b57a2:	f1ba 0f00 	cmp.w	sl, #0
   b57a6:	dd30      	ble.n	b580a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19a>
    return ::malloc(size);
   b57a8:	fb09 f00a 	mul.w	r0, r9, sl
   b57ac:	f7fe ffd6 	bl	b475c <malloc>
            if (!d) {
   b57b0:	4683      	mov	fp, r0
   b57b2:	b360      	cbz	r0, b580e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19e>
            move(d, data_, data_ + size_);
   b57b4:	e9d5 1200 	ldrd	r1, r2, [r5]
   b57b8:	fb09 1202 	mla	r2, r9, r2, r1
   b57bc:	f7ff feea 	bl	b5594 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    ::free(ptr);
   b57c0:	6828      	ldr	r0, [r5, #0]
   b57c2:	f7fe ffd3 	bl	b476c <free>
        data_ = d;
   b57c6:	f8c5 b000 	str.w	fp, [r5]
        capacity_ = n;
   b57ca:	f8c5 a008 	str.w	sl, [r5, #8]
    T* const p = data_ + i;
   b57ce:	682b      	ldr	r3, [r5, #0]
   b57d0:	9a01      	ldr	r2, [sp, #4]
   b57d2:	fb09 3a02 	mla	sl, r9, r2, r3
    move(p + 1, p, data_ + size_);
   b57d6:	686a      	ldr	r2, [r5, #4]
   b57d8:	4651      	mov	r1, sl
   b57da:	fb09 3202 	mla	r2, r9, r2, r3
   b57de:	f10a 0014 	add.w	r0, sl, #20
   b57e2:	f7ff fed7 	bl	b5594 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   b57e6:	f1ba 0f00 	cmp.w	sl, #0
   b57ea:	d003      	beq.n	b57f4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x184>
   b57ec:	a90f      	add	r1, sp, #60	; 0x3c
   b57ee:	4650      	mov	r0, sl
   b57f0:	f7ff fb5d 	bl	b4eae <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
    ++size_;
   b57f4:	686b      	ldr	r3, [r5, #4]
   b57f6:	3301      	adds	r3, #1
   b57f8:	606b      	str	r3, [r5, #4]
struct spark::detail::LogFilter::Node {
   b57fa:	a811      	add	r0, sp, #68	; 0x44
   b57fc:	f7ff fcdc 	bl	b51b8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b5800:	b13f      	cbz	r7, b5812 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
    Vector<Node> nodes;
   b5802:	a80b      	add	r0, sp, #44	; 0x2c
   b5804:	f7ff fcd8 	bl	b51b8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b5808:	e771      	b.n	b56ee <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   b580a:	46bb      	mov	fp, r7
   b580c:	e7d8      	b.n	b57c0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x150>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b580e:	2701      	movs	r7, #1
   b5810:	e7f3      	b.n	b57fa <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x18a>
    return data_[i];
   b5812:	9b01      	ldr	r3, [sp, #4]
   b5814:	682d      	ldr	r5, [r5, #0]
   b5816:	fb09 5503 	mla	r5, r9, r3, r5
            if (!*category) { // Check if it's last subcategory
   b581a:	9b06      	ldr	r3, [sp, #24]
   b581c:	781b      	ldrb	r3, [r3, #0]
   b581e:	b92b      	cbnz	r3, b582c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
                node.level = filters.at(i).level_;
   b5820:	f8d8 3000 	ldr.w	r3, [r8]
   b5824:	9a02      	ldr	r2, [sp, #8]
   b5826:	4413      	add	r3, r2
   b5828:	7c1b      	ldrb	r3, [r3, #16]
   b582a:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   b582c:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   b582e:	e78e      	b.n	b574e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xde>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5830:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   b5832:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5834:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   b5836:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5838:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b583a:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
   b583c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
   b583e:	930a      	str	r3, [sp, #40]	; 0x28
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5840:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   b5842:	60a2      	str	r2, [r4, #8]
   b5844:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
   b5846:	930b      	str	r3, [sp, #44]	; 0x2c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5848:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   b584a:	60e2      	str	r2, [r4, #12]
   b584c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   b584e:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5850:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   b5852:	6122      	str	r2, [r4, #16]
   b5854:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   b5856:	930d      	str	r3, [sp, #52]	; 0x34
    level_ = level;
   b5858:	9b03      	ldr	r3, [sp, #12]
   b585a:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
   b585c:	6162      	str	r2, [r4, #20]
   b585e:	7623      	strb	r3, [r4, #24]
   b5860:	e7cf      	b.n	b5802 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x192>
	...

000b5864 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   b5864:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5866:	4604      	mov	r4, r0
   b5868:	b087      	sub	sp, #28
   b586a:	460d      	mov	r5, r1
        filter_(level, filters) {
   b586c:	4626      	mov	r6, r4
        stream_(&stream) {
   b586e:	4619      	mov	r1, r3
   b5870:	4668      	mov	r0, sp
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   b5872:	4617      	mov	r7, r2
        stream_(&stream) {
   b5874:	f7fe fd52 	bl	b431c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b5878:	4b0b      	ldr	r3, [pc, #44]	; (b58a8 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x44>)
   b587a:	f846 3b04 	str.w	r3, [r6], #4
   b587e:	4669      	mov	r1, sp
   b5880:	a803      	add	r0, sp, #12
   b5882:	f7fe fd4b 	bl	b431c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b5886:	aa03      	add	r2, sp, #12
   b5888:	4639      	mov	r1, r7
   b588a:	4630      	mov	r0, r6
   b588c:	f7ff fef0 	bl	b5670 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b5890:	a803      	add	r0, sp, #12
   b5892:	f7fe fd02 	bl	b429a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b5896:	4668      	mov	r0, sp
   b5898:	f7fe fcff 	bl	b429a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b589c:	4b03      	ldr	r3, [pc, #12]	; (b58ac <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x48>)
   b589e:	6023      	str	r3, [r4, #0]
}
   b58a0:	4620      	mov	r0, r4
        stream_(&stream) {
   b58a2:	6225      	str	r5, [r4, #32]
}
   b58a4:	b007      	add	sp, #28
   b58a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b58a8:	000b9228 	.word	0x000b9228
   b58ac:	000b9340 	.word	0x000b9340

000b58b0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   b58b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   b58b2:	460f      	mov	r7, r1
   b58b4:	b085      	sub	sp, #20
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b58b6:	491d      	ldr	r1, [pc, #116]	; (b592c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x7c>)
            Print *stream, const JSONValue &params) {
   b58b8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b58ba:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   b58bc:	4616      	mov	r6, r2
   b58be:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b58c0:	f001 fc7d 	bl	b71be <strcmp>
   b58c4:	b9c0      	cbnz	r0, b58f8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x48>
        if (!stream) {
   b58c6:	b1a4      	cbz	r4, b58f2 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   b58c8:	4629      	mov	r1, r5
   b58ca:	a801      	add	r0, sp, #4
   b58cc:	f7ff fcbc 	bl	b5248 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   b58d0:	4917      	ldr	r1, [pc, #92]	; (b5930 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   b58d2:	2024      	movs	r0, #36	; 0x24
   b58d4:	f000 ff16 	bl	b6704 <_ZnwjRKSt9nothrow_t>
   b58d8:	4605      	mov	r5, r0
   b58da:	b130      	cbz	r0, b58ea <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
    using StreamLogHandler::StreamLogHandler;
   b58dc:	ab01      	add	r3, sp, #4
   b58de:	4632      	mov	r2, r6
   b58e0:	4621      	mov	r1, r4
   b58e2:	f7ff ffbf 	bl	b5864 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b58e6:	4b13      	ldr	r3, [pc, #76]	; (b5934 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x84>)
   b58e8:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   b58ea:	a801      	add	r0, sp, #4
   b58ec:	f7fe fcd5 	bl	b429a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b58f0:	462c      	mov	r4, r5
}
   b58f2:	4620      	mov	r0, r4
   b58f4:	b005      	add	sp, #20
   b58f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   b58f8:	490f      	ldr	r1, [pc, #60]	; (b5938 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x88>)
   b58fa:	4638      	mov	r0, r7
   b58fc:	f001 fc5f 	bl	b71be <strcmp>
   b5900:	b990      	cbnz	r0, b5928 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x78>
        if (!stream) {
   b5902:	2c00      	cmp	r4, #0
   b5904:	d0f5      	beq.n	b58f2 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   b5906:	4629      	mov	r1, r5
   b5908:	a801      	add	r0, sp, #4
   b590a:	f7ff fc9d 	bl	b5248 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   b590e:	4908      	ldr	r1, [pc, #32]	; (b5930 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   b5910:	2024      	movs	r0, #36	; 0x24
   b5912:	f000 fef7 	bl	b6704 <_ZnwjRKSt9nothrow_t>
   b5916:	4605      	mov	r5, r0
   b5918:	2800      	cmp	r0, #0
   b591a:	d0e6      	beq.n	b58ea <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
   b591c:	ab01      	add	r3, sp, #4
   b591e:	4632      	mov	r2, r6
   b5920:	4621      	mov	r1, r4
   b5922:	f7ff ff9f 	bl	b5864 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b5926:	e7e0      	b.n	b58ea <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
            return nullptr; // Output stream is not specified
   b5928:	2400      	movs	r4, #0
   b592a:	e7e2      	b.n	b58f2 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
   b592c:	000b92c0 	.word	0x000b92c0
   b5930:	000b949c 	.word	0x000b949c
   b5934:	000b9358 	.word	0x000b9358
   b5938:	000b92c4 	.word	0x000b92c4

000b593c <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   b593c:	4b01      	ldr	r3, [pc, #4]	; (b5944 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b593e:	4a02      	ldr	r2, [pc, #8]	; (b5948 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b5940:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b5942:	4770      	bx	lr
   b5944:	2003e6c0 	.word	0x2003e6c0
   b5948:	000b92d5 	.word	0x000b92d5

000b594c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b594c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b5950:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   b5952:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b5956:	4604      	mov	r4, r0
   b5958:	460e      	mov	r6, r1
   b595a:	4617      	mov	r7, r2
   b595c:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   b595e:	f000 fd91 	bl	b6484 <_Z16_fetch_usbserialv>
   b5962:	4581      	cmp	r9, r0
   b5964:	d04c      	beq.n	b5a00 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   b5966:	792b      	ldrb	r3, [r5, #4]
   b5968:	0719      	lsls	r1, r3, #28
   b596a:	d504      	bpl.n	b5976 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   b596c:	696a      	ldr	r2, [r5, #20]
   b596e:	4954      	ldr	r1, [pc, #336]	; (b5ac0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   b5970:	4620      	mov	r0, r4
   b5972:	f7ff fa8d 	bl	b4e90 <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   b5976:	f1b8 0f00 	cmp.w	r8, #0
   b597a:	d00d      	beq.n	b5998 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   b597c:	215b      	movs	r1, #91	; 0x5b
   b597e:	4620      	mov	r0, r4
   b5980:	f7ff fa7a 	bl	b4e78 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   b5984:	4641      	mov	r1, r8
   b5986:	4620      	mov	r0, r4
   b5988:	f7ff fa67 	bl	b4e5a <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   b598c:	6823      	ldr	r3, [r4, #0]
   b598e:	494d      	ldr	r1, [pc, #308]	; (b5ac4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   b5990:	68db      	ldr	r3, [r3, #12]
   b5992:	2202      	movs	r2, #2
   b5994:	4620      	mov	r0, r4
   b5996:	4798      	blx	r3
    if (attr.has_file) {
   b5998:	792b      	ldrb	r3, [r5, #4]
   b599a:	07da      	lsls	r2, r3, #31
   b599c:	d523      	bpl.n	b59e6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   b599e:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   b59a2:	212f      	movs	r1, #47	; 0x2f
   b59a4:	4640      	mov	r0, r8
   b59a6:	f001 fc38 	bl	b721a <strrchr>
    if (s1) {
   b59aa:	b108      	cbz	r0, b59b0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   b59ac:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   b59b0:	4641      	mov	r1, r8
   b59b2:	4620      	mov	r0, r4
   b59b4:	f7ff fa51 	bl	b4e5a <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   b59b8:	792b      	ldrb	r3, [r5, #4]
   b59ba:	079b      	lsls	r3, r3, #30
   b59bc:	d508      	bpl.n	b59d0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   b59be:	213a      	movs	r1, #58	; 0x3a
   b59c0:	4620      	mov	r0, r4
   b59c2:	f7ff fa59 	bl	b4e78 <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   b59c6:	68ea      	ldr	r2, [r5, #12]
   b59c8:	493f      	ldr	r1, [pc, #252]	; (b5ac8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   b59ca:	4620      	mov	r0, r4
   b59cc:	f7ff fa60 	bl	b4e90 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   b59d0:	792a      	ldrb	r2, [r5, #4]
            write(", ", 2);
   b59d2:	6823      	ldr	r3, [r4, #0]
        if (attr.has_function) {
   b59d4:	f012 0f04 	tst.w	r2, #4
            write(", ", 2);
   b59d8:	68db      	ldr	r3, [r3, #12]
   b59da:	bf14      	ite	ne
   b59dc:	493b      	ldrne	r1, [pc, #236]	; (b5acc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   b59de:	493c      	ldreq	r1, [pc, #240]	; (b5ad0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   b59e0:	2202      	movs	r2, #2
            write(": ", 2);
   b59e2:	4620      	mov	r0, r4
   b59e4:	4798      	blx	r3
    if (attr.has_function) {
   b59e6:	792b      	ldrb	r3, [r5, #4]
   b59e8:	0758      	lsls	r0, r3, #29
   b59ea:	d51d      	bpl.n	b5a28 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   b59ec:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   b59ee:	460b      	mov	r3, r1
   b59f0:	461a      	mov	r2, r3
    for (; *s; ++s) {
   b59f2:	f813 0b01 	ldrb.w	r0, [r3], #1
   b59f6:	b160      	cbz	r0, b5a12 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   b59f8:	2820      	cmp	r0, #32
   b59fa:	d108      	bne.n	b5a0e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   b59fc:	4619      	mov	r1, r3
   b59fe:	e7f7      	b.n	b59f0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   b5a00:	4834      	ldr	r0, [pc, #208]	; (b5ad4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   b5a02:	f000 f966 	bl	b5cd2 <_ZN5spark12NetworkClass9listeningEv>
   b5a06:	2800      	cmp	r0, #0
   b5a08:	d0ad      	beq.n	b5966 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   b5a0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   b5a0e:	2828      	cmp	r0, #40	; 0x28
   b5a10:	d1ee      	bne.n	b59f0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   b5a12:	6823      	ldr	r3, [r4, #0]
   b5a14:	1a52      	subs	r2, r2, r1
   b5a16:	68db      	ldr	r3, [r3, #12]
   b5a18:	4620      	mov	r0, r4
   b5a1a:	4798      	blx	r3
        write("(): ", 4);
   b5a1c:	6823      	ldr	r3, [r4, #0]
   b5a1e:	492e      	ldr	r1, [pc, #184]	; (b5ad8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   b5a20:	68db      	ldr	r3, [r3, #12]
   b5a22:	2204      	movs	r2, #4
   b5a24:	4620      	mov	r0, r4
   b5a26:	4798      	blx	r3
    return log_level_name(level, nullptr);
   b5a28:	2100      	movs	r1, #0
   b5a2a:	4638      	mov	r0, r7
   b5a2c:	f7fe fdf2 	bl	b4614 <log_level_name>
   b5a30:	4601      	mov	r1, r0
    write(s);
   b5a32:	4620      	mov	r0, r4
   b5a34:	f7ff fa11 	bl	b4e5a <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   b5a38:	6823      	ldr	r3, [r4, #0]
   b5a3a:	4925      	ldr	r1, [pc, #148]	; (b5ad0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   b5a3c:	68db      	ldr	r3, [r3, #12]
   b5a3e:	2202      	movs	r2, #2
   b5a40:	4620      	mov	r0, r4
   b5a42:	4798      	blx	r3
    if (msg) {
   b5a44:	b11e      	cbz	r6, b5a4e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   b5a46:	4631      	mov	r1, r6
   b5a48:	4620      	mov	r0, r4
   b5a4a:	f7ff fa06 	bl	b4e5a <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   b5a4e:	792b      	ldrb	r3, [r5, #4]
   b5a50:	f013 0f30 	tst.w	r3, #48	; 0x30
   b5a54:	d02c      	beq.n	b5ab0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   b5a56:	6823      	ldr	r3, [r4, #0]
   b5a58:	4920      	ldr	r1, [pc, #128]	; (b5adc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   b5a5a:	68db      	ldr	r3, [r3, #12]
   b5a5c:	2202      	movs	r2, #2
   b5a5e:	4620      	mov	r0, r4
   b5a60:	4798      	blx	r3
        if (attr.has_code) {
   b5a62:	792b      	ldrb	r3, [r5, #4]
   b5a64:	06d9      	lsls	r1, r3, #27
   b5a66:	d50a      	bpl.n	b5a7e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   b5a68:	6823      	ldr	r3, [r4, #0]
   b5a6a:	491d      	ldr	r1, [pc, #116]	; (b5ae0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   b5a6c:	68db      	ldr	r3, [r3, #12]
   b5a6e:	2207      	movs	r2, #7
   b5a70:	4620      	mov	r0, r4
   b5a72:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   b5a74:	69aa      	ldr	r2, [r5, #24]
   b5a76:	491b      	ldr	r1, [pc, #108]	; (b5ae4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   b5a78:	4620      	mov	r0, r4
   b5a7a:	f7ff fa09 	bl	b4e90 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   b5a7e:	792b      	ldrb	r3, [r5, #4]
   b5a80:	069a      	lsls	r2, r3, #26
   b5a82:	d511      	bpl.n	b5aa8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   b5a84:	06db      	lsls	r3, r3, #27
   b5a86:	d505      	bpl.n	b5a94 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   b5a88:	6823      	ldr	r3, [r4, #0]
   b5a8a:	4910      	ldr	r1, [pc, #64]	; (b5acc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   b5a8c:	68db      	ldr	r3, [r3, #12]
   b5a8e:	2202      	movs	r2, #2
   b5a90:	4620      	mov	r0, r4
   b5a92:	4798      	blx	r3
            write("details = ", 10);
   b5a94:	6823      	ldr	r3, [r4, #0]
   b5a96:	4914      	ldr	r1, [pc, #80]	; (b5ae8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   b5a98:	68db      	ldr	r3, [r3, #12]
   b5a9a:	4620      	mov	r0, r4
   b5a9c:	220a      	movs	r2, #10
   b5a9e:	4798      	blx	r3
            write(attr.details);
   b5aa0:	69e9      	ldr	r1, [r5, #28]
   b5aa2:	4620      	mov	r0, r4
   b5aa4:	f7ff f9d9 	bl	b4e5a <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   b5aa8:	215d      	movs	r1, #93	; 0x5d
   b5aaa:	4620      	mov	r0, r4
   b5aac:	f7ff f9e4 	bl	b4e78 <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   b5ab0:	6823      	ldr	r3, [r4, #0]
   b5ab2:	490e      	ldr	r1, [pc, #56]	; (b5aec <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   b5ab4:	68db      	ldr	r3, [r3, #12]
   b5ab6:	4620      	mov	r0, r4
   b5ab8:	2202      	movs	r2, #2
}
   b5aba:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   b5abe:	4718      	bx	r3
   b5ac0:	000b92d9 	.word	0x000b92d9
   b5ac4:	000b92e0 	.word	0x000b92e0
   b5ac8:	000b92a0 	.word	0x000b92a0
   b5acc:	000b92e3 	.word	0x000b92e3
   b5ad0:	000b92e8 	.word	0x000b92e8
   b5ad4:	2003e6ec 	.word	0x2003e6ec
   b5ad8:	000b92e6 	.word	0x000b92e6
   b5adc:	000b92eb 	.word	0x000b92eb
   b5ae0:	000b92ee 	.word	0x000b92ee
   b5ae4:	000b92f6 	.word	0x000b92f6
   b5ae8:	000b92f9 	.word	0x000b92f9
   b5aec:	000b9304 	.word	0x000b9304

000b5af0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b5af0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b5af4:	b085      	sub	sp, #20
    return stream_;
   b5af6:	f8d0 9020 	ldr.w	r9, [r0, #32]
   b5afa:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   b5afc:	4605      	mov	r5, r0
   b5afe:	460f      	mov	r7, r1
   b5b00:	4690      	mov	r8, r2
   b5b02:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   b5b04:	f000 fcbe 	bl	b6484 <_Z16_fetch_usbserialv>
   b5b08:	4581      	cmp	r9, r0
   b5b0a:	d105      	bne.n	b5b18 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   b5b0c:	4849      	ldr	r0, [pc, #292]	; (b5c34 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   b5b0e:	f000 f8e0 	bl	b5cd2 <_ZN5spark12NetworkClass9listeningEv>
   b5b12:	2800      	cmp	r0, #0
   b5b14:	f040 808a 	bne.w	b5c2c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
   b5b18:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
   b5b1a:	4a47      	ldr	r2, [pc, #284]	; (b5c38 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   b5b1c:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   b5b1e:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   b5b22:	a801      	add	r0, sp, #4
        strm_(stream) {
   b5b24:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
   b5b26:	f88d 9008 	strb.w	r9, [sp, #8]
   b5b2a:	f7ff f878 	bl	b4c1e <_ZN5spark10JSONWriter11beginObjectEv>
    return log_level_name(level, nullptr);
   b5b2e:	4649      	mov	r1, r9
   b5b30:	4640      	mov	r0, r8
   b5b32:	f7fe fd6f 	bl	b4614 <log_level_name>
    json.name("l", 1).value(s);
   b5b36:	4941      	ldr	r1, [pc, #260]	; (b5c3c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   b5b38:	4680      	mov	r8, r0
   b5b3a:	2201      	movs	r2, #1
   b5b3c:	a801      	add	r0, sp, #4
   b5b3e:	f7ff f8fd 	bl	b4d3c <_ZN5spark10JSONWriter4nameEPKcj>
   b5b42:	4641      	mov	r1, r8
   b5b44:	f7ff f97b 	bl	b4e3e <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   b5b48:	b13f      	cbz	r7, b5b5a <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   b5b4a:	493d      	ldr	r1, [pc, #244]	; (b5c40 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   b5b4c:	2201      	movs	r2, #1
   b5b4e:	a801      	add	r0, sp, #4
   b5b50:	f7ff f8f4 	bl	b4d3c <_ZN5spark10JSONWriter4nameEPKcj>
   b5b54:	4639      	mov	r1, r7
   b5b56:	f7ff f972 	bl	b4e3e <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   b5b5a:	b13e      	cbz	r6, b5b6c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   b5b5c:	4939      	ldr	r1, [pc, #228]	; (b5c44 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   b5b5e:	2201      	movs	r2, #1
   b5b60:	a801      	add	r0, sp, #4
   b5b62:	f7ff f8eb 	bl	b4d3c <_ZN5spark10JSONWriter4nameEPKcj>
   b5b66:	4631      	mov	r1, r6
   b5b68:	f7ff f969 	bl	b4e3e <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   b5b6c:	7923      	ldrb	r3, [r4, #4]
   b5b6e:	07df      	lsls	r7, r3, #31
   b5b70:	d50e      	bpl.n	b5b90 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   b5b72:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   b5b74:	212f      	movs	r1, #47	; 0x2f
   b5b76:	4630      	mov	r0, r6
   b5b78:	f001 fb4f 	bl	b721a <strrchr>
    if (s1) {
   b5b7c:	b100      	cbz	r0, b5b80 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   b5b7e:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   b5b80:	4931      	ldr	r1, [pc, #196]	; (b5c48 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   b5b82:	2201      	movs	r2, #1
   b5b84:	a801      	add	r0, sp, #4
   b5b86:	f7ff f8d9 	bl	b4d3c <_ZN5spark10JSONWriter4nameEPKcj>
   b5b8a:	4631      	mov	r1, r6
   b5b8c:	f7ff f957 	bl	b4e3e <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   b5b90:	7923      	ldrb	r3, [r4, #4]
   b5b92:	079e      	lsls	r6, r3, #30
   b5b94:	d507      	bpl.n	b5ba6 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   b5b96:	492d      	ldr	r1, [pc, #180]	; (b5c4c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   b5b98:	2202      	movs	r2, #2
   b5b9a:	a801      	add	r0, sp, #4
   b5b9c:	f7ff f8ce 	bl	b4d3c <_ZN5spark10JSONWriter4nameEPKcj>
   b5ba0:	68e1      	ldr	r1, [r4, #12]
   b5ba2:	f7ff f849 	bl	b4c38 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   b5ba6:	7923      	ldrb	r3, [r4, #4]
   b5ba8:	0758      	lsls	r0, r3, #29
   b5baa:	d514      	bpl.n	b5bd6 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   b5bac:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   b5bae:	4633      	mov	r3, r6
   b5bb0:	461f      	mov	r7, r3
    for (; *s; ++s) {
   b5bb2:	f813 2b01 	ldrb.w	r2, [r3], #1
   b5bb6:	b12a      	cbz	r2, b5bc4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
   b5bb8:	2a20      	cmp	r2, #32
   b5bba:	d101      	bne.n	b5bc0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   b5bbc:	461e      	mov	r6, r3
   b5bbe:	e7f7      	b.n	b5bb0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
   b5bc0:	2a28      	cmp	r2, #40	; 0x28
   b5bc2:	d1f5      	bne.n	b5bb0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
   b5bc4:	4922      	ldr	r1, [pc, #136]	; (b5c50 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   b5bc6:	2202      	movs	r2, #2
   b5bc8:	a801      	add	r0, sp, #4
   b5bca:	f7ff f8b7 	bl	b4d3c <_ZN5spark10JSONWriter4nameEPKcj>
   b5bce:	1bba      	subs	r2, r7, r6
   b5bd0:	4631      	mov	r1, r6
   b5bd2:	f7ff f8c3 	bl	b4d5c <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   b5bd6:	7923      	ldrb	r3, [r4, #4]
   b5bd8:	0719      	lsls	r1, r3, #28
   b5bda:	d507      	bpl.n	b5bec <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
   b5bdc:	491d      	ldr	r1, [pc, #116]	; (b5c54 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   b5bde:	2201      	movs	r2, #1
   b5be0:	a801      	add	r0, sp, #4
   b5be2:	f7ff f8ab 	bl	b4d3c <_ZN5spark10JSONWriter4nameEPKcj>
   b5be6:	6961      	ldr	r1, [r4, #20]
   b5be8:	f7ff f838 	bl	b4c5c <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   b5bec:	7923      	ldrb	r3, [r4, #4]
   b5bee:	06da      	lsls	r2, r3, #27
   b5bf0:	d508      	bpl.n	b5c04 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   b5bf2:	2204      	movs	r2, #4
   b5bf4:	4918      	ldr	r1, [pc, #96]	; (b5c58 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   b5bf6:	eb0d 0002 	add.w	r0, sp, r2
   b5bfa:	f7ff f89f 	bl	b4d3c <_ZN5spark10JSONWriter4nameEPKcj>
   b5bfe:	69a1      	ldr	r1, [r4, #24]
   b5c00:	f7ff f81a 	bl	b4c38 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   b5c04:	7923      	ldrb	r3, [r4, #4]
   b5c06:	069b      	lsls	r3, r3, #26
   b5c08:	d507      	bpl.n	b5c1a <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   b5c0a:	4914      	ldr	r1, [pc, #80]	; (b5c5c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   b5c0c:	2206      	movs	r2, #6
   b5c0e:	a801      	add	r0, sp, #4
   b5c10:	f7ff f894 	bl	b4d3c <_ZN5spark10JSONWriter4nameEPKcj>
   b5c14:	69e1      	ldr	r1, [r4, #28]
   b5c16:	f7ff f912 	bl	b4e3e <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   b5c1a:	a801      	add	r0, sp, #4
   b5c1c:	f7fe ffe9 	bl	b4bf2 <_ZN5spark10JSONWriter9endObjectEv>
    return stream_;
   b5c20:	6a28      	ldr	r0, [r5, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
   b5c22:	490f      	ldr	r1, [pc, #60]	; (b5c60 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   b5c24:	6803      	ldr	r3, [r0, #0]
   b5c26:	2202      	movs	r2, #2
   b5c28:	68db      	ldr	r3, [r3, #12]
   b5c2a:	4798      	blx	r3
}
   b5c2c:	b005      	add	sp, #20
   b5c2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b5c32:	bf00      	nop
   b5c34:	2003e6ec 	.word	0x2003e6ec
   b5c38:	000b9328 	.word	0x000b9328
   b5c3c:	000b92b6 	.word	0x000b92b6
   b5c40:	000b9307 	.word	0x000b9307
   b5c44:	000b9748 	.word	0x000b9748
   b5c48:	000b93da 	.word	0x000b93da
   b5c4c:	000b9309 	.word	0x000b9309
   b5c50:	000b930c 	.word	0x000b930c
   b5c54:	000b930f 	.word	0x000b930f
   b5c58:	000b9311 	.word	0x000b9311
   b5c5c:	000b9316 	.word	0x000b9316
   b5c60:	000b9304 	.word	0x000b9304

000b5c64 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b5c64:	2300      	movs	r3, #0
   b5c66:	6840      	ldr	r0, [r0, #4]
   b5c68:	461a      	mov	r2, r3
   b5c6a:	f7fe bd17 	b.w	b469c <network_connect>

000b5c6e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b5c6e:	6840      	ldr	r0, [r0, #4]
   b5c70:	2200      	movs	r2, #0
   b5c72:	2102      	movs	r1, #2
   b5c74:	f7fe bd22 	b.w	b46bc <network_disconnect>

000b5c78 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b5c78:	2200      	movs	r2, #0
   b5c7a:	6840      	ldr	r0, [r0, #4]
   b5c7c:	4611      	mov	r1, r2
   b5c7e:	f7fe bd15 	b.w	b46ac <network_connecting>

000b5c82 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b5c82:	2200      	movs	r2, #0
   b5c84:	6840      	ldr	r0, [r0, #4]
   b5c86:	4611      	mov	r1, r2
   b5c88:	f7fe bd20 	b.w	b46cc <network_ready>

000b5c8c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b5c8c:	2300      	movs	r3, #0
   b5c8e:	6840      	ldr	r0, [r0, #4]
   b5c90:	461a      	mov	r2, r3
   b5c92:	4619      	mov	r1, r3
   b5c94:	f7fe bd22 	b.w	b46dc <network_on>

000b5c98 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b5c98:	2300      	movs	r3, #0
   b5c9a:	6840      	ldr	r0, [r0, #4]
   b5c9c:	461a      	mov	r2, r3
   b5c9e:	4619      	mov	r1, r3
   b5ca0:	f7fe bd24 	b.w	b46ec <network_off>

000b5ca4 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b5ca4:	6840      	ldr	r0, [r0, #4]
   b5ca6:	2100      	movs	r1, #0
   b5ca8:	f7fe bd48 	b.w	b473c <network_is_on>

000b5cac <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b5cac:	6840      	ldr	r0, [r0, #4]
   b5cae:	2100      	movs	r1, #0
   b5cb0:	f7fe bd4c 	b.w	b474c <network_is_off>

000b5cb4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b5cb4:	6840      	ldr	r0, [r0, #4]
   b5cb6:	2200      	movs	r2, #0
   b5cb8:	f081 0101 	eor.w	r1, r1, #1
   b5cbc:	f7fe bd1e 	b.w	b46fc <network_listen>

000b5cc0 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b5cc0:	6840      	ldr	r0, [r0, #4]
   b5cc2:	2200      	movs	r2, #0
   b5cc4:	f7fe bd2a 	b.w	b471c <network_set_listen_timeout>

000b5cc8 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b5cc8:	2200      	movs	r2, #0
   b5cca:	6840      	ldr	r0, [r0, #4]
   b5ccc:	4611      	mov	r1, r2
   b5cce:	f7fe bd2d 	b.w	b472c <network_get_listen_timeout>

000b5cd2 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b5cd2:	2200      	movs	r2, #0
   b5cd4:	6840      	ldr	r0, [r0, #4]
   b5cd6:	4611      	mov	r1, r2
   b5cd8:	f7fe bd18 	b.w	b470c <network_listening>

000b5cdc <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b5cdc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b5ce0:	b095      	sub	sp, #84	; 0x54
   b5ce2:	4614      	mov	r4, r2
   b5ce4:	460d      	mov	r5, r1
   b5ce6:	4607      	mov	r7, r0
    IPAddress addr;
   b5ce8:	f7fe fe32 	bl	b4950 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b5cec:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b5cee:	221c      	movs	r2, #28
   b5cf0:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b5cf2:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b5cf4:	f001 fa16 	bl	b7124 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b5cf8:	2340      	movs	r3, #64	; 0x40
   b5cfa:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b5cfc:	4620      	mov	r0, r4
   b5cfe:	466b      	mov	r3, sp
   b5d00:	aa0c      	add	r2, sp, #48	; 0x30
   b5d02:	2100      	movs	r1, #0
   b5d04:	f7fe fbe6 	bl	b44d4 <netdb_getaddrinfo>
    if (!r) {
   b5d08:	4604      	mov	r4, r0
   b5d0a:	2800      	cmp	r0, #0
   b5d0c:	d14b      	bne.n	b5da6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b5d0e:	4602      	mov	r2, r0
   b5d10:	2101      	movs	r1, #1
   b5d12:	6868      	ldr	r0, [r5, #4]
   b5d14:	f7fe fcda 	bl	b46cc <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5d18:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b5d1a:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5d1c:	4622      	mov	r2, r4
   b5d1e:	6868      	ldr	r0, [r5, #4]
   b5d20:	f7fe fcd4 	bl	b46cc <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5d24:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5d26:	4681      	mov	r9, r0
        bool ok = false;
   b5d28:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5d2a:	2e00      	cmp	r6, #0
   b5d2c:	d03b      	beq.n	b5da6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b5d2e:	2900      	cmp	r1, #0
   b5d30:	d139      	bne.n	b5da6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b5d32:	6873      	ldr	r3, [r6, #4]
   b5d34:	2b02      	cmp	r3, #2
   b5d36:	d003      	beq.n	b5d40 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b5d38:	2b0a      	cmp	r3, #10
   b5d3a:	d011      	beq.n	b5d60 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5d3c:	69f6      	ldr	r6, [r6, #28]
   b5d3e:	e7f4      	b.n	b5d2a <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b5d40:	f1b8 0f00 	cmp.w	r8, #0
   b5d44:	d0fa      	beq.n	b5d3c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b5d46:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b5d48:	a806      	add	r0, sp, #24
   b5d4a:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b5d4c:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b5d4e:	f7fe fe2d 	bl	b49ac <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b5d52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5d54:	1d3c      	adds	r4, r7, #4
   b5d56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5d58:	682b      	ldr	r3, [r5, #0]
   b5d5a:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b5d5c:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b5d5e:	e7ed      	b.n	b5d3c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b5d60:	f1b9 0f00 	cmp.w	r9, #0
   b5d64:	d0ea      	beq.n	b5d3c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b5d66:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b5d68:	2210      	movs	r2, #16
   b5d6a:	a801      	add	r0, sp, #4
   b5d6c:	f001 f9da 	bl	b7124 <memset>
                    a.v = 6;
   b5d70:	2306      	movs	r3, #6
   b5d72:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b5d76:	ad01      	add	r5, sp, #4
   b5d78:	f104 0308 	add.w	r3, r4, #8
   b5d7c:	3418      	adds	r4, #24
   b5d7e:	6818      	ldr	r0, [r3, #0]
   b5d80:	6859      	ldr	r1, [r3, #4]
   b5d82:	462a      	mov	r2, r5
   b5d84:	c203      	stmia	r2!, {r0, r1}
   b5d86:	3308      	adds	r3, #8
   b5d88:	42a3      	cmp	r3, r4
   b5d8a:	4615      	mov	r5, r2
   b5d8c:	d1f7      	bne.n	b5d7e <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b5d8e:	a901      	add	r1, sp, #4
   b5d90:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b5d92:	ad07      	add	r5, sp, #28
   b5d94:	f7fe fdea 	bl	b496c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b5d98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5d9a:	1d3c      	adds	r4, r7, #4
   b5d9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5d9e:	682b      	ldr	r3, [r5, #0]
   b5da0:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b5da2:	4649      	mov	r1, r9
   b5da4:	e7ca      	b.n	b5d3c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b5da6:	9800      	ldr	r0, [sp, #0]
   b5da8:	f7fe fb8c 	bl	b44c4 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b5dac:	4638      	mov	r0, r7
   b5dae:	b015      	add	sp, #84	; 0x54
   b5db0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b5db4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b5db4:	4b02      	ldr	r3, [pc, #8]	; (b5dc0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b5db6:	4a03      	ldr	r2, [pc, #12]	; (b5dc4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b5db8:	601a      	str	r2, [r3, #0]
   b5dba:	2200      	movs	r2, #0
   b5dbc:	605a      	str	r2, [r3, #4]

} // spark
   b5dbe:	4770      	bx	lr
   b5dc0:	2003e6ec 	.word	0x2003e6ec
   b5dc4:	000b93a0 	.word	0x000b93a0

000b5dc8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b5dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5dca:	4606      	mov	r6, r0
   b5dcc:	460d      	mov	r5, r1
  size_t n = 0;
   b5dce:	188f      	adds	r7, r1, r2
   b5dd0:	2400      	movs	r4, #0
  while (size--) {
   b5dd2:	42bd      	cmp	r5, r7
   b5dd4:	d00c      	beq.n	b5df0 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b5dd6:	6833      	ldr	r3, [r6, #0]
   b5dd8:	f815 1b01 	ldrb.w	r1, [r5], #1
   b5ddc:	689b      	ldr	r3, [r3, #8]
   b5dde:	4630      	mov	r0, r6
   b5de0:	4798      	blx	r3
     if (chunk>=0)
   b5de2:	1e03      	subs	r3, r0, #0
   b5de4:	db01      	blt.n	b5dea <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b5de6:	441c      	add	r4, r3
  while (size--) {
   b5de8:	e7f3      	b.n	b5dd2 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b5dea:	2c00      	cmp	r4, #0
   b5dec:	bf08      	it	eq
   b5dee:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b5df0:	4620      	mov	r0, r4
   b5df2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5df4 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b5df4:	b513      	push	{r0, r1, r4, lr}
   b5df6:	4604      	mov	r4, r0
    }
   b5df8:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b5dfa:	b159      	cbz	r1, b5e14 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b5dfc:	9101      	str	r1, [sp, #4]
   b5dfe:	f001 f9f0 	bl	b71e2 <strlen>
   b5e02:	6823      	ldr	r3, [r4, #0]
   b5e04:	9901      	ldr	r1, [sp, #4]
   b5e06:	68db      	ldr	r3, [r3, #12]
   b5e08:	4602      	mov	r2, r0
   b5e0a:	4620      	mov	r0, r4
    }
   b5e0c:	b002      	add	sp, #8
   b5e0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b5e12:	4718      	bx	r3
    }
   b5e14:	b002      	add	sp, #8
   b5e16:	bd10      	pop	{r4, pc}

000b5e18 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b5e18:	b508      	push	{r3, lr}
  return write(str);
   b5e1a:	f7ff ffeb 	bl	b5df4 <_ZN5Print5writeEPKc>
}
   b5e1e:	bd08      	pop	{r3, pc}

000b5e20 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b5e20:	6803      	ldr	r3, [r0, #0]
   b5e22:	689b      	ldr	r3, [r3, #8]
   b5e24:	4718      	bx	r3

000b5e26 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b5e26:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b5e28:	210d      	movs	r1, #13
{
   b5e2a:	4605      	mov	r5, r0
  size_t n = print('\r');
   b5e2c:	f7ff fff8 	bl	b5e20 <_ZN5Print5printEc>
  n += print('\n');
   b5e30:	210a      	movs	r1, #10
  size_t n = print('\r');
   b5e32:	4604      	mov	r4, r0
  n += print('\n');
   b5e34:	4628      	mov	r0, r5
   b5e36:	f7ff fff3 	bl	b5e20 <_ZN5Print5printEc>
  return n;
}
   b5e3a:	4420      	add	r0, r4
   b5e3c:	bd38      	pop	{r3, r4, r5, pc}

000b5e3e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b5e3e:	b538      	push	{r3, r4, r5, lr}
   b5e40:	4605      	mov	r5, r0
  return write(str);
   b5e42:	f7ff ffd7 	bl	b5df4 <_ZN5Print5writeEPKc>
   b5e46:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b5e48:	4628      	mov	r0, r5
   b5e4a:	f7ff ffec 	bl	b5e26 <_ZN5Print7printlnEv>
  return n;
}
   b5e4e:	4420      	add	r0, r4
   b5e50:	bd38      	pop	{r3, r4, r5, pc}

000b5e52 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b5e52:	b530      	push	{r4, r5, lr}
   b5e54:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b5e56:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b5e58:	2a01      	cmp	r2, #1
  *str = '\0';
   b5e5a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b5e5e:	bf98      	it	ls
   b5e60:	220a      	movls	r2, #10
   b5e62:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b5e64:	460d      	mov	r5, r1
   b5e66:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b5e6a:	fb01 5312 	mls	r3, r1, r2, r5
   b5e6e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b5e72:	2b09      	cmp	r3, #9
   b5e74:	bf94      	ite	ls
   b5e76:	3330      	addls	r3, #48	; 0x30
   b5e78:	3337      	addhi	r3, #55	; 0x37
   b5e7a:	b2db      	uxtb	r3, r3
  } while(n);
   b5e7c:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b5e7e:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b5e82:	d9ef      	bls.n	b5e64 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b5e84:	4621      	mov	r1, r4
   b5e86:	f7ff ffb5 	bl	b5df4 <_ZN5Print5writeEPKc>
}
   b5e8a:	b00b      	add	sp, #44	; 0x2c
   b5e8c:	bd30      	pop	{r4, r5, pc}
	...

000b5e90 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   b5e90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5e94:	ec55 4b10 	vmov	r4, r5, d0
   b5e98:	4606      	mov	r6, r0
   b5e9a:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   b5e9c:	ee10 2a10 	vmov	r2, s0
   b5ea0:	ee10 0a10 	vmov	r0, s0
   b5ea4:	462b      	mov	r3, r5
   b5ea6:	4629      	mov	r1, r5
   b5ea8:	f001 f886 	bl	b6fb8 <__aeabi_dcmpun>
   b5eac:	b140      	cbz	r0, b5ec0 <_ZN5Print10printFloatEdh+0x30>
  return write(str);
   b5eae:	4953      	ldr	r1, [pc, #332]	; (b5ffc <_ZN5Print10printFloatEdh+0x16c>)
   b5eb0:	4630      	mov	r0, r6
   b5eb2:	f7ff ff9f 	bl	b5df4 <_ZN5Print5writeEPKc>
   b5eb6:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
   b5eb8:	4650      	mov	r0, sl
   b5eba:	b003      	add	sp, #12
   b5ebc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
   b5ec0:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
   b5ec4:	4b4e      	ldr	r3, [pc, #312]	; (b6000 <_ZN5Print10printFloatEdh+0x170>)
   b5ec6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b5eca:	4620      	mov	r0, r4
   b5ecc:	4649      	mov	r1, r9
   b5ece:	f001 f873 	bl	b6fb8 <__aeabi_dcmpun>
   b5ed2:	b948      	cbnz	r0, b5ee8 <_ZN5Print10printFloatEdh+0x58>
   b5ed4:	4b4a      	ldr	r3, [pc, #296]	; (b6000 <_ZN5Print10printFloatEdh+0x170>)
   b5ed6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b5eda:	4620      	mov	r0, r4
   b5edc:	4649      	mov	r1, r9
   b5ede:	f001 f84d 	bl	b6f7c <__aeabi_dcmple>
   b5ee2:	b908      	cbnz	r0, b5ee8 <_ZN5Print10printFloatEdh+0x58>
  return write(str);
   b5ee4:	4947      	ldr	r1, [pc, #284]	; (b6004 <_ZN5Print10printFloatEdh+0x174>)
   b5ee6:	e7e3      	b.n	b5eb0 <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   b5ee8:	4b47      	ldr	r3, [pc, #284]	; (b6008 <_ZN5Print10printFloatEdh+0x178>)
   b5eea:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   b5eee:	4620      	mov	r0, r4
   b5ef0:	4629      	mov	r1, r5
   b5ef2:	f001 f857 	bl	b6fa4 <__aeabi_dcmpgt>
   b5ef6:	b108      	cbz	r0, b5efc <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
   b5ef8:	4944      	ldr	r1, [pc, #272]	; (b600c <_ZN5Print10printFloatEdh+0x17c>)
   b5efa:	e7d9      	b.n	b5eb0 <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   b5efc:	4b44      	ldr	r3, [pc, #272]	; (b6010 <_ZN5Print10printFloatEdh+0x180>)
   b5efe:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   b5f02:	4620      	mov	r0, r4
   b5f04:	4629      	mov	r1, r5
   b5f06:	f001 f82f 	bl	b6f68 <__aeabi_dcmplt>
   b5f0a:	2800      	cmp	r0, #0
   b5f0c:	d1f4      	bne.n	b5ef8 <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
   b5f0e:	2200      	movs	r2, #0
   b5f10:	2300      	movs	r3, #0
   b5f12:	4620      	mov	r0, r4
   b5f14:	4629      	mov	r1, r5
   b5f16:	f001 f827 	bl	b6f68 <__aeabi_dcmplt>
   b5f1a:	b1d0      	cbz	r0, b5f52 <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
   b5f1c:	212d      	movs	r1, #45	; 0x2d
   b5f1e:	4630      	mov	r0, r6
   b5f20:	f7ff ff7e 	bl	b5e20 <_ZN5Print5printEc>
     number = -number;
   b5f24:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
   b5f28:	4682      	mov	sl, r0
     number = -number;
   b5f2a:	461d      	mov	r5, r3
  double rounding = 0.5;
   b5f2c:	4939      	ldr	r1, [pc, #228]	; (b6014 <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
   b5f2e:	f8df 90ec 	ldr.w	r9, [pc, #236]	; b601c <_ZN5Print10printFloatEdh+0x18c>
  size_t n = 0;
   b5f32:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
   b5f36:	2000      	movs	r0, #0
    rounding /= 10.0;
   b5f38:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i=0; i<digits; ++i)
   b5f3c:	fa5f f38b 	uxtb.w	r3, fp
   b5f40:	429f      	cmp	r7, r3
   b5f42:	d908      	bls.n	b5f56 <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
   b5f44:	4642      	mov	r2, r8
   b5f46:	464b      	mov	r3, r9
   b5f48:	f000 fec6 	bl	b6cd8 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
   b5f4c:	f10b 0b01 	add.w	fp, fp, #1
   b5f50:	e7f4      	b.n	b5f3c <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
   b5f52:	4682      	mov	sl, r0
   b5f54:	e7ea      	b.n	b5f2c <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
   b5f56:	4622      	mov	r2, r4
   b5f58:	462b      	mov	r3, r5
   b5f5a:	f000 fbdd 	bl	b6718 <__adddf3>
   b5f5e:	460d      	mov	r5, r1
   b5f60:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
   b5f62:	f001 f867 	bl	b7034 <__aeabi_d2uiz>
   b5f66:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
   b5f68:	f000 fd12 	bl	b6990 <__aeabi_ui2d>
   b5f6c:	4602      	mov	r2, r0
   b5f6e:	460b      	mov	r3, r1
   b5f70:	4620      	mov	r0, r4
   b5f72:	4629      	mov	r1, r5
   b5f74:	f000 fbce 	bl	b6714 <__aeabi_dsub>
        return printNumber(val, base) + t;
   b5f78:	220a      	movs	r2, #10
   b5f7a:	4604      	mov	r4, r0
   b5f7c:	460d      	mov	r5, r1
   b5f7e:	4630      	mov	r0, r6
   b5f80:	4641      	mov	r1, r8
   b5f82:	f7ff ff66 	bl	b5e52 <_ZN5Print11printNumberEmh>
  n += print(int_part);
   b5f86:	4482      	add	sl, r0
  if (digits > 0) {
   b5f88:	2f00      	cmp	r7, #0
   b5f8a:	d095      	beq.n	b5eb8 <_ZN5Print10printFloatEdh+0x28>
  return write(str);
   b5f8c:	4922      	ldr	r1, [pc, #136]	; (b6018 <_ZN5Print10printFloatEdh+0x188>)
    remainder *= 10.0;
   b5f8e:	f8df 908c 	ldr.w	r9, [pc, #140]	; b601c <_ZN5Print10printFloatEdh+0x18c>
  return write(str);
   b5f92:	4630      	mov	r0, r6
   b5f94:	f7ff ff2e 	bl	b5df4 <_ZN5Print5writeEPKc>
    remainder *= 10.0;
   b5f98:	f04f 0800 	mov.w	r8, #0
    n += print(".");
   b5f9c:	4482      	add	sl, r0
  while (digits-- > 0)
   b5f9e:	2f00      	cmp	r7, #0
   b5fa0:	d08a      	beq.n	b5eb8 <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
   b5fa2:	4642      	mov	r2, r8
   b5fa4:	464b      	mov	r3, r9
   b5fa6:	4620      	mov	r0, r4
   b5fa8:	4629      	mov	r1, r5
   b5faa:	f000 fd6b 	bl	b6a84 <__aeabi_dmul>
   b5fae:	4604      	mov	r4, r0
   b5fb0:	460d      	mov	r5, r1
    int toPrint = int(remainder);
   b5fb2:	f001 f817 	bl	b6fe4 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   b5fb6:	f1b0 0b00 	subs.w	fp, r0, #0
   b5fba:	da1c      	bge.n	b5ff6 <_ZN5Print10printFloatEdh+0x166>
            t = print('-');
   b5fbc:	212d      	movs	r1, #45	; 0x2d
   b5fbe:	4630      	mov	r0, r6
   b5fc0:	f7ff ff2e 	bl	b5e20 <_ZN5Print5printEc>
            val = -n;
   b5fc4:	f1cb 0100 	rsb	r1, fp, #0
            t = print('-');
   b5fc8:	4603      	mov	r3, r0
        return printNumber(val, base) + t;
   b5fca:	220a      	movs	r2, #10
   b5fcc:	4630      	mov	r0, r6
   b5fce:	9301      	str	r3, [sp, #4]
   b5fd0:	f7ff ff3f 	bl	b5e52 <_ZN5Print11printNumberEmh>
   b5fd4:	9b01      	ldr	r3, [sp, #4]
   b5fd6:	4418      	add	r0, r3
    n += print(toPrint);
   b5fd8:	4482      	add	sl, r0
    remainder -= toPrint;
   b5fda:	4658      	mov	r0, fp
   b5fdc:	f000 fce8 	bl	b69b0 <__aeabi_i2d>
   b5fe0:	4602      	mov	r2, r0
   b5fe2:	460b      	mov	r3, r1
   b5fe4:	4620      	mov	r0, r4
   b5fe6:	4629      	mov	r1, r5
   b5fe8:	f000 fb94 	bl	b6714 <__aeabi_dsub>
   b5fec:	3f01      	subs	r7, #1
   b5fee:	4604      	mov	r4, r0
   b5ff0:	460d      	mov	r5, r1
   b5ff2:	b2ff      	uxtb	r7, r7
  while (digits-- > 0)
   b5ff4:	e7d3      	b.n	b5f9e <_ZN5Print10printFloatEdh+0x10e>
            val = n;
   b5ff6:	4659      	mov	r1, fp
        size_t t = 0;
   b5ff8:	2300      	movs	r3, #0
   b5ffa:	e7e6      	b.n	b5fca <_ZN5Print10printFloatEdh+0x13a>
   b5ffc:	000b93d4 	.word	0x000b93d4
   b6000:	7fefffff 	.word	0x7fefffff
   b6004:	000b93d8 	.word	0x000b93d8
   b6008:	41efffff 	.word	0x41efffff
   b600c:	000b93dc 	.word	0x000b93dc
   b6010:	c1efffff 	.word	0xc1efffff
   b6014:	3fe00000 	.word	0x3fe00000
   b6018:	000b93e0 	.word	0x000b93e0
   b601c:	40240000 	.word	0x40240000

000b6020 <_ZN5Print5printEdi>:
  return printFloat(n, digits);
   b6020:	b2c9      	uxtb	r1, r1
   b6022:	f7ff bf35 	b.w	b5e90 <_ZN5Print10printFloatEdh>

000b6026 <_ZN5Print7vprintfEbPKcSt9__va_list>:

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b6026:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b602a:	b086      	sub	sp, #24
   b602c:	af00      	add	r7, sp, #0
   b602e:	4605      	mov	r5, r0
   b6030:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b6032:	1d38      	adds	r0, r7, #4
   b6034:	2114      	movs	r1, #20
{
   b6036:	4614      	mov	r4, r2
    va_copy(args2, args);
   b6038:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b603a:	f7fe fbaf 	bl	b479c <vsnprintf>

    if (n<bufsize)
   b603e:	2813      	cmp	r0, #19
   b6040:	d80e      	bhi.n	b6060 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b6042:	1d39      	adds	r1, r7, #4
   b6044:	4628      	mov	r0, r5
   b6046:	f7ff fed5 	bl	b5df4 <_ZN5Print5writeEPKc>
   b604a:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b604c:	b11e      	cbz	r6, b6056 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b604e:	4628      	mov	r0, r5
   b6050:	f7ff fee9 	bl	b5e26 <_ZN5Print7printlnEv>
   b6054:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b6056:	4620      	mov	r0, r4
   b6058:	3718      	adds	r7, #24
   b605a:	46bd      	mov	sp, r7
   b605c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b6060:	f100 0308 	add.w	r3, r0, #8
   b6064:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b6068:	46e8      	mov	r8, sp
        char bigger[n+1];
   b606a:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b606e:	4622      	mov	r2, r4
   b6070:	1c41      	adds	r1, r0, #1
   b6072:	683b      	ldr	r3, [r7, #0]
   b6074:	4668      	mov	r0, sp
   b6076:	f7fe fb91 	bl	b479c <vsnprintf>
  return write(str);
   b607a:	4669      	mov	r1, sp
   b607c:	4628      	mov	r0, r5
   b607e:	f7ff feb9 	bl	b5df4 <_ZN5Print5writeEPKc>
   b6082:	4604      	mov	r4, r0
   b6084:	46c5      	mov	sp, r8
   b6086:	e7e1      	b.n	b604c <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b6088 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b6088:	4b01      	ldr	r3, [pc, #4]	; (b6090 <_GLOBAL__sub_I_RGB+0x8>)
   b608a:	2200      	movs	r2, #0
   b608c:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b608e:	4770      	bx	lr
   b6090:	2003e6f4 	.word	0x2003e6f4

000b6094 <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   b6094:	b510      	push	{r4, lr}
   b6096:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b6098:	f7fe fa04 	bl	b44a4 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   b609c:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   b609e:	6823      	ldr	r3, [r4, #0]
   b60a0:	4620      	mov	r0, r4
   b60a2:	695b      	ldr	r3, [r3, #20]
   b60a4:	4798      	blx	r3
    if (c >= 0) return c;
   b60a6:	2800      	cmp	r0, #0
   b60a8:	da08      	bge.n	b60bc <_ZN6Stream9timedReadEv+0x28>
   b60aa:	f7fe f9fb 	bl	b44a4 <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
   b60ae:	68e3      	ldr	r3, [r4, #12]
   b60b0:	1ac0      	subs	r0, r0, r3
   b60b2:	68a3      	ldr	r3, [r4, #8]
   b60b4:	4298      	cmp	r0, r3
   b60b6:	d3f2      	bcc.n	b609e <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
   b60b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   b60bc:	bd10      	pop	{r4, pc}
	...

000b60c0 <_ZN6Stream15readStringUntilEc>:
  }
  return ret;
}

String Stream::readStringUntil(char terminator)
{
   b60c0:	b570      	push	{r4, r5, r6, lr}
   b60c2:	460d      	mov	r5, r1
  String ret;
   b60c4:	4909      	ldr	r1, [pc, #36]	; (b60ec <_ZN6Stream15readStringUntilEc+0x2c>)
{
   b60c6:	4604      	mov	r4, r0
   b60c8:	4616      	mov	r6, r2
  String ret;
   b60ca:	f000 f85c 	bl	b6186 <_ZN6StringC1EPK19__FlashStringHelper>
  int c = timedRead();
   b60ce:	4628      	mov	r0, r5
   b60d0:	f7ff ffe0 	bl	b6094 <_ZN6Stream9timedReadEv>
  while (c >= 0 && c != terminator)
   b60d4:	2800      	cmp	r0, #0
   b60d6:	db06      	blt.n	b60e6 <_ZN6Stream15readStringUntilEc+0x26>
   b60d8:	4286      	cmp	r6, r0
   b60da:	d004      	beq.n	b60e6 <_ZN6Stream15readStringUntilEc+0x26>
	String & operator += (char c)			{concat(c); return (*this);}
   b60dc:	b2c1      	uxtb	r1, r0
   b60de:	4620      	mov	r0, r4
   b60e0:	f000 f8c6 	bl	b6270 <_ZN6String6concatEc>
  {
    ret += (char)c;
    c = timedRead();
   b60e4:	e7f3      	b.n	b60ce <_ZN6Stream15readStringUntilEc+0xe>
  }
  return ret;
}
   b60e6:	4620      	mov	r0, r4
   b60e8:	bd70      	pop	{r4, r5, r6, pc}
   b60ea:	bf00      	nop
   b60ec:	000b9306 	.word	0x000b9306

000b60f0 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b60f0:	b510      	push	{r4, lr}
   b60f2:	4604      	mov	r4, r0
{
	free(buffer);
   b60f4:	6800      	ldr	r0, [r0, #0]
   b60f6:	f7fe fb39 	bl	b476c <free>
}
   b60fa:	4620      	mov	r0, r4
   b60fc:	bd10      	pop	{r4, pc}

000b60fe <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b60fe:	b510      	push	{r4, lr}
   b6100:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b6102:	6800      	ldr	r0, [r0, #0]
   b6104:	b108      	cbz	r0, b610a <_ZN6String10invalidateEv+0xc>
   b6106:	f7fe fb31 	bl	b476c <free>
	buffer = NULL;
   b610a:	2300      	movs	r3, #0
	capacity = len = 0;
   b610c:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b6110:	6023      	str	r3, [r4, #0]
}
   b6112:	bd10      	pop	{r4, pc}

000b6114 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b6114:	b538      	push	{r3, r4, r5, lr}
   b6116:	4604      	mov	r4, r0
   b6118:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b611a:	6800      	ldr	r0, [r0, #0]
   b611c:	3101      	adds	r1, #1
   b611e:	f7fe fb2d 	bl	b477c <realloc>
	if (newbuffer) {
   b6122:	b110      	cbz	r0, b612a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b6124:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b6128:	2001      	movs	r0, #1
	}
	return 0;
}
   b612a:	bd38      	pop	{r3, r4, r5, pc}

000b612c <_ZN6String7reserveEj>:
{
   b612c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b612e:	6803      	ldr	r3, [r0, #0]
{
   b6130:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b6132:	b123      	cbz	r3, b613e <_ZN6String7reserveEj+0x12>
   b6134:	6843      	ldr	r3, [r0, #4]
   b6136:	428b      	cmp	r3, r1
   b6138:	d301      	bcc.n	b613e <_ZN6String7reserveEj+0x12>
   b613a:	2001      	movs	r0, #1
}
   b613c:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b613e:	4620      	mov	r0, r4
   b6140:	f7ff ffe8 	bl	b6114 <_ZN6String12changeBufferEj>
   b6144:	2800      	cmp	r0, #0
   b6146:	d0f9      	beq.n	b613c <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b6148:	68a3      	ldr	r3, [r4, #8]
   b614a:	2b00      	cmp	r3, #0
   b614c:	d1f5      	bne.n	b613a <_ZN6String7reserveEj+0xe>
   b614e:	6822      	ldr	r2, [r4, #0]
   b6150:	7013      	strb	r3, [r2, #0]
   b6152:	e7f2      	b.n	b613a <_ZN6String7reserveEj+0xe>

000b6154 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b6154:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b6156:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b6158:	4611      	mov	r1, r2
   b615a:	9201      	str	r2, [sp, #4]
{
   b615c:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b615e:	f7ff ffe5 	bl	b612c <_ZN6String7reserveEj>
   b6162:	9a01      	ldr	r2, [sp, #4]
   b6164:	b928      	cbnz	r0, b6172 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b6166:	4620      	mov	r0, r4
   b6168:	f7ff ffc9 	bl	b60fe <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b616c:	4620      	mov	r0, r4
   b616e:	b003      	add	sp, #12
   b6170:	bd30      	pop	{r4, r5, pc}
	len = length;
   b6172:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b6174:	4629      	mov	r1, r5
   b6176:	6820      	ldr	r0, [r4, #0]
   b6178:	f000 ffac 	bl	b70d4 <memcpy>
	buffer[len] = 0;
   b617c:	6822      	ldr	r2, [r4, #0]
   b617e:	68a3      	ldr	r3, [r4, #8]
   b6180:	2100      	movs	r1, #0
   b6182:	54d1      	strb	r1, [r2, r3]
	return *this;
   b6184:	e7f2      	b.n	b616c <_ZN6String4copyEPKcj+0x18>

000b6186 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b6186:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b6188:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b618a:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b618e:	4604      	mov	r4, r0
	len = 0;
   b6190:	6083      	str	r3, [r0, #8]
	flags = 0;
   b6192:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b6194:	b141      	cbz	r1, b61a8 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b6196:	4608      	mov	r0, r1
   b6198:	9101      	str	r1, [sp, #4]
   b619a:	f001 f822 	bl	b71e2 <strlen>
   b619e:	9901      	ldr	r1, [sp, #4]
   b61a0:	4602      	mov	r2, r0
   b61a2:	4620      	mov	r0, r4
   b61a4:	f7ff ffd6 	bl	b6154 <_ZN6String4copyEPKcj>
}
   b61a8:	4620      	mov	r0, r4
   b61aa:	b002      	add	sp, #8
   b61ac:	bd10      	pop	{r4, pc}

000b61ae <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   b61ae:	b538      	push	{r3, r4, r5, lr}
   b61b0:	4605      	mov	r5, r0
	if (buffer) {
   b61b2:	6800      	ldr	r0, [r0, #0]
{
   b61b4:	460c      	mov	r4, r1
	if (buffer) {
   b61b6:	b168      	cbz	r0, b61d4 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   b61b8:	686a      	ldr	r2, [r5, #4]
   b61ba:	688b      	ldr	r3, [r1, #8]
   b61bc:	429a      	cmp	r2, r3
   b61be:	d307      	bcc.n	b61d0 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   b61c0:	6809      	ldr	r1, [r1, #0]
   b61c2:	f001 f806 	bl	b71d2 <strcpy>
			len = rhs.len;
   b61c6:	68a3      	ldr	r3, [r4, #8]
   b61c8:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   b61ca:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   b61cc:	60a3      	str	r3, [r4, #8]
}
   b61ce:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   b61d0:	f7fe facc 	bl	b476c <free>
	buffer = rhs.buffer;
   b61d4:	6823      	ldr	r3, [r4, #0]
   b61d6:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   b61d8:	6863      	ldr	r3, [r4, #4]
   b61da:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   b61dc:	68a3      	ldr	r3, [r4, #8]
   b61de:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   b61e0:	2300      	movs	r3, #0
	rhs.capacity = 0;
   b61e2:	e9c4 3300 	strd	r3, r3, [r4]
   b61e6:	e7f1      	b.n	b61cc <_ZN6String4moveERS_+0x1e>

000b61e8 <_ZN6StringC1EOS_>:
String::String(String &&rval)
   b61e8:	b510      	push	{r4, lr}
	buffer = NULL;
   b61ea:	2300      	movs	r3, #0
	capacity = 0;
   b61ec:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   b61f0:	4604      	mov	r4, r0
	len = 0;
   b61f2:	6083      	str	r3, [r0, #8]
	flags = 0;
   b61f4:	7303      	strb	r3, [r0, #12]
	move(rval);
   b61f6:	f7ff ffda 	bl	b61ae <_ZN6String4moveERS_>
}
   b61fa:	4620      	mov	r0, r4
   b61fc:	bd10      	pop	{r4, pc}

000b61fe <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b61fe:	4288      	cmp	r0, r1
{
   b6200:	b510      	push	{r4, lr}
   b6202:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b6204:	d005      	beq.n	b6212 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b6206:	680b      	ldr	r3, [r1, #0]
   b6208:	b12b      	cbz	r3, b6216 <_ZN6StringaSERKS_+0x18>
   b620a:	688a      	ldr	r2, [r1, #8]
   b620c:	4619      	mov	r1, r3
   b620e:	f7ff ffa1 	bl	b6154 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b6212:	4620      	mov	r0, r4
   b6214:	bd10      	pop	{r4, pc}
	else invalidate();
   b6216:	f7ff ff72 	bl	b60fe <_ZN6String10invalidateEv>
   b621a:	e7fa      	b.n	b6212 <_ZN6StringaSERKS_+0x14>

000b621c <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b621c:	b510      	push	{r4, lr}
	buffer = NULL;
   b621e:	2300      	movs	r3, #0
String::String(const String &value)
   b6220:	4604      	mov	r4, r0
	capacity = 0;
   b6222:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b6226:	6083      	str	r3, [r0, #8]
	flags = 0;
   b6228:	7303      	strb	r3, [r0, #12]
	*this = value;
   b622a:	f7ff ffe8 	bl	b61fe <_ZN6StringaSERKS_>
}
   b622e:	4620      	mov	r0, r4
   b6230:	bd10      	pop	{r4, pc}

000b6232 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   b6232:	4288      	cmp	r0, r1
{
   b6234:	b510      	push	{r4, lr}
   b6236:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   b6238:	d001      	beq.n	b623e <_ZN6StringaSEOS_+0xc>
   b623a:	f7ff ffb8 	bl	b61ae <_ZN6String4moveERS_>
	return *this;
}
   b623e:	4620      	mov	r0, r4
   b6240:	bd10      	pop	{r4, pc}

000b6242 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b6242:	b570      	push	{r4, r5, r6, lr}
   b6244:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b6246:	460e      	mov	r6, r1
   b6248:	b909      	cbnz	r1, b624e <_ZN6String6concatEPKcj+0xc>
   b624a:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b624c:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b624e:	b16a      	cbz	r2, b626c <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b6250:	6884      	ldr	r4, [r0, #8]
   b6252:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b6254:	4621      	mov	r1, r4
   b6256:	f7ff ff69 	bl	b612c <_ZN6String7reserveEj>
   b625a:	2800      	cmp	r0, #0
   b625c:	d0f5      	beq.n	b624a <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b625e:	6828      	ldr	r0, [r5, #0]
   b6260:	68ab      	ldr	r3, [r5, #8]
   b6262:	4631      	mov	r1, r6
   b6264:	4418      	add	r0, r3
   b6266:	f000 ffb4 	bl	b71d2 <strcpy>
	len = newlen;
   b626a:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b626c:	2001      	movs	r0, #1
   b626e:	e7ed      	b.n	b624c <_ZN6String6concatEPKcj+0xa>

000b6270 <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   b6270:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   b6272:	2300      	movs	r3, #0
	buf[0] = c;
   b6274:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   b6278:	2201      	movs	r2, #1
   b627a:	a901      	add	r1, sp, #4
	buf[1] = 0;
   b627c:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   b6280:	f7ff ffdf 	bl	b6242 <_ZN6String6concatEPKcj>
}
   b6284:	b003      	add	sp, #12
   b6286:	f85d fb04 	ldr.w	pc, [sp], #4

000b628a <_ZNK6String10startsWithERKS_j>:
	if (len < s2.len) return 0;
	return startsWith(s2, 0);
}

unsigned char String::startsWith( const String &s2, unsigned int offset ) const
{
   b628a:	b510      	push	{r4, lr}
   b628c:	4613      	mov	r3, r2
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
   b628e:	6884      	ldr	r4, [r0, #8]
   b6290:	688a      	ldr	r2, [r1, #8]
   b6292:	1aa4      	subs	r4, r4, r2
   b6294:	429c      	cmp	r4, r3
   b6296:	d30a      	bcc.n	b62ae <_ZNK6String10startsWithERKS_j+0x24>
   b6298:	6800      	ldr	r0, [r0, #0]
   b629a:	b138      	cbz	r0, b62ac <_ZNK6String10startsWithERKS_j+0x22>
   b629c:	6809      	ldr	r1, [r1, #0]
   b629e:	b141      	cbz	r1, b62b2 <_ZNK6String10startsWithERKS_j+0x28>
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
   b62a0:	4418      	add	r0, r3
   b62a2:	f000 ffa6 	bl	b71f2 <strncmp>
   b62a6:	fab0 f080 	clz	r0, r0
   b62aa:	0940      	lsrs	r0, r0, #5
}
   b62ac:	bd10      	pop	{r4, pc}
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
   b62ae:	2000      	movs	r0, #0
   b62b0:	e7fc      	b.n	b62ac <_ZNK6String10startsWithERKS_j+0x22>
   b62b2:	4608      	mov	r0, r1
   b62b4:	e7fa      	b.n	b62ac <_ZNK6String10startsWithERKS_j+0x22>

000b62b6 <_ZNK6String10startsWithERKS_>:
	if (len < s2.len) return 0;
   b62b6:	6882      	ldr	r2, [r0, #8]
   b62b8:	688b      	ldr	r3, [r1, #8]
   b62ba:	429a      	cmp	r2, r3
   b62bc:	d302      	bcc.n	b62c4 <_ZNK6String10startsWithERKS_+0xe>
	return startsWith(s2, 0);
   b62be:	2200      	movs	r2, #0
   b62c0:	f7ff bfe3 	b.w	b628a <_ZNK6String10startsWithERKS_j>
}
   b62c4:	2000      	movs	r0, #0
   b62c6:	4770      	bx	lr

000b62c8 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b62c8:	4b05      	ldr	r3, [pc, #20]	; (b62e0 <_GLOBAL__sub_I_System+0x18>)
   b62ca:	2202      	movs	r2, #2
   b62cc:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b62ce:	4b05      	ldr	r3, [pc, #20]	; (b62e4 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b62d0:	4a05      	ldr	r2, [pc, #20]	; (b62e8 <_GLOBAL__sub_I_System+0x20>)
   b62d2:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b62d4:	2000      	movs	r0, #0
   b62d6:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b62da:	f7fe b9ab 	b.w	b4634 <set_system_mode>
   b62de:	bf00      	nop
   b62e0:	2003e710 	.word	0x2003e710
   b62e4:	2003e704 	.word	0x2003e704
   b62e8:	ffff0000 	.word	0xffff0000

000b62ec <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b62ec:	4b02      	ldr	r3, [pc, #8]	; (b62f8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b62ee:	681a      	ldr	r2, [r3, #0]
   b62f0:	4b02      	ldr	r3, [pc, #8]	; (b62fc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b62f2:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b62f4:	4770      	bx	lr
   b62f6:	bf00      	nop
   b62f8:	2003e49c 	.word	0x2003e49c
   b62fc:	2003e714 	.word	0x2003e714

000b6300 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b6300:	4770      	bx	lr

000b6302 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b6302:	7441      	strb	r1, [r0, #17]
}
   b6304:	4770      	bx	lr

000b6306 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b6306:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b6308:	7c00      	ldrb	r0, [r0, #16]
   b630a:	f7fe f91b 	bl	b4544 <hal_usart_available_data_for_write>
}
   b630e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6312:	bd08      	pop	{r3, pc}

000b6314 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b6314:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b6316:	7c00      	ldrb	r0, [r0, #16]
   b6318:	f7fe f8f4 	bl	b4504 <hal_usart_available>
}
   b631c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6320:	bd08      	pop	{r3, pc}

000b6322 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b6322:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b6324:	7c00      	ldrb	r0, [r0, #16]
   b6326:	f7fe f8fd 	bl	b4524 <hal_usart_peek>
}
   b632a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b632e:	bd08      	pop	{r3, pc}

000b6330 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b6330:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b6332:	7c00      	ldrb	r0, [r0, #16]
   b6334:	f7fe f8ee 	bl	b4514 <hal_usart_read>
}
   b6338:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b633c:	bd08      	pop	{r3, pc}

000b633e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b633e:	7c00      	ldrb	r0, [r0, #16]
   b6340:	f7fe b8f8 	b.w	b4534 <hal_usart_flush>

000b6344 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b6344:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6346:	7c45      	ldrb	r5, [r0, #17]
{
   b6348:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b634a:	b12d      	cbz	r5, b6358 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b634c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b634e:	b003      	add	sp, #12
   b6350:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b6354:	f7fe b8ce 	b.w	b44f4 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6358:	7c00      	ldrb	r0, [r0, #16]
   b635a:	9101      	str	r1, [sp, #4]
   b635c:	f7fe f8f2 	bl	b4544 <hal_usart_available_data_for_write>
   b6360:	2800      	cmp	r0, #0
   b6362:	9901      	ldr	r1, [sp, #4]
   b6364:	dcf2      	bgt.n	b634c <_ZN11USARTSerial5writeEh+0x8>
}
   b6366:	4628      	mov	r0, r5
   b6368:	b003      	add	sp, #12
   b636a:	bd30      	pop	{r4, r5, pc}

000b636c <_ZN11USARTSerialD0Ev>:
   b636c:	b510      	push	{r4, lr}
   b636e:	2114      	movs	r1, #20
   b6370:	4604      	mov	r4, r0
   b6372:	f7fd fe94 	bl	b409e <_ZdlPvj>
   b6376:	4620      	mov	r0, r4
   b6378:	bd10      	pop	{r4, pc}
	...

000b637c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b637c:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b637e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6382:	4604      	mov	r4, r0
   b6384:	4608      	mov	r0, r1
   b6386:	4611      	mov	r1, r2
   b6388:	2200      	movs	r2, #0
   b638a:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b638e:	4b04      	ldr	r3, [pc, #16]	; (b63a0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b6390:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b6392:	2301      	movs	r3, #1
  _serial = serial;
   b6394:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b6396:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b6398:	f7fe f8ec 	bl	b4574 <hal_usart_init_ex>
}
   b639c:	4620      	mov	r0, r4
   b639e:	bd10      	pop	{r4, pc}
   b63a0:	000b9408 	.word	0x000b9408

000b63a4 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   b63a4:	7c00      	ldrb	r0, [r0, #16]
   b63a6:	2300      	movs	r3, #0
   b63a8:	f7fe b8d4 	b.w	b4554 <hal_usart_begin_config>

000b63ac <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   b63ac:	2200      	movs	r2, #0
   b63ae:	f7ff bff9 	b.w	b63a4 <_ZN11USARTSerial5beginEmm>

000b63b2 <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   b63b2:	7c00      	ldrb	r0, [r0, #16]
   b63b4:	f7fe b896 	b.w	b44e4 <hal_usart_end>

000b63b8 <_ZN11USARTSerial5writeEt>:

size_t USARTSerial::write(uint16_t c)
{
  return hal_usart_write_nine_bits(_serial, c);
   b63b8:	7c00      	ldrb	r0, [r0, #16]
   b63ba:	f7fe b8d3 	b.w	b4564 <hal_usart_write_nine_bits>

000b63be <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b63be:	7441      	strb	r1, [r0, #17]
}
   b63c0:	4770      	bx	lr

000b63c2 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b63c2:	4770      	bx	lr

000b63c4 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b63c4:	4770      	bx	lr

000b63c6 <_ZN9USBSerial4readEv>:
{
   b63c6:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b63c8:	2100      	movs	r1, #0
   b63ca:	7c00      	ldrb	r0, [r0, #16]
   b63cc:	f7fe f902 	bl	b45d4 <HAL_USB_USART_Receive_Data>
}
   b63d0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b63d4:	bd08      	pop	{r3, pc}

000b63d6 <_ZN9USBSerial4peekEv>:
{
   b63d6:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b63d8:	2101      	movs	r1, #1
   b63da:	7c00      	ldrb	r0, [r0, #16]
   b63dc:	f7fe f8fa 	bl	b45d4 <HAL_USB_USART_Receive_Data>
}
   b63e0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b63e4:	bd08      	pop	{r3, pc}

000b63e6 <_ZN9USBSerial17availableForWriteEv>:
{
   b63e6:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b63e8:	7c00      	ldrb	r0, [r0, #16]
   b63ea:	f7fe f8eb 	bl	b45c4 <HAL_USB_USART_Available_Data_For_Write>
}
   b63ee:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b63f2:	bd08      	pop	{r3, pc}

000b63f4 <_ZN9USBSerial9availableEv>:
{
   b63f4:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b63f6:	7c00      	ldrb	r0, [r0, #16]
   b63f8:	f7fe f8dc 	bl	b45b4 <HAL_USB_USART_Available_Data>
}
   b63fc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6400:	bd08      	pop	{r3, pc}

000b6402 <_ZN9USBSerial5writeEh>:
{
   b6402:	b513      	push	{r0, r1, r4, lr}
   b6404:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b6406:	7c00      	ldrb	r0, [r0, #16]
{
   b6408:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b640a:	f7fe f8db 	bl	b45c4 <HAL_USB_USART_Available_Data_For_Write>
   b640e:	2800      	cmp	r0, #0
   b6410:	9901      	ldr	r1, [sp, #4]
   b6412:	dc01      	bgt.n	b6418 <_ZN9USBSerial5writeEh+0x16>
   b6414:	7c60      	ldrb	r0, [r4, #17]
   b6416:	b120      	cbz	r0, b6422 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b6418:	7c20      	ldrb	r0, [r4, #16]
   b641a:	f7fe f8e3 	bl	b45e4 <HAL_USB_USART_Send_Data>
   b641e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b6422:	b002      	add	sp, #8
   b6424:	bd10      	pop	{r4, pc}

000b6426 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b6426:	7c00      	ldrb	r0, [r0, #16]
   b6428:	f7fe b8e4 	b.w	b45f4 <HAL_USB_USART_Flush_Data>

000b642c <_ZN9USBSerialD0Ev>:
   b642c:	b510      	push	{r4, lr}
   b642e:	2114      	movs	r1, #20
   b6430:	4604      	mov	r4, r0
   b6432:	f7fd fe34 	bl	b409e <_ZdlPvj>
   b6436:	4620      	mov	r0, r4
   b6438:	bd10      	pop	{r4, pc}
	...

000b643c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b643c:	b510      	push	{r4, lr}
   b643e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6442:	4604      	mov	r4, r0
   b6444:	4608      	mov	r0, r1
   b6446:	2100      	movs	r1, #0
   b6448:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b644c:	4b04      	ldr	r3, [pc, #16]	; (b6460 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b644e:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b6450:	2301      	movs	r3, #1
  _serial = serial;
   b6452:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b6454:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b6456:	4611      	mov	r1, r2
   b6458:	f7fe f894 	bl	b4584 <HAL_USB_USART_Init>
}
   b645c:	4620      	mov	r0, r4
   b645e:	bd10      	pop	{r4, pc}
   b6460:	000b9438 	.word	0x000b9438

000b6464 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b6464:	7c00      	ldrb	r0, [r0, #16]
   b6466:	2200      	movs	r2, #0
   b6468:	f7fe b894 	b.w	b4594 <HAL_USB_USART_Begin>

000b646c <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   b646c:	7c00      	ldrb	r0, [r0, #16]
   b646e:	f7fe b899 	b.w	b45a4 <HAL_USB_USART_End>

000b6472 <_Z19acquireSerialBufferv>:
{
   b6472:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b6474:	2214      	movs	r2, #20
{
   b6476:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b6478:	2100      	movs	r1, #0
   b647a:	f000 fe53 	bl	b7124 <memset>
}
   b647e:	4620      	mov	r0, r4
   b6480:	bd10      	pop	{r4, pc}
	...

000b6484 <_Z16_fetch_usbserialv>:
{
   b6484:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b6486:	4c0f      	ldr	r4, [pc, #60]	; (b64c4 <_Z16_fetch_usbserialv+0x40>)
{
   b6488:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b648a:	a803      	add	r0, sp, #12
   b648c:	f7ff fff1 	bl	b6472 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b6490:	7821      	ldrb	r1, [r4, #0]
   b6492:	f3bf 8f5b 	dmb	ish
   b6496:	f011 0101 	ands.w	r1, r1, #1
   b649a:	d10f      	bne.n	b64bc <_Z16_fetch_usbserialv+0x38>
   b649c:	4620      	mov	r0, r4
   b649e:	9101      	str	r1, [sp, #4]
   b64a0:	f7fd fe0c 	bl	b40bc <__cxa_guard_acquire>
   b64a4:	9901      	ldr	r1, [sp, #4]
   b64a6:	b148      	cbz	r0, b64bc <_Z16_fetch_usbserialv+0x38>
   b64a8:	aa03      	add	r2, sp, #12
   b64aa:	4807      	ldr	r0, [pc, #28]	; (b64c8 <_Z16_fetch_usbserialv+0x44>)
   b64ac:	f7ff ffc6 	bl	b643c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b64b0:	4620      	mov	r0, r4
   b64b2:	f7fd fe08 	bl	b40c6 <__cxa_guard_release>
   b64b6:	4805      	ldr	r0, [pc, #20]	; (b64cc <_Z16_fetch_usbserialv+0x48>)
   b64b8:	f000 fdfa 	bl	b70b0 <atexit>
	return _usbserial;
}
   b64bc:	4802      	ldr	r0, [pc, #8]	; (b64c8 <_Z16_fetch_usbserialv+0x44>)
   b64be:	b008      	add	sp, #32
   b64c0:	bd10      	pop	{r4, pc}
   b64c2:	bf00      	nop
   b64c4:	2003e718 	.word	0x2003e718
   b64c8:	2003e71c 	.word	0x2003e71c
   b64cc:	000b63c3 	.word	0x000b63c3

000b64d0 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b64d0:	2200      	movs	r2, #0
   b64d2:	6840      	ldr	r0, [r0, #4]
   b64d4:	4611      	mov	r1, r2
   b64d6:	f7fe b8f9 	b.w	b46cc <network_ready>

000b64da <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b64da:	2200      	movs	r2, #0
   b64dc:	6840      	ldr	r0, [r0, #4]
   b64de:	4611      	mov	r1, r2
   b64e0:	f7fe b914 	b.w	b470c <network_listening>

000b64e4 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b64e4:	2200      	movs	r2, #0
   b64e6:	6840      	ldr	r0, [r0, #4]
   b64e8:	4611      	mov	r1, r2
   b64ea:	f7fe b91f 	b.w	b472c <network_get_listen_timeout>

000b64ee <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b64ee:	6840      	ldr	r0, [r0, #4]
   b64f0:	2200      	movs	r2, #0
   b64f2:	f7fe b913 	b.w	b471c <network_set_listen_timeout>

000b64f6 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b64f6:	6840      	ldr	r0, [r0, #4]
   b64f8:	2200      	movs	r2, #0
   b64fa:	f081 0101 	eor.w	r1, r1, #1
   b64fe:	f7fe b8fd 	b.w	b46fc <network_listen>

000b6502 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b6502:	2300      	movs	r3, #0
   b6504:	6840      	ldr	r0, [r0, #4]
   b6506:	461a      	mov	r2, r3
   b6508:	4619      	mov	r1, r3
   b650a:	f7fe b8ef 	b.w	b46ec <network_off>

000b650e <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b650e:	2300      	movs	r3, #0
   b6510:	6840      	ldr	r0, [r0, #4]
   b6512:	461a      	mov	r2, r3
   b6514:	4619      	mov	r1, r3
   b6516:	f7fe b8e1 	b.w	b46dc <network_on>

000b651a <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b651a:	2200      	movs	r2, #0
   b651c:	6840      	ldr	r0, [r0, #4]
   b651e:	4611      	mov	r1, r2
   b6520:	f7fe b8c4 	b.w	b46ac <network_connecting>

000b6524 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b6524:	6840      	ldr	r0, [r0, #4]
   b6526:	2200      	movs	r2, #0
   b6528:	2102      	movs	r1, #2
   b652a:	f7fe b8c7 	b.w	b46bc <network_disconnect>

000b652e <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b652e:	2300      	movs	r3, #0
   b6530:	6840      	ldr	r0, [r0, #4]
   b6532:	461a      	mov	r2, r3
   b6534:	f7fe b8b2 	b.w	b469c <network_connect>

000b6538 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b6538:	4b02      	ldr	r3, [pc, #8]	; (b6544 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b653a:	2204      	movs	r2, #4
   b653c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b653e:	4a02      	ldr	r2, [pc, #8]	; (b6548 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b6540:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b6542:	4770      	bx	lr
   b6544:	2003e730 	.word	0x2003e730
   b6548:	000b9468 	.word	0x000b9468

000b654c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b654c:	4b01      	ldr	r3, [pc, #4]	; (b6554 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b654e:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b6550:	4770      	bx	lr
   b6552:	bf00      	nop
   b6554:	2003e4a0 	.word	0x2003e4a0

000b6558 <serialEventRun>:
{
   b6558:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b655a:	4b0b      	ldr	r3, [pc, #44]	; (b6588 <serialEventRun+0x30>)
   b655c:	b143      	cbz	r3, b6570 <serialEventRun+0x18>
   b655e:	f7ff ff91 	bl	b6484 <_Z16_fetch_usbserialv>
   b6562:	6803      	ldr	r3, [r0, #0]
   b6564:	691b      	ldr	r3, [r3, #16]
   b6566:	4798      	blx	r3
   b6568:	2800      	cmp	r0, #0
   b656a:	dd01      	ble.n	b6570 <serialEventRun+0x18>
        serialEvent();
   b656c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b6570:	4b06      	ldr	r3, [pc, #24]	; (b658c <serialEventRun+0x34>)
   b6572:	b143      	cbz	r3, b6586 <serialEventRun+0x2e>
   b6574:	f000 f8a2 	bl	b66bc <_Z22__fetch_global_Serial1v>
   b6578:	6803      	ldr	r3, [r0, #0]
   b657a:	691b      	ldr	r3, [r3, #16]
   b657c:	4798      	blx	r3
   b657e:	2800      	cmp	r0, #0
   b6580:	dd01      	ble.n	b6586 <serialEventRun+0x2e>
        serialEvent1();
   b6582:	f3af 8000 	nop.w
}
   b6586:	bd08      	pop	{r3, pc}
	...

000b6590 <_post_loop>:
{
   b6590:	b508      	push	{r3, lr}
	serialEventRun();
   b6592:	f7ff ffe1 	bl	b6558 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b6596:	f7fd ff85 	bl	b44a4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b659a:	4b01      	ldr	r3, [pc, #4]	; (b65a0 <_post_loop+0x10>)
   b659c:	6018      	str	r0, [r3, #0]
}
   b659e:	bd08      	pop	{r3, pc}
   b65a0:	2003e740 	.word	0x2003e740

000b65a4 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b65a4:	4805      	ldr	r0, [pc, #20]	; (b65bc <_Z33system_initialize_user_backup_ramv+0x18>)
   b65a6:	4a06      	ldr	r2, [pc, #24]	; (b65c0 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b65a8:	4906      	ldr	r1, [pc, #24]	; (b65c4 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b65aa:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b65ac:	1a12      	subs	r2, r2, r0
   b65ae:	f000 fd91 	bl	b70d4 <memcpy>
    __backup_sram_signature = signature;
   b65b2:	4b05      	ldr	r3, [pc, #20]	; (b65c8 <_Z33system_initialize_user_backup_ramv+0x24>)
   b65b4:	4a05      	ldr	r2, [pc, #20]	; (b65cc <_Z33system_initialize_user_backup_ramv+0x28>)
   b65b6:	601a      	str	r2, [r3, #0]
}
   b65b8:	bd08      	pop	{r3, pc}
   b65ba:	bf00      	nop
   b65bc:	2003f400 	.word	0x2003f400
   b65c0:	2003f404 	.word	0x2003f404
   b65c4:	000b9894 	.word	0x000b9894
   b65c8:	2003f400 	.word	0x2003f400
   b65cc:	9a271c1e 	.word	0x9a271c1e

000b65d0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b65d0:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b65d2:	2300      	movs	r3, #0
   b65d4:	9300      	str	r3, [sp, #0]
   b65d6:	461a      	mov	r2, r3
   b65d8:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b65dc:	f7fe f84c 	bl	b4678 <system_ctrl_set_result>
}
   b65e0:	b003      	add	sp, #12
   b65e2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b65e8 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b65e8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b65ea:	8843      	ldrh	r3, [r0, #2]
   b65ec:	2b0a      	cmp	r3, #10
   b65ee:	d008      	beq.n	b6602 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b65f0:	2b50      	cmp	r3, #80	; 0x50
   b65f2:	d10b      	bne.n	b660c <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b65f4:	4b09      	ldr	r3, [pc, #36]	; (b661c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b65f6:	681b      	ldr	r3, [r3, #0]
   b65f8:	b14b      	cbz	r3, b660e <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b65fa:	b003      	add	sp, #12
   b65fc:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b6600:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b6602:	f7ff ffe5 	bl	b65d0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b6606:	b003      	add	sp, #12
   b6608:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b660c:	2300      	movs	r3, #0
   b660e:	9300      	str	r3, [sp, #0]
   b6610:	461a      	mov	r2, r3
   b6612:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b6616:	f7fe f82f 	bl	b4678 <system_ctrl_set_result>
}
   b661a:	e7f4      	b.n	b6606 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b661c:	2003e73c 	.word	0x2003e73c

000b6620 <module_user_init_hook>:
{
   b6620:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b6622:	4812      	ldr	r0, [pc, #72]	; (b666c <module_user_init_hook+0x4c>)
   b6624:	2100      	movs	r1, #0
   b6626:	f7fe f8d9 	bl	b47dc <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b662a:	4b11      	ldr	r3, [pc, #68]	; (b6670 <module_user_init_hook+0x50>)
   b662c:	681a      	ldr	r2, [r3, #0]
   b662e:	4b11      	ldr	r3, [pc, #68]	; (b6674 <module_user_init_hook+0x54>)
   b6630:	429a      	cmp	r2, r3
   b6632:	4b11      	ldr	r3, [pc, #68]	; (b6678 <module_user_init_hook+0x58>)
   b6634:	bf0c      	ite	eq
   b6636:	2201      	moveq	r2, #1
   b6638:	2200      	movne	r2, #0
   b663a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b663c:	d001      	beq.n	b6642 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b663e:	f7ff ffb1 	bl	b65a4 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b6642:	f7fd ff1f 	bl	b4484 <HAL_RNG_GetRandomNumber>
   b6646:	4604      	mov	r4, r0
    srand(seed);
   b6648:	f000 fd74 	bl	b7134 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b664c:	4b0b      	ldr	r3, [pc, #44]	; (b667c <module_user_init_hook+0x5c>)
   b664e:	b113      	cbz	r3, b6656 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b6650:	4620      	mov	r0, r4
   b6652:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b6656:	2100      	movs	r1, #0
   b6658:	4808      	ldr	r0, [pc, #32]	; (b667c <module_user_init_hook+0x5c>)
   b665a:	f7fe f817 	bl	b468c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b665e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b6662:	4807      	ldr	r0, [pc, #28]	; (b6680 <module_user_init_hook+0x60>)
   b6664:	2100      	movs	r1, #0
   b6666:	f7fd bffd 	b.w	b4664 <system_ctrl_set_app_request_handler>
   b666a:	bf00      	nop
   b666c:	000b654d 	.word	0x000b654d
   b6670:	2003f400 	.word	0x2003f400
   b6674:	9a271c1e 	.word	0x9a271c1e
   b6678:	2003e738 	.word	0x2003e738
   b667c:	00000000 	.word	0x00000000
   b6680:	000b65e9 	.word	0x000b65e9

000b6684 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b6684:	4770      	bx	lr
	...

000b6688 <_Z20acquireSerial1Bufferv>:
{
   b6688:	b538      	push	{r3, r4, r5, lr}
   b668a:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b668c:	2514      	movs	r5, #20
   b668e:	462a      	mov	r2, r5
   b6690:	2100      	movs	r1, #0
   b6692:	f000 fd47 	bl	b7124 <memset>
   b6696:	8025      	strh	r5, [r4, #0]
   b6698:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b669a:	4907      	ldr	r1, [pc, #28]	; (b66b8 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b669c:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b669e:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b66a0:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b66a2:	f000 f831 	bl	b6708 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b66a6:	4904      	ldr	r1, [pc, #16]	; (b66b8 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b66a8:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b66aa:	4628      	mov	r0, r5
   b66ac:	f000 f82c 	bl	b6708 <_ZnajRKSt9nothrow_t>
    };
   b66b0:	60e0      	str	r0, [r4, #12]
}
   b66b2:	4620      	mov	r0, r4
   b66b4:	bd38      	pop	{r3, r4, r5, pc}
   b66b6:	bf00      	nop
   b66b8:	000b949c 	.word	0x000b949c

000b66bc <_Z22__fetch_global_Serial1v>:
{
   b66bc:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b66be:	4d0e      	ldr	r5, [pc, #56]	; (b66f8 <_Z22__fetch_global_Serial1v+0x3c>)
   b66c0:	7829      	ldrb	r1, [r5, #0]
   b66c2:	f3bf 8f5b 	dmb	ish
   b66c6:	f011 0401 	ands.w	r4, r1, #1
{
   b66ca:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b66cc:	d111      	bne.n	b66f2 <_Z22__fetch_global_Serial1v+0x36>
   b66ce:	4628      	mov	r0, r5
   b66d0:	f7fd fcf4 	bl	b40bc <__cxa_guard_acquire>
   b66d4:	b168      	cbz	r0, b66f2 <_Z22__fetch_global_Serial1v+0x36>
   b66d6:	a801      	add	r0, sp, #4
   b66d8:	f7ff ffd6 	bl	b6688 <_Z20acquireSerial1Bufferv>
   b66dc:	aa01      	add	r2, sp, #4
   b66de:	4621      	mov	r1, r4
   b66e0:	4806      	ldr	r0, [pc, #24]	; (b66fc <_Z22__fetch_global_Serial1v+0x40>)
   b66e2:	f7ff fe4b 	bl	b637c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b66e6:	4628      	mov	r0, r5
   b66e8:	f7fd fced 	bl	b40c6 <__cxa_guard_release>
   b66ec:	4804      	ldr	r0, [pc, #16]	; (b6700 <_Z22__fetch_global_Serial1v+0x44>)
   b66ee:	f000 fcdf 	bl	b70b0 <atexit>
    return serial1;
}
   b66f2:	4802      	ldr	r0, [pc, #8]	; (b66fc <_Z22__fetch_global_Serial1v+0x40>)
   b66f4:	b007      	add	sp, #28
   b66f6:	bd30      	pop	{r4, r5, pc}
   b66f8:	2003e744 	.word	0x2003e744
   b66fc:	2003e748 	.word	0x2003e748
   b6700:	000b6685 	.word	0x000b6685

000b6704 <_ZnwjRKSt9nothrow_t>:
   b6704:	f7fd bcc7 	b.w	b4096 <_Znwj>

000b6708 <_ZnajRKSt9nothrow_t>:
   b6708:	f7fd bcc7 	b.w	b409a <_Znaj>

000b670c <__aeabi_drsub>:
   b670c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b6710:	e002      	b.n	b6718 <__adddf3>
   b6712:	bf00      	nop

000b6714 <__aeabi_dsub>:
   b6714:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b6718 <__adddf3>:
   b6718:	b530      	push	{r4, r5, lr}
   b671a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b671e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b6722:	ea94 0f05 	teq	r4, r5
   b6726:	bf08      	it	eq
   b6728:	ea90 0f02 	teqeq	r0, r2
   b672c:	bf1f      	itttt	ne
   b672e:	ea54 0c00 	orrsne.w	ip, r4, r0
   b6732:	ea55 0c02 	orrsne.w	ip, r5, r2
   b6736:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b673a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b673e:	f000 80e2 	beq.w	b6906 <__adddf3+0x1ee>
   b6742:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b6746:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b674a:	bfb8      	it	lt
   b674c:	426d      	neglt	r5, r5
   b674e:	dd0c      	ble.n	b676a <__adddf3+0x52>
   b6750:	442c      	add	r4, r5
   b6752:	ea80 0202 	eor.w	r2, r0, r2
   b6756:	ea81 0303 	eor.w	r3, r1, r3
   b675a:	ea82 0000 	eor.w	r0, r2, r0
   b675e:	ea83 0101 	eor.w	r1, r3, r1
   b6762:	ea80 0202 	eor.w	r2, r0, r2
   b6766:	ea81 0303 	eor.w	r3, r1, r3
   b676a:	2d36      	cmp	r5, #54	; 0x36
   b676c:	bf88      	it	hi
   b676e:	bd30      	pophi	{r4, r5, pc}
   b6770:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b6774:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b6778:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b677c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b6780:	d002      	beq.n	b6788 <__adddf3+0x70>
   b6782:	4240      	negs	r0, r0
   b6784:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b6788:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b678c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b6790:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b6794:	d002      	beq.n	b679c <__adddf3+0x84>
   b6796:	4252      	negs	r2, r2
   b6798:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b679c:	ea94 0f05 	teq	r4, r5
   b67a0:	f000 80a7 	beq.w	b68f2 <__adddf3+0x1da>
   b67a4:	f1a4 0401 	sub.w	r4, r4, #1
   b67a8:	f1d5 0e20 	rsbs	lr, r5, #32
   b67ac:	db0d      	blt.n	b67ca <__adddf3+0xb2>
   b67ae:	fa02 fc0e 	lsl.w	ip, r2, lr
   b67b2:	fa22 f205 	lsr.w	r2, r2, r5
   b67b6:	1880      	adds	r0, r0, r2
   b67b8:	f141 0100 	adc.w	r1, r1, #0
   b67bc:	fa03 f20e 	lsl.w	r2, r3, lr
   b67c0:	1880      	adds	r0, r0, r2
   b67c2:	fa43 f305 	asr.w	r3, r3, r5
   b67c6:	4159      	adcs	r1, r3
   b67c8:	e00e      	b.n	b67e8 <__adddf3+0xd0>
   b67ca:	f1a5 0520 	sub.w	r5, r5, #32
   b67ce:	f10e 0e20 	add.w	lr, lr, #32
   b67d2:	2a01      	cmp	r2, #1
   b67d4:	fa03 fc0e 	lsl.w	ip, r3, lr
   b67d8:	bf28      	it	cs
   b67da:	f04c 0c02 	orrcs.w	ip, ip, #2
   b67de:	fa43 f305 	asr.w	r3, r3, r5
   b67e2:	18c0      	adds	r0, r0, r3
   b67e4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b67e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b67ec:	d507      	bpl.n	b67fe <__adddf3+0xe6>
   b67ee:	f04f 0e00 	mov.w	lr, #0
   b67f2:	f1dc 0c00 	rsbs	ip, ip, #0
   b67f6:	eb7e 0000 	sbcs.w	r0, lr, r0
   b67fa:	eb6e 0101 	sbc.w	r1, lr, r1
   b67fe:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b6802:	d31b      	bcc.n	b683c <__adddf3+0x124>
   b6804:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b6808:	d30c      	bcc.n	b6824 <__adddf3+0x10c>
   b680a:	0849      	lsrs	r1, r1, #1
   b680c:	ea5f 0030 	movs.w	r0, r0, rrx
   b6810:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b6814:	f104 0401 	add.w	r4, r4, #1
   b6818:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b681c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b6820:	f080 809a 	bcs.w	b6958 <__adddf3+0x240>
   b6824:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b6828:	bf08      	it	eq
   b682a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b682e:	f150 0000 	adcs.w	r0, r0, #0
   b6832:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b6836:	ea41 0105 	orr.w	r1, r1, r5
   b683a:	bd30      	pop	{r4, r5, pc}
   b683c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b6840:	4140      	adcs	r0, r0
   b6842:	eb41 0101 	adc.w	r1, r1, r1
   b6846:	3c01      	subs	r4, #1
   b6848:	bf28      	it	cs
   b684a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b684e:	d2e9      	bcs.n	b6824 <__adddf3+0x10c>
   b6850:	f091 0f00 	teq	r1, #0
   b6854:	bf04      	itt	eq
   b6856:	4601      	moveq	r1, r0
   b6858:	2000      	moveq	r0, #0
   b685a:	fab1 f381 	clz	r3, r1
   b685e:	bf08      	it	eq
   b6860:	3320      	addeq	r3, #32
   b6862:	f1a3 030b 	sub.w	r3, r3, #11
   b6866:	f1b3 0220 	subs.w	r2, r3, #32
   b686a:	da0c      	bge.n	b6886 <__adddf3+0x16e>
   b686c:	320c      	adds	r2, #12
   b686e:	dd08      	ble.n	b6882 <__adddf3+0x16a>
   b6870:	f102 0c14 	add.w	ip, r2, #20
   b6874:	f1c2 020c 	rsb	r2, r2, #12
   b6878:	fa01 f00c 	lsl.w	r0, r1, ip
   b687c:	fa21 f102 	lsr.w	r1, r1, r2
   b6880:	e00c      	b.n	b689c <__adddf3+0x184>
   b6882:	f102 0214 	add.w	r2, r2, #20
   b6886:	bfd8      	it	le
   b6888:	f1c2 0c20 	rsble	ip, r2, #32
   b688c:	fa01 f102 	lsl.w	r1, r1, r2
   b6890:	fa20 fc0c 	lsr.w	ip, r0, ip
   b6894:	bfdc      	itt	le
   b6896:	ea41 010c 	orrle.w	r1, r1, ip
   b689a:	4090      	lslle	r0, r2
   b689c:	1ae4      	subs	r4, r4, r3
   b689e:	bfa2      	ittt	ge
   b68a0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b68a4:	4329      	orrge	r1, r5
   b68a6:	bd30      	popge	{r4, r5, pc}
   b68a8:	ea6f 0404 	mvn.w	r4, r4
   b68ac:	3c1f      	subs	r4, #31
   b68ae:	da1c      	bge.n	b68ea <__adddf3+0x1d2>
   b68b0:	340c      	adds	r4, #12
   b68b2:	dc0e      	bgt.n	b68d2 <__adddf3+0x1ba>
   b68b4:	f104 0414 	add.w	r4, r4, #20
   b68b8:	f1c4 0220 	rsb	r2, r4, #32
   b68bc:	fa20 f004 	lsr.w	r0, r0, r4
   b68c0:	fa01 f302 	lsl.w	r3, r1, r2
   b68c4:	ea40 0003 	orr.w	r0, r0, r3
   b68c8:	fa21 f304 	lsr.w	r3, r1, r4
   b68cc:	ea45 0103 	orr.w	r1, r5, r3
   b68d0:	bd30      	pop	{r4, r5, pc}
   b68d2:	f1c4 040c 	rsb	r4, r4, #12
   b68d6:	f1c4 0220 	rsb	r2, r4, #32
   b68da:	fa20 f002 	lsr.w	r0, r0, r2
   b68de:	fa01 f304 	lsl.w	r3, r1, r4
   b68e2:	ea40 0003 	orr.w	r0, r0, r3
   b68e6:	4629      	mov	r1, r5
   b68e8:	bd30      	pop	{r4, r5, pc}
   b68ea:	fa21 f004 	lsr.w	r0, r1, r4
   b68ee:	4629      	mov	r1, r5
   b68f0:	bd30      	pop	{r4, r5, pc}
   b68f2:	f094 0f00 	teq	r4, #0
   b68f6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b68fa:	bf06      	itte	eq
   b68fc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b6900:	3401      	addeq	r4, #1
   b6902:	3d01      	subne	r5, #1
   b6904:	e74e      	b.n	b67a4 <__adddf3+0x8c>
   b6906:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b690a:	bf18      	it	ne
   b690c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b6910:	d029      	beq.n	b6966 <__adddf3+0x24e>
   b6912:	ea94 0f05 	teq	r4, r5
   b6916:	bf08      	it	eq
   b6918:	ea90 0f02 	teqeq	r0, r2
   b691c:	d005      	beq.n	b692a <__adddf3+0x212>
   b691e:	ea54 0c00 	orrs.w	ip, r4, r0
   b6922:	bf04      	itt	eq
   b6924:	4619      	moveq	r1, r3
   b6926:	4610      	moveq	r0, r2
   b6928:	bd30      	pop	{r4, r5, pc}
   b692a:	ea91 0f03 	teq	r1, r3
   b692e:	bf1e      	ittt	ne
   b6930:	2100      	movne	r1, #0
   b6932:	2000      	movne	r0, #0
   b6934:	bd30      	popne	{r4, r5, pc}
   b6936:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b693a:	d105      	bne.n	b6948 <__adddf3+0x230>
   b693c:	0040      	lsls	r0, r0, #1
   b693e:	4149      	adcs	r1, r1
   b6940:	bf28      	it	cs
   b6942:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b6946:	bd30      	pop	{r4, r5, pc}
   b6948:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b694c:	bf3c      	itt	cc
   b694e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b6952:	bd30      	popcc	{r4, r5, pc}
   b6954:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b6958:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b695c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b6960:	f04f 0000 	mov.w	r0, #0
   b6964:	bd30      	pop	{r4, r5, pc}
   b6966:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b696a:	bf1a      	itte	ne
   b696c:	4619      	movne	r1, r3
   b696e:	4610      	movne	r0, r2
   b6970:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b6974:	bf1c      	itt	ne
   b6976:	460b      	movne	r3, r1
   b6978:	4602      	movne	r2, r0
   b697a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b697e:	bf06      	itte	eq
   b6980:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b6984:	ea91 0f03 	teqeq	r1, r3
   b6988:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b698c:	bd30      	pop	{r4, r5, pc}
   b698e:	bf00      	nop

000b6990 <__aeabi_ui2d>:
   b6990:	f090 0f00 	teq	r0, #0
   b6994:	bf04      	itt	eq
   b6996:	2100      	moveq	r1, #0
   b6998:	4770      	bxeq	lr
   b699a:	b530      	push	{r4, r5, lr}
   b699c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b69a0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b69a4:	f04f 0500 	mov.w	r5, #0
   b69a8:	f04f 0100 	mov.w	r1, #0
   b69ac:	e750      	b.n	b6850 <__adddf3+0x138>
   b69ae:	bf00      	nop

000b69b0 <__aeabi_i2d>:
   b69b0:	f090 0f00 	teq	r0, #0
   b69b4:	bf04      	itt	eq
   b69b6:	2100      	moveq	r1, #0
   b69b8:	4770      	bxeq	lr
   b69ba:	b530      	push	{r4, r5, lr}
   b69bc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b69c0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b69c4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b69c8:	bf48      	it	mi
   b69ca:	4240      	negmi	r0, r0
   b69cc:	f04f 0100 	mov.w	r1, #0
   b69d0:	e73e      	b.n	b6850 <__adddf3+0x138>
   b69d2:	bf00      	nop

000b69d4 <__aeabi_f2d>:
   b69d4:	0042      	lsls	r2, r0, #1
   b69d6:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b69da:	ea4f 0131 	mov.w	r1, r1, rrx
   b69de:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b69e2:	bf1f      	itttt	ne
   b69e4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b69e8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b69ec:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b69f0:	4770      	bxne	lr
   b69f2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b69f6:	bf08      	it	eq
   b69f8:	4770      	bxeq	lr
   b69fa:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b69fe:	bf04      	itt	eq
   b6a00:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b6a04:	4770      	bxeq	lr
   b6a06:	b530      	push	{r4, r5, lr}
   b6a08:	f44f 7460 	mov.w	r4, #896	; 0x380
   b6a0c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b6a10:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b6a14:	e71c      	b.n	b6850 <__adddf3+0x138>
   b6a16:	bf00      	nop

000b6a18 <__aeabi_ul2d>:
   b6a18:	ea50 0201 	orrs.w	r2, r0, r1
   b6a1c:	bf08      	it	eq
   b6a1e:	4770      	bxeq	lr
   b6a20:	b530      	push	{r4, r5, lr}
   b6a22:	f04f 0500 	mov.w	r5, #0
   b6a26:	e00a      	b.n	b6a3e <__aeabi_l2d+0x16>

000b6a28 <__aeabi_l2d>:
   b6a28:	ea50 0201 	orrs.w	r2, r0, r1
   b6a2c:	bf08      	it	eq
   b6a2e:	4770      	bxeq	lr
   b6a30:	b530      	push	{r4, r5, lr}
   b6a32:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b6a36:	d502      	bpl.n	b6a3e <__aeabi_l2d+0x16>
   b6a38:	4240      	negs	r0, r0
   b6a3a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b6a3e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b6a42:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b6a46:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b6a4a:	f43f aed8 	beq.w	b67fe <__adddf3+0xe6>
   b6a4e:	f04f 0203 	mov.w	r2, #3
   b6a52:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b6a56:	bf18      	it	ne
   b6a58:	3203      	addne	r2, #3
   b6a5a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b6a5e:	bf18      	it	ne
   b6a60:	3203      	addne	r2, #3
   b6a62:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b6a66:	f1c2 0320 	rsb	r3, r2, #32
   b6a6a:	fa00 fc03 	lsl.w	ip, r0, r3
   b6a6e:	fa20 f002 	lsr.w	r0, r0, r2
   b6a72:	fa01 fe03 	lsl.w	lr, r1, r3
   b6a76:	ea40 000e 	orr.w	r0, r0, lr
   b6a7a:	fa21 f102 	lsr.w	r1, r1, r2
   b6a7e:	4414      	add	r4, r2
   b6a80:	e6bd      	b.n	b67fe <__adddf3+0xe6>
   b6a82:	bf00      	nop

000b6a84 <__aeabi_dmul>:
   b6a84:	b570      	push	{r4, r5, r6, lr}
   b6a86:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b6a8a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b6a8e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b6a92:	bf1d      	ittte	ne
   b6a94:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b6a98:	ea94 0f0c 	teqne	r4, ip
   b6a9c:	ea95 0f0c 	teqne	r5, ip
   b6aa0:	f000 f8de 	bleq	b6c60 <__aeabi_dmul+0x1dc>
   b6aa4:	442c      	add	r4, r5
   b6aa6:	ea81 0603 	eor.w	r6, r1, r3
   b6aaa:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b6aae:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b6ab2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b6ab6:	bf18      	it	ne
   b6ab8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b6abc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b6ac0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b6ac4:	d038      	beq.n	b6b38 <__aeabi_dmul+0xb4>
   b6ac6:	fba0 ce02 	umull	ip, lr, r0, r2
   b6aca:	f04f 0500 	mov.w	r5, #0
   b6ace:	fbe1 e502 	umlal	lr, r5, r1, r2
   b6ad2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b6ad6:	fbe0 e503 	umlal	lr, r5, r0, r3
   b6ada:	f04f 0600 	mov.w	r6, #0
   b6ade:	fbe1 5603 	umlal	r5, r6, r1, r3
   b6ae2:	f09c 0f00 	teq	ip, #0
   b6ae6:	bf18      	it	ne
   b6ae8:	f04e 0e01 	orrne.w	lr, lr, #1
   b6aec:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b6af0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b6af4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b6af8:	d204      	bcs.n	b6b04 <__aeabi_dmul+0x80>
   b6afa:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b6afe:	416d      	adcs	r5, r5
   b6b00:	eb46 0606 	adc.w	r6, r6, r6
   b6b04:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b6b08:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b6b0c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b6b10:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b6b14:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b6b18:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b6b1c:	bf88      	it	hi
   b6b1e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b6b22:	d81e      	bhi.n	b6b62 <__aeabi_dmul+0xde>
   b6b24:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b6b28:	bf08      	it	eq
   b6b2a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b6b2e:	f150 0000 	adcs.w	r0, r0, #0
   b6b32:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b6b36:	bd70      	pop	{r4, r5, r6, pc}
   b6b38:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b6b3c:	ea46 0101 	orr.w	r1, r6, r1
   b6b40:	ea40 0002 	orr.w	r0, r0, r2
   b6b44:	ea81 0103 	eor.w	r1, r1, r3
   b6b48:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b6b4c:	bfc2      	ittt	gt
   b6b4e:	ebd4 050c 	rsbsgt	r5, r4, ip
   b6b52:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b6b56:	bd70      	popgt	{r4, r5, r6, pc}
   b6b58:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b6b5c:	f04f 0e00 	mov.w	lr, #0
   b6b60:	3c01      	subs	r4, #1
   b6b62:	f300 80ab 	bgt.w	b6cbc <__aeabi_dmul+0x238>
   b6b66:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b6b6a:	bfde      	ittt	le
   b6b6c:	2000      	movle	r0, #0
   b6b6e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b6b72:	bd70      	pople	{r4, r5, r6, pc}
   b6b74:	f1c4 0400 	rsb	r4, r4, #0
   b6b78:	3c20      	subs	r4, #32
   b6b7a:	da35      	bge.n	b6be8 <__aeabi_dmul+0x164>
   b6b7c:	340c      	adds	r4, #12
   b6b7e:	dc1b      	bgt.n	b6bb8 <__aeabi_dmul+0x134>
   b6b80:	f104 0414 	add.w	r4, r4, #20
   b6b84:	f1c4 0520 	rsb	r5, r4, #32
   b6b88:	fa00 f305 	lsl.w	r3, r0, r5
   b6b8c:	fa20 f004 	lsr.w	r0, r0, r4
   b6b90:	fa01 f205 	lsl.w	r2, r1, r5
   b6b94:	ea40 0002 	orr.w	r0, r0, r2
   b6b98:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b6b9c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b6ba0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b6ba4:	fa21 f604 	lsr.w	r6, r1, r4
   b6ba8:	eb42 0106 	adc.w	r1, r2, r6
   b6bac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b6bb0:	bf08      	it	eq
   b6bb2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b6bb6:	bd70      	pop	{r4, r5, r6, pc}
   b6bb8:	f1c4 040c 	rsb	r4, r4, #12
   b6bbc:	f1c4 0520 	rsb	r5, r4, #32
   b6bc0:	fa00 f304 	lsl.w	r3, r0, r4
   b6bc4:	fa20 f005 	lsr.w	r0, r0, r5
   b6bc8:	fa01 f204 	lsl.w	r2, r1, r4
   b6bcc:	ea40 0002 	orr.w	r0, r0, r2
   b6bd0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b6bd4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b6bd8:	f141 0100 	adc.w	r1, r1, #0
   b6bdc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b6be0:	bf08      	it	eq
   b6be2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b6be6:	bd70      	pop	{r4, r5, r6, pc}
   b6be8:	f1c4 0520 	rsb	r5, r4, #32
   b6bec:	fa00 f205 	lsl.w	r2, r0, r5
   b6bf0:	ea4e 0e02 	orr.w	lr, lr, r2
   b6bf4:	fa20 f304 	lsr.w	r3, r0, r4
   b6bf8:	fa01 f205 	lsl.w	r2, r1, r5
   b6bfc:	ea43 0302 	orr.w	r3, r3, r2
   b6c00:	fa21 f004 	lsr.w	r0, r1, r4
   b6c04:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b6c08:	fa21 f204 	lsr.w	r2, r1, r4
   b6c0c:	ea20 0002 	bic.w	r0, r0, r2
   b6c10:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b6c14:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b6c18:	bf08      	it	eq
   b6c1a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b6c1e:	bd70      	pop	{r4, r5, r6, pc}
   b6c20:	f094 0f00 	teq	r4, #0
   b6c24:	d10f      	bne.n	b6c46 <__aeabi_dmul+0x1c2>
   b6c26:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b6c2a:	0040      	lsls	r0, r0, #1
   b6c2c:	eb41 0101 	adc.w	r1, r1, r1
   b6c30:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b6c34:	bf08      	it	eq
   b6c36:	3c01      	subeq	r4, #1
   b6c38:	d0f7      	beq.n	b6c2a <__aeabi_dmul+0x1a6>
   b6c3a:	ea41 0106 	orr.w	r1, r1, r6
   b6c3e:	f095 0f00 	teq	r5, #0
   b6c42:	bf18      	it	ne
   b6c44:	4770      	bxne	lr
   b6c46:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b6c4a:	0052      	lsls	r2, r2, #1
   b6c4c:	eb43 0303 	adc.w	r3, r3, r3
   b6c50:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b6c54:	bf08      	it	eq
   b6c56:	3d01      	subeq	r5, #1
   b6c58:	d0f7      	beq.n	b6c4a <__aeabi_dmul+0x1c6>
   b6c5a:	ea43 0306 	orr.w	r3, r3, r6
   b6c5e:	4770      	bx	lr
   b6c60:	ea94 0f0c 	teq	r4, ip
   b6c64:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b6c68:	bf18      	it	ne
   b6c6a:	ea95 0f0c 	teqne	r5, ip
   b6c6e:	d00c      	beq.n	b6c8a <__aeabi_dmul+0x206>
   b6c70:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b6c74:	bf18      	it	ne
   b6c76:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b6c7a:	d1d1      	bne.n	b6c20 <__aeabi_dmul+0x19c>
   b6c7c:	ea81 0103 	eor.w	r1, r1, r3
   b6c80:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b6c84:	f04f 0000 	mov.w	r0, #0
   b6c88:	bd70      	pop	{r4, r5, r6, pc}
   b6c8a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b6c8e:	bf06      	itte	eq
   b6c90:	4610      	moveq	r0, r2
   b6c92:	4619      	moveq	r1, r3
   b6c94:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b6c98:	d019      	beq.n	b6cce <__aeabi_dmul+0x24a>
   b6c9a:	ea94 0f0c 	teq	r4, ip
   b6c9e:	d102      	bne.n	b6ca6 <__aeabi_dmul+0x222>
   b6ca0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b6ca4:	d113      	bne.n	b6cce <__aeabi_dmul+0x24a>
   b6ca6:	ea95 0f0c 	teq	r5, ip
   b6caa:	d105      	bne.n	b6cb8 <__aeabi_dmul+0x234>
   b6cac:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b6cb0:	bf1c      	itt	ne
   b6cb2:	4610      	movne	r0, r2
   b6cb4:	4619      	movne	r1, r3
   b6cb6:	d10a      	bne.n	b6cce <__aeabi_dmul+0x24a>
   b6cb8:	ea81 0103 	eor.w	r1, r1, r3
   b6cbc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b6cc0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b6cc4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b6cc8:	f04f 0000 	mov.w	r0, #0
   b6ccc:	bd70      	pop	{r4, r5, r6, pc}
   b6cce:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b6cd2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b6cd6:	bd70      	pop	{r4, r5, r6, pc}

000b6cd8 <__aeabi_ddiv>:
   b6cd8:	b570      	push	{r4, r5, r6, lr}
   b6cda:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b6cde:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b6ce2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b6ce6:	bf1d      	ittte	ne
   b6ce8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b6cec:	ea94 0f0c 	teqne	r4, ip
   b6cf0:	ea95 0f0c 	teqne	r5, ip
   b6cf4:	f000 f8a7 	bleq	b6e46 <__aeabi_ddiv+0x16e>
   b6cf8:	eba4 0405 	sub.w	r4, r4, r5
   b6cfc:	ea81 0e03 	eor.w	lr, r1, r3
   b6d00:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b6d04:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b6d08:	f000 8088 	beq.w	b6e1c <__aeabi_ddiv+0x144>
   b6d0c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b6d10:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b6d14:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b6d18:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b6d1c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b6d20:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b6d24:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b6d28:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b6d2c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b6d30:	429d      	cmp	r5, r3
   b6d32:	bf08      	it	eq
   b6d34:	4296      	cmpeq	r6, r2
   b6d36:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b6d3a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b6d3e:	d202      	bcs.n	b6d46 <__aeabi_ddiv+0x6e>
   b6d40:	085b      	lsrs	r3, r3, #1
   b6d42:	ea4f 0232 	mov.w	r2, r2, rrx
   b6d46:	1ab6      	subs	r6, r6, r2
   b6d48:	eb65 0503 	sbc.w	r5, r5, r3
   b6d4c:	085b      	lsrs	r3, r3, #1
   b6d4e:	ea4f 0232 	mov.w	r2, r2, rrx
   b6d52:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b6d56:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b6d5a:	ebb6 0e02 	subs.w	lr, r6, r2
   b6d5e:	eb75 0e03 	sbcs.w	lr, r5, r3
   b6d62:	bf22      	ittt	cs
   b6d64:	1ab6      	subcs	r6, r6, r2
   b6d66:	4675      	movcs	r5, lr
   b6d68:	ea40 000c 	orrcs.w	r0, r0, ip
   b6d6c:	085b      	lsrs	r3, r3, #1
   b6d6e:	ea4f 0232 	mov.w	r2, r2, rrx
   b6d72:	ebb6 0e02 	subs.w	lr, r6, r2
   b6d76:	eb75 0e03 	sbcs.w	lr, r5, r3
   b6d7a:	bf22      	ittt	cs
   b6d7c:	1ab6      	subcs	r6, r6, r2
   b6d7e:	4675      	movcs	r5, lr
   b6d80:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b6d84:	085b      	lsrs	r3, r3, #1
   b6d86:	ea4f 0232 	mov.w	r2, r2, rrx
   b6d8a:	ebb6 0e02 	subs.w	lr, r6, r2
   b6d8e:	eb75 0e03 	sbcs.w	lr, r5, r3
   b6d92:	bf22      	ittt	cs
   b6d94:	1ab6      	subcs	r6, r6, r2
   b6d96:	4675      	movcs	r5, lr
   b6d98:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b6d9c:	085b      	lsrs	r3, r3, #1
   b6d9e:	ea4f 0232 	mov.w	r2, r2, rrx
   b6da2:	ebb6 0e02 	subs.w	lr, r6, r2
   b6da6:	eb75 0e03 	sbcs.w	lr, r5, r3
   b6daa:	bf22      	ittt	cs
   b6dac:	1ab6      	subcs	r6, r6, r2
   b6dae:	4675      	movcs	r5, lr
   b6db0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b6db4:	ea55 0e06 	orrs.w	lr, r5, r6
   b6db8:	d018      	beq.n	b6dec <__aeabi_ddiv+0x114>
   b6dba:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b6dbe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b6dc2:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b6dc6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b6dca:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b6dce:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b6dd2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b6dd6:	d1c0      	bne.n	b6d5a <__aeabi_ddiv+0x82>
   b6dd8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b6ddc:	d10b      	bne.n	b6df6 <__aeabi_ddiv+0x11e>
   b6dde:	ea41 0100 	orr.w	r1, r1, r0
   b6de2:	f04f 0000 	mov.w	r0, #0
   b6de6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b6dea:	e7b6      	b.n	b6d5a <__aeabi_ddiv+0x82>
   b6dec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b6df0:	bf04      	itt	eq
   b6df2:	4301      	orreq	r1, r0
   b6df4:	2000      	moveq	r0, #0
   b6df6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b6dfa:	bf88      	it	hi
   b6dfc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b6e00:	f63f aeaf 	bhi.w	b6b62 <__aeabi_dmul+0xde>
   b6e04:	ebb5 0c03 	subs.w	ip, r5, r3
   b6e08:	bf04      	itt	eq
   b6e0a:	ebb6 0c02 	subseq.w	ip, r6, r2
   b6e0e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b6e12:	f150 0000 	adcs.w	r0, r0, #0
   b6e16:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b6e1a:	bd70      	pop	{r4, r5, r6, pc}
   b6e1c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b6e20:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b6e24:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b6e28:	bfc2      	ittt	gt
   b6e2a:	ebd4 050c 	rsbsgt	r5, r4, ip
   b6e2e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b6e32:	bd70      	popgt	{r4, r5, r6, pc}
   b6e34:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b6e38:	f04f 0e00 	mov.w	lr, #0
   b6e3c:	3c01      	subs	r4, #1
   b6e3e:	e690      	b.n	b6b62 <__aeabi_dmul+0xde>
   b6e40:	ea45 0e06 	orr.w	lr, r5, r6
   b6e44:	e68d      	b.n	b6b62 <__aeabi_dmul+0xde>
   b6e46:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b6e4a:	ea94 0f0c 	teq	r4, ip
   b6e4e:	bf08      	it	eq
   b6e50:	ea95 0f0c 	teqeq	r5, ip
   b6e54:	f43f af3b 	beq.w	b6cce <__aeabi_dmul+0x24a>
   b6e58:	ea94 0f0c 	teq	r4, ip
   b6e5c:	d10a      	bne.n	b6e74 <__aeabi_ddiv+0x19c>
   b6e5e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b6e62:	f47f af34 	bne.w	b6cce <__aeabi_dmul+0x24a>
   b6e66:	ea95 0f0c 	teq	r5, ip
   b6e6a:	f47f af25 	bne.w	b6cb8 <__aeabi_dmul+0x234>
   b6e6e:	4610      	mov	r0, r2
   b6e70:	4619      	mov	r1, r3
   b6e72:	e72c      	b.n	b6cce <__aeabi_dmul+0x24a>
   b6e74:	ea95 0f0c 	teq	r5, ip
   b6e78:	d106      	bne.n	b6e88 <__aeabi_ddiv+0x1b0>
   b6e7a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b6e7e:	f43f aefd 	beq.w	b6c7c <__aeabi_dmul+0x1f8>
   b6e82:	4610      	mov	r0, r2
   b6e84:	4619      	mov	r1, r3
   b6e86:	e722      	b.n	b6cce <__aeabi_dmul+0x24a>
   b6e88:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b6e8c:	bf18      	it	ne
   b6e8e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b6e92:	f47f aec5 	bne.w	b6c20 <__aeabi_dmul+0x19c>
   b6e96:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b6e9a:	f47f af0d 	bne.w	b6cb8 <__aeabi_dmul+0x234>
   b6e9e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b6ea2:	f47f aeeb 	bne.w	b6c7c <__aeabi_dmul+0x1f8>
   b6ea6:	e712      	b.n	b6cce <__aeabi_dmul+0x24a>

000b6ea8 <__gedf2>:
   b6ea8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   b6eac:	e006      	b.n	b6ebc <__cmpdf2+0x4>
   b6eae:	bf00      	nop

000b6eb0 <__ledf2>:
   b6eb0:	f04f 0c01 	mov.w	ip, #1
   b6eb4:	e002      	b.n	b6ebc <__cmpdf2+0x4>
   b6eb6:	bf00      	nop

000b6eb8 <__cmpdf2>:
   b6eb8:	f04f 0c01 	mov.w	ip, #1
   b6ebc:	f84d cd04 	str.w	ip, [sp, #-4]!
   b6ec0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b6ec4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b6ec8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b6ecc:	bf18      	it	ne
   b6ece:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   b6ed2:	d01b      	beq.n	b6f0c <__cmpdf2+0x54>
   b6ed4:	b001      	add	sp, #4
   b6ed6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   b6eda:	bf0c      	ite	eq
   b6edc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   b6ee0:	ea91 0f03 	teqne	r1, r3
   b6ee4:	bf02      	ittt	eq
   b6ee6:	ea90 0f02 	teqeq	r0, r2
   b6eea:	2000      	moveq	r0, #0
   b6eec:	4770      	bxeq	lr
   b6eee:	f110 0f00 	cmn.w	r0, #0
   b6ef2:	ea91 0f03 	teq	r1, r3
   b6ef6:	bf58      	it	pl
   b6ef8:	4299      	cmppl	r1, r3
   b6efa:	bf08      	it	eq
   b6efc:	4290      	cmpeq	r0, r2
   b6efe:	bf2c      	ite	cs
   b6f00:	17d8      	asrcs	r0, r3, #31
   b6f02:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   b6f06:	f040 0001 	orr.w	r0, r0, #1
   b6f0a:	4770      	bx	lr
   b6f0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b6f10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b6f14:	d102      	bne.n	b6f1c <__cmpdf2+0x64>
   b6f16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b6f1a:	d107      	bne.n	b6f2c <__cmpdf2+0x74>
   b6f1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b6f20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b6f24:	d1d6      	bne.n	b6ed4 <__cmpdf2+0x1c>
   b6f26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b6f2a:	d0d3      	beq.n	b6ed4 <__cmpdf2+0x1c>
   b6f2c:	f85d 0b04 	ldr.w	r0, [sp], #4
   b6f30:	4770      	bx	lr
   b6f32:	bf00      	nop

000b6f34 <__aeabi_cdrcmple>:
   b6f34:	4684      	mov	ip, r0
   b6f36:	4610      	mov	r0, r2
   b6f38:	4662      	mov	r2, ip
   b6f3a:	468c      	mov	ip, r1
   b6f3c:	4619      	mov	r1, r3
   b6f3e:	4663      	mov	r3, ip
   b6f40:	e000      	b.n	b6f44 <__aeabi_cdcmpeq>
   b6f42:	bf00      	nop

000b6f44 <__aeabi_cdcmpeq>:
   b6f44:	b501      	push	{r0, lr}
   b6f46:	f7ff ffb7 	bl	b6eb8 <__cmpdf2>
   b6f4a:	2800      	cmp	r0, #0
   b6f4c:	bf48      	it	mi
   b6f4e:	f110 0f00 	cmnmi.w	r0, #0
   b6f52:	bd01      	pop	{r0, pc}

000b6f54 <__aeabi_dcmpeq>:
   b6f54:	f84d ed08 	str.w	lr, [sp, #-8]!
   b6f58:	f7ff fff4 	bl	b6f44 <__aeabi_cdcmpeq>
   b6f5c:	bf0c      	ite	eq
   b6f5e:	2001      	moveq	r0, #1
   b6f60:	2000      	movne	r0, #0
   b6f62:	f85d fb08 	ldr.w	pc, [sp], #8
   b6f66:	bf00      	nop

000b6f68 <__aeabi_dcmplt>:
   b6f68:	f84d ed08 	str.w	lr, [sp, #-8]!
   b6f6c:	f7ff ffea 	bl	b6f44 <__aeabi_cdcmpeq>
   b6f70:	bf34      	ite	cc
   b6f72:	2001      	movcc	r0, #1
   b6f74:	2000      	movcs	r0, #0
   b6f76:	f85d fb08 	ldr.w	pc, [sp], #8
   b6f7a:	bf00      	nop

000b6f7c <__aeabi_dcmple>:
   b6f7c:	f84d ed08 	str.w	lr, [sp, #-8]!
   b6f80:	f7ff ffe0 	bl	b6f44 <__aeabi_cdcmpeq>
   b6f84:	bf94      	ite	ls
   b6f86:	2001      	movls	r0, #1
   b6f88:	2000      	movhi	r0, #0
   b6f8a:	f85d fb08 	ldr.w	pc, [sp], #8
   b6f8e:	bf00      	nop

000b6f90 <__aeabi_dcmpge>:
   b6f90:	f84d ed08 	str.w	lr, [sp, #-8]!
   b6f94:	f7ff ffce 	bl	b6f34 <__aeabi_cdrcmple>
   b6f98:	bf94      	ite	ls
   b6f9a:	2001      	movls	r0, #1
   b6f9c:	2000      	movhi	r0, #0
   b6f9e:	f85d fb08 	ldr.w	pc, [sp], #8
   b6fa2:	bf00      	nop

000b6fa4 <__aeabi_dcmpgt>:
   b6fa4:	f84d ed08 	str.w	lr, [sp, #-8]!
   b6fa8:	f7ff ffc4 	bl	b6f34 <__aeabi_cdrcmple>
   b6fac:	bf34      	ite	cc
   b6fae:	2001      	movcc	r0, #1
   b6fb0:	2000      	movcs	r0, #0
   b6fb2:	f85d fb08 	ldr.w	pc, [sp], #8
   b6fb6:	bf00      	nop

000b6fb8 <__aeabi_dcmpun>:
   b6fb8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b6fbc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b6fc0:	d102      	bne.n	b6fc8 <__aeabi_dcmpun+0x10>
   b6fc2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b6fc6:	d10a      	bne.n	b6fde <__aeabi_dcmpun+0x26>
   b6fc8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b6fcc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b6fd0:	d102      	bne.n	b6fd8 <__aeabi_dcmpun+0x20>
   b6fd2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b6fd6:	d102      	bne.n	b6fde <__aeabi_dcmpun+0x26>
   b6fd8:	f04f 0000 	mov.w	r0, #0
   b6fdc:	4770      	bx	lr
   b6fde:	f04f 0001 	mov.w	r0, #1
   b6fe2:	4770      	bx	lr

000b6fe4 <__aeabi_d2iz>:
   b6fe4:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b6fe8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b6fec:	d215      	bcs.n	b701a <__aeabi_d2iz+0x36>
   b6fee:	d511      	bpl.n	b7014 <__aeabi_d2iz+0x30>
   b6ff0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b6ff4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b6ff8:	d912      	bls.n	b7020 <__aeabi_d2iz+0x3c>
   b6ffa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b6ffe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b7002:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b7006:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b700a:	fa23 f002 	lsr.w	r0, r3, r2
   b700e:	bf18      	it	ne
   b7010:	4240      	negne	r0, r0
   b7012:	4770      	bx	lr
   b7014:	f04f 0000 	mov.w	r0, #0
   b7018:	4770      	bx	lr
   b701a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b701e:	d105      	bne.n	b702c <__aeabi_d2iz+0x48>
   b7020:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   b7024:	bf08      	it	eq
   b7026:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   b702a:	4770      	bx	lr
   b702c:	f04f 0000 	mov.w	r0, #0
   b7030:	4770      	bx	lr
   b7032:	bf00      	nop

000b7034 <__aeabi_d2uiz>:
   b7034:	004a      	lsls	r2, r1, #1
   b7036:	d211      	bcs.n	b705c <__aeabi_d2uiz+0x28>
   b7038:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b703c:	d211      	bcs.n	b7062 <__aeabi_d2uiz+0x2e>
   b703e:	d50d      	bpl.n	b705c <__aeabi_d2uiz+0x28>
   b7040:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b7044:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b7048:	d40e      	bmi.n	b7068 <__aeabi_d2uiz+0x34>
   b704a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b704e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b7052:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b7056:	fa23 f002 	lsr.w	r0, r3, r2
   b705a:	4770      	bx	lr
   b705c:	f04f 0000 	mov.w	r0, #0
   b7060:	4770      	bx	lr
   b7062:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b7066:	d102      	bne.n	b706e <__aeabi_d2uiz+0x3a>
   b7068:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b706c:	4770      	bx	lr
   b706e:	f04f 0000 	mov.w	r0, #0
   b7072:	4770      	bx	lr

000b7074 <__aeabi_d2ulz>:
   b7074:	b5d0      	push	{r4, r6, r7, lr}
   b7076:	4b0c      	ldr	r3, [pc, #48]	; (b70a8 <__aeabi_d2ulz+0x34>)
   b7078:	2200      	movs	r2, #0
   b707a:	4606      	mov	r6, r0
   b707c:	460f      	mov	r7, r1
   b707e:	f7ff fd01 	bl	b6a84 <__aeabi_dmul>
   b7082:	f7ff ffd7 	bl	b7034 <__aeabi_d2uiz>
   b7086:	4604      	mov	r4, r0
   b7088:	f7ff fc82 	bl	b6990 <__aeabi_ui2d>
   b708c:	4b07      	ldr	r3, [pc, #28]	; (b70ac <__aeabi_d2ulz+0x38>)
   b708e:	2200      	movs	r2, #0
   b7090:	f7ff fcf8 	bl	b6a84 <__aeabi_dmul>
   b7094:	4602      	mov	r2, r0
   b7096:	460b      	mov	r3, r1
   b7098:	4630      	mov	r0, r6
   b709a:	4639      	mov	r1, r7
   b709c:	f7ff fb3a 	bl	b6714 <__aeabi_dsub>
   b70a0:	f7ff ffc8 	bl	b7034 <__aeabi_d2uiz>
   b70a4:	4621      	mov	r1, r4
   b70a6:	bdd0      	pop	{r4, r6, r7, pc}
   b70a8:	3df00000 	.word	0x3df00000
   b70ac:	41f00000 	.word	0x41f00000

000b70b0 <atexit>:
   b70b0:	2300      	movs	r3, #0
   b70b2:	4601      	mov	r1, r0
   b70b4:	461a      	mov	r2, r3
   b70b6:	4618      	mov	r0, r3
   b70b8:	f000 bf80 	b.w	b7fbc <__register_exitproc>

000b70bc <atof>:
   b70bc:	2100      	movs	r1, #0
   b70be:	f000 bee5 	b.w	b7e8c <strtod>
	...

000b70c4 <isprint>:
   b70c4:	4b02      	ldr	r3, [pc, #8]	; (b70d0 <isprint+0xc>)
   b70c6:	4418      	add	r0, r3
   b70c8:	7840      	ldrb	r0, [r0, #1]
   b70ca:	f000 0097 	and.w	r0, r0, #151	; 0x97
   b70ce:	4770      	bx	lr
   b70d0:	000b9568 	.word	0x000b9568

000b70d4 <memcpy>:
   b70d4:	440a      	add	r2, r1
   b70d6:	4291      	cmp	r1, r2
   b70d8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b70dc:	d100      	bne.n	b70e0 <memcpy+0xc>
   b70de:	4770      	bx	lr
   b70e0:	b510      	push	{r4, lr}
   b70e2:	f811 4b01 	ldrb.w	r4, [r1], #1
   b70e6:	f803 4f01 	strb.w	r4, [r3, #1]!
   b70ea:	4291      	cmp	r1, r2
   b70ec:	d1f9      	bne.n	b70e2 <memcpy+0xe>
   b70ee:	bd10      	pop	{r4, pc}

000b70f0 <memmove>:
   b70f0:	4288      	cmp	r0, r1
   b70f2:	b510      	push	{r4, lr}
   b70f4:	eb01 0402 	add.w	r4, r1, r2
   b70f8:	d902      	bls.n	b7100 <memmove+0x10>
   b70fa:	4284      	cmp	r4, r0
   b70fc:	4623      	mov	r3, r4
   b70fe:	d807      	bhi.n	b7110 <memmove+0x20>
   b7100:	1e43      	subs	r3, r0, #1
   b7102:	42a1      	cmp	r1, r4
   b7104:	d008      	beq.n	b7118 <memmove+0x28>
   b7106:	f811 2b01 	ldrb.w	r2, [r1], #1
   b710a:	f803 2f01 	strb.w	r2, [r3, #1]!
   b710e:	e7f8      	b.n	b7102 <memmove+0x12>
   b7110:	4402      	add	r2, r0
   b7112:	4601      	mov	r1, r0
   b7114:	428a      	cmp	r2, r1
   b7116:	d100      	bne.n	b711a <memmove+0x2a>
   b7118:	bd10      	pop	{r4, pc}
   b711a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   b711e:	f802 4d01 	strb.w	r4, [r2, #-1]!
   b7122:	e7f7      	b.n	b7114 <memmove+0x24>

000b7124 <memset>:
   b7124:	4402      	add	r2, r0
   b7126:	4603      	mov	r3, r0
   b7128:	4293      	cmp	r3, r2
   b712a:	d100      	bne.n	b712e <memset+0xa>
   b712c:	4770      	bx	lr
   b712e:	f803 1b01 	strb.w	r1, [r3], #1
   b7132:	e7f9      	b.n	b7128 <memset+0x4>

000b7134 <srand>:
   b7134:	b538      	push	{r3, r4, r5, lr}
   b7136:	4b10      	ldr	r3, [pc, #64]	; (b7178 <srand+0x44>)
   b7138:	681d      	ldr	r5, [r3, #0]
   b713a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b713c:	4604      	mov	r4, r0
   b713e:	b9b3      	cbnz	r3, b716e <srand+0x3a>
   b7140:	2018      	movs	r0, #24
   b7142:	f7fd fb0b 	bl	b475c <malloc>
   b7146:	4602      	mov	r2, r0
   b7148:	63a8      	str	r0, [r5, #56]	; 0x38
   b714a:	b920      	cbnz	r0, b7156 <srand+0x22>
   b714c:	4b0b      	ldr	r3, [pc, #44]	; (b717c <srand+0x48>)
   b714e:	480c      	ldr	r0, [pc, #48]	; (b7180 <srand+0x4c>)
   b7150:	2142      	movs	r1, #66	; 0x42
   b7152:	f7fd fb3b 	bl	b47cc <__assert_func>
   b7156:	490b      	ldr	r1, [pc, #44]	; (b7184 <srand+0x50>)
   b7158:	4b0b      	ldr	r3, [pc, #44]	; (b7188 <srand+0x54>)
   b715a:	e9c0 1300 	strd	r1, r3, [r0]
   b715e:	4b0b      	ldr	r3, [pc, #44]	; (b718c <srand+0x58>)
   b7160:	6083      	str	r3, [r0, #8]
   b7162:	230b      	movs	r3, #11
   b7164:	8183      	strh	r3, [r0, #12]
   b7166:	2100      	movs	r1, #0
   b7168:	2001      	movs	r0, #1
   b716a:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b716e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b7170:	2200      	movs	r2, #0
   b7172:	611c      	str	r4, [r3, #16]
   b7174:	615a      	str	r2, [r3, #20]
   b7176:	bd38      	pop	{r3, r4, r5, pc}
   b7178:	2003e4a0 	.word	0x2003e4a0
   b717c:	000b949d 	.word	0x000b949d
   b7180:	000b94b4 	.word	0x000b94b4
   b7184:	abcd330e 	.word	0xabcd330e
   b7188:	e66d1234 	.word	0xe66d1234
   b718c:	0005deec 	.word	0x0005deec

000b7190 <strchr>:
   b7190:	b2c9      	uxtb	r1, r1
   b7192:	4603      	mov	r3, r0
   b7194:	f810 2b01 	ldrb.w	r2, [r0], #1
   b7198:	b11a      	cbz	r2, b71a2 <strchr+0x12>
   b719a:	428a      	cmp	r2, r1
   b719c:	d1f9      	bne.n	b7192 <strchr+0x2>
   b719e:	4618      	mov	r0, r3
   b71a0:	4770      	bx	lr
   b71a2:	2900      	cmp	r1, #0
   b71a4:	bf18      	it	ne
   b71a6:	2300      	movne	r3, #0
   b71a8:	e7f9      	b.n	b719e <strchr+0xe>

000b71aa <strchrnul>:
   b71aa:	b510      	push	{r4, lr}
   b71ac:	4604      	mov	r4, r0
   b71ae:	f7ff ffef 	bl	b7190 <strchr>
   b71b2:	b918      	cbnz	r0, b71bc <strchrnul+0x12>
   b71b4:	4620      	mov	r0, r4
   b71b6:	f000 f814 	bl	b71e2 <strlen>
   b71ba:	4420      	add	r0, r4
   b71bc:	bd10      	pop	{r4, pc}

000b71be <strcmp>:
   b71be:	f810 2b01 	ldrb.w	r2, [r0], #1
   b71c2:	f811 3b01 	ldrb.w	r3, [r1], #1
   b71c6:	2a01      	cmp	r2, #1
   b71c8:	bf28      	it	cs
   b71ca:	429a      	cmpcs	r2, r3
   b71cc:	d0f7      	beq.n	b71be <strcmp>
   b71ce:	1ad0      	subs	r0, r2, r3
   b71d0:	4770      	bx	lr

000b71d2 <strcpy>:
   b71d2:	4603      	mov	r3, r0
   b71d4:	f811 2b01 	ldrb.w	r2, [r1], #1
   b71d8:	f803 2b01 	strb.w	r2, [r3], #1
   b71dc:	2a00      	cmp	r2, #0
   b71de:	d1f9      	bne.n	b71d4 <strcpy+0x2>
   b71e0:	4770      	bx	lr

000b71e2 <strlen>:
   b71e2:	4603      	mov	r3, r0
   b71e4:	f813 2b01 	ldrb.w	r2, [r3], #1
   b71e8:	2a00      	cmp	r2, #0
   b71ea:	d1fb      	bne.n	b71e4 <strlen+0x2>
   b71ec:	1a18      	subs	r0, r3, r0
   b71ee:	3801      	subs	r0, #1
   b71f0:	4770      	bx	lr

000b71f2 <strncmp>:
   b71f2:	b510      	push	{r4, lr}
   b71f4:	b17a      	cbz	r2, b7216 <strncmp+0x24>
   b71f6:	4603      	mov	r3, r0
   b71f8:	3901      	subs	r1, #1
   b71fa:	1884      	adds	r4, r0, r2
   b71fc:	f813 0b01 	ldrb.w	r0, [r3], #1
   b7200:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   b7204:	4290      	cmp	r0, r2
   b7206:	d101      	bne.n	b720c <strncmp+0x1a>
   b7208:	42a3      	cmp	r3, r4
   b720a:	d101      	bne.n	b7210 <strncmp+0x1e>
   b720c:	1a80      	subs	r0, r0, r2
   b720e:	bd10      	pop	{r4, pc}
   b7210:	2800      	cmp	r0, #0
   b7212:	d1f3      	bne.n	b71fc <strncmp+0xa>
   b7214:	e7fa      	b.n	b720c <strncmp+0x1a>
   b7216:	4610      	mov	r0, r2
   b7218:	e7f9      	b.n	b720e <strncmp+0x1c>

000b721a <strrchr>:
   b721a:	b538      	push	{r3, r4, r5, lr}
   b721c:	4603      	mov	r3, r0
   b721e:	460c      	mov	r4, r1
   b7220:	b969      	cbnz	r1, b723e <strrchr+0x24>
   b7222:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b7226:	f7ff bfb3 	b.w	b7190 <strchr>
   b722a:	1c43      	adds	r3, r0, #1
   b722c:	4605      	mov	r5, r0
   b722e:	4621      	mov	r1, r4
   b7230:	4618      	mov	r0, r3
   b7232:	f7ff ffad 	bl	b7190 <strchr>
   b7236:	2800      	cmp	r0, #0
   b7238:	d1f7      	bne.n	b722a <strrchr+0x10>
   b723a:	4628      	mov	r0, r5
   b723c:	bd38      	pop	{r3, r4, r5, pc}
   b723e:	2500      	movs	r5, #0
   b7240:	e7f5      	b.n	b722e <strrchr+0x14>

000b7242 <sulp>:
   b7242:	b570      	push	{r4, r5, r6, lr}
   b7244:	4604      	mov	r4, r0
   b7246:	460d      	mov	r5, r1
   b7248:	ec45 4b10 	vmov	d0, r4, r5
   b724c:	4616      	mov	r6, r2
   b724e:	f001 fe0f 	bl	b8e70 <__ulp>
   b7252:	ec51 0b10 	vmov	r0, r1, d0
   b7256:	b17e      	cbz	r6, b7278 <sulp+0x36>
   b7258:	f3c5 530a 	ubfx	r3, r5, #20, #11
   b725c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   b7260:	2b00      	cmp	r3, #0
   b7262:	dd09      	ble.n	b7278 <sulp+0x36>
   b7264:	051b      	lsls	r3, r3, #20
   b7266:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   b726a:	2400      	movs	r4, #0
   b726c:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   b7270:	4622      	mov	r2, r4
   b7272:	462b      	mov	r3, r5
   b7274:	f7ff fc06 	bl	b6a84 <__aeabi_dmul>
   b7278:	bd70      	pop	{r4, r5, r6, pc}
   b727a:	0000      	movs	r0, r0
   b727c:	0000      	movs	r0, r0
	...

000b7280 <_strtod_l>:
   b7280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7284:	ed2d 8b02 	vpush	{d8}
   b7288:	b09d      	sub	sp, #116	; 0x74
   b728a:	461f      	mov	r7, r3
   b728c:	2300      	movs	r3, #0
   b728e:	9318      	str	r3, [sp, #96]	; 0x60
   b7290:	4ba2      	ldr	r3, [pc, #648]	; (b751c <_strtod_l+0x29c>)
   b7292:	9213      	str	r2, [sp, #76]	; 0x4c
   b7294:	681b      	ldr	r3, [r3, #0]
   b7296:	9305      	str	r3, [sp, #20]
   b7298:	4604      	mov	r4, r0
   b729a:	4618      	mov	r0, r3
   b729c:	4688      	mov	r8, r1
   b729e:	f7ff ffa0 	bl	b71e2 <strlen>
   b72a2:	f04f 0a00 	mov.w	sl, #0
   b72a6:	4605      	mov	r5, r0
   b72a8:	f04f 0b00 	mov.w	fp, #0
   b72ac:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   b72b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b72b2:	781a      	ldrb	r2, [r3, #0]
   b72b4:	2a2b      	cmp	r2, #43	; 0x2b
   b72b6:	d04e      	beq.n	b7356 <_strtod_l+0xd6>
   b72b8:	d83b      	bhi.n	b7332 <_strtod_l+0xb2>
   b72ba:	2a0d      	cmp	r2, #13
   b72bc:	d834      	bhi.n	b7328 <_strtod_l+0xa8>
   b72be:	2a08      	cmp	r2, #8
   b72c0:	d834      	bhi.n	b732c <_strtod_l+0xac>
   b72c2:	2a00      	cmp	r2, #0
   b72c4:	d03e      	beq.n	b7344 <_strtod_l+0xc4>
   b72c6:	2300      	movs	r3, #0
   b72c8:	930a      	str	r3, [sp, #40]	; 0x28
   b72ca:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   b72cc:	7833      	ldrb	r3, [r6, #0]
   b72ce:	2b30      	cmp	r3, #48	; 0x30
   b72d0:	f040 80b0 	bne.w	b7434 <_strtod_l+0x1b4>
   b72d4:	7873      	ldrb	r3, [r6, #1]
   b72d6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   b72da:	2b58      	cmp	r3, #88	; 0x58
   b72dc:	d168      	bne.n	b73b0 <_strtod_l+0x130>
   b72de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b72e0:	9301      	str	r3, [sp, #4]
   b72e2:	ab18      	add	r3, sp, #96	; 0x60
   b72e4:	9702      	str	r7, [sp, #8]
   b72e6:	9300      	str	r3, [sp, #0]
   b72e8:	4a8d      	ldr	r2, [pc, #564]	; (b7520 <_strtod_l+0x2a0>)
   b72ea:	ab19      	add	r3, sp, #100	; 0x64
   b72ec:	a917      	add	r1, sp, #92	; 0x5c
   b72ee:	4620      	mov	r0, r4
   b72f0:	f000 ff2e 	bl	b8150 <__gethex>
   b72f4:	f010 0707 	ands.w	r7, r0, #7
   b72f8:	4605      	mov	r5, r0
   b72fa:	d005      	beq.n	b7308 <_strtod_l+0x88>
   b72fc:	2f06      	cmp	r7, #6
   b72fe:	d12c      	bne.n	b735a <_strtod_l+0xda>
   b7300:	3601      	adds	r6, #1
   b7302:	2300      	movs	r3, #0
   b7304:	9617      	str	r6, [sp, #92]	; 0x5c
   b7306:	930a      	str	r3, [sp, #40]	; 0x28
   b7308:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b730a:	2b00      	cmp	r3, #0
   b730c:	f040 8590 	bne.w	b7e30 <_strtod_l+0xbb0>
   b7310:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b7312:	b1eb      	cbz	r3, b7350 <_strtod_l+0xd0>
   b7314:	4652      	mov	r2, sl
   b7316:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   b731a:	ec43 2b10 	vmov	d0, r2, r3
   b731e:	b01d      	add	sp, #116	; 0x74
   b7320:	ecbd 8b02 	vpop	{d8}
   b7324:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b7328:	2a20      	cmp	r2, #32
   b732a:	d1cc      	bne.n	b72c6 <_strtod_l+0x46>
   b732c:	3301      	adds	r3, #1
   b732e:	9317      	str	r3, [sp, #92]	; 0x5c
   b7330:	e7be      	b.n	b72b0 <_strtod_l+0x30>
   b7332:	2a2d      	cmp	r2, #45	; 0x2d
   b7334:	d1c7      	bne.n	b72c6 <_strtod_l+0x46>
   b7336:	2201      	movs	r2, #1
   b7338:	920a      	str	r2, [sp, #40]	; 0x28
   b733a:	1c5a      	adds	r2, r3, #1
   b733c:	9217      	str	r2, [sp, #92]	; 0x5c
   b733e:	785b      	ldrb	r3, [r3, #1]
   b7340:	2b00      	cmp	r3, #0
   b7342:	d1c2      	bne.n	b72ca <_strtod_l+0x4a>
   b7344:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   b7346:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   b734a:	2b00      	cmp	r3, #0
   b734c:	f040 856e 	bne.w	b7e2c <_strtod_l+0xbac>
   b7350:	4652      	mov	r2, sl
   b7352:	465b      	mov	r3, fp
   b7354:	e7e1      	b.n	b731a <_strtod_l+0x9a>
   b7356:	2200      	movs	r2, #0
   b7358:	e7ee      	b.n	b7338 <_strtod_l+0xb8>
   b735a:	9a18      	ldr	r2, [sp, #96]	; 0x60
   b735c:	b13a      	cbz	r2, b736e <_strtod_l+0xee>
   b735e:	2135      	movs	r1, #53	; 0x35
   b7360:	a81a      	add	r0, sp, #104	; 0x68
   b7362:	f001 fe90 	bl	b9086 <__copybits>
   b7366:	9918      	ldr	r1, [sp, #96]	; 0x60
   b7368:	4620      	mov	r0, r4
   b736a:	f001 fa4f 	bl	b880c <_Bfree>
   b736e:	3f01      	subs	r7, #1
   b7370:	2f04      	cmp	r7, #4
   b7372:	d806      	bhi.n	b7382 <_strtod_l+0x102>
   b7374:	e8df f007 	tbb	[pc, r7]
   b7378:	1714030a 	.word	0x1714030a
   b737c:	0a          	.byte	0x0a
   b737d:	00          	.byte	0x00
   b737e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
   b7382:	0728      	lsls	r0, r5, #28
   b7384:	d5c0      	bpl.n	b7308 <_strtod_l+0x88>
   b7386:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   b738a:	e7bd      	b.n	b7308 <_strtod_l+0x88>
   b738c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
   b7390:	9a19      	ldr	r2, [sp, #100]	; 0x64
   b7392:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   b7396:	f202 4233 	addw	r2, r2, #1075	; 0x433
   b739a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   b739e:	e7f0      	b.n	b7382 <_strtod_l+0x102>
   b73a0:	f8df b180 	ldr.w	fp, [pc, #384]	; b7524 <_strtod_l+0x2a4>
   b73a4:	e7ed      	b.n	b7382 <_strtod_l+0x102>
   b73a6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   b73aa:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   b73ae:	e7e8      	b.n	b7382 <_strtod_l+0x102>
   b73b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b73b2:	1c5a      	adds	r2, r3, #1
   b73b4:	9217      	str	r2, [sp, #92]	; 0x5c
   b73b6:	785b      	ldrb	r3, [r3, #1]
   b73b8:	2b30      	cmp	r3, #48	; 0x30
   b73ba:	d0f9      	beq.n	b73b0 <_strtod_l+0x130>
   b73bc:	2b00      	cmp	r3, #0
   b73be:	d0a3      	beq.n	b7308 <_strtod_l+0x88>
   b73c0:	2301      	movs	r3, #1
   b73c2:	f04f 0900 	mov.w	r9, #0
   b73c6:	9304      	str	r3, [sp, #16]
   b73c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b73ca:	9308      	str	r3, [sp, #32]
   b73cc:	f8cd 901c 	str.w	r9, [sp, #28]
   b73d0:	464f      	mov	r7, r9
   b73d2:	220a      	movs	r2, #10
   b73d4:	9817      	ldr	r0, [sp, #92]	; 0x5c
   b73d6:	7806      	ldrb	r6, [r0, #0]
   b73d8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   b73dc:	b2d9      	uxtb	r1, r3
   b73de:	2909      	cmp	r1, #9
   b73e0:	d92a      	bls.n	b7438 <_strtod_l+0x1b8>
   b73e2:	9905      	ldr	r1, [sp, #20]
   b73e4:	462a      	mov	r2, r5
   b73e6:	f7ff ff04 	bl	b71f2 <strncmp>
   b73ea:	b398      	cbz	r0, b7454 <_strtod_l+0x1d4>
   b73ec:	2000      	movs	r0, #0
   b73ee:	4632      	mov	r2, r6
   b73f0:	463d      	mov	r5, r7
   b73f2:	9005      	str	r0, [sp, #20]
   b73f4:	4603      	mov	r3, r0
   b73f6:	2a65      	cmp	r2, #101	; 0x65
   b73f8:	d001      	beq.n	b73fe <_strtod_l+0x17e>
   b73fa:	2a45      	cmp	r2, #69	; 0x45
   b73fc:	d118      	bne.n	b7430 <_strtod_l+0x1b0>
   b73fe:	b91d      	cbnz	r5, b7408 <_strtod_l+0x188>
   b7400:	9a04      	ldr	r2, [sp, #16]
   b7402:	4302      	orrs	r2, r0
   b7404:	d09e      	beq.n	b7344 <_strtod_l+0xc4>
   b7406:	2500      	movs	r5, #0
   b7408:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
   b740c:	f108 0201 	add.w	r2, r8, #1
   b7410:	9217      	str	r2, [sp, #92]	; 0x5c
   b7412:	f898 2001 	ldrb.w	r2, [r8, #1]
   b7416:	2a2b      	cmp	r2, #43	; 0x2b
   b7418:	d075      	beq.n	b7506 <_strtod_l+0x286>
   b741a:	2a2d      	cmp	r2, #45	; 0x2d
   b741c:	d07b      	beq.n	b7516 <_strtod_l+0x296>
   b741e:	f04f 0c00 	mov.w	ip, #0
   b7422:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   b7426:	2909      	cmp	r1, #9
   b7428:	f240 8082 	bls.w	b7530 <_strtod_l+0x2b0>
   b742c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   b7430:	2600      	movs	r6, #0
   b7432:	e09d      	b.n	b7570 <_strtod_l+0x2f0>
   b7434:	2300      	movs	r3, #0
   b7436:	e7c4      	b.n	b73c2 <_strtod_l+0x142>
   b7438:	2f08      	cmp	r7, #8
   b743a:	bfd8      	it	le
   b743c:	9907      	ldrle	r1, [sp, #28]
   b743e:	f100 0001 	add.w	r0, r0, #1
   b7442:	bfda      	itte	le
   b7444:	fb02 3301 	mlale	r3, r2, r1, r3
   b7448:	9307      	strle	r3, [sp, #28]
   b744a:	fb02 3909 	mlagt	r9, r2, r9, r3
   b744e:	3701      	adds	r7, #1
   b7450:	9017      	str	r0, [sp, #92]	; 0x5c
   b7452:	e7bf      	b.n	b73d4 <_strtod_l+0x154>
   b7454:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b7456:	195a      	adds	r2, r3, r5
   b7458:	9217      	str	r2, [sp, #92]	; 0x5c
   b745a:	5d5a      	ldrb	r2, [r3, r5]
   b745c:	2f00      	cmp	r7, #0
   b745e:	d037      	beq.n	b74d0 <_strtod_l+0x250>
   b7460:	9005      	str	r0, [sp, #20]
   b7462:	463d      	mov	r5, r7
   b7464:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   b7468:	2b09      	cmp	r3, #9
   b746a:	d912      	bls.n	b7492 <_strtod_l+0x212>
   b746c:	2301      	movs	r3, #1
   b746e:	e7c2      	b.n	b73f6 <_strtod_l+0x176>
   b7470:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b7472:	1c5a      	adds	r2, r3, #1
   b7474:	9217      	str	r2, [sp, #92]	; 0x5c
   b7476:	785a      	ldrb	r2, [r3, #1]
   b7478:	3001      	adds	r0, #1
   b747a:	2a30      	cmp	r2, #48	; 0x30
   b747c:	d0f8      	beq.n	b7470 <_strtod_l+0x1f0>
   b747e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
   b7482:	2b08      	cmp	r3, #8
   b7484:	f200 84d9 	bhi.w	b7e3a <_strtod_l+0xbba>
   b7488:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b748a:	9005      	str	r0, [sp, #20]
   b748c:	2000      	movs	r0, #0
   b748e:	9308      	str	r3, [sp, #32]
   b7490:	4605      	mov	r5, r0
   b7492:	3a30      	subs	r2, #48	; 0x30
   b7494:	f100 0301 	add.w	r3, r0, #1
   b7498:	d014      	beq.n	b74c4 <_strtod_l+0x244>
   b749a:	9905      	ldr	r1, [sp, #20]
   b749c:	4419      	add	r1, r3
   b749e:	9105      	str	r1, [sp, #20]
   b74a0:	462b      	mov	r3, r5
   b74a2:	eb00 0e05 	add.w	lr, r0, r5
   b74a6:	210a      	movs	r1, #10
   b74a8:	4573      	cmp	r3, lr
   b74aa:	d113      	bne.n	b74d4 <_strtod_l+0x254>
   b74ac:	182b      	adds	r3, r5, r0
   b74ae:	2b08      	cmp	r3, #8
   b74b0:	f105 0501 	add.w	r5, r5, #1
   b74b4:	4405      	add	r5, r0
   b74b6:	dc1c      	bgt.n	b74f2 <_strtod_l+0x272>
   b74b8:	9907      	ldr	r1, [sp, #28]
   b74ba:	230a      	movs	r3, #10
   b74bc:	fb03 2301 	mla	r3, r3, r1, r2
   b74c0:	9307      	str	r3, [sp, #28]
   b74c2:	2300      	movs	r3, #0
   b74c4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b74c6:	1c51      	adds	r1, r2, #1
   b74c8:	9117      	str	r1, [sp, #92]	; 0x5c
   b74ca:	7852      	ldrb	r2, [r2, #1]
   b74cc:	4618      	mov	r0, r3
   b74ce:	e7c9      	b.n	b7464 <_strtod_l+0x1e4>
   b74d0:	4638      	mov	r0, r7
   b74d2:	e7d2      	b.n	b747a <_strtod_l+0x1fa>
   b74d4:	2b08      	cmp	r3, #8
   b74d6:	dc04      	bgt.n	b74e2 <_strtod_l+0x262>
   b74d8:	9e07      	ldr	r6, [sp, #28]
   b74da:	434e      	muls	r6, r1
   b74dc:	9607      	str	r6, [sp, #28]
   b74de:	3301      	adds	r3, #1
   b74e0:	e7e2      	b.n	b74a8 <_strtod_l+0x228>
   b74e2:	f103 0c01 	add.w	ip, r3, #1
   b74e6:	f1bc 0f10 	cmp.w	ip, #16
   b74ea:	bfd8      	it	le
   b74ec:	fb01 f909 	mulle.w	r9, r1, r9
   b74f0:	e7f5      	b.n	b74de <_strtod_l+0x25e>
   b74f2:	2d10      	cmp	r5, #16
   b74f4:	bfdc      	itt	le
   b74f6:	230a      	movle	r3, #10
   b74f8:	fb03 2909 	mlale	r9, r3, r9, r2
   b74fc:	e7e1      	b.n	b74c2 <_strtod_l+0x242>
   b74fe:	2300      	movs	r3, #0
   b7500:	9305      	str	r3, [sp, #20]
   b7502:	2301      	movs	r3, #1
   b7504:	e77c      	b.n	b7400 <_strtod_l+0x180>
   b7506:	f04f 0c00 	mov.w	ip, #0
   b750a:	f108 0202 	add.w	r2, r8, #2
   b750e:	9217      	str	r2, [sp, #92]	; 0x5c
   b7510:	f898 2002 	ldrb.w	r2, [r8, #2]
   b7514:	e785      	b.n	b7422 <_strtod_l+0x1a2>
   b7516:	f04f 0c01 	mov.w	ip, #1
   b751a:	e7f6      	b.n	b750a <_strtod_l+0x28a>
   b751c:	000b96dc 	.word	0x000b96dc
   b7520:	000b9514 	.word	0x000b9514
   b7524:	7ff00000 	.word	0x7ff00000
   b7528:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b752a:	1c51      	adds	r1, r2, #1
   b752c:	9117      	str	r1, [sp, #92]	; 0x5c
   b752e:	7852      	ldrb	r2, [r2, #1]
   b7530:	2a30      	cmp	r2, #48	; 0x30
   b7532:	d0f9      	beq.n	b7528 <_strtod_l+0x2a8>
   b7534:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
   b7538:	2908      	cmp	r1, #8
   b753a:	f63f af79 	bhi.w	b7430 <_strtod_l+0x1b0>
   b753e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
   b7542:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b7544:	9206      	str	r2, [sp, #24]
   b7546:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   b7548:	1c51      	adds	r1, r2, #1
   b754a:	9117      	str	r1, [sp, #92]	; 0x5c
   b754c:	7852      	ldrb	r2, [r2, #1]
   b754e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
   b7552:	2e09      	cmp	r6, #9
   b7554:	d937      	bls.n	b75c6 <_strtod_l+0x346>
   b7556:	9e06      	ldr	r6, [sp, #24]
   b7558:	1b89      	subs	r1, r1, r6
   b755a:	2908      	cmp	r1, #8
   b755c:	f644 661f 	movw	r6, #19999	; 0x4e1f
   b7560:	dc02      	bgt.n	b7568 <_strtod_l+0x2e8>
   b7562:	4576      	cmp	r6, lr
   b7564:	bfa8      	it	ge
   b7566:	4676      	movge	r6, lr
   b7568:	f1bc 0f00 	cmp.w	ip, #0
   b756c:	d000      	beq.n	b7570 <_strtod_l+0x2f0>
   b756e:	4276      	negs	r6, r6
   b7570:	2d00      	cmp	r5, #0
   b7572:	d14d      	bne.n	b7610 <_strtod_l+0x390>
   b7574:	9904      	ldr	r1, [sp, #16]
   b7576:	4301      	orrs	r1, r0
   b7578:	f47f aec6 	bne.w	b7308 <_strtod_l+0x88>
   b757c:	2b00      	cmp	r3, #0
   b757e:	f47f aee1 	bne.w	b7344 <_strtod_l+0xc4>
   b7582:	2a69      	cmp	r2, #105	; 0x69
   b7584:	d027      	beq.n	b75d6 <_strtod_l+0x356>
   b7586:	dc24      	bgt.n	b75d2 <_strtod_l+0x352>
   b7588:	2a49      	cmp	r2, #73	; 0x49
   b758a:	d024      	beq.n	b75d6 <_strtod_l+0x356>
   b758c:	2a4e      	cmp	r2, #78	; 0x4e
   b758e:	f47f aed9 	bne.w	b7344 <_strtod_l+0xc4>
   b7592:	499f      	ldr	r1, [pc, #636]	; (b7810 <_strtod_l+0x590>)
   b7594:	a817      	add	r0, sp, #92	; 0x5c
   b7596:	f001 f833 	bl	b8600 <__match>
   b759a:	2800      	cmp	r0, #0
   b759c:	f43f aed2 	beq.w	b7344 <_strtod_l+0xc4>
   b75a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b75a2:	781b      	ldrb	r3, [r3, #0]
   b75a4:	2b28      	cmp	r3, #40	; 0x28
   b75a6:	d12d      	bne.n	b7604 <_strtod_l+0x384>
   b75a8:	499a      	ldr	r1, [pc, #616]	; (b7814 <_strtod_l+0x594>)
   b75aa:	aa1a      	add	r2, sp, #104	; 0x68
   b75ac:	a817      	add	r0, sp, #92	; 0x5c
   b75ae:	f001 f83b 	bl	b8628 <__hexnan>
   b75b2:	2805      	cmp	r0, #5
   b75b4:	d126      	bne.n	b7604 <_strtod_l+0x384>
   b75b6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   b75b8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   b75bc:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   b75c0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   b75c4:	e6a0      	b.n	b7308 <_strtod_l+0x88>
   b75c6:	210a      	movs	r1, #10
   b75c8:	fb01 2e0e 	mla	lr, r1, lr, r2
   b75cc:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   b75d0:	e7b9      	b.n	b7546 <_strtod_l+0x2c6>
   b75d2:	2a6e      	cmp	r2, #110	; 0x6e
   b75d4:	e7db      	b.n	b758e <_strtod_l+0x30e>
   b75d6:	4990      	ldr	r1, [pc, #576]	; (b7818 <_strtod_l+0x598>)
   b75d8:	a817      	add	r0, sp, #92	; 0x5c
   b75da:	f001 f811 	bl	b8600 <__match>
   b75de:	2800      	cmp	r0, #0
   b75e0:	f43f aeb0 	beq.w	b7344 <_strtod_l+0xc4>
   b75e4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b75e6:	498d      	ldr	r1, [pc, #564]	; (b781c <_strtod_l+0x59c>)
   b75e8:	3b01      	subs	r3, #1
   b75ea:	a817      	add	r0, sp, #92	; 0x5c
   b75ec:	9317      	str	r3, [sp, #92]	; 0x5c
   b75ee:	f001 f807 	bl	b8600 <__match>
   b75f2:	b910      	cbnz	r0, b75fa <_strtod_l+0x37a>
   b75f4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b75f6:	3301      	adds	r3, #1
   b75f8:	9317      	str	r3, [sp, #92]	; 0x5c
   b75fa:	f8df b230 	ldr.w	fp, [pc, #560]	; b782c <_strtod_l+0x5ac>
   b75fe:	f04f 0a00 	mov.w	sl, #0
   b7602:	e681      	b.n	b7308 <_strtod_l+0x88>
   b7604:	4886      	ldr	r0, [pc, #536]	; (b7820 <_strtod_l+0x5a0>)
   b7606:	f001 fd93 	bl	b9130 <nan>
   b760a:	ec5b ab10 	vmov	sl, fp, d0
   b760e:	e67b      	b.n	b7308 <_strtod_l+0x88>
   b7610:	9b05      	ldr	r3, [sp, #20]
   b7612:	9807      	ldr	r0, [sp, #28]
   b7614:	1af3      	subs	r3, r6, r3
   b7616:	2f00      	cmp	r7, #0
   b7618:	bf08      	it	eq
   b761a:	462f      	moveq	r7, r5
   b761c:	2d10      	cmp	r5, #16
   b761e:	9306      	str	r3, [sp, #24]
   b7620:	46a8      	mov	r8, r5
   b7622:	bfa8      	it	ge
   b7624:	f04f 0810 	movge.w	r8, #16
   b7628:	f7ff f9b2 	bl	b6990 <__aeabi_ui2d>
   b762c:	2d09      	cmp	r5, #9
   b762e:	4682      	mov	sl, r0
   b7630:	468b      	mov	fp, r1
   b7632:	dd13      	ble.n	b765c <_strtod_l+0x3dc>
   b7634:	4b7b      	ldr	r3, [pc, #492]	; (b7824 <_strtod_l+0x5a4>)
   b7636:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   b763a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   b763e:	f7ff fa21 	bl	b6a84 <__aeabi_dmul>
   b7642:	4682      	mov	sl, r0
   b7644:	4648      	mov	r0, r9
   b7646:	468b      	mov	fp, r1
   b7648:	f7ff f9a2 	bl	b6990 <__aeabi_ui2d>
   b764c:	4602      	mov	r2, r0
   b764e:	460b      	mov	r3, r1
   b7650:	4650      	mov	r0, sl
   b7652:	4659      	mov	r1, fp
   b7654:	f7ff f860 	bl	b6718 <__adddf3>
   b7658:	4682      	mov	sl, r0
   b765a:	468b      	mov	fp, r1
   b765c:	2d0f      	cmp	r5, #15
   b765e:	dc38      	bgt.n	b76d2 <_strtod_l+0x452>
   b7660:	9b06      	ldr	r3, [sp, #24]
   b7662:	2b00      	cmp	r3, #0
   b7664:	f43f ae50 	beq.w	b7308 <_strtod_l+0x88>
   b7668:	dd24      	ble.n	b76b4 <_strtod_l+0x434>
   b766a:	2b16      	cmp	r3, #22
   b766c:	dc0b      	bgt.n	b7686 <_strtod_l+0x406>
   b766e:	496d      	ldr	r1, [pc, #436]	; (b7824 <_strtod_l+0x5a4>)
   b7670:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   b7674:	e9d1 0100 	ldrd	r0, r1, [r1]
   b7678:	4652      	mov	r2, sl
   b767a:	465b      	mov	r3, fp
   b767c:	f7ff fa02 	bl	b6a84 <__aeabi_dmul>
   b7680:	4682      	mov	sl, r0
   b7682:	468b      	mov	fp, r1
   b7684:	e640      	b.n	b7308 <_strtod_l+0x88>
   b7686:	9a06      	ldr	r2, [sp, #24]
   b7688:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   b768c:	4293      	cmp	r3, r2
   b768e:	db20      	blt.n	b76d2 <_strtod_l+0x452>
   b7690:	4c64      	ldr	r4, [pc, #400]	; (b7824 <_strtod_l+0x5a4>)
   b7692:	f1c5 050f 	rsb	r5, r5, #15
   b7696:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   b769a:	4652      	mov	r2, sl
   b769c:	465b      	mov	r3, fp
   b769e:	e9d1 0100 	ldrd	r0, r1, [r1]
   b76a2:	f7ff f9ef 	bl	b6a84 <__aeabi_dmul>
   b76a6:	9b06      	ldr	r3, [sp, #24]
   b76a8:	1b5d      	subs	r5, r3, r5
   b76aa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   b76ae:	e9d4 2300 	ldrd	r2, r3, [r4]
   b76b2:	e7e3      	b.n	b767c <_strtod_l+0x3fc>
   b76b4:	9b06      	ldr	r3, [sp, #24]
   b76b6:	3316      	adds	r3, #22
   b76b8:	db0b      	blt.n	b76d2 <_strtod_l+0x452>
   b76ba:	9b05      	ldr	r3, [sp, #20]
   b76bc:	1b9e      	subs	r6, r3, r6
   b76be:	4b59      	ldr	r3, [pc, #356]	; (b7824 <_strtod_l+0x5a4>)
   b76c0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   b76c4:	e9d6 2300 	ldrd	r2, r3, [r6]
   b76c8:	4650      	mov	r0, sl
   b76ca:	4659      	mov	r1, fp
   b76cc:	f7ff fb04 	bl	b6cd8 <__aeabi_ddiv>
   b76d0:	e7d6      	b.n	b7680 <_strtod_l+0x400>
   b76d2:	9b06      	ldr	r3, [sp, #24]
   b76d4:	eba5 0808 	sub.w	r8, r5, r8
   b76d8:	4498      	add	r8, r3
   b76da:	f1b8 0f00 	cmp.w	r8, #0
   b76de:	dd74      	ble.n	b77ca <_strtod_l+0x54a>
   b76e0:	f018 030f 	ands.w	r3, r8, #15
   b76e4:	d00a      	beq.n	b76fc <_strtod_l+0x47c>
   b76e6:	494f      	ldr	r1, [pc, #316]	; (b7824 <_strtod_l+0x5a4>)
   b76e8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   b76ec:	4652      	mov	r2, sl
   b76ee:	465b      	mov	r3, fp
   b76f0:	e9d1 0100 	ldrd	r0, r1, [r1]
   b76f4:	f7ff f9c6 	bl	b6a84 <__aeabi_dmul>
   b76f8:	4682      	mov	sl, r0
   b76fa:	468b      	mov	fp, r1
   b76fc:	f038 080f 	bics.w	r8, r8, #15
   b7700:	d04f      	beq.n	b77a2 <_strtod_l+0x522>
   b7702:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   b7706:	dd22      	ble.n	b774e <_strtod_l+0x4ce>
   b7708:	2500      	movs	r5, #0
   b770a:	462e      	mov	r6, r5
   b770c:	9507      	str	r5, [sp, #28]
   b770e:	9505      	str	r5, [sp, #20]
   b7710:	2322      	movs	r3, #34	; 0x22
   b7712:	f8df b118 	ldr.w	fp, [pc, #280]	; b782c <_strtod_l+0x5ac>
   b7716:	6023      	str	r3, [r4, #0]
   b7718:	f04f 0a00 	mov.w	sl, #0
   b771c:	9b07      	ldr	r3, [sp, #28]
   b771e:	2b00      	cmp	r3, #0
   b7720:	f43f adf2 	beq.w	b7308 <_strtod_l+0x88>
   b7724:	9918      	ldr	r1, [sp, #96]	; 0x60
   b7726:	4620      	mov	r0, r4
   b7728:	f001 f870 	bl	b880c <_Bfree>
   b772c:	9905      	ldr	r1, [sp, #20]
   b772e:	4620      	mov	r0, r4
   b7730:	f001 f86c 	bl	b880c <_Bfree>
   b7734:	4631      	mov	r1, r6
   b7736:	4620      	mov	r0, r4
   b7738:	f001 f868 	bl	b880c <_Bfree>
   b773c:	9907      	ldr	r1, [sp, #28]
   b773e:	4620      	mov	r0, r4
   b7740:	f001 f864 	bl	b880c <_Bfree>
   b7744:	4629      	mov	r1, r5
   b7746:	4620      	mov	r0, r4
   b7748:	f001 f860 	bl	b880c <_Bfree>
   b774c:	e5dc      	b.n	b7308 <_strtod_l+0x88>
   b774e:	4b36      	ldr	r3, [pc, #216]	; (b7828 <_strtod_l+0x5a8>)
   b7750:	9304      	str	r3, [sp, #16]
   b7752:	2300      	movs	r3, #0
   b7754:	ea4f 1828 	mov.w	r8, r8, asr #4
   b7758:	4650      	mov	r0, sl
   b775a:	4659      	mov	r1, fp
   b775c:	4699      	mov	r9, r3
   b775e:	f1b8 0f01 	cmp.w	r8, #1
   b7762:	dc21      	bgt.n	b77a8 <_strtod_l+0x528>
   b7764:	b10b      	cbz	r3, b776a <_strtod_l+0x4ea>
   b7766:	4682      	mov	sl, r0
   b7768:	468b      	mov	fp, r1
   b776a:	4b2f      	ldr	r3, [pc, #188]	; (b7828 <_strtod_l+0x5a8>)
   b776c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   b7770:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   b7774:	4652      	mov	r2, sl
   b7776:	465b      	mov	r3, fp
   b7778:	e9d9 0100 	ldrd	r0, r1, [r9]
   b777c:	f7ff f982 	bl	b6a84 <__aeabi_dmul>
   b7780:	4b2a      	ldr	r3, [pc, #168]	; (b782c <_strtod_l+0x5ac>)
   b7782:	460a      	mov	r2, r1
   b7784:	400b      	ands	r3, r1
   b7786:	492a      	ldr	r1, [pc, #168]	; (b7830 <_strtod_l+0x5b0>)
   b7788:	428b      	cmp	r3, r1
   b778a:	4682      	mov	sl, r0
   b778c:	d8bc      	bhi.n	b7708 <_strtod_l+0x488>
   b778e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   b7792:	428b      	cmp	r3, r1
   b7794:	bf86      	itte	hi
   b7796:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; b7834 <_strtod_l+0x5b4>
   b779a:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
   b779e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   b77a2:	2300      	movs	r3, #0
   b77a4:	9304      	str	r3, [sp, #16]
   b77a6:	e084      	b.n	b78b2 <_strtod_l+0x632>
   b77a8:	f018 0f01 	tst.w	r8, #1
   b77ac:	d005      	beq.n	b77ba <_strtod_l+0x53a>
   b77ae:	9b04      	ldr	r3, [sp, #16]
   b77b0:	e9d3 2300 	ldrd	r2, r3, [r3]
   b77b4:	f7ff f966 	bl	b6a84 <__aeabi_dmul>
   b77b8:	2301      	movs	r3, #1
   b77ba:	9a04      	ldr	r2, [sp, #16]
   b77bc:	3208      	adds	r2, #8
   b77be:	f109 0901 	add.w	r9, r9, #1
   b77c2:	ea4f 0868 	mov.w	r8, r8, asr #1
   b77c6:	9204      	str	r2, [sp, #16]
   b77c8:	e7c9      	b.n	b775e <_strtod_l+0x4de>
   b77ca:	d0ea      	beq.n	b77a2 <_strtod_l+0x522>
   b77cc:	f1c8 0800 	rsb	r8, r8, #0
   b77d0:	f018 020f 	ands.w	r2, r8, #15
   b77d4:	d00a      	beq.n	b77ec <_strtod_l+0x56c>
   b77d6:	4b13      	ldr	r3, [pc, #76]	; (b7824 <_strtod_l+0x5a4>)
   b77d8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   b77dc:	4650      	mov	r0, sl
   b77de:	4659      	mov	r1, fp
   b77e0:	e9d3 2300 	ldrd	r2, r3, [r3]
   b77e4:	f7ff fa78 	bl	b6cd8 <__aeabi_ddiv>
   b77e8:	4682      	mov	sl, r0
   b77ea:	468b      	mov	fp, r1
   b77ec:	ea5f 1828 	movs.w	r8, r8, asr #4
   b77f0:	d0d7      	beq.n	b77a2 <_strtod_l+0x522>
   b77f2:	f1b8 0f1f 	cmp.w	r8, #31
   b77f6:	dd1f      	ble.n	b7838 <_strtod_l+0x5b8>
   b77f8:	2500      	movs	r5, #0
   b77fa:	462e      	mov	r6, r5
   b77fc:	9507      	str	r5, [sp, #28]
   b77fe:	9505      	str	r5, [sp, #20]
   b7800:	2322      	movs	r3, #34	; 0x22
   b7802:	f04f 0a00 	mov.w	sl, #0
   b7806:	f04f 0b00 	mov.w	fp, #0
   b780a:	6023      	str	r3, [r4, #0]
   b780c:	e786      	b.n	b771c <_strtod_l+0x49c>
   b780e:	bf00      	nop
   b7810:	000b93d5 	.word	0x000b93d5
   b7814:	000b9528 	.word	0x000b9528
   b7818:	000b93d9 	.word	0x000b93d9
   b781c:	000b950d 	.word	0x000b950d
   b7820:	000b9306 	.word	0x000b9306
   b7824:	000b9778 	.word	0x000b9778
   b7828:	000b9750 	.word	0x000b9750
   b782c:	7ff00000 	.word	0x7ff00000
   b7830:	7ca00000 	.word	0x7ca00000
   b7834:	7fefffff 	.word	0x7fefffff
   b7838:	f018 0310 	ands.w	r3, r8, #16
   b783c:	bf18      	it	ne
   b783e:	236a      	movne	r3, #106	; 0x6a
   b7840:	f8df 93ac 	ldr.w	r9, [pc, #940]	; b7bf0 <_strtod_l+0x970>
   b7844:	9304      	str	r3, [sp, #16]
   b7846:	4650      	mov	r0, sl
   b7848:	4659      	mov	r1, fp
   b784a:	2300      	movs	r3, #0
   b784c:	f018 0f01 	tst.w	r8, #1
   b7850:	d004      	beq.n	b785c <_strtod_l+0x5dc>
   b7852:	e9d9 2300 	ldrd	r2, r3, [r9]
   b7856:	f7ff f915 	bl	b6a84 <__aeabi_dmul>
   b785a:	2301      	movs	r3, #1
   b785c:	ea5f 0868 	movs.w	r8, r8, asr #1
   b7860:	f109 0908 	add.w	r9, r9, #8
   b7864:	d1f2      	bne.n	b784c <_strtod_l+0x5cc>
   b7866:	b10b      	cbz	r3, b786c <_strtod_l+0x5ec>
   b7868:	4682      	mov	sl, r0
   b786a:	468b      	mov	fp, r1
   b786c:	9b04      	ldr	r3, [sp, #16]
   b786e:	b1c3      	cbz	r3, b78a2 <_strtod_l+0x622>
   b7870:	f3cb 520a 	ubfx	r2, fp, #20, #11
   b7874:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   b7878:	2b00      	cmp	r3, #0
   b787a:	4659      	mov	r1, fp
   b787c:	dd11      	ble.n	b78a2 <_strtod_l+0x622>
   b787e:	2b1f      	cmp	r3, #31
   b7880:	f340 8124 	ble.w	b7acc <_strtod_l+0x84c>
   b7884:	2b34      	cmp	r3, #52	; 0x34
   b7886:	bfde      	ittt	le
   b7888:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
   b788c:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
   b7890:	fa03 f202 	lslle.w	r2, r3, r2
   b7894:	f04f 0a00 	mov.w	sl, #0
   b7898:	bfcc      	ite	gt
   b789a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   b789e:	ea02 0b01 	andle.w	fp, r2, r1
   b78a2:	2200      	movs	r2, #0
   b78a4:	2300      	movs	r3, #0
   b78a6:	4650      	mov	r0, sl
   b78a8:	4659      	mov	r1, fp
   b78aa:	f7ff fb53 	bl	b6f54 <__aeabi_dcmpeq>
   b78ae:	2800      	cmp	r0, #0
   b78b0:	d1a2      	bne.n	b77f8 <_strtod_l+0x578>
   b78b2:	9b07      	ldr	r3, [sp, #28]
   b78b4:	9300      	str	r3, [sp, #0]
   b78b6:	9908      	ldr	r1, [sp, #32]
   b78b8:	462b      	mov	r3, r5
   b78ba:	463a      	mov	r2, r7
   b78bc:	4620      	mov	r0, r4
   b78be:	f001 f80d 	bl	b88dc <__s2b>
   b78c2:	9007      	str	r0, [sp, #28]
   b78c4:	2800      	cmp	r0, #0
   b78c6:	f43f af1f 	beq.w	b7708 <_strtod_l+0x488>
   b78ca:	9b05      	ldr	r3, [sp, #20]
   b78cc:	1b9e      	subs	r6, r3, r6
   b78ce:	9b06      	ldr	r3, [sp, #24]
   b78d0:	2b00      	cmp	r3, #0
   b78d2:	bfb4      	ite	lt
   b78d4:	4633      	movlt	r3, r6
   b78d6:	2300      	movge	r3, #0
   b78d8:	930c      	str	r3, [sp, #48]	; 0x30
   b78da:	9b06      	ldr	r3, [sp, #24]
   b78dc:	2500      	movs	r5, #0
   b78de:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   b78e2:	9312      	str	r3, [sp, #72]	; 0x48
   b78e4:	462e      	mov	r6, r5
   b78e6:	9b07      	ldr	r3, [sp, #28]
   b78e8:	4620      	mov	r0, r4
   b78ea:	6859      	ldr	r1, [r3, #4]
   b78ec:	f000 ff4e 	bl	b878c <_Balloc>
   b78f0:	9005      	str	r0, [sp, #20]
   b78f2:	2800      	cmp	r0, #0
   b78f4:	f43f af0c 	beq.w	b7710 <_strtod_l+0x490>
   b78f8:	9b07      	ldr	r3, [sp, #28]
   b78fa:	691a      	ldr	r2, [r3, #16]
   b78fc:	3202      	adds	r2, #2
   b78fe:	f103 010c 	add.w	r1, r3, #12
   b7902:	0092      	lsls	r2, r2, #2
   b7904:	300c      	adds	r0, #12
   b7906:	f7ff fbe5 	bl	b70d4 <memcpy>
   b790a:	ec4b ab10 	vmov	d0, sl, fp
   b790e:	aa1a      	add	r2, sp, #104	; 0x68
   b7910:	a919      	add	r1, sp, #100	; 0x64
   b7912:	4620      	mov	r0, r4
   b7914:	f001 fb28 	bl	b8f68 <__d2b>
   b7918:	ec4b ab18 	vmov	d8, sl, fp
   b791c:	9018      	str	r0, [sp, #96]	; 0x60
   b791e:	2800      	cmp	r0, #0
   b7920:	f43f aef6 	beq.w	b7710 <_strtod_l+0x490>
   b7924:	2101      	movs	r1, #1
   b7926:	4620      	mov	r0, r4
   b7928:	f001 f872 	bl	b8a10 <__i2b>
   b792c:	4606      	mov	r6, r0
   b792e:	2800      	cmp	r0, #0
   b7930:	f43f aeee 	beq.w	b7710 <_strtod_l+0x490>
   b7934:	9b19      	ldr	r3, [sp, #100]	; 0x64
   b7936:	9904      	ldr	r1, [sp, #16]
   b7938:	2b00      	cmp	r3, #0
   b793a:	bfab      	itete	ge
   b793c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
   b793e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   b7940:	9f12      	ldrge	r7, [sp, #72]	; 0x48
   b7942:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
   b7946:	bfac      	ite	ge
   b7948:	eb03 0902 	addge.w	r9, r3, r2
   b794c:	1ad7      	sublt	r7, r2, r3
   b794e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   b7950:	eba3 0801 	sub.w	r8, r3, r1
   b7954:	4490      	add	r8, r2
   b7956:	4ba1      	ldr	r3, [pc, #644]	; (b7bdc <_strtod_l+0x95c>)
   b7958:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b795c:	4598      	cmp	r8, r3
   b795e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   b7962:	f280 80c7 	bge.w	b7af4 <_strtod_l+0x874>
   b7966:	eba3 0308 	sub.w	r3, r3, r8
   b796a:	2b1f      	cmp	r3, #31
   b796c:	eba2 0203 	sub.w	r2, r2, r3
   b7970:	f04f 0101 	mov.w	r1, #1
   b7974:	f300 80b1 	bgt.w	b7ada <_strtod_l+0x85a>
   b7978:	fa01 f303 	lsl.w	r3, r1, r3
   b797c:	930d      	str	r3, [sp, #52]	; 0x34
   b797e:	2300      	movs	r3, #0
   b7980:	9308      	str	r3, [sp, #32]
   b7982:	eb09 0802 	add.w	r8, r9, r2
   b7986:	9b04      	ldr	r3, [sp, #16]
   b7988:	45c1      	cmp	r9, r8
   b798a:	4417      	add	r7, r2
   b798c:	441f      	add	r7, r3
   b798e:	464b      	mov	r3, r9
   b7990:	bfa8      	it	ge
   b7992:	4643      	movge	r3, r8
   b7994:	42bb      	cmp	r3, r7
   b7996:	bfa8      	it	ge
   b7998:	463b      	movge	r3, r7
   b799a:	2b00      	cmp	r3, #0
   b799c:	bfc2      	ittt	gt
   b799e:	eba8 0803 	subgt.w	r8, r8, r3
   b79a2:	1aff      	subgt	r7, r7, r3
   b79a4:	eba9 0903 	subgt.w	r9, r9, r3
   b79a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b79aa:	2b00      	cmp	r3, #0
   b79ac:	dd17      	ble.n	b79de <_strtod_l+0x75e>
   b79ae:	4631      	mov	r1, r6
   b79b0:	461a      	mov	r2, r3
   b79b2:	4620      	mov	r0, r4
   b79b4:	f001 f8ec 	bl	b8b90 <__pow5mult>
   b79b8:	4606      	mov	r6, r0
   b79ba:	2800      	cmp	r0, #0
   b79bc:	f43f aea8 	beq.w	b7710 <_strtod_l+0x490>
   b79c0:	4601      	mov	r1, r0
   b79c2:	9a18      	ldr	r2, [sp, #96]	; 0x60
   b79c4:	4620      	mov	r0, r4
   b79c6:	f001 f839 	bl	b8a3c <__multiply>
   b79ca:	900b      	str	r0, [sp, #44]	; 0x2c
   b79cc:	2800      	cmp	r0, #0
   b79ce:	f43f ae9f 	beq.w	b7710 <_strtod_l+0x490>
   b79d2:	9918      	ldr	r1, [sp, #96]	; 0x60
   b79d4:	4620      	mov	r0, r4
   b79d6:	f000 ff19 	bl	b880c <_Bfree>
   b79da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b79dc:	9318      	str	r3, [sp, #96]	; 0x60
   b79de:	f1b8 0f00 	cmp.w	r8, #0
   b79e2:	f300 808c 	bgt.w	b7afe <_strtod_l+0x87e>
   b79e6:	9b06      	ldr	r3, [sp, #24]
   b79e8:	2b00      	cmp	r3, #0
   b79ea:	dd08      	ble.n	b79fe <_strtod_l+0x77e>
   b79ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
   b79ee:	9905      	ldr	r1, [sp, #20]
   b79f0:	4620      	mov	r0, r4
   b79f2:	f001 f8cd 	bl	b8b90 <__pow5mult>
   b79f6:	9005      	str	r0, [sp, #20]
   b79f8:	2800      	cmp	r0, #0
   b79fa:	f43f ae89 	beq.w	b7710 <_strtod_l+0x490>
   b79fe:	2f00      	cmp	r7, #0
   b7a00:	dd08      	ble.n	b7a14 <_strtod_l+0x794>
   b7a02:	9905      	ldr	r1, [sp, #20]
   b7a04:	463a      	mov	r2, r7
   b7a06:	4620      	mov	r0, r4
   b7a08:	f001 f91c 	bl	b8c44 <__lshift>
   b7a0c:	9005      	str	r0, [sp, #20]
   b7a0e:	2800      	cmp	r0, #0
   b7a10:	f43f ae7e 	beq.w	b7710 <_strtod_l+0x490>
   b7a14:	f1b9 0f00 	cmp.w	r9, #0
   b7a18:	dd08      	ble.n	b7a2c <_strtod_l+0x7ac>
   b7a1a:	4631      	mov	r1, r6
   b7a1c:	464a      	mov	r2, r9
   b7a1e:	4620      	mov	r0, r4
   b7a20:	f001 f910 	bl	b8c44 <__lshift>
   b7a24:	4606      	mov	r6, r0
   b7a26:	2800      	cmp	r0, #0
   b7a28:	f43f ae72 	beq.w	b7710 <_strtod_l+0x490>
   b7a2c:	9a05      	ldr	r2, [sp, #20]
   b7a2e:	9918      	ldr	r1, [sp, #96]	; 0x60
   b7a30:	4620      	mov	r0, r4
   b7a32:	f001 f993 	bl	b8d5c <__mdiff>
   b7a36:	4605      	mov	r5, r0
   b7a38:	2800      	cmp	r0, #0
   b7a3a:	f43f ae69 	beq.w	b7710 <_strtod_l+0x490>
   b7a3e:	68c3      	ldr	r3, [r0, #12]
   b7a40:	930b      	str	r3, [sp, #44]	; 0x2c
   b7a42:	2300      	movs	r3, #0
   b7a44:	60c3      	str	r3, [r0, #12]
   b7a46:	4631      	mov	r1, r6
   b7a48:	f001 f96c 	bl	b8d24 <__mcmp>
   b7a4c:	2800      	cmp	r0, #0
   b7a4e:	da60      	bge.n	b7b12 <_strtod_l+0x892>
   b7a50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b7a52:	ea53 030a 	orrs.w	r3, r3, sl
   b7a56:	f040 8082 	bne.w	b7b5e <_strtod_l+0x8de>
   b7a5a:	f3cb 0313 	ubfx	r3, fp, #0, #20
   b7a5e:	2b00      	cmp	r3, #0
   b7a60:	d17d      	bne.n	b7b5e <_strtod_l+0x8de>
   b7a62:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   b7a66:	0d1b      	lsrs	r3, r3, #20
   b7a68:	051b      	lsls	r3, r3, #20
   b7a6a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   b7a6e:	d976      	bls.n	b7b5e <_strtod_l+0x8de>
   b7a70:	696b      	ldr	r3, [r5, #20]
   b7a72:	b913      	cbnz	r3, b7a7a <_strtod_l+0x7fa>
   b7a74:	692b      	ldr	r3, [r5, #16]
   b7a76:	2b01      	cmp	r3, #1
   b7a78:	dd71      	ble.n	b7b5e <_strtod_l+0x8de>
   b7a7a:	4629      	mov	r1, r5
   b7a7c:	2201      	movs	r2, #1
   b7a7e:	4620      	mov	r0, r4
   b7a80:	f001 f8e0 	bl	b8c44 <__lshift>
   b7a84:	4631      	mov	r1, r6
   b7a86:	4605      	mov	r5, r0
   b7a88:	f001 f94c 	bl	b8d24 <__mcmp>
   b7a8c:	2800      	cmp	r0, #0
   b7a8e:	dd66      	ble.n	b7b5e <_strtod_l+0x8de>
   b7a90:	9904      	ldr	r1, [sp, #16]
   b7a92:	4a53      	ldr	r2, [pc, #332]	; (b7be0 <_strtod_l+0x960>)
   b7a94:	465b      	mov	r3, fp
   b7a96:	2900      	cmp	r1, #0
   b7a98:	f000 8081 	beq.w	b7b9e <_strtod_l+0x91e>
   b7a9c:	ea02 010b 	and.w	r1, r2, fp
   b7aa0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   b7aa4:	dc7b      	bgt.n	b7b9e <_strtod_l+0x91e>
   b7aa6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   b7aaa:	f77f aea9 	ble.w	b7800 <_strtod_l+0x580>
   b7aae:	4b4d      	ldr	r3, [pc, #308]	; (b7be4 <_strtod_l+0x964>)
   b7ab0:	4650      	mov	r0, sl
   b7ab2:	4659      	mov	r1, fp
   b7ab4:	2200      	movs	r2, #0
   b7ab6:	f7fe ffe5 	bl	b6a84 <__aeabi_dmul>
   b7aba:	460b      	mov	r3, r1
   b7abc:	4303      	orrs	r3, r0
   b7abe:	bf08      	it	eq
   b7ac0:	2322      	moveq	r3, #34	; 0x22
   b7ac2:	4682      	mov	sl, r0
   b7ac4:	468b      	mov	fp, r1
   b7ac6:	bf08      	it	eq
   b7ac8:	6023      	streq	r3, [r4, #0]
   b7aca:	e62b      	b.n	b7724 <_strtod_l+0x4a4>
   b7acc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b7ad0:	fa02 f303 	lsl.w	r3, r2, r3
   b7ad4:	ea03 0a0a 	and.w	sl, r3, sl
   b7ad8:	e6e3      	b.n	b78a2 <_strtod_l+0x622>
   b7ada:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   b7ade:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   b7ae2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   b7ae6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   b7aea:	fa01 f308 	lsl.w	r3, r1, r8
   b7aee:	9308      	str	r3, [sp, #32]
   b7af0:	910d      	str	r1, [sp, #52]	; 0x34
   b7af2:	e746      	b.n	b7982 <_strtod_l+0x702>
   b7af4:	2300      	movs	r3, #0
   b7af6:	9308      	str	r3, [sp, #32]
   b7af8:	2301      	movs	r3, #1
   b7afa:	930d      	str	r3, [sp, #52]	; 0x34
   b7afc:	e741      	b.n	b7982 <_strtod_l+0x702>
   b7afe:	9918      	ldr	r1, [sp, #96]	; 0x60
   b7b00:	4642      	mov	r2, r8
   b7b02:	4620      	mov	r0, r4
   b7b04:	f001 f89e 	bl	b8c44 <__lshift>
   b7b08:	9018      	str	r0, [sp, #96]	; 0x60
   b7b0a:	2800      	cmp	r0, #0
   b7b0c:	f47f af6b 	bne.w	b79e6 <_strtod_l+0x766>
   b7b10:	e5fe      	b.n	b7710 <_strtod_l+0x490>
   b7b12:	465f      	mov	r7, fp
   b7b14:	d16e      	bne.n	b7bf4 <_strtod_l+0x974>
   b7b16:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b7b18:	f3cb 0313 	ubfx	r3, fp, #0, #20
   b7b1c:	b342      	cbz	r2, b7b70 <_strtod_l+0x8f0>
   b7b1e:	4a32      	ldr	r2, [pc, #200]	; (b7be8 <_strtod_l+0x968>)
   b7b20:	4293      	cmp	r3, r2
   b7b22:	d128      	bne.n	b7b76 <_strtod_l+0x8f6>
   b7b24:	9b04      	ldr	r3, [sp, #16]
   b7b26:	4651      	mov	r1, sl
   b7b28:	b1eb      	cbz	r3, b7b66 <_strtod_l+0x8e6>
   b7b2a:	4b2d      	ldr	r3, [pc, #180]	; (b7be0 <_strtod_l+0x960>)
   b7b2c:	403b      	ands	r3, r7
   b7b2e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   b7b32:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b7b36:	d819      	bhi.n	b7b6c <_strtod_l+0x8ec>
   b7b38:	0d1b      	lsrs	r3, r3, #20
   b7b3a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   b7b3e:	fa02 f303 	lsl.w	r3, r2, r3
   b7b42:	4299      	cmp	r1, r3
   b7b44:	d117      	bne.n	b7b76 <_strtod_l+0x8f6>
   b7b46:	4b29      	ldr	r3, [pc, #164]	; (b7bec <_strtod_l+0x96c>)
   b7b48:	429f      	cmp	r7, r3
   b7b4a:	d102      	bne.n	b7b52 <_strtod_l+0x8d2>
   b7b4c:	3101      	adds	r1, #1
   b7b4e:	f43f addf 	beq.w	b7710 <_strtod_l+0x490>
   b7b52:	4b23      	ldr	r3, [pc, #140]	; (b7be0 <_strtod_l+0x960>)
   b7b54:	403b      	ands	r3, r7
   b7b56:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   b7b5a:	f04f 0a00 	mov.w	sl, #0
   b7b5e:	9b04      	ldr	r3, [sp, #16]
   b7b60:	2b00      	cmp	r3, #0
   b7b62:	d1a4      	bne.n	b7aae <_strtod_l+0x82e>
   b7b64:	e5de      	b.n	b7724 <_strtod_l+0x4a4>
   b7b66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b7b6a:	e7ea      	b.n	b7b42 <_strtod_l+0x8c2>
   b7b6c:	4613      	mov	r3, r2
   b7b6e:	e7e8      	b.n	b7b42 <_strtod_l+0x8c2>
   b7b70:	ea53 030a 	orrs.w	r3, r3, sl
   b7b74:	d08c      	beq.n	b7a90 <_strtod_l+0x810>
   b7b76:	9b08      	ldr	r3, [sp, #32]
   b7b78:	b1db      	cbz	r3, b7bb2 <_strtod_l+0x932>
   b7b7a:	423b      	tst	r3, r7
   b7b7c:	d0ef      	beq.n	b7b5e <_strtod_l+0x8de>
   b7b7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b7b80:	9a04      	ldr	r2, [sp, #16]
   b7b82:	4650      	mov	r0, sl
   b7b84:	4659      	mov	r1, fp
   b7b86:	b1c3      	cbz	r3, b7bba <_strtod_l+0x93a>
   b7b88:	f7ff fb5b 	bl	b7242 <sulp>
   b7b8c:	4602      	mov	r2, r0
   b7b8e:	460b      	mov	r3, r1
   b7b90:	ec51 0b18 	vmov	r0, r1, d8
   b7b94:	f7fe fdc0 	bl	b6718 <__adddf3>
   b7b98:	4682      	mov	sl, r0
   b7b9a:	468b      	mov	fp, r1
   b7b9c:	e7df      	b.n	b7b5e <_strtod_l+0x8de>
   b7b9e:	4013      	ands	r3, r2
   b7ba0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   b7ba4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   b7ba8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   b7bac:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   b7bb0:	e7d5      	b.n	b7b5e <_strtod_l+0x8de>
   b7bb2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   b7bb4:	ea13 0f0a 	tst.w	r3, sl
   b7bb8:	e7e0      	b.n	b7b7c <_strtod_l+0x8fc>
   b7bba:	f7ff fb42 	bl	b7242 <sulp>
   b7bbe:	4602      	mov	r2, r0
   b7bc0:	460b      	mov	r3, r1
   b7bc2:	ec51 0b18 	vmov	r0, r1, d8
   b7bc6:	f7fe fda5 	bl	b6714 <__aeabi_dsub>
   b7bca:	2200      	movs	r2, #0
   b7bcc:	2300      	movs	r3, #0
   b7bce:	4682      	mov	sl, r0
   b7bd0:	468b      	mov	fp, r1
   b7bd2:	f7ff f9bf 	bl	b6f54 <__aeabi_dcmpeq>
   b7bd6:	2800      	cmp	r0, #0
   b7bd8:	d0c1      	beq.n	b7b5e <_strtod_l+0x8de>
   b7bda:	e611      	b.n	b7800 <_strtod_l+0x580>
   b7bdc:	fffffc02 	.word	0xfffffc02
   b7be0:	7ff00000 	.word	0x7ff00000
   b7be4:	39500000 	.word	0x39500000
   b7be8:	000fffff 	.word	0x000fffff
   b7bec:	7fefffff 	.word	0x7fefffff
   b7bf0:	000b9540 	.word	0x000b9540
   b7bf4:	4631      	mov	r1, r6
   b7bf6:	4628      	mov	r0, r5
   b7bf8:	f001 fa12 	bl	b9020 <__ratio>
   b7bfc:	ec59 8b10 	vmov	r8, r9, d0
   b7c00:	ee10 0a10 	vmov	r0, s0
   b7c04:	2200      	movs	r2, #0
   b7c06:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   b7c0a:	4649      	mov	r1, r9
   b7c0c:	f7ff f9b6 	bl	b6f7c <__aeabi_dcmple>
   b7c10:	2800      	cmp	r0, #0
   b7c12:	d07a      	beq.n	b7d0a <_strtod_l+0xa8a>
   b7c14:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b7c16:	2b00      	cmp	r3, #0
   b7c18:	d04a      	beq.n	b7cb0 <_strtod_l+0xa30>
   b7c1a:	4b95      	ldr	r3, [pc, #596]	; (b7e70 <_strtod_l+0xbf0>)
   b7c1c:	2200      	movs	r2, #0
   b7c1e:	e9cd 2308 	strd	r2, r3, [sp, #32]
   b7c22:	f8df 924c 	ldr.w	r9, [pc, #588]	; b7e70 <_strtod_l+0xbf0>
   b7c26:	f04f 0800 	mov.w	r8, #0
   b7c2a:	4b92      	ldr	r3, [pc, #584]	; (b7e74 <_strtod_l+0xbf4>)
   b7c2c:	403b      	ands	r3, r7
   b7c2e:	930d      	str	r3, [sp, #52]	; 0x34
   b7c30:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   b7c32:	4b91      	ldr	r3, [pc, #580]	; (b7e78 <_strtod_l+0xbf8>)
   b7c34:	429a      	cmp	r2, r3
   b7c36:	f040 80b0 	bne.w	b7d9a <_strtod_l+0xb1a>
   b7c3a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   b7c3e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   b7c42:	ec4b ab10 	vmov	d0, sl, fp
   b7c46:	e9cd 0108 	strd	r0, r1, [sp, #32]
   b7c4a:	f001 f911 	bl	b8e70 <__ulp>
   b7c4e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   b7c52:	ec53 2b10 	vmov	r2, r3, d0
   b7c56:	f7fe ff15 	bl	b6a84 <__aeabi_dmul>
   b7c5a:	4652      	mov	r2, sl
   b7c5c:	465b      	mov	r3, fp
   b7c5e:	f7fe fd5b 	bl	b6718 <__adddf3>
   b7c62:	460b      	mov	r3, r1
   b7c64:	4983      	ldr	r1, [pc, #524]	; (b7e74 <_strtod_l+0xbf4>)
   b7c66:	4a85      	ldr	r2, [pc, #532]	; (b7e7c <_strtod_l+0xbfc>)
   b7c68:	4019      	ands	r1, r3
   b7c6a:	4291      	cmp	r1, r2
   b7c6c:	4682      	mov	sl, r0
   b7c6e:	d960      	bls.n	b7d32 <_strtod_l+0xab2>
   b7c70:	ee18 3a90 	vmov	r3, s17
   b7c74:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   b7c78:	4293      	cmp	r3, r2
   b7c7a:	d104      	bne.n	b7c86 <_strtod_l+0xa06>
   b7c7c:	ee18 3a10 	vmov	r3, s16
   b7c80:	3301      	adds	r3, #1
   b7c82:	f43f ad45 	beq.w	b7710 <_strtod_l+0x490>
   b7c86:	f8df b200 	ldr.w	fp, [pc, #512]	; b7e88 <_strtod_l+0xc08>
   b7c8a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   b7c8e:	9918      	ldr	r1, [sp, #96]	; 0x60
   b7c90:	4620      	mov	r0, r4
   b7c92:	f000 fdbb 	bl	b880c <_Bfree>
   b7c96:	9905      	ldr	r1, [sp, #20]
   b7c98:	4620      	mov	r0, r4
   b7c9a:	f000 fdb7 	bl	b880c <_Bfree>
   b7c9e:	4631      	mov	r1, r6
   b7ca0:	4620      	mov	r0, r4
   b7ca2:	f000 fdb3 	bl	b880c <_Bfree>
   b7ca6:	4629      	mov	r1, r5
   b7ca8:	4620      	mov	r0, r4
   b7caa:	f000 fdaf 	bl	b880c <_Bfree>
   b7cae:	e61a      	b.n	b78e6 <_strtod_l+0x666>
   b7cb0:	f1ba 0f00 	cmp.w	sl, #0
   b7cb4:	d11b      	bne.n	b7cee <_strtod_l+0xa6e>
   b7cb6:	f3cb 0313 	ubfx	r3, fp, #0, #20
   b7cba:	b9f3      	cbnz	r3, b7cfa <_strtod_l+0xa7a>
   b7cbc:	4b6c      	ldr	r3, [pc, #432]	; (b7e70 <_strtod_l+0xbf0>)
   b7cbe:	2200      	movs	r2, #0
   b7cc0:	4640      	mov	r0, r8
   b7cc2:	4649      	mov	r1, r9
   b7cc4:	f7ff f950 	bl	b6f68 <__aeabi_dcmplt>
   b7cc8:	b9d0      	cbnz	r0, b7d00 <_strtod_l+0xa80>
   b7cca:	4640      	mov	r0, r8
   b7ccc:	4649      	mov	r1, r9
   b7cce:	4b6c      	ldr	r3, [pc, #432]	; (b7e80 <_strtod_l+0xc00>)
   b7cd0:	2200      	movs	r2, #0
   b7cd2:	f7fe fed7 	bl	b6a84 <__aeabi_dmul>
   b7cd6:	4680      	mov	r8, r0
   b7cd8:	4689      	mov	r9, r1
   b7cda:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   b7cde:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   b7ce2:	9315      	str	r3, [sp, #84]	; 0x54
   b7ce4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   b7ce8:	e9cd 2308 	strd	r2, r3, [sp, #32]
   b7cec:	e79d      	b.n	b7c2a <_strtod_l+0x9aa>
   b7cee:	f1ba 0f01 	cmp.w	sl, #1
   b7cf2:	d102      	bne.n	b7cfa <_strtod_l+0xa7a>
   b7cf4:	2f00      	cmp	r7, #0
   b7cf6:	f43f ad83 	beq.w	b7800 <_strtod_l+0x580>
   b7cfa:	4b62      	ldr	r3, [pc, #392]	; (b7e84 <_strtod_l+0xc04>)
   b7cfc:	2200      	movs	r2, #0
   b7cfe:	e78e      	b.n	b7c1e <_strtod_l+0x99e>
   b7d00:	f8df 917c 	ldr.w	r9, [pc, #380]	; b7e80 <_strtod_l+0xc00>
   b7d04:	f04f 0800 	mov.w	r8, #0
   b7d08:	e7e7      	b.n	b7cda <_strtod_l+0xa5a>
   b7d0a:	4b5d      	ldr	r3, [pc, #372]	; (b7e80 <_strtod_l+0xc00>)
   b7d0c:	4640      	mov	r0, r8
   b7d0e:	4649      	mov	r1, r9
   b7d10:	2200      	movs	r2, #0
   b7d12:	f7fe feb7 	bl	b6a84 <__aeabi_dmul>
   b7d16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b7d18:	4680      	mov	r8, r0
   b7d1a:	4689      	mov	r9, r1
   b7d1c:	b933      	cbnz	r3, b7d2c <_strtod_l+0xaac>
   b7d1e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   b7d22:	900e      	str	r0, [sp, #56]	; 0x38
   b7d24:	930f      	str	r3, [sp, #60]	; 0x3c
   b7d26:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   b7d2a:	e7dd      	b.n	b7ce8 <_strtod_l+0xa68>
   b7d2c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
   b7d30:	e7f9      	b.n	b7d26 <_strtod_l+0xaa6>
   b7d32:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   b7d36:	9b04      	ldr	r3, [sp, #16]
   b7d38:	2b00      	cmp	r3, #0
   b7d3a:	d1a8      	bne.n	b7c8e <_strtod_l+0xa0e>
   b7d3c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   b7d40:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   b7d42:	0d1b      	lsrs	r3, r3, #20
   b7d44:	051b      	lsls	r3, r3, #20
   b7d46:	429a      	cmp	r2, r3
   b7d48:	d1a1      	bne.n	b7c8e <_strtod_l+0xa0e>
   b7d4a:	4640      	mov	r0, r8
   b7d4c:	4649      	mov	r1, r9
   b7d4e:	f001 fa05 	bl	b915c <__aeabi_d2lz>
   b7d52:	f7fe fe69 	bl	b6a28 <__aeabi_l2d>
   b7d56:	4602      	mov	r2, r0
   b7d58:	460b      	mov	r3, r1
   b7d5a:	4640      	mov	r0, r8
   b7d5c:	4649      	mov	r1, r9
   b7d5e:	f7fe fcd9 	bl	b6714 <__aeabi_dsub>
   b7d62:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b7d64:	f3cb 0313 	ubfx	r3, fp, #0, #20
   b7d68:	ea43 030a 	orr.w	r3, r3, sl
   b7d6c:	4313      	orrs	r3, r2
   b7d6e:	4680      	mov	r8, r0
   b7d70:	4689      	mov	r9, r1
   b7d72:	d055      	beq.n	b7e20 <_strtod_l+0xba0>
   b7d74:	a336      	add	r3, pc, #216	; (adr r3, b7e50 <_strtod_l+0xbd0>)
   b7d76:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7d7a:	f7ff f8f5 	bl	b6f68 <__aeabi_dcmplt>
   b7d7e:	2800      	cmp	r0, #0
   b7d80:	f47f acd0 	bne.w	b7724 <_strtod_l+0x4a4>
   b7d84:	a334      	add	r3, pc, #208	; (adr r3, b7e58 <_strtod_l+0xbd8>)
   b7d86:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7d8a:	4640      	mov	r0, r8
   b7d8c:	4649      	mov	r1, r9
   b7d8e:	f7ff f909 	bl	b6fa4 <__aeabi_dcmpgt>
   b7d92:	2800      	cmp	r0, #0
   b7d94:	f43f af7b 	beq.w	b7c8e <_strtod_l+0xa0e>
   b7d98:	e4c4      	b.n	b7724 <_strtod_l+0x4a4>
   b7d9a:	9b04      	ldr	r3, [sp, #16]
   b7d9c:	b333      	cbz	r3, b7dec <_strtod_l+0xb6c>
   b7d9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   b7da0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   b7da4:	d822      	bhi.n	b7dec <_strtod_l+0xb6c>
   b7da6:	a32e      	add	r3, pc, #184	; (adr r3, b7e60 <_strtod_l+0xbe0>)
   b7da8:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7dac:	4640      	mov	r0, r8
   b7dae:	4649      	mov	r1, r9
   b7db0:	f7ff f8e4 	bl	b6f7c <__aeabi_dcmple>
   b7db4:	b1a0      	cbz	r0, b7de0 <_strtod_l+0xb60>
   b7db6:	4649      	mov	r1, r9
   b7db8:	4640      	mov	r0, r8
   b7dba:	f7ff f93b 	bl	b7034 <__aeabi_d2uiz>
   b7dbe:	2801      	cmp	r0, #1
   b7dc0:	bf38      	it	cc
   b7dc2:	2001      	movcc	r0, #1
   b7dc4:	f7fe fde4 	bl	b6990 <__aeabi_ui2d>
   b7dc8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   b7dca:	4680      	mov	r8, r0
   b7dcc:	4689      	mov	r9, r1
   b7dce:	bb23      	cbnz	r3, b7e1a <_strtod_l+0xb9a>
   b7dd0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   b7dd4:	9010      	str	r0, [sp, #64]	; 0x40
   b7dd6:	9311      	str	r3, [sp, #68]	; 0x44
   b7dd8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   b7ddc:	e9cd 2308 	strd	r2, r3, [sp, #32]
   b7de0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b7de2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   b7de4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   b7de8:	1a9b      	subs	r3, r3, r2
   b7dea:	9309      	str	r3, [sp, #36]	; 0x24
   b7dec:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   b7df0:	eeb0 0a48 	vmov.f32	s0, s16
   b7df4:	eef0 0a68 	vmov.f32	s1, s17
   b7df8:	e9cd 0108 	strd	r0, r1, [sp, #32]
   b7dfc:	f001 f838 	bl	b8e70 <__ulp>
   b7e00:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   b7e04:	ec53 2b10 	vmov	r2, r3, d0
   b7e08:	f7fe fe3c 	bl	b6a84 <__aeabi_dmul>
   b7e0c:	ec53 2b18 	vmov	r2, r3, d8
   b7e10:	f7fe fc82 	bl	b6718 <__adddf3>
   b7e14:	4682      	mov	sl, r0
   b7e16:	468b      	mov	fp, r1
   b7e18:	e78d      	b.n	b7d36 <_strtod_l+0xab6>
   b7e1a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
   b7e1e:	e7db      	b.n	b7dd8 <_strtod_l+0xb58>
   b7e20:	a311      	add	r3, pc, #68	; (adr r3, b7e68 <_strtod_l+0xbe8>)
   b7e22:	e9d3 2300 	ldrd	r2, r3, [r3]
   b7e26:	f7ff f89f 	bl	b6f68 <__aeabi_dcmplt>
   b7e2a:	e7b2      	b.n	b7d92 <_strtod_l+0xb12>
   b7e2c:	2300      	movs	r3, #0
   b7e2e:	930a      	str	r3, [sp, #40]	; 0x28
   b7e30:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   b7e32:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b7e34:	6013      	str	r3, [r2, #0]
   b7e36:	f7ff ba6b 	b.w	b7310 <_strtod_l+0x90>
   b7e3a:	2a65      	cmp	r2, #101	; 0x65
   b7e3c:	f43f ab5f 	beq.w	b74fe <_strtod_l+0x27e>
   b7e40:	2a45      	cmp	r2, #69	; 0x45
   b7e42:	f43f ab5c 	beq.w	b74fe <_strtod_l+0x27e>
   b7e46:	2301      	movs	r3, #1
   b7e48:	f7ff bb94 	b.w	b7574 <_strtod_l+0x2f4>
   b7e4c:	f3af 8000 	nop.w
   b7e50:	94a03595 	.word	0x94a03595
   b7e54:	3fdfffff 	.word	0x3fdfffff
   b7e58:	35afe535 	.word	0x35afe535
   b7e5c:	3fe00000 	.word	0x3fe00000
   b7e60:	ffc00000 	.word	0xffc00000
   b7e64:	41dfffff 	.word	0x41dfffff
   b7e68:	94a03595 	.word	0x94a03595
   b7e6c:	3fcfffff 	.word	0x3fcfffff
   b7e70:	3ff00000 	.word	0x3ff00000
   b7e74:	7ff00000 	.word	0x7ff00000
   b7e78:	7fe00000 	.word	0x7fe00000
   b7e7c:	7c9fffff 	.word	0x7c9fffff
   b7e80:	3fe00000 	.word	0x3fe00000
   b7e84:	bff00000 	.word	0xbff00000
   b7e88:	7fefffff 	.word	0x7fefffff

000b7e8c <strtod>:
   b7e8c:	460a      	mov	r2, r1
   b7e8e:	4601      	mov	r1, r0
   b7e90:	4802      	ldr	r0, [pc, #8]	; (b7e9c <strtod+0x10>)
   b7e92:	4b03      	ldr	r3, [pc, #12]	; (b7ea0 <strtod+0x14>)
   b7e94:	6800      	ldr	r0, [r0, #0]
   b7e96:	f7ff b9f3 	b.w	b7280 <_strtod_l>
   b7e9a:	bf00      	nop
   b7e9c:	2003e4a0 	.word	0x2003e4a0
   b7ea0:	2003e50c 	.word	0x2003e50c

000b7ea4 <_strtol_l.constprop.0>:
   b7ea4:	2b01      	cmp	r3, #1
   b7ea6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b7eaa:	d001      	beq.n	b7eb0 <_strtol_l.constprop.0+0xc>
   b7eac:	2b24      	cmp	r3, #36	; 0x24
   b7eae:	d906      	bls.n	b7ebe <_strtol_l.constprop.0+0x1a>
   b7eb0:	f7fc fc84 	bl	b47bc <__errno>
   b7eb4:	2316      	movs	r3, #22
   b7eb6:	6003      	str	r3, [r0, #0]
   b7eb8:	2000      	movs	r0, #0
   b7eba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b7ebe:	f8df c0e4 	ldr.w	ip, [pc, #228]	; b7fa4 <_strtol_l.constprop.0+0x100>
   b7ec2:	460d      	mov	r5, r1
   b7ec4:	462e      	mov	r6, r5
   b7ec6:	f815 4b01 	ldrb.w	r4, [r5], #1
   b7eca:	f814 700c 	ldrb.w	r7, [r4, ip]
   b7ece:	f017 0708 	ands.w	r7, r7, #8
   b7ed2:	d1f7      	bne.n	b7ec4 <_strtol_l.constprop.0+0x20>
   b7ed4:	2c2d      	cmp	r4, #45	; 0x2d
   b7ed6:	d132      	bne.n	b7f3e <_strtol_l.constprop.0+0x9a>
   b7ed8:	782c      	ldrb	r4, [r5, #0]
   b7eda:	2701      	movs	r7, #1
   b7edc:	1cb5      	adds	r5, r6, #2
   b7ede:	2b00      	cmp	r3, #0
   b7ee0:	d05b      	beq.n	b7f9a <_strtol_l.constprop.0+0xf6>
   b7ee2:	2b10      	cmp	r3, #16
   b7ee4:	d109      	bne.n	b7efa <_strtol_l.constprop.0+0x56>
   b7ee6:	2c30      	cmp	r4, #48	; 0x30
   b7ee8:	d107      	bne.n	b7efa <_strtol_l.constprop.0+0x56>
   b7eea:	782c      	ldrb	r4, [r5, #0]
   b7eec:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   b7ef0:	2c58      	cmp	r4, #88	; 0x58
   b7ef2:	d14d      	bne.n	b7f90 <_strtol_l.constprop.0+0xec>
   b7ef4:	786c      	ldrb	r4, [r5, #1]
   b7ef6:	2310      	movs	r3, #16
   b7ef8:	3502      	adds	r5, #2
   b7efa:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   b7efe:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b7f02:	f04f 0c00 	mov.w	ip, #0
   b7f06:	fbb8 f9f3 	udiv	r9, r8, r3
   b7f0a:	4666      	mov	r6, ip
   b7f0c:	fb03 8a19 	mls	sl, r3, r9, r8
   b7f10:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   b7f14:	f1be 0f09 	cmp.w	lr, #9
   b7f18:	d816      	bhi.n	b7f48 <_strtol_l.constprop.0+0xa4>
   b7f1a:	4674      	mov	r4, lr
   b7f1c:	42a3      	cmp	r3, r4
   b7f1e:	dd24      	ble.n	b7f6a <_strtol_l.constprop.0+0xc6>
   b7f20:	f1bc 0f00 	cmp.w	ip, #0
   b7f24:	db1e      	blt.n	b7f64 <_strtol_l.constprop.0+0xc0>
   b7f26:	45b1      	cmp	r9, r6
   b7f28:	d31c      	bcc.n	b7f64 <_strtol_l.constprop.0+0xc0>
   b7f2a:	d101      	bne.n	b7f30 <_strtol_l.constprop.0+0x8c>
   b7f2c:	45a2      	cmp	sl, r4
   b7f2e:	db19      	blt.n	b7f64 <_strtol_l.constprop.0+0xc0>
   b7f30:	fb06 4603 	mla	r6, r6, r3, r4
   b7f34:	f04f 0c01 	mov.w	ip, #1
   b7f38:	f815 4b01 	ldrb.w	r4, [r5], #1
   b7f3c:	e7e8      	b.n	b7f10 <_strtol_l.constprop.0+0x6c>
   b7f3e:	2c2b      	cmp	r4, #43	; 0x2b
   b7f40:	bf04      	itt	eq
   b7f42:	782c      	ldrbeq	r4, [r5, #0]
   b7f44:	1cb5      	addeq	r5, r6, #2
   b7f46:	e7ca      	b.n	b7ede <_strtol_l.constprop.0+0x3a>
   b7f48:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   b7f4c:	f1be 0f19 	cmp.w	lr, #25
   b7f50:	d801      	bhi.n	b7f56 <_strtol_l.constprop.0+0xb2>
   b7f52:	3c37      	subs	r4, #55	; 0x37
   b7f54:	e7e2      	b.n	b7f1c <_strtol_l.constprop.0+0x78>
   b7f56:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   b7f5a:	f1be 0f19 	cmp.w	lr, #25
   b7f5e:	d804      	bhi.n	b7f6a <_strtol_l.constprop.0+0xc6>
   b7f60:	3c57      	subs	r4, #87	; 0x57
   b7f62:	e7db      	b.n	b7f1c <_strtol_l.constprop.0+0x78>
   b7f64:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   b7f68:	e7e6      	b.n	b7f38 <_strtol_l.constprop.0+0x94>
   b7f6a:	f1bc 0f00 	cmp.w	ip, #0
   b7f6e:	da05      	bge.n	b7f7c <_strtol_l.constprop.0+0xd8>
   b7f70:	2322      	movs	r3, #34	; 0x22
   b7f72:	6003      	str	r3, [r0, #0]
   b7f74:	4646      	mov	r6, r8
   b7f76:	b942      	cbnz	r2, b7f8a <_strtol_l.constprop.0+0xe6>
   b7f78:	4630      	mov	r0, r6
   b7f7a:	e79e      	b.n	b7eba <_strtol_l.constprop.0+0x16>
   b7f7c:	b107      	cbz	r7, b7f80 <_strtol_l.constprop.0+0xdc>
   b7f7e:	4276      	negs	r6, r6
   b7f80:	2a00      	cmp	r2, #0
   b7f82:	d0f9      	beq.n	b7f78 <_strtol_l.constprop.0+0xd4>
   b7f84:	f1bc 0f00 	cmp.w	ip, #0
   b7f88:	d000      	beq.n	b7f8c <_strtol_l.constprop.0+0xe8>
   b7f8a:	1e69      	subs	r1, r5, #1
   b7f8c:	6011      	str	r1, [r2, #0]
   b7f8e:	e7f3      	b.n	b7f78 <_strtol_l.constprop.0+0xd4>
   b7f90:	2430      	movs	r4, #48	; 0x30
   b7f92:	2b00      	cmp	r3, #0
   b7f94:	d1b1      	bne.n	b7efa <_strtol_l.constprop.0+0x56>
   b7f96:	2308      	movs	r3, #8
   b7f98:	e7af      	b.n	b7efa <_strtol_l.constprop.0+0x56>
   b7f9a:	2c30      	cmp	r4, #48	; 0x30
   b7f9c:	d0a5      	beq.n	b7eea <_strtol_l.constprop.0+0x46>
   b7f9e:	230a      	movs	r3, #10
   b7fa0:	e7ab      	b.n	b7efa <_strtol_l.constprop.0+0x56>
   b7fa2:	bf00      	nop
   b7fa4:	000b9569 	.word	0x000b9569

000b7fa8 <strtol>:
   b7fa8:	4613      	mov	r3, r2
   b7faa:	460a      	mov	r2, r1
   b7fac:	4601      	mov	r1, r0
   b7fae:	4802      	ldr	r0, [pc, #8]	; (b7fb8 <strtol+0x10>)
   b7fb0:	6800      	ldr	r0, [r0, #0]
   b7fb2:	f7ff bf77 	b.w	b7ea4 <_strtol_l.constprop.0>
   b7fb6:	bf00      	nop
   b7fb8:	2003e4a0 	.word	0x2003e4a0

000b7fbc <__register_exitproc>:
   b7fbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b7fc0:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b807c <__register_exitproc+0xc0>
   b7fc4:	4606      	mov	r6, r0
   b7fc6:	f8d8 0000 	ldr.w	r0, [r8]
   b7fca:	461f      	mov	r7, r3
   b7fcc:	460d      	mov	r5, r1
   b7fce:	4691      	mov	r9, r2
   b7fd0:	f000 fbc6 	bl	b8760 <__retarget_lock_acquire_recursive>
   b7fd4:	4b25      	ldr	r3, [pc, #148]	; (b806c <__register_exitproc+0xb0>)
   b7fd6:	681c      	ldr	r4, [r3, #0]
   b7fd8:	b934      	cbnz	r4, b7fe8 <__register_exitproc+0x2c>
   b7fda:	4c25      	ldr	r4, [pc, #148]	; (b8070 <__register_exitproc+0xb4>)
   b7fdc:	601c      	str	r4, [r3, #0]
   b7fde:	4b25      	ldr	r3, [pc, #148]	; (b8074 <__register_exitproc+0xb8>)
   b7fe0:	b113      	cbz	r3, b7fe8 <__register_exitproc+0x2c>
   b7fe2:	681b      	ldr	r3, [r3, #0]
   b7fe4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b7fe8:	6863      	ldr	r3, [r4, #4]
   b7fea:	2b1f      	cmp	r3, #31
   b7fec:	dd07      	ble.n	b7ffe <__register_exitproc+0x42>
   b7fee:	f8d8 0000 	ldr.w	r0, [r8]
   b7ff2:	f000 fbb7 	bl	b8764 <__retarget_lock_release_recursive>
   b7ff6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b7ffa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b7ffe:	b34e      	cbz	r6, b8054 <__register_exitproc+0x98>
   b8000:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b8004:	b988      	cbnz	r0, b802a <__register_exitproc+0x6e>
   b8006:	4b1c      	ldr	r3, [pc, #112]	; (b8078 <__register_exitproc+0xbc>)
   b8008:	b923      	cbnz	r3, b8014 <__register_exitproc+0x58>
   b800a:	f8d8 0000 	ldr.w	r0, [r8]
   b800e:	f000 fba8 	bl	b8762 <__retarget_lock_release>
   b8012:	e7f0      	b.n	b7ff6 <__register_exitproc+0x3a>
   b8014:	f44f 7084 	mov.w	r0, #264	; 0x108
   b8018:	f7fc fba0 	bl	b475c <malloc>
   b801c:	2800      	cmp	r0, #0
   b801e:	d0f4      	beq.n	b800a <__register_exitproc+0x4e>
   b8020:	2300      	movs	r3, #0
   b8022:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b8026:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b802a:	6863      	ldr	r3, [r4, #4]
   b802c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b8030:	2201      	movs	r2, #1
   b8032:	409a      	lsls	r2, r3
   b8034:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b8038:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b803c:	4313      	orrs	r3, r2
   b803e:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b8042:	2e02      	cmp	r6, #2
   b8044:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b8048:	bf02      	ittt	eq
   b804a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b804e:	4313      	orreq	r3, r2
   b8050:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b8054:	6863      	ldr	r3, [r4, #4]
   b8056:	f8d8 0000 	ldr.w	r0, [r8]
   b805a:	1c5a      	adds	r2, r3, #1
   b805c:	3302      	adds	r3, #2
   b805e:	6062      	str	r2, [r4, #4]
   b8060:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b8064:	f000 fb7e 	bl	b8764 <__retarget_lock_release_recursive>
   b8068:	2000      	movs	r0, #0
   b806a:	e7c6      	b.n	b7ffa <__register_exitproc+0x3e>
   b806c:	2003e7e8 	.word	0x2003e7e8
   b8070:	2003e75c 	.word	0x2003e75c
   b8074:	00000000 	.word	0x00000000
   b8078:	000b475d 	.word	0x000b475d
   b807c:	2003e504 	.word	0x2003e504

000b8080 <rshift>:
   b8080:	6903      	ldr	r3, [r0, #16]
   b8082:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   b8086:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b808a:	ea4f 1261 	mov.w	r2, r1, asr #5
   b808e:	f100 0414 	add.w	r4, r0, #20
   b8092:	dd45      	ble.n	b8120 <rshift+0xa0>
   b8094:	f011 011f 	ands.w	r1, r1, #31
   b8098:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   b809c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   b80a0:	d10c      	bne.n	b80bc <rshift+0x3c>
   b80a2:	f100 0710 	add.w	r7, r0, #16
   b80a6:	4629      	mov	r1, r5
   b80a8:	42b1      	cmp	r1, r6
   b80aa:	d334      	bcc.n	b8116 <rshift+0x96>
   b80ac:	1a9b      	subs	r3, r3, r2
   b80ae:	009b      	lsls	r3, r3, #2
   b80b0:	1eea      	subs	r2, r5, #3
   b80b2:	4296      	cmp	r6, r2
   b80b4:	bf38      	it	cc
   b80b6:	2300      	movcc	r3, #0
   b80b8:	4423      	add	r3, r4
   b80ba:	e015      	b.n	b80e8 <rshift+0x68>
   b80bc:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   b80c0:	f1c1 0820 	rsb	r8, r1, #32
   b80c4:	40cf      	lsrs	r7, r1
   b80c6:	f105 0e04 	add.w	lr, r5, #4
   b80ca:	46a1      	mov	r9, r4
   b80cc:	4576      	cmp	r6, lr
   b80ce:	46f4      	mov	ip, lr
   b80d0:	d815      	bhi.n	b80fe <rshift+0x7e>
   b80d2:	1a9a      	subs	r2, r3, r2
   b80d4:	0092      	lsls	r2, r2, #2
   b80d6:	3a04      	subs	r2, #4
   b80d8:	3501      	adds	r5, #1
   b80da:	42ae      	cmp	r6, r5
   b80dc:	bf38      	it	cc
   b80de:	2200      	movcc	r2, #0
   b80e0:	18a3      	adds	r3, r4, r2
   b80e2:	50a7      	str	r7, [r4, r2]
   b80e4:	b107      	cbz	r7, b80e8 <rshift+0x68>
   b80e6:	3304      	adds	r3, #4
   b80e8:	1b1a      	subs	r2, r3, r4
   b80ea:	42a3      	cmp	r3, r4
   b80ec:	ea4f 02a2 	mov.w	r2, r2, asr #2
   b80f0:	bf08      	it	eq
   b80f2:	2300      	moveq	r3, #0
   b80f4:	6102      	str	r2, [r0, #16]
   b80f6:	bf08      	it	eq
   b80f8:	6143      	streq	r3, [r0, #20]
   b80fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b80fe:	f8dc c000 	ldr.w	ip, [ip]
   b8102:	fa0c fc08 	lsl.w	ip, ip, r8
   b8106:	ea4c 0707 	orr.w	r7, ip, r7
   b810a:	f849 7b04 	str.w	r7, [r9], #4
   b810e:	f85e 7b04 	ldr.w	r7, [lr], #4
   b8112:	40cf      	lsrs	r7, r1
   b8114:	e7da      	b.n	b80cc <rshift+0x4c>
   b8116:	f851 cb04 	ldr.w	ip, [r1], #4
   b811a:	f847 cf04 	str.w	ip, [r7, #4]!
   b811e:	e7c3      	b.n	b80a8 <rshift+0x28>
   b8120:	4623      	mov	r3, r4
   b8122:	e7e1      	b.n	b80e8 <rshift+0x68>

000b8124 <__hexdig_fun>:
   b8124:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b8128:	2b09      	cmp	r3, #9
   b812a:	d802      	bhi.n	b8132 <__hexdig_fun+0xe>
   b812c:	3820      	subs	r0, #32
   b812e:	b2c0      	uxtb	r0, r0
   b8130:	4770      	bx	lr
   b8132:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   b8136:	2b05      	cmp	r3, #5
   b8138:	d801      	bhi.n	b813e <__hexdig_fun+0x1a>
   b813a:	3847      	subs	r0, #71	; 0x47
   b813c:	e7f7      	b.n	b812e <__hexdig_fun+0xa>
   b813e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   b8142:	2b05      	cmp	r3, #5
   b8144:	d801      	bhi.n	b814a <__hexdig_fun+0x26>
   b8146:	3827      	subs	r0, #39	; 0x27
   b8148:	e7f1      	b.n	b812e <__hexdig_fun+0xa>
   b814a:	2000      	movs	r0, #0
   b814c:	4770      	bx	lr
	...

000b8150 <__gethex>:
   b8150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8154:	ed2d 8b02 	vpush	{d8}
   b8158:	b089      	sub	sp, #36	; 0x24
   b815a:	ee08 0a10 	vmov	s16, r0
   b815e:	9304      	str	r3, [sp, #16]
   b8160:	4bb4      	ldr	r3, [pc, #720]	; (b8434 <__gethex+0x2e4>)
   b8162:	681b      	ldr	r3, [r3, #0]
   b8164:	9301      	str	r3, [sp, #4]
   b8166:	4618      	mov	r0, r3
   b8168:	468b      	mov	fp, r1
   b816a:	4690      	mov	r8, r2
   b816c:	f7ff f839 	bl	b71e2 <strlen>
   b8170:	9b01      	ldr	r3, [sp, #4]
   b8172:	f8db 2000 	ldr.w	r2, [fp]
   b8176:	4403      	add	r3, r0
   b8178:	4682      	mov	sl, r0
   b817a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   b817e:	9305      	str	r3, [sp, #20]
   b8180:	1c93      	adds	r3, r2, #2
   b8182:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   b8186:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   b818a:	32fe      	adds	r2, #254	; 0xfe
   b818c:	18d1      	adds	r1, r2, r3
   b818e:	461f      	mov	r7, r3
   b8190:	f813 0b01 	ldrb.w	r0, [r3], #1
   b8194:	9100      	str	r1, [sp, #0]
   b8196:	2830      	cmp	r0, #48	; 0x30
   b8198:	d0f8      	beq.n	b818c <__gethex+0x3c>
   b819a:	f7ff ffc3 	bl	b8124 <__hexdig_fun>
   b819e:	4604      	mov	r4, r0
   b81a0:	2800      	cmp	r0, #0
   b81a2:	d13a      	bne.n	b821a <__gethex+0xca>
   b81a4:	9901      	ldr	r1, [sp, #4]
   b81a6:	4652      	mov	r2, sl
   b81a8:	4638      	mov	r0, r7
   b81aa:	f7ff f822 	bl	b71f2 <strncmp>
   b81ae:	4605      	mov	r5, r0
   b81b0:	2800      	cmp	r0, #0
   b81b2:	d168      	bne.n	b8286 <__gethex+0x136>
   b81b4:	f817 000a 	ldrb.w	r0, [r7, sl]
   b81b8:	eb07 060a 	add.w	r6, r7, sl
   b81bc:	f7ff ffb2 	bl	b8124 <__hexdig_fun>
   b81c0:	2800      	cmp	r0, #0
   b81c2:	d062      	beq.n	b828a <__gethex+0x13a>
   b81c4:	4633      	mov	r3, r6
   b81c6:	7818      	ldrb	r0, [r3, #0]
   b81c8:	2830      	cmp	r0, #48	; 0x30
   b81ca:	461f      	mov	r7, r3
   b81cc:	f103 0301 	add.w	r3, r3, #1
   b81d0:	d0f9      	beq.n	b81c6 <__gethex+0x76>
   b81d2:	f7ff ffa7 	bl	b8124 <__hexdig_fun>
   b81d6:	2301      	movs	r3, #1
   b81d8:	fab0 f480 	clz	r4, r0
   b81dc:	0964      	lsrs	r4, r4, #5
   b81de:	4635      	mov	r5, r6
   b81e0:	9300      	str	r3, [sp, #0]
   b81e2:	463a      	mov	r2, r7
   b81e4:	4616      	mov	r6, r2
   b81e6:	3201      	adds	r2, #1
   b81e8:	7830      	ldrb	r0, [r6, #0]
   b81ea:	f7ff ff9b 	bl	b8124 <__hexdig_fun>
   b81ee:	2800      	cmp	r0, #0
   b81f0:	d1f8      	bne.n	b81e4 <__gethex+0x94>
   b81f2:	9901      	ldr	r1, [sp, #4]
   b81f4:	4652      	mov	r2, sl
   b81f6:	4630      	mov	r0, r6
   b81f8:	f7fe fffb 	bl	b71f2 <strncmp>
   b81fc:	b980      	cbnz	r0, b8220 <__gethex+0xd0>
   b81fe:	b94d      	cbnz	r5, b8214 <__gethex+0xc4>
   b8200:	eb06 050a 	add.w	r5, r6, sl
   b8204:	462a      	mov	r2, r5
   b8206:	4616      	mov	r6, r2
   b8208:	3201      	adds	r2, #1
   b820a:	7830      	ldrb	r0, [r6, #0]
   b820c:	f7ff ff8a 	bl	b8124 <__hexdig_fun>
   b8210:	2800      	cmp	r0, #0
   b8212:	d1f8      	bne.n	b8206 <__gethex+0xb6>
   b8214:	1bad      	subs	r5, r5, r6
   b8216:	00ad      	lsls	r5, r5, #2
   b8218:	e004      	b.n	b8224 <__gethex+0xd4>
   b821a:	2400      	movs	r4, #0
   b821c:	4625      	mov	r5, r4
   b821e:	e7e0      	b.n	b81e2 <__gethex+0x92>
   b8220:	2d00      	cmp	r5, #0
   b8222:	d1f7      	bne.n	b8214 <__gethex+0xc4>
   b8224:	7833      	ldrb	r3, [r6, #0]
   b8226:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   b822a:	2b50      	cmp	r3, #80	; 0x50
   b822c:	d13b      	bne.n	b82a6 <__gethex+0x156>
   b822e:	7873      	ldrb	r3, [r6, #1]
   b8230:	2b2b      	cmp	r3, #43	; 0x2b
   b8232:	d02c      	beq.n	b828e <__gethex+0x13e>
   b8234:	2b2d      	cmp	r3, #45	; 0x2d
   b8236:	d02e      	beq.n	b8296 <__gethex+0x146>
   b8238:	1c71      	adds	r1, r6, #1
   b823a:	f04f 0900 	mov.w	r9, #0
   b823e:	7808      	ldrb	r0, [r1, #0]
   b8240:	f7ff ff70 	bl	b8124 <__hexdig_fun>
   b8244:	1e43      	subs	r3, r0, #1
   b8246:	b2db      	uxtb	r3, r3
   b8248:	2b18      	cmp	r3, #24
   b824a:	d82c      	bhi.n	b82a6 <__gethex+0x156>
   b824c:	f1a0 0210 	sub.w	r2, r0, #16
   b8250:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   b8254:	f7ff ff66 	bl	b8124 <__hexdig_fun>
   b8258:	1e43      	subs	r3, r0, #1
   b825a:	b2db      	uxtb	r3, r3
   b825c:	2b18      	cmp	r3, #24
   b825e:	d91d      	bls.n	b829c <__gethex+0x14c>
   b8260:	f1b9 0f00 	cmp.w	r9, #0
   b8264:	d000      	beq.n	b8268 <__gethex+0x118>
   b8266:	4252      	negs	r2, r2
   b8268:	4415      	add	r5, r2
   b826a:	f8cb 1000 	str.w	r1, [fp]
   b826e:	b1e4      	cbz	r4, b82aa <__gethex+0x15a>
   b8270:	9b00      	ldr	r3, [sp, #0]
   b8272:	2b00      	cmp	r3, #0
   b8274:	bf14      	ite	ne
   b8276:	2700      	movne	r7, #0
   b8278:	2706      	moveq	r7, #6
   b827a:	4638      	mov	r0, r7
   b827c:	b009      	add	sp, #36	; 0x24
   b827e:	ecbd 8b02 	vpop	{d8}
   b8282:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b8286:	463e      	mov	r6, r7
   b8288:	4625      	mov	r5, r4
   b828a:	2401      	movs	r4, #1
   b828c:	e7ca      	b.n	b8224 <__gethex+0xd4>
   b828e:	f04f 0900 	mov.w	r9, #0
   b8292:	1cb1      	adds	r1, r6, #2
   b8294:	e7d3      	b.n	b823e <__gethex+0xee>
   b8296:	f04f 0901 	mov.w	r9, #1
   b829a:	e7fa      	b.n	b8292 <__gethex+0x142>
   b829c:	230a      	movs	r3, #10
   b829e:	fb03 0202 	mla	r2, r3, r2, r0
   b82a2:	3a10      	subs	r2, #16
   b82a4:	e7d4      	b.n	b8250 <__gethex+0x100>
   b82a6:	4631      	mov	r1, r6
   b82a8:	e7df      	b.n	b826a <__gethex+0x11a>
   b82aa:	1bf3      	subs	r3, r6, r7
   b82ac:	3b01      	subs	r3, #1
   b82ae:	4621      	mov	r1, r4
   b82b0:	2b07      	cmp	r3, #7
   b82b2:	dc0b      	bgt.n	b82cc <__gethex+0x17c>
   b82b4:	ee18 0a10 	vmov	r0, s16
   b82b8:	f000 fa68 	bl	b878c <_Balloc>
   b82bc:	4604      	mov	r4, r0
   b82be:	b940      	cbnz	r0, b82d2 <__gethex+0x182>
   b82c0:	4b5d      	ldr	r3, [pc, #372]	; (b8438 <__gethex+0x2e8>)
   b82c2:	4602      	mov	r2, r0
   b82c4:	21de      	movs	r1, #222	; 0xde
   b82c6:	485d      	ldr	r0, [pc, #372]	; (b843c <__gethex+0x2ec>)
   b82c8:	f7fc fa80 	bl	b47cc <__assert_func>
   b82cc:	3101      	adds	r1, #1
   b82ce:	105b      	asrs	r3, r3, #1
   b82d0:	e7ee      	b.n	b82b0 <__gethex+0x160>
   b82d2:	f100 0914 	add.w	r9, r0, #20
   b82d6:	f04f 0b00 	mov.w	fp, #0
   b82da:	f1ca 0301 	rsb	r3, sl, #1
   b82de:	f8cd 9008 	str.w	r9, [sp, #8]
   b82e2:	f8cd b000 	str.w	fp, [sp]
   b82e6:	9306      	str	r3, [sp, #24]
   b82e8:	42b7      	cmp	r7, r6
   b82ea:	d340      	bcc.n	b836e <__gethex+0x21e>
   b82ec:	9802      	ldr	r0, [sp, #8]
   b82ee:	9b00      	ldr	r3, [sp, #0]
   b82f0:	f840 3b04 	str.w	r3, [r0], #4
   b82f4:	eba0 0009 	sub.w	r0, r0, r9
   b82f8:	1080      	asrs	r0, r0, #2
   b82fa:	0146      	lsls	r6, r0, #5
   b82fc:	6120      	str	r0, [r4, #16]
   b82fe:	4618      	mov	r0, r3
   b8300:	f000 fb36 	bl	b8970 <__hi0bits>
   b8304:	1a30      	subs	r0, r6, r0
   b8306:	f8d8 6000 	ldr.w	r6, [r8]
   b830a:	42b0      	cmp	r0, r6
   b830c:	dd63      	ble.n	b83d6 <__gethex+0x286>
   b830e:	1b87      	subs	r7, r0, r6
   b8310:	4639      	mov	r1, r7
   b8312:	4620      	mov	r0, r4
   b8314:	f000 feda 	bl	b90cc <__any_on>
   b8318:	4682      	mov	sl, r0
   b831a:	b1a8      	cbz	r0, b8348 <__gethex+0x1f8>
   b831c:	1e7b      	subs	r3, r7, #1
   b831e:	1159      	asrs	r1, r3, #5
   b8320:	f003 021f 	and.w	r2, r3, #31
   b8324:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   b8328:	f04f 0a01 	mov.w	sl, #1
   b832c:	fa0a f202 	lsl.w	r2, sl, r2
   b8330:	420a      	tst	r2, r1
   b8332:	d009      	beq.n	b8348 <__gethex+0x1f8>
   b8334:	4553      	cmp	r3, sl
   b8336:	dd05      	ble.n	b8344 <__gethex+0x1f4>
   b8338:	1eb9      	subs	r1, r7, #2
   b833a:	4620      	mov	r0, r4
   b833c:	f000 fec6 	bl	b90cc <__any_on>
   b8340:	2800      	cmp	r0, #0
   b8342:	d145      	bne.n	b83d0 <__gethex+0x280>
   b8344:	f04f 0a02 	mov.w	sl, #2
   b8348:	4639      	mov	r1, r7
   b834a:	4620      	mov	r0, r4
   b834c:	f7ff fe98 	bl	b8080 <rshift>
   b8350:	443d      	add	r5, r7
   b8352:	f8d8 3008 	ldr.w	r3, [r8, #8]
   b8356:	42ab      	cmp	r3, r5
   b8358:	da4c      	bge.n	b83f4 <__gethex+0x2a4>
   b835a:	ee18 0a10 	vmov	r0, s16
   b835e:	4621      	mov	r1, r4
   b8360:	f000 fa54 	bl	b880c <_Bfree>
   b8364:	9a14      	ldr	r2, [sp, #80]	; 0x50
   b8366:	2300      	movs	r3, #0
   b8368:	6013      	str	r3, [r2, #0]
   b836a:	27a3      	movs	r7, #163	; 0xa3
   b836c:	e785      	b.n	b827a <__gethex+0x12a>
   b836e:	1e73      	subs	r3, r6, #1
   b8370:	9a05      	ldr	r2, [sp, #20]
   b8372:	9303      	str	r3, [sp, #12]
   b8374:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   b8378:	4293      	cmp	r3, r2
   b837a:	d019      	beq.n	b83b0 <__gethex+0x260>
   b837c:	f1bb 0f20 	cmp.w	fp, #32
   b8380:	d107      	bne.n	b8392 <__gethex+0x242>
   b8382:	9b02      	ldr	r3, [sp, #8]
   b8384:	9a00      	ldr	r2, [sp, #0]
   b8386:	f843 2b04 	str.w	r2, [r3], #4
   b838a:	9302      	str	r3, [sp, #8]
   b838c:	2300      	movs	r3, #0
   b838e:	9300      	str	r3, [sp, #0]
   b8390:	469b      	mov	fp, r3
   b8392:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   b8396:	f7ff fec5 	bl	b8124 <__hexdig_fun>
   b839a:	9b00      	ldr	r3, [sp, #0]
   b839c:	f000 000f 	and.w	r0, r0, #15
   b83a0:	fa00 f00b 	lsl.w	r0, r0, fp
   b83a4:	4303      	orrs	r3, r0
   b83a6:	9300      	str	r3, [sp, #0]
   b83a8:	f10b 0b04 	add.w	fp, fp, #4
   b83ac:	9b03      	ldr	r3, [sp, #12]
   b83ae:	e00d      	b.n	b83cc <__gethex+0x27c>
   b83b0:	9b03      	ldr	r3, [sp, #12]
   b83b2:	9a06      	ldr	r2, [sp, #24]
   b83b4:	4413      	add	r3, r2
   b83b6:	42bb      	cmp	r3, r7
   b83b8:	d3e0      	bcc.n	b837c <__gethex+0x22c>
   b83ba:	4618      	mov	r0, r3
   b83bc:	9901      	ldr	r1, [sp, #4]
   b83be:	9307      	str	r3, [sp, #28]
   b83c0:	4652      	mov	r2, sl
   b83c2:	f7fe ff16 	bl	b71f2 <strncmp>
   b83c6:	9b07      	ldr	r3, [sp, #28]
   b83c8:	2800      	cmp	r0, #0
   b83ca:	d1d7      	bne.n	b837c <__gethex+0x22c>
   b83cc:	461e      	mov	r6, r3
   b83ce:	e78b      	b.n	b82e8 <__gethex+0x198>
   b83d0:	f04f 0a03 	mov.w	sl, #3
   b83d4:	e7b8      	b.n	b8348 <__gethex+0x1f8>
   b83d6:	da0a      	bge.n	b83ee <__gethex+0x29e>
   b83d8:	1a37      	subs	r7, r6, r0
   b83da:	4621      	mov	r1, r4
   b83dc:	ee18 0a10 	vmov	r0, s16
   b83e0:	463a      	mov	r2, r7
   b83e2:	f000 fc2f 	bl	b8c44 <__lshift>
   b83e6:	1bed      	subs	r5, r5, r7
   b83e8:	4604      	mov	r4, r0
   b83ea:	f100 0914 	add.w	r9, r0, #20
   b83ee:	f04f 0a00 	mov.w	sl, #0
   b83f2:	e7ae      	b.n	b8352 <__gethex+0x202>
   b83f4:	f8d8 0004 	ldr.w	r0, [r8, #4]
   b83f8:	42a8      	cmp	r0, r5
   b83fa:	dd72      	ble.n	b84e2 <__gethex+0x392>
   b83fc:	1b45      	subs	r5, r0, r5
   b83fe:	42ae      	cmp	r6, r5
   b8400:	dc36      	bgt.n	b8470 <__gethex+0x320>
   b8402:	f8d8 300c 	ldr.w	r3, [r8, #12]
   b8406:	2b02      	cmp	r3, #2
   b8408:	d02a      	beq.n	b8460 <__gethex+0x310>
   b840a:	2b03      	cmp	r3, #3
   b840c:	d02c      	beq.n	b8468 <__gethex+0x318>
   b840e:	2b01      	cmp	r3, #1
   b8410:	d11c      	bne.n	b844c <__gethex+0x2fc>
   b8412:	42ae      	cmp	r6, r5
   b8414:	d11a      	bne.n	b844c <__gethex+0x2fc>
   b8416:	2e01      	cmp	r6, #1
   b8418:	d112      	bne.n	b8440 <__gethex+0x2f0>
   b841a:	9a04      	ldr	r2, [sp, #16]
   b841c:	f8d8 3004 	ldr.w	r3, [r8, #4]
   b8420:	6013      	str	r3, [r2, #0]
   b8422:	2301      	movs	r3, #1
   b8424:	6123      	str	r3, [r4, #16]
   b8426:	f8c9 3000 	str.w	r3, [r9]
   b842a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   b842c:	2762      	movs	r7, #98	; 0x62
   b842e:	601c      	str	r4, [r3, #0]
   b8430:	e723      	b.n	b827a <__gethex+0x12a>
   b8432:	bf00      	nop
   b8434:	000b96dc 	.word	0x000b96dc
   b8438:	000b9669 	.word	0x000b9669
   b843c:	000b967a 	.word	0x000b967a
   b8440:	1e71      	subs	r1, r6, #1
   b8442:	4620      	mov	r0, r4
   b8444:	f000 fe42 	bl	b90cc <__any_on>
   b8448:	2800      	cmp	r0, #0
   b844a:	d1e6      	bne.n	b841a <__gethex+0x2ca>
   b844c:	ee18 0a10 	vmov	r0, s16
   b8450:	4621      	mov	r1, r4
   b8452:	f000 f9db 	bl	b880c <_Bfree>
   b8456:	9a14      	ldr	r2, [sp, #80]	; 0x50
   b8458:	2300      	movs	r3, #0
   b845a:	6013      	str	r3, [r2, #0]
   b845c:	2750      	movs	r7, #80	; 0x50
   b845e:	e70c      	b.n	b827a <__gethex+0x12a>
   b8460:	9b15      	ldr	r3, [sp, #84]	; 0x54
   b8462:	2b00      	cmp	r3, #0
   b8464:	d1f2      	bne.n	b844c <__gethex+0x2fc>
   b8466:	e7d8      	b.n	b841a <__gethex+0x2ca>
   b8468:	9b15      	ldr	r3, [sp, #84]	; 0x54
   b846a:	2b00      	cmp	r3, #0
   b846c:	d1d5      	bne.n	b841a <__gethex+0x2ca>
   b846e:	e7ed      	b.n	b844c <__gethex+0x2fc>
   b8470:	1e6f      	subs	r7, r5, #1
   b8472:	f1ba 0f00 	cmp.w	sl, #0
   b8476:	d131      	bne.n	b84dc <__gethex+0x38c>
   b8478:	b127      	cbz	r7, b8484 <__gethex+0x334>
   b847a:	4639      	mov	r1, r7
   b847c:	4620      	mov	r0, r4
   b847e:	f000 fe25 	bl	b90cc <__any_on>
   b8482:	4682      	mov	sl, r0
   b8484:	117b      	asrs	r3, r7, #5
   b8486:	2101      	movs	r1, #1
   b8488:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   b848c:	f007 071f 	and.w	r7, r7, #31
   b8490:	fa01 f707 	lsl.w	r7, r1, r7
   b8494:	421f      	tst	r7, r3
   b8496:	4629      	mov	r1, r5
   b8498:	4620      	mov	r0, r4
   b849a:	bf18      	it	ne
   b849c:	f04a 0a02 	orrne.w	sl, sl, #2
   b84a0:	1b76      	subs	r6, r6, r5
   b84a2:	f7ff fded 	bl	b8080 <rshift>
   b84a6:	f8d8 5004 	ldr.w	r5, [r8, #4]
   b84aa:	2702      	movs	r7, #2
   b84ac:	f1ba 0f00 	cmp.w	sl, #0
   b84b0:	d048      	beq.n	b8544 <__gethex+0x3f4>
   b84b2:	f8d8 300c 	ldr.w	r3, [r8, #12]
   b84b6:	2b02      	cmp	r3, #2
   b84b8:	d015      	beq.n	b84e6 <__gethex+0x396>
   b84ba:	2b03      	cmp	r3, #3
   b84bc:	d017      	beq.n	b84ee <__gethex+0x39e>
   b84be:	2b01      	cmp	r3, #1
   b84c0:	d109      	bne.n	b84d6 <__gethex+0x386>
   b84c2:	f01a 0f02 	tst.w	sl, #2
   b84c6:	d006      	beq.n	b84d6 <__gethex+0x386>
   b84c8:	f8d9 0000 	ldr.w	r0, [r9]
   b84cc:	ea4a 0a00 	orr.w	sl, sl, r0
   b84d0:	f01a 0f01 	tst.w	sl, #1
   b84d4:	d10e      	bne.n	b84f4 <__gethex+0x3a4>
   b84d6:	f047 0710 	orr.w	r7, r7, #16
   b84da:	e033      	b.n	b8544 <__gethex+0x3f4>
   b84dc:	f04f 0a01 	mov.w	sl, #1
   b84e0:	e7d0      	b.n	b8484 <__gethex+0x334>
   b84e2:	2701      	movs	r7, #1
   b84e4:	e7e2      	b.n	b84ac <__gethex+0x35c>
   b84e6:	9b15      	ldr	r3, [sp, #84]	; 0x54
   b84e8:	f1c3 0301 	rsb	r3, r3, #1
   b84ec:	9315      	str	r3, [sp, #84]	; 0x54
   b84ee:	9b15      	ldr	r3, [sp, #84]	; 0x54
   b84f0:	2b00      	cmp	r3, #0
   b84f2:	d0f0      	beq.n	b84d6 <__gethex+0x386>
   b84f4:	f8d4 b010 	ldr.w	fp, [r4, #16]
   b84f8:	f104 0314 	add.w	r3, r4, #20
   b84fc:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
   b8500:	eb03 018b 	add.w	r1, r3, fp, lsl #2
   b8504:	f04f 0c00 	mov.w	ip, #0
   b8508:	4618      	mov	r0, r3
   b850a:	f853 2b04 	ldr.w	r2, [r3], #4
   b850e:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   b8512:	d01c      	beq.n	b854e <__gethex+0x3fe>
   b8514:	3201      	adds	r2, #1
   b8516:	6002      	str	r2, [r0, #0]
   b8518:	2f02      	cmp	r7, #2
   b851a:	f104 0314 	add.w	r3, r4, #20
   b851e:	d13f      	bne.n	b85a0 <__gethex+0x450>
   b8520:	f8d8 2000 	ldr.w	r2, [r8]
   b8524:	3a01      	subs	r2, #1
   b8526:	42b2      	cmp	r2, r6
   b8528:	d10a      	bne.n	b8540 <__gethex+0x3f0>
   b852a:	1171      	asrs	r1, r6, #5
   b852c:	2201      	movs	r2, #1
   b852e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   b8532:	f006 061f 	and.w	r6, r6, #31
   b8536:	fa02 f606 	lsl.w	r6, r2, r6
   b853a:	421e      	tst	r6, r3
   b853c:	bf18      	it	ne
   b853e:	4617      	movne	r7, r2
   b8540:	f047 0720 	orr.w	r7, r7, #32
   b8544:	9b14      	ldr	r3, [sp, #80]	; 0x50
   b8546:	601c      	str	r4, [r3, #0]
   b8548:	9b04      	ldr	r3, [sp, #16]
   b854a:	601d      	str	r5, [r3, #0]
   b854c:	e695      	b.n	b827a <__gethex+0x12a>
   b854e:	4299      	cmp	r1, r3
   b8550:	f843 cc04 	str.w	ip, [r3, #-4]
   b8554:	d8d8      	bhi.n	b8508 <__gethex+0x3b8>
   b8556:	68a3      	ldr	r3, [r4, #8]
   b8558:	459b      	cmp	fp, r3
   b855a:	db19      	blt.n	b8590 <__gethex+0x440>
   b855c:	6861      	ldr	r1, [r4, #4]
   b855e:	ee18 0a10 	vmov	r0, s16
   b8562:	3101      	adds	r1, #1
   b8564:	f000 f912 	bl	b878c <_Balloc>
   b8568:	4681      	mov	r9, r0
   b856a:	b918      	cbnz	r0, b8574 <__gethex+0x424>
   b856c:	4b1a      	ldr	r3, [pc, #104]	; (b85d8 <__gethex+0x488>)
   b856e:	4602      	mov	r2, r0
   b8570:	2184      	movs	r1, #132	; 0x84
   b8572:	e6a8      	b.n	b82c6 <__gethex+0x176>
   b8574:	6922      	ldr	r2, [r4, #16]
   b8576:	3202      	adds	r2, #2
   b8578:	f104 010c 	add.w	r1, r4, #12
   b857c:	0092      	lsls	r2, r2, #2
   b857e:	300c      	adds	r0, #12
   b8580:	f7fe fda8 	bl	b70d4 <memcpy>
   b8584:	4621      	mov	r1, r4
   b8586:	ee18 0a10 	vmov	r0, s16
   b858a:	f000 f93f 	bl	b880c <_Bfree>
   b858e:	464c      	mov	r4, r9
   b8590:	6923      	ldr	r3, [r4, #16]
   b8592:	1c5a      	adds	r2, r3, #1
   b8594:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   b8598:	6122      	str	r2, [r4, #16]
   b859a:	2201      	movs	r2, #1
   b859c:	615a      	str	r2, [r3, #20]
   b859e:	e7bb      	b.n	b8518 <__gethex+0x3c8>
   b85a0:	6922      	ldr	r2, [r4, #16]
   b85a2:	455a      	cmp	r2, fp
   b85a4:	dd0b      	ble.n	b85be <__gethex+0x46e>
   b85a6:	2101      	movs	r1, #1
   b85a8:	4620      	mov	r0, r4
   b85aa:	f7ff fd69 	bl	b8080 <rshift>
   b85ae:	f8d8 3008 	ldr.w	r3, [r8, #8]
   b85b2:	3501      	adds	r5, #1
   b85b4:	42ab      	cmp	r3, r5
   b85b6:	f6ff aed0 	blt.w	b835a <__gethex+0x20a>
   b85ba:	2701      	movs	r7, #1
   b85bc:	e7c0      	b.n	b8540 <__gethex+0x3f0>
   b85be:	f016 061f 	ands.w	r6, r6, #31
   b85c2:	d0fa      	beq.n	b85ba <__gethex+0x46a>
   b85c4:	4453      	add	r3, sl
   b85c6:	f1c6 0620 	rsb	r6, r6, #32
   b85ca:	f853 0c04 	ldr.w	r0, [r3, #-4]
   b85ce:	f000 f9cf 	bl	b8970 <__hi0bits>
   b85d2:	42b0      	cmp	r0, r6
   b85d4:	dbe7      	blt.n	b85a6 <__gethex+0x456>
   b85d6:	e7f0      	b.n	b85ba <__gethex+0x46a>
   b85d8:	000b9669 	.word	0x000b9669

000b85dc <L_shift>:
   b85dc:	f1c2 0208 	rsb	r2, r2, #8
   b85e0:	0092      	lsls	r2, r2, #2
   b85e2:	b570      	push	{r4, r5, r6, lr}
   b85e4:	f1c2 0620 	rsb	r6, r2, #32
   b85e8:	6843      	ldr	r3, [r0, #4]
   b85ea:	6804      	ldr	r4, [r0, #0]
   b85ec:	fa03 f506 	lsl.w	r5, r3, r6
   b85f0:	432c      	orrs	r4, r5
   b85f2:	40d3      	lsrs	r3, r2
   b85f4:	6004      	str	r4, [r0, #0]
   b85f6:	f840 3f04 	str.w	r3, [r0, #4]!
   b85fa:	4288      	cmp	r0, r1
   b85fc:	d3f4      	bcc.n	b85e8 <L_shift+0xc>
   b85fe:	bd70      	pop	{r4, r5, r6, pc}

000b8600 <__match>:
   b8600:	b530      	push	{r4, r5, lr}
   b8602:	6803      	ldr	r3, [r0, #0]
   b8604:	3301      	adds	r3, #1
   b8606:	f811 4b01 	ldrb.w	r4, [r1], #1
   b860a:	b914      	cbnz	r4, b8612 <__match+0x12>
   b860c:	6003      	str	r3, [r0, #0]
   b860e:	2001      	movs	r0, #1
   b8610:	bd30      	pop	{r4, r5, pc}
   b8612:	f813 2b01 	ldrb.w	r2, [r3], #1
   b8616:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   b861a:	2d19      	cmp	r5, #25
   b861c:	bf98      	it	ls
   b861e:	3220      	addls	r2, #32
   b8620:	42a2      	cmp	r2, r4
   b8622:	d0f0      	beq.n	b8606 <__match+0x6>
   b8624:	2000      	movs	r0, #0
   b8626:	e7f3      	b.n	b8610 <__match+0x10>

000b8628 <__hexnan>:
   b8628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b862c:	680b      	ldr	r3, [r1, #0]
   b862e:	115e      	asrs	r6, r3, #5
   b8630:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   b8634:	f013 031f 	ands.w	r3, r3, #31
   b8638:	b087      	sub	sp, #28
   b863a:	bf18      	it	ne
   b863c:	3604      	addne	r6, #4
   b863e:	2500      	movs	r5, #0
   b8640:	1f37      	subs	r7, r6, #4
   b8642:	4690      	mov	r8, r2
   b8644:	6802      	ldr	r2, [r0, #0]
   b8646:	9301      	str	r3, [sp, #4]
   b8648:	4682      	mov	sl, r0
   b864a:	f846 5c04 	str.w	r5, [r6, #-4]
   b864e:	46b9      	mov	r9, r7
   b8650:	463c      	mov	r4, r7
   b8652:	9502      	str	r5, [sp, #8]
   b8654:	46ab      	mov	fp, r5
   b8656:	7851      	ldrb	r1, [r2, #1]
   b8658:	1c53      	adds	r3, r2, #1
   b865a:	9303      	str	r3, [sp, #12]
   b865c:	b341      	cbz	r1, b86b0 <__hexnan+0x88>
   b865e:	4608      	mov	r0, r1
   b8660:	9205      	str	r2, [sp, #20]
   b8662:	9104      	str	r1, [sp, #16]
   b8664:	f7ff fd5e 	bl	b8124 <__hexdig_fun>
   b8668:	2800      	cmp	r0, #0
   b866a:	d14f      	bne.n	b870c <__hexnan+0xe4>
   b866c:	9904      	ldr	r1, [sp, #16]
   b866e:	9a05      	ldr	r2, [sp, #20]
   b8670:	2920      	cmp	r1, #32
   b8672:	d818      	bhi.n	b86a6 <__hexnan+0x7e>
   b8674:	9b02      	ldr	r3, [sp, #8]
   b8676:	459b      	cmp	fp, r3
   b8678:	dd13      	ble.n	b86a2 <__hexnan+0x7a>
   b867a:	454c      	cmp	r4, r9
   b867c:	d206      	bcs.n	b868c <__hexnan+0x64>
   b867e:	2d07      	cmp	r5, #7
   b8680:	dc04      	bgt.n	b868c <__hexnan+0x64>
   b8682:	462a      	mov	r2, r5
   b8684:	4649      	mov	r1, r9
   b8686:	4620      	mov	r0, r4
   b8688:	f7ff ffa8 	bl	b85dc <L_shift>
   b868c:	4544      	cmp	r4, r8
   b868e:	d950      	bls.n	b8732 <__hexnan+0x10a>
   b8690:	2300      	movs	r3, #0
   b8692:	f1a4 0904 	sub.w	r9, r4, #4
   b8696:	f844 3c04 	str.w	r3, [r4, #-4]
   b869a:	f8cd b008 	str.w	fp, [sp, #8]
   b869e:	464c      	mov	r4, r9
   b86a0:	461d      	mov	r5, r3
   b86a2:	9a03      	ldr	r2, [sp, #12]
   b86a4:	e7d7      	b.n	b8656 <__hexnan+0x2e>
   b86a6:	2929      	cmp	r1, #41	; 0x29
   b86a8:	d156      	bne.n	b8758 <__hexnan+0x130>
   b86aa:	3202      	adds	r2, #2
   b86ac:	f8ca 2000 	str.w	r2, [sl]
   b86b0:	f1bb 0f00 	cmp.w	fp, #0
   b86b4:	d050      	beq.n	b8758 <__hexnan+0x130>
   b86b6:	454c      	cmp	r4, r9
   b86b8:	d206      	bcs.n	b86c8 <__hexnan+0xa0>
   b86ba:	2d07      	cmp	r5, #7
   b86bc:	dc04      	bgt.n	b86c8 <__hexnan+0xa0>
   b86be:	462a      	mov	r2, r5
   b86c0:	4649      	mov	r1, r9
   b86c2:	4620      	mov	r0, r4
   b86c4:	f7ff ff8a 	bl	b85dc <L_shift>
   b86c8:	4544      	cmp	r4, r8
   b86ca:	d934      	bls.n	b8736 <__hexnan+0x10e>
   b86cc:	f1a8 0204 	sub.w	r2, r8, #4
   b86d0:	4623      	mov	r3, r4
   b86d2:	f853 1b04 	ldr.w	r1, [r3], #4
   b86d6:	f842 1f04 	str.w	r1, [r2, #4]!
   b86da:	429f      	cmp	r7, r3
   b86dc:	d2f9      	bcs.n	b86d2 <__hexnan+0xaa>
   b86de:	1b3b      	subs	r3, r7, r4
   b86e0:	f023 0303 	bic.w	r3, r3, #3
   b86e4:	3304      	adds	r3, #4
   b86e6:	3401      	adds	r4, #1
   b86e8:	3e03      	subs	r6, #3
   b86ea:	42b4      	cmp	r4, r6
   b86ec:	bf88      	it	hi
   b86ee:	2304      	movhi	r3, #4
   b86f0:	4443      	add	r3, r8
   b86f2:	2200      	movs	r2, #0
   b86f4:	f843 2b04 	str.w	r2, [r3], #4
   b86f8:	429f      	cmp	r7, r3
   b86fa:	d2fb      	bcs.n	b86f4 <__hexnan+0xcc>
   b86fc:	683b      	ldr	r3, [r7, #0]
   b86fe:	b91b      	cbnz	r3, b8708 <__hexnan+0xe0>
   b8700:	4547      	cmp	r7, r8
   b8702:	d127      	bne.n	b8754 <__hexnan+0x12c>
   b8704:	2301      	movs	r3, #1
   b8706:	603b      	str	r3, [r7, #0]
   b8708:	2005      	movs	r0, #5
   b870a:	e026      	b.n	b875a <__hexnan+0x132>
   b870c:	3501      	adds	r5, #1
   b870e:	2d08      	cmp	r5, #8
   b8710:	f10b 0b01 	add.w	fp, fp, #1
   b8714:	dd06      	ble.n	b8724 <__hexnan+0xfc>
   b8716:	4544      	cmp	r4, r8
   b8718:	d9c3      	bls.n	b86a2 <__hexnan+0x7a>
   b871a:	2300      	movs	r3, #0
   b871c:	f844 3c04 	str.w	r3, [r4, #-4]
   b8720:	2501      	movs	r5, #1
   b8722:	3c04      	subs	r4, #4
   b8724:	6822      	ldr	r2, [r4, #0]
   b8726:	f000 000f 	and.w	r0, r0, #15
   b872a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   b872e:	6022      	str	r2, [r4, #0]
   b8730:	e7b7      	b.n	b86a2 <__hexnan+0x7a>
   b8732:	2508      	movs	r5, #8
   b8734:	e7b5      	b.n	b86a2 <__hexnan+0x7a>
   b8736:	9b01      	ldr	r3, [sp, #4]
   b8738:	2b00      	cmp	r3, #0
   b873a:	d0df      	beq.n	b86fc <__hexnan+0xd4>
   b873c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b8740:	f1c3 0320 	rsb	r3, r3, #32
   b8744:	fa22 f303 	lsr.w	r3, r2, r3
   b8748:	f856 2c04 	ldr.w	r2, [r6, #-4]
   b874c:	401a      	ands	r2, r3
   b874e:	f846 2c04 	str.w	r2, [r6, #-4]
   b8752:	e7d3      	b.n	b86fc <__hexnan+0xd4>
   b8754:	3f04      	subs	r7, #4
   b8756:	e7d1      	b.n	b86fc <__hexnan+0xd4>
   b8758:	2004      	movs	r0, #4
   b875a:	b007      	add	sp, #28
   b875c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b8760 <__retarget_lock_acquire_recursive>:
   b8760:	4770      	bx	lr

000b8762 <__retarget_lock_release>:
   b8762:	4770      	bx	lr

000b8764 <__retarget_lock_release_recursive>:
   b8764:	4770      	bx	lr

000b8766 <__ascii_mbtowc>:
   b8766:	b082      	sub	sp, #8
   b8768:	b901      	cbnz	r1, b876c <__ascii_mbtowc+0x6>
   b876a:	a901      	add	r1, sp, #4
   b876c:	b142      	cbz	r2, b8780 <__ascii_mbtowc+0x1a>
   b876e:	b14b      	cbz	r3, b8784 <__ascii_mbtowc+0x1e>
   b8770:	7813      	ldrb	r3, [r2, #0]
   b8772:	600b      	str	r3, [r1, #0]
   b8774:	7812      	ldrb	r2, [r2, #0]
   b8776:	1e10      	subs	r0, r2, #0
   b8778:	bf18      	it	ne
   b877a:	2001      	movne	r0, #1
   b877c:	b002      	add	sp, #8
   b877e:	4770      	bx	lr
   b8780:	4610      	mov	r0, r2
   b8782:	e7fb      	b.n	b877c <__ascii_mbtowc+0x16>
   b8784:	f06f 0001 	mvn.w	r0, #1
   b8788:	e7f8      	b.n	b877c <__ascii_mbtowc+0x16>
	...

000b878c <_Balloc>:
   b878c:	b570      	push	{r4, r5, r6, lr}
   b878e:	6a46      	ldr	r6, [r0, #36]	; 0x24
   b8790:	4604      	mov	r4, r0
   b8792:	460d      	mov	r5, r1
   b8794:	b976      	cbnz	r6, b87b4 <_Balloc+0x28>
   b8796:	2010      	movs	r0, #16
   b8798:	f7fb ffe0 	bl	b475c <malloc>
   b879c:	4602      	mov	r2, r0
   b879e:	6260      	str	r0, [r4, #36]	; 0x24
   b87a0:	b920      	cbnz	r0, b87ac <_Balloc+0x20>
   b87a2:	4b18      	ldr	r3, [pc, #96]	; (b8804 <_Balloc+0x78>)
   b87a4:	4818      	ldr	r0, [pc, #96]	; (b8808 <_Balloc+0x7c>)
   b87a6:	2166      	movs	r1, #102	; 0x66
   b87a8:	f7fc f810 	bl	b47cc <__assert_func>
   b87ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
   b87b0:	6006      	str	r6, [r0, #0]
   b87b2:	60c6      	str	r6, [r0, #12]
   b87b4:	6a66      	ldr	r6, [r4, #36]	; 0x24
   b87b6:	68f3      	ldr	r3, [r6, #12]
   b87b8:	b183      	cbz	r3, b87dc <_Balloc+0x50>
   b87ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
   b87bc:	68db      	ldr	r3, [r3, #12]
   b87be:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   b87c2:	b9b8      	cbnz	r0, b87f4 <_Balloc+0x68>
   b87c4:	2101      	movs	r1, #1
   b87c6:	fa01 f605 	lsl.w	r6, r1, r5
   b87ca:	1d72      	adds	r2, r6, #5
   b87cc:	0092      	lsls	r2, r2, #2
   b87ce:	4620      	mov	r0, r4
   b87d0:	f000 fc9d 	bl	b910e <_calloc_r>
   b87d4:	b160      	cbz	r0, b87f0 <_Balloc+0x64>
   b87d6:	e9c0 5601 	strd	r5, r6, [r0, #4]
   b87da:	e00e      	b.n	b87fa <_Balloc+0x6e>
   b87dc:	2221      	movs	r2, #33	; 0x21
   b87de:	2104      	movs	r1, #4
   b87e0:	4620      	mov	r0, r4
   b87e2:	f000 fc94 	bl	b910e <_calloc_r>
   b87e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   b87e8:	60f0      	str	r0, [r6, #12]
   b87ea:	68db      	ldr	r3, [r3, #12]
   b87ec:	2b00      	cmp	r3, #0
   b87ee:	d1e4      	bne.n	b87ba <_Balloc+0x2e>
   b87f0:	2000      	movs	r0, #0
   b87f2:	bd70      	pop	{r4, r5, r6, pc}
   b87f4:	6802      	ldr	r2, [r0, #0]
   b87f6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   b87fa:	2300      	movs	r3, #0
   b87fc:	e9c0 3303 	strd	r3, r3, [r0, #12]
   b8800:	e7f7      	b.n	b87f2 <_Balloc+0x66>
   b8802:	bf00      	nop
   b8804:	000b949d 	.word	0x000b949d
   b8808:	000b96f0 	.word	0x000b96f0

000b880c <_Bfree>:
   b880c:	b570      	push	{r4, r5, r6, lr}
   b880e:	6a46      	ldr	r6, [r0, #36]	; 0x24
   b8810:	4605      	mov	r5, r0
   b8812:	460c      	mov	r4, r1
   b8814:	b976      	cbnz	r6, b8834 <_Bfree+0x28>
   b8816:	2010      	movs	r0, #16
   b8818:	f7fb ffa0 	bl	b475c <malloc>
   b881c:	4602      	mov	r2, r0
   b881e:	6268      	str	r0, [r5, #36]	; 0x24
   b8820:	b920      	cbnz	r0, b882c <_Bfree+0x20>
   b8822:	4b09      	ldr	r3, [pc, #36]	; (b8848 <_Bfree+0x3c>)
   b8824:	4809      	ldr	r0, [pc, #36]	; (b884c <_Bfree+0x40>)
   b8826:	218a      	movs	r1, #138	; 0x8a
   b8828:	f7fb ffd0 	bl	b47cc <__assert_func>
   b882c:	e9c0 6601 	strd	r6, r6, [r0, #4]
   b8830:	6006      	str	r6, [r0, #0]
   b8832:	60c6      	str	r6, [r0, #12]
   b8834:	b13c      	cbz	r4, b8846 <_Bfree+0x3a>
   b8836:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   b8838:	6862      	ldr	r2, [r4, #4]
   b883a:	68db      	ldr	r3, [r3, #12]
   b883c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   b8840:	6021      	str	r1, [r4, #0]
   b8842:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   b8846:	bd70      	pop	{r4, r5, r6, pc}
   b8848:	000b949d 	.word	0x000b949d
   b884c:	000b96f0 	.word	0x000b96f0

000b8850 <__multadd>:
   b8850:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8854:	690d      	ldr	r5, [r1, #16]
   b8856:	4607      	mov	r7, r0
   b8858:	460c      	mov	r4, r1
   b885a:	461e      	mov	r6, r3
   b885c:	f101 0c14 	add.w	ip, r1, #20
   b8860:	2000      	movs	r0, #0
   b8862:	f8dc 3000 	ldr.w	r3, [ip]
   b8866:	b299      	uxth	r1, r3
   b8868:	fb02 6101 	mla	r1, r2, r1, r6
   b886c:	0c1e      	lsrs	r6, r3, #16
   b886e:	0c0b      	lsrs	r3, r1, #16
   b8870:	fb02 3306 	mla	r3, r2, r6, r3
   b8874:	b289      	uxth	r1, r1
   b8876:	3001      	adds	r0, #1
   b8878:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   b887c:	4285      	cmp	r5, r0
   b887e:	f84c 1b04 	str.w	r1, [ip], #4
   b8882:	ea4f 4613 	mov.w	r6, r3, lsr #16
   b8886:	dcec      	bgt.n	b8862 <__multadd+0x12>
   b8888:	b30e      	cbz	r6, b88ce <__multadd+0x7e>
   b888a:	68a3      	ldr	r3, [r4, #8]
   b888c:	42ab      	cmp	r3, r5
   b888e:	dc19      	bgt.n	b88c4 <__multadd+0x74>
   b8890:	6861      	ldr	r1, [r4, #4]
   b8892:	4638      	mov	r0, r7
   b8894:	3101      	adds	r1, #1
   b8896:	f7ff ff79 	bl	b878c <_Balloc>
   b889a:	4680      	mov	r8, r0
   b889c:	b928      	cbnz	r0, b88aa <__multadd+0x5a>
   b889e:	4602      	mov	r2, r0
   b88a0:	4b0c      	ldr	r3, [pc, #48]	; (b88d4 <__multadd+0x84>)
   b88a2:	480d      	ldr	r0, [pc, #52]	; (b88d8 <__multadd+0x88>)
   b88a4:	21b5      	movs	r1, #181	; 0xb5
   b88a6:	f7fb ff91 	bl	b47cc <__assert_func>
   b88aa:	6922      	ldr	r2, [r4, #16]
   b88ac:	3202      	adds	r2, #2
   b88ae:	f104 010c 	add.w	r1, r4, #12
   b88b2:	0092      	lsls	r2, r2, #2
   b88b4:	300c      	adds	r0, #12
   b88b6:	f7fe fc0d 	bl	b70d4 <memcpy>
   b88ba:	4621      	mov	r1, r4
   b88bc:	4638      	mov	r0, r7
   b88be:	f7ff ffa5 	bl	b880c <_Bfree>
   b88c2:	4644      	mov	r4, r8
   b88c4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   b88c8:	3501      	adds	r5, #1
   b88ca:	615e      	str	r6, [r3, #20]
   b88cc:	6125      	str	r5, [r4, #16]
   b88ce:	4620      	mov	r0, r4
   b88d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b88d4:	000b9669 	.word	0x000b9669
   b88d8:	000b96f0 	.word	0x000b96f0

000b88dc <__s2b>:
   b88dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b88e0:	460c      	mov	r4, r1
   b88e2:	4615      	mov	r5, r2
   b88e4:	461f      	mov	r7, r3
   b88e6:	2209      	movs	r2, #9
   b88e8:	3308      	adds	r3, #8
   b88ea:	4606      	mov	r6, r0
   b88ec:	fb93 f3f2 	sdiv	r3, r3, r2
   b88f0:	2100      	movs	r1, #0
   b88f2:	2201      	movs	r2, #1
   b88f4:	429a      	cmp	r2, r3
   b88f6:	db09      	blt.n	b890c <__s2b+0x30>
   b88f8:	4630      	mov	r0, r6
   b88fa:	f7ff ff47 	bl	b878c <_Balloc>
   b88fe:	b940      	cbnz	r0, b8912 <__s2b+0x36>
   b8900:	4602      	mov	r2, r0
   b8902:	4b19      	ldr	r3, [pc, #100]	; (b8968 <__s2b+0x8c>)
   b8904:	4819      	ldr	r0, [pc, #100]	; (b896c <__s2b+0x90>)
   b8906:	21ce      	movs	r1, #206	; 0xce
   b8908:	f7fb ff60 	bl	b47cc <__assert_func>
   b890c:	0052      	lsls	r2, r2, #1
   b890e:	3101      	adds	r1, #1
   b8910:	e7f0      	b.n	b88f4 <__s2b+0x18>
   b8912:	9b08      	ldr	r3, [sp, #32]
   b8914:	6143      	str	r3, [r0, #20]
   b8916:	2d09      	cmp	r5, #9
   b8918:	f04f 0301 	mov.w	r3, #1
   b891c:	6103      	str	r3, [r0, #16]
   b891e:	dd16      	ble.n	b894e <__s2b+0x72>
   b8920:	f104 0909 	add.w	r9, r4, #9
   b8924:	46c8      	mov	r8, r9
   b8926:	442c      	add	r4, r5
   b8928:	f818 3b01 	ldrb.w	r3, [r8], #1
   b892c:	4601      	mov	r1, r0
   b892e:	3b30      	subs	r3, #48	; 0x30
   b8930:	220a      	movs	r2, #10
   b8932:	4630      	mov	r0, r6
   b8934:	f7ff ff8c 	bl	b8850 <__multadd>
   b8938:	45a0      	cmp	r8, r4
   b893a:	d1f5      	bne.n	b8928 <__s2b+0x4c>
   b893c:	f1a5 0408 	sub.w	r4, r5, #8
   b8940:	444c      	add	r4, r9
   b8942:	1b2d      	subs	r5, r5, r4
   b8944:	1963      	adds	r3, r4, r5
   b8946:	42bb      	cmp	r3, r7
   b8948:	db04      	blt.n	b8954 <__s2b+0x78>
   b894a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b894e:	340a      	adds	r4, #10
   b8950:	2509      	movs	r5, #9
   b8952:	e7f6      	b.n	b8942 <__s2b+0x66>
   b8954:	f814 3b01 	ldrb.w	r3, [r4], #1
   b8958:	4601      	mov	r1, r0
   b895a:	3b30      	subs	r3, #48	; 0x30
   b895c:	220a      	movs	r2, #10
   b895e:	4630      	mov	r0, r6
   b8960:	f7ff ff76 	bl	b8850 <__multadd>
   b8964:	e7ee      	b.n	b8944 <__s2b+0x68>
   b8966:	bf00      	nop
   b8968:	000b9669 	.word	0x000b9669
   b896c:	000b96f0 	.word	0x000b96f0

000b8970 <__hi0bits>:
   b8970:	0c03      	lsrs	r3, r0, #16
   b8972:	041b      	lsls	r3, r3, #16
   b8974:	b9d3      	cbnz	r3, b89ac <__hi0bits+0x3c>
   b8976:	0400      	lsls	r0, r0, #16
   b8978:	2310      	movs	r3, #16
   b897a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   b897e:	bf04      	itt	eq
   b8980:	0200      	lsleq	r0, r0, #8
   b8982:	3308      	addeq	r3, #8
   b8984:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   b8988:	bf04      	itt	eq
   b898a:	0100      	lsleq	r0, r0, #4
   b898c:	3304      	addeq	r3, #4
   b898e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   b8992:	bf04      	itt	eq
   b8994:	0080      	lsleq	r0, r0, #2
   b8996:	3302      	addeq	r3, #2
   b8998:	2800      	cmp	r0, #0
   b899a:	db05      	blt.n	b89a8 <__hi0bits+0x38>
   b899c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   b89a0:	f103 0301 	add.w	r3, r3, #1
   b89a4:	bf08      	it	eq
   b89a6:	2320      	moveq	r3, #32
   b89a8:	4618      	mov	r0, r3
   b89aa:	4770      	bx	lr
   b89ac:	2300      	movs	r3, #0
   b89ae:	e7e4      	b.n	b897a <__hi0bits+0xa>

000b89b0 <__lo0bits>:
   b89b0:	6803      	ldr	r3, [r0, #0]
   b89b2:	f013 0207 	ands.w	r2, r3, #7
   b89b6:	4601      	mov	r1, r0
   b89b8:	d00b      	beq.n	b89d2 <__lo0bits+0x22>
   b89ba:	07da      	lsls	r2, r3, #31
   b89bc:	d423      	bmi.n	b8a06 <__lo0bits+0x56>
   b89be:	0798      	lsls	r0, r3, #30
   b89c0:	bf49      	itett	mi
   b89c2:	085b      	lsrmi	r3, r3, #1
   b89c4:	089b      	lsrpl	r3, r3, #2
   b89c6:	2001      	movmi	r0, #1
   b89c8:	600b      	strmi	r3, [r1, #0]
   b89ca:	bf5c      	itt	pl
   b89cc:	600b      	strpl	r3, [r1, #0]
   b89ce:	2002      	movpl	r0, #2
   b89d0:	4770      	bx	lr
   b89d2:	b298      	uxth	r0, r3
   b89d4:	b9a8      	cbnz	r0, b8a02 <__lo0bits+0x52>
   b89d6:	0c1b      	lsrs	r3, r3, #16
   b89d8:	2010      	movs	r0, #16
   b89da:	b2da      	uxtb	r2, r3
   b89dc:	b90a      	cbnz	r2, b89e2 <__lo0bits+0x32>
   b89de:	3008      	adds	r0, #8
   b89e0:	0a1b      	lsrs	r3, r3, #8
   b89e2:	071a      	lsls	r2, r3, #28
   b89e4:	bf04      	itt	eq
   b89e6:	091b      	lsreq	r3, r3, #4
   b89e8:	3004      	addeq	r0, #4
   b89ea:	079a      	lsls	r2, r3, #30
   b89ec:	bf04      	itt	eq
   b89ee:	089b      	lsreq	r3, r3, #2
   b89f0:	3002      	addeq	r0, #2
   b89f2:	07da      	lsls	r2, r3, #31
   b89f4:	d403      	bmi.n	b89fe <__lo0bits+0x4e>
   b89f6:	085b      	lsrs	r3, r3, #1
   b89f8:	f100 0001 	add.w	r0, r0, #1
   b89fc:	d005      	beq.n	b8a0a <__lo0bits+0x5a>
   b89fe:	600b      	str	r3, [r1, #0]
   b8a00:	4770      	bx	lr
   b8a02:	4610      	mov	r0, r2
   b8a04:	e7e9      	b.n	b89da <__lo0bits+0x2a>
   b8a06:	2000      	movs	r0, #0
   b8a08:	4770      	bx	lr
   b8a0a:	2020      	movs	r0, #32
   b8a0c:	4770      	bx	lr
	...

000b8a10 <__i2b>:
   b8a10:	b510      	push	{r4, lr}
   b8a12:	460c      	mov	r4, r1
   b8a14:	2101      	movs	r1, #1
   b8a16:	f7ff feb9 	bl	b878c <_Balloc>
   b8a1a:	4602      	mov	r2, r0
   b8a1c:	b928      	cbnz	r0, b8a2a <__i2b+0x1a>
   b8a1e:	4b05      	ldr	r3, [pc, #20]	; (b8a34 <__i2b+0x24>)
   b8a20:	4805      	ldr	r0, [pc, #20]	; (b8a38 <__i2b+0x28>)
   b8a22:	f44f 71a0 	mov.w	r1, #320	; 0x140
   b8a26:	f7fb fed1 	bl	b47cc <__assert_func>
   b8a2a:	2301      	movs	r3, #1
   b8a2c:	6144      	str	r4, [r0, #20]
   b8a2e:	6103      	str	r3, [r0, #16]
   b8a30:	bd10      	pop	{r4, pc}
   b8a32:	bf00      	nop
   b8a34:	000b9669 	.word	0x000b9669
   b8a38:	000b96f0 	.word	0x000b96f0

000b8a3c <__multiply>:
   b8a3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8a40:	4691      	mov	r9, r2
   b8a42:	690a      	ldr	r2, [r1, #16]
   b8a44:	f8d9 3010 	ldr.w	r3, [r9, #16]
   b8a48:	429a      	cmp	r2, r3
   b8a4a:	bfb8      	it	lt
   b8a4c:	460b      	movlt	r3, r1
   b8a4e:	460c      	mov	r4, r1
   b8a50:	bfbc      	itt	lt
   b8a52:	464c      	movlt	r4, r9
   b8a54:	4699      	movlt	r9, r3
   b8a56:	6927      	ldr	r7, [r4, #16]
   b8a58:	f8d9 a010 	ldr.w	sl, [r9, #16]
   b8a5c:	68a3      	ldr	r3, [r4, #8]
   b8a5e:	6861      	ldr	r1, [r4, #4]
   b8a60:	eb07 060a 	add.w	r6, r7, sl
   b8a64:	42b3      	cmp	r3, r6
   b8a66:	b085      	sub	sp, #20
   b8a68:	bfb8      	it	lt
   b8a6a:	3101      	addlt	r1, #1
   b8a6c:	f7ff fe8e 	bl	b878c <_Balloc>
   b8a70:	b930      	cbnz	r0, b8a80 <__multiply+0x44>
   b8a72:	4602      	mov	r2, r0
   b8a74:	4b44      	ldr	r3, [pc, #272]	; (b8b88 <__multiply+0x14c>)
   b8a76:	4845      	ldr	r0, [pc, #276]	; (b8b8c <__multiply+0x150>)
   b8a78:	f240 115d 	movw	r1, #349	; 0x15d
   b8a7c:	f7fb fea6 	bl	b47cc <__assert_func>
   b8a80:	f100 0514 	add.w	r5, r0, #20
   b8a84:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   b8a88:	462b      	mov	r3, r5
   b8a8a:	2200      	movs	r2, #0
   b8a8c:	4543      	cmp	r3, r8
   b8a8e:	d321      	bcc.n	b8ad4 <__multiply+0x98>
   b8a90:	f104 0314 	add.w	r3, r4, #20
   b8a94:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   b8a98:	f109 0314 	add.w	r3, r9, #20
   b8a9c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
   b8aa0:	9202      	str	r2, [sp, #8]
   b8aa2:	1b3a      	subs	r2, r7, r4
   b8aa4:	3a15      	subs	r2, #21
   b8aa6:	f022 0203 	bic.w	r2, r2, #3
   b8aaa:	3204      	adds	r2, #4
   b8aac:	f104 0115 	add.w	r1, r4, #21
   b8ab0:	428f      	cmp	r7, r1
   b8ab2:	bf38      	it	cc
   b8ab4:	2204      	movcc	r2, #4
   b8ab6:	9201      	str	r2, [sp, #4]
   b8ab8:	9a02      	ldr	r2, [sp, #8]
   b8aba:	9303      	str	r3, [sp, #12]
   b8abc:	429a      	cmp	r2, r3
   b8abe:	d80c      	bhi.n	b8ada <__multiply+0x9e>
   b8ac0:	2e00      	cmp	r6, #0
   b8ac2:	dd03      	ble.n	b8acc <__multiply+0x90>
   b8ac4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   b8ac8:	2b00      	cmp	r3, #0
   b8aca:	d05a      	beq.n	b8b82 <__multiply+0x146>
   b8acc:	6106      	str	r6, [r0, #16]
   b8ace:	b005      	add	sp, #20
   b8ad0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b8ad4:	f843 2b04 	str.w	r2, [r3], #4
   b8ad8:	e7d8      	b.n	b8a8c <__multiply+0x50>
   b8ada:	f8b3 a000 	ldrh.w	sl, [r3]
   b8ade:	f1ba 0f00 	cmp.w	sl, #0
   b8ae2:	d024      	beq.n	b8b2e <__multiply+0xf2>
   b8ae4:	f104 0e14 	add.w	lr, r4, #20
   b8ae8:	46a9      	mov	r9, r5
   b8aea:	f04f 0c00 	mov.w	ip, #0
   b8aee:	f85e 2b04 	ldr.w	r2, [lr], #4
   b8af2:	f8d9 1000 	ldr.w	r1, [r9]
   b8af6:	fa1f fb82 	uxth.w	fp, r2
   b8afa:	b289      	uxth	r1, r1
   b8afc:	fb0a 110b 	mla	r1, sl, fp, r1
   b8b00:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   b8b04:	f8d9 2000 	ldr.w	r2, [r9]
   b8b08:	4461      	add	r1, ip
   b8b0a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   b8b0e:	fb0a c20b 	mla	r2, sl, fp, ip
   b8b12:	eb02 4211 	add.w	r2, r2, r1, lsr #16
   b8b16:	b289      	uxth	r1, r1
   b8b18:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   b8b1c:	4577      	cmp	r7, lr
   b8b1e:	f849 1b04 	str.w	r1, [r9], #4
   b8b22:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   b8b26:	d8e2      	bhi.n	b8aee <__multiply+0xb2>
   b8b28:	9a01      	ldr	r2, [sp, #4]
   b8b2a:	f845 c002 	str.w	ip, [r5, r2]
   b8b2e:	9a03      	ldr	r2, [sp, #12]
   b8b30:	f8b2 9002 	ldrh.w	r9, [r2, #2]
   b8b34:	3304      	adds	r3, #4
   b8b36:	f1b9 0f00 	cmp.w	r9, #0
   b8b3a:	d020      	beq.n	b8b7e <__multiply+0x142>
   b8b3c:	6829      	ldr	r1, [r5, #0]
   b8b3e:	f104 0c14 	add.w	ip, r4, #20
   b8b42:	46ae      	mov	lr, r5
   b8b44:	f04f 0a00 	mov.w	sl, #0
   b8b48:	f8bc b000 	ldrh.w	fp, [ip]
   b8b4c:	f8be 2002 	ldrh.w	r2, [lr, #2]
   b8b50:	fb09 220b 	mla	r2, r9, fp, r2
   b8b54:	4492      	add	sl, r2
   b8b56:	b289      	uxth	r1, r1
   b8b58:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   b8b5c:	f84e 1b04 	str.w	r1, [lr], #4
   b8b60:	f85c 2b04 	ldr.w	r2, [ip], #4
   b8b64:	f8be 1000 	ldrh.w	r1, [lr]
   b8b68:	0c12      	lsrs	r2, r2, #16
   b8b6a:	fb09 1102 	mla	r1, r9, r2, r1
   b8b6e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
   b8b72:	4567      	cmp	r7, ip
   b8b74:	ea4f 4a11 	mov.w	sl, r1, lsr #16
   b8b78:	d8e6      	bhi.n	b8b48 <__multiply+0x10c>
   b8b7a:	9a01      	ldr	r2, [sp, #4]
   b8b7c:	50a9      	str	r1, [r5, r2]
   b8b7e:	3504      	adds	r5, #4
   b8b80:	e79a      	b.n	b8ab8 <__multiply+0x7c>
   b8b82:	3e01      	subs	r6, #1
   b8b84:	e79c      	b.n	b8ac0 <__multiply+0x84>
   b8b86:	bf00      	nop
   b8b88:	000b9669 	.word	0x000b9669
   b8b8c:	000b96f0 	.word	0x000b96f0

000b8b90 <__pow5mult>:
   b8b90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b8b94:	4615      	mov	r5, r2
   b8b96:	f012 0203 	ands.w	r2, r2, #3
   b8b9a:	4606      	mov	r6, r0
   b8b9c:	460f      	mov	r7, r1
   b8b9e:	d007      	beq.n	b8bb0 <__pow5mult+0x20>
   b8ba0:	4c25      	ldr	r4, [pc, #148]	; (b8c38 <__pow5mult+0xa8>)
   b8ba2:	3a01      	subs	r2, #1
   b8ba4:	2300      	movs	r3, #0
   b8ba6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   b8baa:	f7ff fe51 	bl	b8850 <__multadd>
   b8bae:	4607      	mov	r7, r0
   b8bb0:	10ad      	asrs	r5, r5, #2
   b8bb2:	d03d      	beq.n	b8c30 <__pow5mult+0xa0>
   b8bb4:	6a74      	ldr	r4, [r6, #36]	; 0x24
   b8bb6:	b97c      	cbnz	r4, b8bd8 <__pow5mult+0x48>
   b8bb8:	2010      	movs	r0, #16
   b8bba:	f7fb fdcf 	bl	b475c <malloc>
   b8bbe:	4602      	mov	r2, r0
   b8bc0:	6270      	str	r0, [r6, #36]	; 0x24
   b8bc2:	b928      	cbnz	r0, b8bd0 <__pow5mult+0x40>
   b8bc4:	4b1d      	ldr	r3, [pc, #116]	; (b8c3c <__pow5mult+0xac>)
   b8bc6:	481e      	ldr	r0, [pc, #120]	; (b8c40 <__pow5mult+0xb0>)
   b8bc8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   b8bcc:	f7fb fdfe 	bl	b47cc <__assert_func>
   b8bd0:	e9c0 4401 	strd	r4, r4, [r0, #4]
   b8bd4:	6004      	str	r4, [r0, #0]
   b8bd6:	60c4      	str	r4, [r0, #12]
   b8bd8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   b8bdc:	f8d8 4008 	ldr.w	r4, [r8, #8]
   b8be0:	b94c      	cbnz	r4, b8bf6 <__pow5mult+0x66>
   b8be2:	f240 2171 	movw	r1, #625	; 0x271
   b8be6:	4630      	mov	r0, r6
   b8be8:	f7ff ff12 	bl	b8a10 <__i2b>
   b8bec:	2300      	movs	r3, #0
   b8bee:	f8c8 0008 	str.w	r0, [r8, #8]
   b8bf2:	4604      	mov	r4, r0
   b8bf4:	6003      	str	r3, [r0, #0]
   b8bf6:	f04f 0900 	mov.w	r9, #0
   b8bfa:	07eb      	lsls	r3, r5, #31
   b8bfc:	d50a      	bpl.n	b8c14 <__pow5mult+0x84>
   b8bfe:	4639      	mov	r1, r7
   b8c00:	4622      	mov	r2, r4
   b8c02:	4630      	mov	r0, r6
   b8c04:	f7ff ff1a 	bl	b8a3c <__multiply>
   b8c08:	4639      	mov	r1, r7
   b8c0a:	4680      	mov	r8, r0
   b8c0c:	4630      	mov	r0, r6
   b8c0e:	f7ff fdfd 	bl	b880c <_Bfree>
   b8c12:	4647      	mov	r7, r8
   b8c14:	106d      	asrs	r5, r5, #1
   b8c16:	d00b      	beq.n	b8c30 <__pow5mult+0xa0>
   b8c18:	6820      	ldr	r0, [r4, #0]
   b8c1a:	b938      	cbnz	r0, b8c2c <__pow5mult+0x9c>
   b8c1c:	4622      	mov	r2, r4
   b8c1e:	4621      	mov	r1, r4
   b8c20:	4630      	mov	r0, r6
   b8c22:	f7ff ff0b 	bl	b8a3c <__multiply>
   b8c26:	6020      	str	r0, [r4, #0]
   b8c28:	f8c0 9000 	str.w	r9, [r0]
   b8c2c:	4604      	mov	r4, r0
   b8c2e:	e7e4      	b.n	b8bfa <__pow5mult+0x6a>
   b8c30:	4638      	mov	r0, r7
   b8c32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b8c36:	bf00      	nop
   b8c38:	000b9840 	.word	0x000b9840
   b8c3c:	000b949d 	.word	0x000b949d
   b8c40:	000b96f0 	.word	0x000b96f0

000b8c44 <__lshift>:
   b8c44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b8c48:	460c      	mov	r4, r1
   b8c4a:	6849      	ldr	r1, [r1, #4]
   b8c4c:	6923      	ldr	r3, [r4, #16]
   b8c4e:	eb03 1862 	add.w	r8, r3, r2, asr #5
   b8c52:	68a3      	ldr	r3, [r4, #8]
   b8c54:	4607      	mov	r7, r0
   b8c56:	4691      	mov	r9, r2
   b8c58:	ea4f 1a62 	mov.w	sl, r2, asr #5
   b8c5c:	f108 0601 	add.w	r6, r8, #1
   b8c60:	42b3      	cmp	r3, r6
   b8c62:	db0b      	blt.n	b8c7c <__lshift+0x38>
   b8c64:	4638      	mov	r0, r7
   b8c66:	f7ff fd91 	bl	b878c <_Balloc>
   b8c6a:	4605      	mov	r5, r0
   b8c6c:	b948      	cbnz	r0, b8c82 <__lshift+0x3e>
   b8c6e:	4602      	mov	r2, r0
   b8c70:	4b2a      	ldr	r3, [pc, #168]	; (b8d1c <__lshift+0xd8>)
   b8c72:	482b      	ldr	r0, [pc, #172]	; (b8d20 <__lshift+0xdc>)
   b8c74:	f240 11d9 	movw	r1, #473	; 0x1d9
   b8c78:	f7fb fda8 	bl	b47cc <__assert_func>
   b8c7c:	3101      	adds	r1, #1
   b8c7e:	005b      	lsls	r3, r3, #1
   b8c80:	e7ee      	b.n	b8c60 <__lshift+0x1c>
   b8c82:	2300      	movs	r3, #0
   b8c84:	f100 0114 	add.w	r1, r0, #20
   b8c88:	f100 0210 	add.w	r2, r0, #16
   b8c8c:	4618      	mov	r0, r3
   b8c8e:	4553      	cmp	r3, sl
   b8c90:	db37      	blt.n	b8d02 <__lshift+0xbe>
   b8c92:	6920      	ldr	r0, [r4, #16]
   b8c94:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   b8c98:	f104 0314 	add.w	r3, r4, #20
   b8c9c:	f019 091f 	ands.w	r9, r9, #31
   b8ca0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   b8ca4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   b8ca8:	d02f      	beq.n	b8d0a <__lshift+0xc6>
   b8caa:	f1c9 0e20 	rsb	lr, r9, #32
   b8cae:	468a      	mov	sl, r1
   b8cb0:	f04f 0c00 	mov.w	ip, #0
   b8cb4:	681a      	ldr	r2, [r3, #0]
   b8cb6:	fa02 f209 	lsl.w	r2, r2, r9
   b8cba:	ea42 020c 	orr.w	r2, r2, ip
   b8cbe:	f84a 2b04 	str.w	r2, [sl], #4
   b8cc2:	f853 2b04 	ldr.w	r2, [r3], #4
   b8cc6:	4298      	cmp	r0, r3
   b8cc8:	fa22 fc0e 	lsr.w	ip, r2, lr
   b8ccc:	d8f2      	bhi.n	b8cb4 <__lshift+0x70>
   b8cce:	1b03      	subs	r3, r0, r4
   b8cd0:	3b15      	subs	r3, #21
   b8cd2:	f023 0303 	bic.w	r3, r3, #3
   b8cd6:	3304      	adds	r3, #4
   b8cd8:	f104 0215 	add.w	r2, r4, #21
   b8cdc:	4290      	cmp	r0, r2
   b8cde:	bf38      	it	cc
   b8ce0:	2304      	movcc	r3, #4
   b8ce2:	f841 c003 	str.w	ip, [r1, r3]
   b8ce6:	f1bc 0f00 	cmp.w	ip, #0
   b8cea:	d001      	beq.n	b8cf0 <__lshift+0xac>
   b8cec:	f108 0602 	add.w	r6, r8, #2
   b8cf0:	3e01      	subs	r6, #1
   b8cf2:	4638      	mov	r0, r7
   b8cf4:	612e      	str	r6, [r5, #16]
   b8cf6:	4621      	mov	r1, r4
   b8cf8:	f7ff fd88 	bl	b880c <_Bfree>
   b8cfc:	4628      	mov	r0, r5
   b8cfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b8d02:	f842 0f04 	str.w	r0, [r2, #4]!
   b8d06:	3301      	adds	r3, #1
   b8d08:	e7c1      	b.n	b8c8e <__lshift+0x4a>
   b8d0a:	3904      	subs	r1, #4
   b8d0c:	f853 2b04 	ldr.w	r2, [r3], #4
   b8d10:	f841 2f04 	str.w	r2, [r1, #4]!
   b8d14:	4298      	cmp	r0, r3
   b8d16:	d8f9      	bhi.n	b8d0c <__lshift+0xc8>
   b8d18:	e7ea      	b.n	b8cf0 <__lshift+0xac>
   b8d1a:	bf00      	nop
   b8d1c:	000b9669 	.word	0x000b9669
   b8d20:	000b96f0 	.word	0x000b96f0

000b8d24 <__mcmp>:
   b8d24:	b530      	push	{r4, r5, lr}
   b8d26:	6902      	ldr	r2, [r0, #16]
   b8d28:	690c      	ldr	r4, [r1, #16]
   b8d2a:	1b12      	subs	r2, r2, r4
   b8d2c:	d10e      	bne.n	b8d4c <__mcmp+0x28>
   b8d2e:	f100 0314 	add.w	r3, r0, #20
   b8d32:	3114      	adds	r1, #20
   b8d34:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   b8d38:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   b8d3c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   b8d40:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   b8d44:	42a5      	cmp	r5, r4
   b8d46:	d003      	beq.n	b8d50 <__mcmp+0x2c>
   b8d48:	d305      	bcc.n	b8d56 <__mcmp+0x32>
   b8d4a:	2201      	movs	r2, #1
   b8d4c:	4610      	mov	r0, r2
   b8d4e:	bd30      	pop	{r4, r5, pc}
   b8d50:	4283      	cmp	r3, r0
   b8d52:	d3f3      	bcc.n	b8d3c <__mcmp+0x18>
   b8d54:	e7fa      	b.n	b8d4c <__mcmp+0x28>
   b8d56:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b8d5a:	e7f7      	b.n	b8d4c <__mcmp+0x28>

000b8d5c <__mdiff>:
   b8d5c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8d60:	460c      	mov	r4, r1
   b8d62:	4606      	mov	r6, r0
   b8d64:	4611      	mov	r1, r2
   b8d66:	4620      	mov	r0, r4
   b8d68:	4690      	mov	r8, r2
   b8d6a:	f7ff ffdb 	bl	b8d24 <__mcmp>
   b8d6e:	1e05      	subs	r5, r0, #0
   b8d70:	d110      	bne.n	b8d94 <__mdiff+0x38>
   b8d72:	4629      	mov	r1, r5
   b8d74:	4630      	mov	r0, r6
   b8d76:	f7ff fd09 	bl	b878c <_Balloc>
   b8d7a:	b930      	cbnz	r0, b8d8a <__mdiff+0x2e>
   b8d7c:	4b3a      	ldr	r3, [pc, #232]	; (b8e68 <__mdiff+0x10c>)
   b8d7e:	4602      	mov	r2, r0
   b8d80:	f240 2132 	movw	r1, #562	; 0x232
   b8d84:	4839      	ldr	r0, [pc, #228]	; (b8e6c <__mdiff+0x110>)
   b8d86:	f7fb fd21 	bl	b47cc <__assert_func>
   b8d8a:	2301      	movs	r3, #1
   b8d8c:	e9c0 3504 	strd	r3, r5, [r0, #16]
   b8d90:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b8d94:	bfa4      	itt	ge
   b8d96:	4643      	movge	r3, r8
   b8d98:	46a0      	movge	r8, r4
   b8d9a:	4630      	mov	r0, r6
   b8d9c:	f8d8 1004 	ldr.w	r1, [r8, #4]
   b8da0:	bfa6      	itte	ge
   b8da2:	461c      	movge	r4, r3
   b8da4:	2500      	movge	r5, #0
   b8da6:	2501      	movlt	r5, #1
   b8da8:	f7ff fcf0 	bl	b878c <_Balloc>
   b8dac:	b920      	cbnz	r0, b8db8 <__mdiff+0x5c>
   b8dae:	4b2e      	ldr	r3, [pc, #184]	; (b8e68 <__mdiff+0x10c>)
   b8db0:	4602      	mov	r2, r0
   b8db2:	f44f 7110 	mov.w	r1, #576	; 0x240
   b8db6:	e7e5      	b.n	b8d84 <__mdiff+0x28>
   b8db8:	f8d8 7010 	ldr.w	r7, [r8, #16]
   b8dbc:	6926      	ldr	r6, [r4, #16]
   b8dbe:	60c5      	str	r5, [r0, #12]
   b8dc0:	f104 0914 	add.w	r9, r4, #20
   b8dc4:	f108 0514 	add.w	r5, r8, #20
   b8dc8:	f100 0e14 	add.w	lr, r0, #20
   b8dcc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
   b8dd0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   b8dd4:	f108 0210 	add.w	r2, r8, #16
   b8dd8:	46f2      	mov	sl, lr
   b8dda:	2100      	movs	r1, #0
   b8ddc:	f859 3b04 	ldr.w	r3, [r9], #4
   b8de0:	f852 bf04 	ldr.w	fp, [r2, #4]!
   b8de4:	fa1f f883 	uxth.w	r8, r3
   b8de8:	fa11 f18b 	uxtah	r1, r1, fp
   b8dec:	0c1b      	lsrs	r3, r3, #16
   b8dee:	eba1 0808 	sub.w	r8, r1, r8
   b8df2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   b8df6:	eb03 4328 	add.w	r3, r3, r8, asr #16
   b8dfa:	fa1f f888 	uxth.w	r8, r8
   b8dfe:	1419      	asrs	r1, r3, #16
   b8e00:	454e      	cmp	r6, r9
   b8e02:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   b8e06:	f84a 3b04 	str.w	r3, [sl], #4
   b8e0a:	d8e7      	bhi.n	b8ddc <__mdiff+0x80>
   b8e0c:	1b33      	subs	r3, r6, r4
   b8e0e:	3b15      	subs	r3, #21
   b8e10:	f023 0303 	bic.w	r3, r3, #3
   b8e14:	3304      	adds	r3, #4
   b8e16:	3415      	adds	r4, #21
   b8e18:	42a6      	cmp	r6, r4
   b8e1a:	bf38      	it	cc
   b8e1c:	2304      	movcc	r3, #4
   b8e1e:	441d      	add	r5, r3
   b8e20:	4473      	add	r3, lr
   b8e22:	469e      	mov	lr, r3
   b8e24:	462e      	mov	r6, r5
   b8e26:	4566      	cmp	r6, ip
   b8e28:	d30e      	bcc.n	b8e48 <__mdiff+0xec>
   b8e2a:	f10c 0203 	add.w	r2, ip, #3
   b8e2e:	1b52      	subs	r2, r2, r5
   b8e30:	f022 0203 	bic.w	r2, r2, #3
   b8e34:	3d03      	subs	r5, #3
   b8e36:	45ac      	cmp	ip, r5
   b8e38:	bf38      	it	cc
   b8e3a:	2200      	movcc	r2, #0
   b8e3c:	441a      	add	r2, r3
   b8e3e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   b8e42:	b17b      	cbz	r3, b8e64 <__mdiff+0x108>
   b8e44:	6107      	str	r7, [r0, #16]
   b8e46:	e7a3      	b.n	b8d90 <__mdiff+0x34>
   b8e48:	f856 8b04 	ldr.w	r8, [r6], #4
   b8e4c:	fa11 f288 	uxtah	r2, r1, r8
   b8e50:	1414      	asrs	r4, r2, #16
   b8e52:	eb04 4418 	add.w	r4, r4, r8, lsr #16
   b8e56:	b292      	uxth	r2, r2
   b8e58:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   b8e5c:	f84e 2b04 	str.w	r2, [lr], #4
   b8e60:	1421      	asrs	r1, r4, #16
   b8e62:	e7e0      	b.n	b8e26 <__mdiff+0xca>
   b8e64:	3f01      	subs	r7, #1
   b8e66:	e7ea      	b.n	b8e3e <__mdiff+0xe2>
   b8e68:	000b9669 	.word	0x000b9669
   b8e6c:	000b96f0 	.word	0x000b96f0

000b8e70 <__ulp>:
   b8e70:	b082      	sub	sp, #8
   b8e72:	ed8d 0b00 	vstr	d0, [sp]
   b8e76:	9b01      	ldr	r3, [sp, #4]
   b8e78:	4912      	ldr	r1, [pc, #72]	; (b8ec4 <__ulp+0x54>)
   b8e7a:	4019      	ands	r1, r3
   b8e7c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   b8e80:	2900      	cmp	r1, #0
   b8e82:	dd05      	ble.n	b8e90 <__ulp+0x20>
   b8e84:	2200      	movs	r2, #0
   b8e86:	460b      	mov	r3, r1
   b8e88:	ec43 2b10 	vmov	d0, r2, r3
   b8e8c:	b002      	add	sp, #8
   b8e8e:	4770      	bx	lr
   b8e90:	4249      	negs	r1, r1
   b8e92:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   b8e96:	ea4f 5021 	mov.w	r0, r1, asr #20
   b8e9a:	f04f 0200 	mov.w	r2, #0
   b8e9e:	f04f 0300 	mov.w	r3, #0
   b8ea2:	da04      	bge.n	b8eae <__ulp+0x3e>
   b8ea4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   b8ea8:	fa41 f300 	asr.w	r3, r1, r0
   b8eac:	e7ec      	b.n	b8e88 <__ulp+0x18>
   b8eae:	f1a0 0114 	sub.w	r1, r0, #20
   b8eb2:	291e      	cmp	r1, #30
   b8eb4:	bfda      	itte	le
   b8eb6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   b8eba:	fa20 f101 	lsrle.w	r1, r0, r1
   b8ebe:	2101      	movgt	r1, #1
   b8ec0:	460a      	mov	r2, r1
   b8ec2:	e7e1      	b.n	b8e88 <__ulp+0x18>
   b8ec4:	7ff00000 	.word	0x7ff00000

000b8ec8 <__b2d>:
   b8ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8eca:	6905      	ldr	r5, [r0, #16]
   b8ecc:	f100 0714 	add.w	r7, r0, #20
   b8ed0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   b8ed4:	1f2e      	subs	r6, r5, #4
   b8ed6:	f855 4c04 	ldr.w	r4, [r5, #-4]
   b8eda:	4620      	mov	r0, r4
   b8edc:	f7ff fd48 	bl	b8970 <__hi0bits>
   b8ee0:	f1c0 0320 	rsb	r3, r0, #32
   b8ee4:	280a      	cmp	r0, #10
   b8ee6:	f8df c07c 	ldr.w	ip, [pc, #124]	; b8f64 <__b2d+0x9c>
   b8eea:	600b      	str	r3, [r1, #0]
   b8eec:	dc14      	bgt.n	b8f18 <__b2d+0x50>
   b8eee:	f1c0 0e0b 	rsb	lr, r0, #11
   b8ef2:	fa24 f10e 	lsr.w	r1, r4, lr
   b8ef6:	42b7      	cmp	r7, r6
   b8ef8:	ea41 030c 	orr.w	r3, r1, ip
   b8efc:	bf34      	ite	cc
   b8efe:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   b8f02:	2100      	movcs	r1, #0
   b8f04:	3015      	adds	r0, #21
   b8f06:	fa04 f000 	lsl.w	r0, r4, r0
   b8f0a:	fa21 f10e 	lsr.w	r1, r1, lr
   b8f0e:	ea40 0201 	orr.w	r2, r0, r1
   b8f12:	ec43 2b10 	vmov	d0, r2, r3
   b8f16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b8f18:	42b7      	cmp	r7, r6
   b8f1a:	bf3a      	itte	cc
   b8f1c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   b8f20:	f1a5 0608 	subcc.w	r6, r5, #8
   b8f24:	2100      	movcs	r1, #0
   b8f26:	380b      	subs	r0, #11
   b8f28:	d017      	beq.n	b8f5a <__b2d+0x92>
   b8f2a:	f1c0 0c20 	rsb	ip, r0, #32
   b8f2e:	fa04 f500 	lsl.w	r5, r4, r0
   b8f32:	42be      	cmp	r6, r7
   b8f34:	fa21 f40c 	lsr.w	r4, r1, ip
   b8f38:	ea45 0504 	orr.w	r5, r5, r4
   b8f3c:	bf8c      	ite	hi
   b8f3e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   b8f42:	2400      	movls	r4, #0
   b8f44:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   b8f48:	fa01 f000 	lsl.w	r0, r1, r0
   b8f4c:	fa24 f40c 	lsr.w	r4, r4, ip
   b8f50:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   b8f54:	ea40 0204 	orr.w	r2, r0, r4
   b8f58:	e7db      	b.n	b8f12 <__b2d+0x4a>
   b8f5a:	ea44 030c 	orr.w	r3, r4, ip
   b8f5e:	460a      	mov	r2, r1
   b8f60:	e7d7      	b.n	b8f12 <__b2d+0x4a>
   b8f62:	bf00      	nop
   b8f64:	3ff00000 	.word	0x3ff00000

000b8f68 <__d2b>:
   b8f68:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b8f6c:	4689      	mov	r9, r1
   b8f6e:	2101      	movs	r1, #1
   b8f70:	ec57 6b10 	vmov	r6, r7, d0
   b8f74:	4690      	mov	r8, r2
   b8f76:	f7ff fc09 	bl	b878c <_Balloc>
   b8f7a:	4604      	mov	r4, r0
   b8f7c:	b930      	cbnz	r0, b8f8c <__d2b+0x24>
   b8f7e:	4602      	mov	r2, r0
   b8f80:	4b25      	ldr	r3, [pc, #148]	; (b9018 <__d2b+0xb0>)
   b8f82:	4826      	ldr	r0, [pc, #152]	; (b901c <__d2b+0xb4>)
   b8f84:	f240 310a 	movw	r1, #778	; 0x30a
   b8f88:	f7fb fc20 	bl	b47cc <__assert_func>
   b8f8c:	f3c7 550a 	ubfx	r5, r7, #20, #11
   b8f90:	f3c7 0313 	ubfx	r3, r7, #0, #20
   b8f94:	bb35      	cbnz	r5, b8fe4 <__d2b+0x7c>
   b8f96:	2e00      	cmp	r6, #0
   b8f98:	9301      	str	r3, [sp, #4]
   b8f9a:	d028      	beq.n	b8fee <__d2b+0x86>
   b8f9c:	4668      	mov	r0, sp
   b8f9e:	9600      	str	r6, [sp, #0]
   b8fa0:	f7ff fd06 	bl	b89b0 <__lo0bits>
   b8fa4:	9900      	ldr	r1, [sp, #0]
   b8fa6:	b300      	cbz	r0, b8fea <__d2b+0x82>
   b8fa8:	9a01      	ldr	r2, [sp, #4]
   b8faa:	f1c0 0320 	rsb	r3, r0, #32
   b8fae:	fa02 f303 	lsl.w	r3, r2, r3
   b8fb2:	430b      	orrs	r3, r1
   b8fb4:	40c2      	lsrs	r2, r0
   b8fb6:	6163      	str	r3, [r4, #20]
   b8fb8:	9201      	str	r2, [sp, #4]
   b8fba:	9b01      	ldr	r3, [sp, #4]
   b8fbc:	61a3      	str	r3, [r4, #24]
   b8fbe:	2b00      	cmp	r3, #0
   b8fc0:	bf14      	ite	ne
   b8fc2:	2202      	movne	r2, #2
   b8fc4:	2201      	moveq	r2, #1
   b8fc6:	6122      	str	r2, [r4, #16]
   b8fc8:	b1d5      	cbz	r5, b9000 <__d2b+0x98>
   b8fca:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   b8fce:	4405      	add	r5, r0
   b8fd0:	f8c9 5000 	str.w	r5, [r9]
   b8fd4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   b8fd8:	f8c8 0000 	str.w	r0, [r8]
   b8fdc:	4620      	mov	r0, r4
   b8fde:	b003      	add	sp, #12
   b8fe0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b8fe4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b8fe8:	e7d5      	b.n	b8f96 <__d2b+0x2e>
   b8fea:	6161      	str	r1, [r4, #20]
   b8fec:	e7e5      	b.n	b8fba <__d2b+0x52>
   b8fee:	a801      	add	r0, sp, #4
   b8ff0:	f7ff fcde 	bl	b89b0 <__lo0bits>
   b8ff4:	9b01      	ldr	r3, [sp, #4]
   b8ff6:	6163      	str	r3, [r4, #20]
   b8ff8:	2201      	movs	r2, #1
   b8ffa:	6122      	str	r2, [r4, #16]
   b8ffc:	3020      	adds	r0, #32
   b8ffe:	e7e3      	b.n	b8fc8 <__d2b+0x60>
   b9000:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   b9004:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   b9008:	f8c9 0000 	str.w	r0, [r9]
   b900c:	6918      	ldr	r0, [r3, #16]
   b900e:	f7ff fcaf 	bl	b8970 <__hi0bits>
   b9012:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   b9016:	e7df      	b.n	b8fd8 <__d2b+0x70>
   b9018:	000b9669 	.word	0x000b9669
   b901c:	000b96f0 	.word	0x000b96f0

000b9020 <__ratio>:
   b9020:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9024:	4688      	mov	r8, r1
   b9026:	4669      	mov	r1, sp
   b9028:	4681      	mov	r9, r0
   b902a:	f7ff ff4d 	bl	b8ec8 <__b2d>
   b902e:	a901      	add	r1, sp, #4
   b9030:	4640      	mov	r0, r8
   b9032:	ec55 4b10 	vmov	r4, r5, d0
   b9036:	f7ff ff47 	bl	b8ec8 <__b2d>
   b903a:	f8d9 3010 	ldr.w	r3, [r9, #16]
   b903e:	f8d8 2010 	ldr.w	r2, [r8, #16]
   b9042:	eba3 0c02 	sub.w	ip, r3, r2
   b9046:	e9dd 3200 	ldrd	r3, r2, [sp]
   b904a:	1a9b      	subs	r3, r3, r2
   b904c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   b9050:	ec51 0b10 	vmov	r0, r1, d0
   b9054:	2b00      	cmp	r3, #0
   b9056:	bfd6      	itet	le
   b9058:	460a      	movle	r2, r1
   b905a:	462a      	movgt	r2, r5
   b905c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   b9060:	468b      	mov	fp, r1
   b9062:	462f      	mov	r7, r5
   b9064:	bfd4      	ite	le
   b9066:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   b906a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   b906e:	4620      	mov	r0, r4
   b9070:	ee10 2a10 	vmov	r2, s0
   b9074:	465b      	mov	r3, fp
   b9076:	4639      	mov	r1, r7
   b9078:	f7fd fe2e 	bl	b6cd8 <__aeabi_ddiv>
   b907c:	ec41 0b10 	vmov	d0, r0, r1
   b9080:	b003      	add	sp, #12
   b9082:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b9086 <__copybits>:
   b9086:	3901      	subs	r1, #1
   b9088:	b570      	push	{r4, r5, r6, lr}
   b908a:	1149      	asrs	r1, r1, #5
   b908c:	6914      	ldr	r4, [r2, #16]
   b908e:	3101      	adds	r1, #1
   b9090:	f102 0314 	add.w	r3, r2, #20
   b9094:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   b9098:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   b909c:	1f05      	subs	r5, r0, #4
   b909e:	42a3      	cmp	r3, r4
   b90a0:	d30c      	bcc.n	b90bc <__copybits+0x36>
   b90a2:	1aa3      	subs	r3, r4, r2
   b90a4:	3b11      	subs	r3, #17
   b90a6:	f023 0303 	bic.w	r3, r3, #3
   b90aa:	3211      	adds	r2, #17
   b90ac:	42a2      	cmp	r2, r4
   b90ae:	bf88      	it	hi
   b90b0:	2300      	movhi	r3, #0
   b90b2:	4418      	add	r0, r3
   b90b4:	2300      	movs	r3, #0
   b90b6:	4288      	cmp	r0, r1
   b90b8:	d305      	bcc.n	b90c6 <__copybits+0x40>
   b90ba:	bd70      	pop	{r4, r5, r6, pc}
   b90bc:	f853 6b04 	ldr.w	r6, [r3], #4
   b90c0:	f845 6f04 	str.w	r6, [r5, #4]!
   b90c4:	e7eb      	b.n	b909e <__copybits+0x18>
   b90c6:	f840 3b04 	str.w	r3, [r0], #4
   b90ca:	e7f4      	b.n	b90b6 <__copybits+0x30>

000b90cc <__any_on>:
   b90cc:	f100 0214 	add.w	r2, r0, #20
   b90d0:	6900      	ldr	r0, [r0, #16]
   b90d2:	114b      	asrs	r3, r1, #5
   b90d4:	4298      	cmp	r0, r3
   b90d6:	b510      	push	{r4, lr}
   b90d8:	db11      	blt.n	b90fe <__any_on+0x32>
   b90da:	dd0a      	ble.n	b90f2 <__any_on+0x26>
   b90dc:	f011 011f 	ands.w	r1, r1, #31
   b90e0:	d007      	beq.n	b90f2 <__any_on+0x26>
   b90e2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   b90e6:	fa24 f001 	lsr.w	r0, r4, r1
   b90ea:	fa00 f101 	lsl.w	r1, r0, r1
   b90ee:	428c      	cmp	r4, r1
   b90f0:	d10b      	bne.n	b910a <__any_on+0x3e>
   b90f2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   b90f6:	4293      	cmp	r3, r2
   b90f8:	d803      	bhi.n	b9102 <__any_on+0x36>
   b90fa:	2000      	movs	r0, #0
   b90fc:	bd10      	pop	{r4, pc}
   b90fe:	4603      	mov	r3, r0
   b9100:	e7f7      	b.n	b90f2 <__any_on+0x26>
   b9102:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   b9106:	2900      	cmp	r1, #0
   b9108:	d0f5      	beq.n	b90f6 <__any_on+0x2a>
   b910a:	2001      	movs	r0, #1
   b910c:	e7f6      	b.n	b90fc <__any_on+0x30>

000b910e <_calloc_r>:
   b910e:	b513      	push	{r0, r1, r4, lr}
   b9110:	434a      	muls	r2, r1
   b9112:	4611      	mov	r1, r2
   b9114:	9201      	str	r2, [sp, #4]
   b9116:	f7fb fb49 	bl	b47ac <_malloc_r>
   b911a:	4604      	mov	r4, r0
   b911c:	b118      	cbz	r0, b9126 <_calloc_r+0x18>
   b911e:	9a01      	ldr	r2, [sp, #4]
   b9120:	2100      	movs	r1, #0
   b9122:	f7fd ffff 	bl	b7124 <memset>
   b9126:	4620      	mov	r0, r4
   b9128:	b002      	add	sp, #8
   b912a:	bd10      	pop	{r4, pc}
   b912c:	0000      	movs	r0, r0
	...

000b9130 <nan>:
   b9130:	ed9f 0b01 	vldr	d0, [pc, #4]	; b9138 <nan+0x8>
   b9134:	4770      	bx	lr
   b9136:	bf00      	nop
   b9138:	00000000 	.word	0x00000000
   b913c:	7ff80000 	.word	0x7ff80000

000b9140 <__ascii_wctomb>:
   b9140:	b149      	cbz	r1, b9156 <__ascii_wctomb+0x16>
   b9142:	2aff      	cmp	r2, #255	; 0xff
   b9144:	bf85      	ittet	hi
   b9146:	238a      	movhi	r3, #138	; 0x8a
   b9148:	6003      	strhi	r3, [r0, #0]
   b914a:	700a      	strbls	r2, [r1, #0]
   b914c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
   b9150:	bf98      	it	ls
   b9152:	2001      	movls	r0, #1
   b9154:	4770      	bx	lr
   b9156:	4608      	mov	r0, r1
   b9158:	4770      	bx	lr
	...

000b915c <__aeabi_d2lz>:
   b915c:	b538      	push	{r3, r4, r5, lr}
   b915e:	2200      	movs	r2, #0
   b9160:	2300      	movs	r3, #0
   b9162:	4604      	mov	r4, r0
   b9164:	460d      	mov	r5, r1
   b9166:	f7fd feff 	bl	b6f68 <__aeabi_dcmplt>
   b916a:	b928      	cbnz	r0, b9178 <__aeabi_d2lz+0x1c>
   b916c:	4620      	mov	r0, r4
   b916e:	4629      	mov	r1, r5
   b9170:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b9174:	f7fd bf7e 	b.w	b7074 <__aeabi_d2ulz>
   b9178:	4620      	mov	r0, r4
   b917a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   b917e:	f7fd ff79 	bl	b7074 <__aeabi_d2ulz>
   b9182:	4240      	negs	r0, r0
   b9184:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b9188:	bd38      	pop	{r3, r4, r5, pc}
   b918a:	bf00      	nop

000b918c <dynalib_user>:
   b918c:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   b919c:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   b91ac:	7620 7269 7574 6c61 4100 6363 2500 732a      virtual.Acc.%*s
   b91bc:	2520 7336 2520 5e5b 5d2c 2c20 2520 732a      %6s %[^,] , %*s
   b91cc:	2520 7336 2520 732a 2520 732a 2520 7336      %6s %*s %*s %6s
   b91dc:	2520 732a 2520 732a 2520 7336 4500 6576      %*s %*s %6s.Eve
   b91ec:	746e 4120 6363 6d75 6c75 7461 6f69 3a6e     nt Accumulation:
   b91fc:	0020 6f54 6174 206c 6341 7563 756d 616c      .Total Accumula
   b920c:	6974 6e6f 203a 4900 4850 203a 2000 5049     tion: .IPH: . IP
   b921c:	0a48 0000                                   H...

000b9220 <_ZTVN5spark10LogHandlerE>:
	...
   b9230:	40a5 000b 40cd 000b                         .@...@..

000b9238 <_ZTVN5spark16SerialLogHandlerE>:
	...
   b9240:	40d9 000b 410d 000b 594d 000b 40cf 000b     .@...A..MY...@..

000b9250 <_ZTVN5spark13EthernetClassE>:
	...
   b9258:	48bf 000b 48b5 000b 48ab 000b 48a1 000b     .H...H...H...H..
   b9268:	4895 000b 4889 000b 5ca5 000b 5cad 000b     .H...H...\...\..
   b9278:	487d 000b 4875 000b 486b 000b 4861 000b     }H..uH..kH..aH..
   b9288:	5cdd 000b                                   .\..

000b928c <_ZTV9IPAddress>:
	...
   b9294:	48ed 000b 48dd 000b 48df 000b 6425 2500     .H...H...H..%d.%
   b92a4:	0075 2575 3430 0078 6162 6475 5300 7265     u.u%04x.baud.Ser
   b92b4:	6169 006c 6553 6972 6c61 0031 534a 4e4f     ial.Serial1.JSON
   b92c4:	7453 6572 6d61 6f4c 4867 6e61 6c64 7265     StreamLogHandler
   b92d4:	6100 7070 2500 3130 7530 0020 205d 2c00     .app.%010u .] .,
   b92e4:	0020 2928 203a 2000 005b 6f63 6564 3d20      .(): . [.code =
   b92f4:	0020 6925 6400 7465 6961 736c 3d20 0020      .%i.details = .
   b9304:	0a0d 6d00 6c00 006e 6e66 7400 6300 646f     ...m.ln.fn.t.cod
   b9314:	0065 6564 6174 6c69 0000 0000               e.detail....

000b9320 <_ZTVN5spark16JSONStreamWriterE>:
	...
   b9328:	4d99 000b 4dbf 000b 4d7d 000b 49fb 000b     .M...M..}M...I..

000b9338 <_ZTVN5spark16StreamLogHandlerE>:
	...
   b9340:	51f5 000b 520d 000b 594d 000b 40cf 000b     .Q...R..MY...@..

000b9350 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   b9358:	5221 000b 5235 000b 5af1 000b 4d85 000b     !R..5R...Z...M..

000b9368 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   b9370:	4d97 000b 4dcd 000b 58b1 000b 4d87 000b     .M...M...X...M..

000b9380 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   b9388:	4d95 000b 4ddb 000b 515d 000b 4dfd 000b     .M...M..]Q...M..

000b9398 <_ZTVN5spark12NetworkClassE>:
	...
   b93a0:	5c65 000b 5c6f 000b 5c79 000b 5c83 000b     e\..o\..y\...\..
   b93b0:	5c8d 000b 5c99 000b 5ca5 000b 5cad 000b     .\...\...\...\..
   b93c0:	5cb5 000b 5cc1 000b 5cc9 000b 5cd3 000b     .\...\...\...\..
   b93d0:	5cdd 000b 616e 006e 6e69 0066 766f 0066     .\..nan.inf.ovf.
   b93e0:	002e 5925 252d 2d6d 6425 2554 3a48 4d25     ..%Y-%m-%dT%H:%M
   b93f0:	253a 2553 007a 7361 7463 6d69 0065 0000     :%S%z.asctime...

000b9400 <_ZTV11USARTSerial>:
	...
   b9408:	6301 000b 636d 000b 6345 000b 5dc9 000b     .c..mc..Ec...]..
   b9418:	6315 000b 6331 000b 6323 000b 633f 000b     .c..1c..#c..?c..
   b9428:	6303 000b 6307 000b                         .c...c..

000b9430 <_ZTV9USBSerial>:
	...
   b9438:	63c5 000b 642d 000b 6403 000b 5dc9 000b     .c..-d...d...]..
   b9448:	63f5 000b 63c7 000b 63d7 000b 6427 000b     .c...c...c..'d..
   b9458:	63e7 000b 63bf 000b                         .c...c..

000b9460 <_ZTVN5spark9WiFiClassE>:
	...
   b9468:	652f 000b 6525 000b 651b 000b 64d1 000b     /e..%e...e...d..
   b9478:	650f 000b 6503 000b 5ca5 000b 5cad 000b     .e...e...\...\..
   b9488:	64f7 000b 64ef 000b 64e5 000b 64db 000b     .d...d...d...d..
   b9498:	5cdd 000b                                   .\..

000b949c <_ZSt7nothrow>:
   b949c:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
   b94ac:	6363 6565 6564 0064 742f 706d 6a2f 6e65     cceeded./tmp/jen
   b94bc:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   b94cc:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   b94dc:	315f 3036 3136 3038 3336 2f39 7273 2f63     _1606180639/src/
   b94ec:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   b94fc:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
   b950c:	6900 696e 7974 0000                         .inity..

000b9514 <fpi.1>:
   b9514:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   b9524:	0000 0000                                   ....

000b9528 <fpinan.0>:
   b9528:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
	...

000b9540 <tinytens>:
   b9540:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   b9550:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   b9560:	6f43 64ac 0628 1168                         Co.d(.h.

000b9568 <_ctype_>:
   b9568:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   b9578:	2020 2020 2020 2020 2020 2020 2020 2020                     
   b9588:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   b9598:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   b95a8:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   b95b8:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   b95c8:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   b95d8:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   b95e8:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
   b9668:	4200 6c61 6f6c 2063 7573 6363 6565 6564     .Balloc succeede
   b9678:	0064 742f 706d 6a2f 6e65 696b 736e 472d     d./tmp/jenkins-G
   b9688:	4343 312d 2d30 6970 6570 696c 656e 342d     CC-10-pipeline-4
   b9698:	5f38 3032 3032 3131 3432 315f 3036 3136     8_20201124_16061
   b96a8:	3038 3336 2f39 7273 2f63 656e 6c77 6269     80639/src/newlib
   b96b8:	6e2f 7765 696c 2f62 696c 6362 732f 6474     /newlib/libc/std
   b96c8:	696c 2f62 6467 6f74 2d61 6567 6874 7865     lib/gdtoa-gethex
   b96d8:	632e 0000                                   .c..

000b96dc <_C_numeric_locale>:
   b96dc:	93e0 000b 9306 000b e508 2003 0043 4f50     ........... C.PO
   b96ec:	4953 0058 742f 706d 6a2f 6e65 696b 736e     SIX./tmp/jenkins
   b96fc:	472d 4343 312d 2d30 6970 6570 696c 656e     -GCC-10-pipeline
   b970c:	342d 5f38 3032 3032 3131 3432 315f 3036     -48_20201124_160
   b971c:	3136 3038 3336 2f39 7273 2f63 656e 6c77     6180639/src/newl
   b972c:	6269 6e2f 7765 696c 2f62 696c 6362 732f     ib/newlib/libc/s
   b973c:	6474 696c 2f62 706d 6572 2e63 0063 0000     tdlib/mprec.c...
   b974c:	0000 0000                                   ....

000b9750 <__mprec_bigtens>:
   b9750:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   b9760:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   b9770:	bf3c 7f73 4fdd 7515                         <.s..O.u

000b9778 <__mprec_tens>:
   b9778:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   b9788:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   b9798:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   b97a8:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   b97b8:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   b97c8:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   b97d8:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   b97e8:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   b97f8:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   b9808:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   b9818:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   b9828:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   b9838:	9db4 79d9 7843 44ea                         ...yCx.D

000b9840 <p05.0>:
   b9840:	0005 0000 0019 0000 007d 0000               ........}...

000b984c <link_const_variable_data_end>:
   b984c:	000b4381 	.word	0x000b4381
   b9850:	000b4851 	.word	0x000b4851
   b9854:	000b48c9 	.word	0x000b48c9
   b9858:	000b593d 	.word	0x000b593d
   b985c:	000b5db5 	.word	0x000b5db5
   b9860:	000b6089 	.word	0x000b6089
   b9864:	000b62c9 	.word	0x000b62c9
   b9868:	000b62ed 	.word	0x000b62ed
   b986c:	000b6539 	.word	0x000b6539
